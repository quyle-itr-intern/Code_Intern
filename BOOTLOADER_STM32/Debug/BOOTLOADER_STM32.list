
BOOTLOADER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000078  08004360  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004360  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adb1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed0  00000000  00000000  0002ae59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bbc  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c967  00000000  00000000  0004f954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c96e4  00000000  00000000  0005c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012599f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002568  00000000  00000000  001259f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800422c 	.word	0x0800422c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800422c 	.word	0x0800422c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <LVQ_GetSectorFromAddress>:

#define KEY1 		(uint32_t) 0x45670123
#define KEY2        (uint32_t) 0xCDEF89AB

uint8_t LVQ_GetSectorFromAddress(volatile uint32_t u32StartAddr)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint8_t Sector = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	if( (u32StartAddr >= 0x08000000) && (u32StartAddr < 0x08003FFF) )
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005c6:	d306      	bcc.n	80005d6 <LVQ_GetSectorFromAddress+0x22>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <LVQ_GetSectorFromAddress+0xc8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d802      	bhi.n	80005d6 <LVQ_GetSectorFromAddress+0x22>
			Sector = LVQ_FLASH_SECTOR_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e04b      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08004000) && (u32StartAddr < 0x08007FFF) )
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <LVQ_GetSectorFromAddress+0xcc>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d306      	bcc.n	80005ec <LVQ_GetSectorFromAddress+0x38>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a28      	ldr	r2, [pc, #160]	; (8000684 <LVQ_GetSectorFromAddress+0xd0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d802      	bhi.n	80005ec <LVQ_GetSectorFromAddress+0x38>
			Sector = LVQ_FLASH_SECTOR_1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e040      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08008000) && (u32StartAddr < 0x0800BFFF) )
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a26      	ldr	r2, [pc, #152]	; (8000688 <LVQ_GetSectorFromAddress+0xd4>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d306      	bcc.n	8000602 <LVQ_GetSectorFromAddress+0x4e>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a25      	ldr	r2, [pc, #148]	; (800068c <LVQ_GetSectorFromAddress+0xd8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d802      	bhi.n	8000602 <LVQ_GetSectorFromAddress+0x4e>
			Sector = LVQ_FLASH_SECTOR_2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e035      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x0800C000) && (u32StartAddr < 0x0800FFFF) )
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <LVQ_GetSectorFromAddress+0xdc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d306      	bcc.n	8000618 <LVQ_GetSectorFromAddress+0x64>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <LVQ_GetSectorFromAddress+0xe0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d202      	bcs.n	8000618 <LVQ_GetSectorFromAddress+0x64>
			Sector = LVQ_FLASH_SECTOR_3;
 8000612:	2303      	movs	r3, #3
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	e02a      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08010000) && (u32StartAddr < 0x0801FFFF) )
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <LVQ_GetSectorFromAddress+0xe0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d906      	bls.n	800062e <LVQ_GetSectorFromAddress+0x7a>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <LVQ_GetSectorFromAddress+0xe4>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d202      	bcs.n	800062e <LVQ_GetSectorFromAddress+0x7a>
			Sector = LVQ_FLASH_SECTOR_4;
 8000628:	2304      	movs	r3, #4
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e01f      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08020000) && (u32StartAddr < 0x0803FFFF) )
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a19      	ldr	r2, [pc, #100]	; (8000698 <LVQ_GetSectorFromAddress+0xe4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d906      	bls.n	8000644 <LVQ_GetSectorFromAddress+0x90>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a18      	ldr	r2, [pc, #96]	; (800069c <LVQ_GetSectorFromAddress+0xe8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d202      	bcs.n	8000644 <LVQ_GetSectorFromAddress+0x90>
			Sector = LVQ_FLASH_SECTOR_5;
 800063e:	2305      	movs	r3, #5
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e014      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08040000) && (u32StartAddr < 0x0805FFFF) )
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <LVQ_GetSectorFromAddress+0xe8>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d906      	bls.n	800065a <LVQ_GetSectorFromAddress+0xa6>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <LVQ_GetSectorFromAddress+0xec>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d202      	bcs.n	800065a <LVQ_GetSectorFromAddress+0xa6>
			Sector = LVQ_FLASH_SECTOR_6;
 8000654:	2306      	movs	r3, #6
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e009      	b.n	800066e <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08060000) && (u32StartAddr < 0x0807FFFF) )
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <LVQ_GetSectorFromAddress+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d905      	bls.n	800066e <LVQ_GetSectorFromAddress+0xba>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <LVQ_GetSectorFromAddress+0xf0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d201      	bcs.n	800066e <LVQ_GetSectorFromAddress+0xba>
			Sector = LVQ_FLASH_SECTOR_7;
 800066a:	2307      	movs	r3, #7
 800066c:	73fb      	strb	r3, [r7, #15]
	return Sector;
 800066e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	08003ffe 	.word	0x08003ffe
 8000680:	08004000 	.word	0x08004000
 8000684:	08007ffe 	.word	0x08007ffe
 8000688:	08008000 	.word	0x08008000
 800068c:	0800bffe 	.word	0x0800bffe
 8000690:	0800c000 	.word	0x0800c000
 8000694:	0800ffff 	.word	0x0800ffff
 8000698:	0801ffff 	.word	0x0801ffff
 800069c:	0803ffff 	.word	0x0803ffff
 80006a0:	0805ffff 	.word	0x0805ffff
 80006a4:	0807ffff 	.word	0x0807ffff

080006a8 <LVQ_GetAddressFromSector>:

uint32_t LVQ_GetAddressFromSector(uint8_t u8Sector)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint32_t Address = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
	if( u8Sector == 0 )
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <LVQ_GetAddressFromSector+0x1c>
			Address = 0x08000000;
 80006bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e028      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 1 )
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d102      	bne.n	80006d0 <LVQ_GetAddressFromSector+0x28>
			Address = 0x08004000;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <LVQ_GetAddressFromSector+0x7c>)
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e022      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 2 )
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d102      	bne.n	80006dc <LVQ_GetAddressFromSector+0x34>
			Address = 0x08008000;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <LVQ_GetAddressFromSector+0x80>)
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e01c      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 3 )
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d102      	bne.n	80006e8 <LVQ_GetAddressFromSector+0x40>
			Address = 0x0800C000;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <LVQ_GetAddressFromSector+0x84>)
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e016      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 4 )
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d102      	bne.n	80006f4 <LVQ_GetAddressFromSector+0x4c>
			Address = 0x08010000;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <LVQ_GetAddressFromSector+0x88>)
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e010      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 5 )
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d102      	bne.n	8000700 <LVQ_GetAddressFromSector+0x58>
			Address = 0x08020000;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <LVQ_GetAddressFromSector+0x8c>)
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	e00a      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 6 )
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b06      	cmp	r3, #6
 8000704:	d102      	bne.n	800070c <LVQ_GetAddressFromSector+0x64>
			Address = 0x08040000;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <LVQ_GetAddressFromSector+0x90>)
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e004      	b.n	8000716 <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 7 )
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d101      	bne.n	8000716 <LVQ_GetAddressFromSector+0x6e>
			Address = 0x08060000;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <LVQ_GetAddressFromSector+0x94>)
 8000714:	60fb      	str	r3, [r7, #12]
	return Address;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	08004000 	.word	0x08004000
 8000728:	08008000 	.word	0x08008000
 800072c:	0800c000 	.word	0x0800c000
 8000730:	08010000 	.word	0x08010000
 8000734:	08020000 	.word	0x08020000
 8000738:	08040000 	.word	0x08040000
 800073c:	08060000 	.word	0x08060000

08000740 <LVQ_Flash_Unlock>:

void LVQ_Flash_Unlock(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
		FLASH->KEYR = KEY1;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LVQ_Flash_Unlock+0x1c>)
 8000746:	4a06      	ldr	r2, [pc, #24]	; (8000760 <LVQ_Flash_Unlock+0x20>)
 8000748:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = KEY2;
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <LVQ_Flash_Unlock+0x1c>)
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <LVQ_Flash_Unlock+0x24>)
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023c00 	.word	0x40023c00
 8000760:	45670123 	.word	0x45670123
 8000764:	cdef89ab 	.word	0xcdef89ab

08000768 <LVQ_Flash_Erase>:

LVQ_Flash_Status_t LVQ_Flash_Erase(volatile uint32_t u32StartAddr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 8000770:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000774:	60fb      	str	r3, [r7, #12]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 8000776:	e007      	b.n	8000788 <LVQ_Flash_Erase+0x20>
	{
		if (--Timeout == 0x00)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3b01      	subs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <LVQ_Flash_Erase+0x20>
		{
			return LVQ_Flash_Status_Errors;
 8000784:	2300      	movs	r3, #0
 8000786:	e065      	b.n	8000854 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <LVQ_Flash_Erase+0xf4>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000794:	d102      	bne.n	800079c <LVQ_Flash_Erase+0x34>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1ed      	bne.n	8000778 <LVQ_Flash_Erase+0x10>
		}
	}
	/* Wating for Bsy bit */
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) ==  FLASH_CR_LOCK)
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <LVQ_Flash_Erase+0xf4>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007a8:	d101      	bne.n	80007ae <LVQ_Flash_Erase+0x46>
	{
			LVQ_Flash_Unlock();
 80007aa:	f7ff ffc9 	bl	8000740 <LVQ_Flash_Unlock>
	}

	FLASH->CR |= FLASH_PSIZE_WORD;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b8:	6113      	str	r3, [r2, #16]
	/* Set the SER bit in the FLASH_CR register */
	FLASH->CR |= FLASH_CR_SER;
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	4a27      	ldr	r2, [pc, #156]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6113      	str	r3, [r2, #16]
	/* Program the FLASH_CR register to select a sector to erase */
	FLASH->CR |= LVQ_GetSectorFromAddress(u32StartAddr) << 3;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fef3 	bl	80005b4 <LVQ_GetSectorFromAddress>
 80007ce:	4603      	mov	r3, r0
 80007d0:	00da      	lsls	r2, r3, #3
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a20      	ldr	r2, [pc, #128]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	6113      	str	r3, [r2, #16]
	/* Set the STRT bit in the FLASH CR register */
	FLASH->CR |= FLASH_CR_STRT;
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <LVQ_Flash_Erase+0xf4>)
 80007e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e8:	6113      	str	r3, [r2, #16]
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 80007ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007ee:	60fb      	str	r3, [r7, #12]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 80007f0:	e007      	b.n	8000802 <LVQ_Flash_Erase+0x9a>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <LVQ_Flash_Erase+0x9a>
		{
			return LVQ_Flash_Status_Errors;
 80007fe:	2300      	movs	r3, #0
 8000800:	e028      	b.n	8000854 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080e:	d102      	bne.n	8000816 <LVQ_Flash_Erase+0xae>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ed      	bne.n	80007f2 <LVQ_Flash_Erase+0x8a>
		}
	}

	/* Check FLASH End of Operation flag  */
	if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d005      	beq.n	800082e <LVQ_Flash_Erase+0xc6>
	{
			/* Clear FLASH End of Operation pending bit */
			FLASH->SR &= ~FLASH_FLAG_EOP;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	60d3      	str	r3, [r2, #12]
	}
	/* Clear SER bit in the FLASH_CR register */
	FLASH->CR &= FLASH_CR_SER;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	6113      	str	r3, [r2, #16]
	/* Clear STRT bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_STRT;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <LVQ_Flash_Erase+0xf4>)
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000844:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <LVQ_Flash_Erase+0xf4>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <LVQ_Flash_Erase+0xf4>)
 800084c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000850:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023c00 	.word	0x40023c00

08000860 <LVQ_Flash_Write>:

LVQ_Flash_Status_t LVQ_Flash_Write(volatile uint32_t u32StartAddr, uint32_t* u32BufferWrite, uint32_t u32Length)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	uint32_t u32Count = 0u;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 8000870:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000874:	613b      	str	r3, [r7, #16]
	/* Check input parameters */
	if( (u32BufferWrite == 0u) || (u32Length == 0u) )
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <LVQ_Flash_Write+0x22>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d109      	bne.n	8000896 <LVQ_Flash_Write+0x36>
	{
		 return LVQ_Flash_Status_Errors;
 8000882:	2300      	movs	r3, #0
 8000884:	e05d      	b.n	8000942 <LVQ_Flash_Write+0xe2>

	/* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3b01      	subs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <LVQ_Flash_Write+0x36>
		{
			return LVQ_Flash_Status_Errors;
 8000892:	2300      	movs	r3, #0
 8000894:	e055      	b.n	8000942 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <LVQ_Flash_Write+0xec>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a2:	d102      	bne.n	80008aa <LVQ_Flash_Write+0x4a>
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ed      	bne.n	8000886 <LVQ_Flash_Write+0x26>
		}
	}
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <LVQ_Flash_Write+0xec>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008b6:	d101      	bne.n	80008bc <LVQ_Flash_Write+0x5c>
	{
		LVQ_Flash_Unlock();
 80008b8:	f7ff ff42 	bl	8000740 <LVQ_Flash_Unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <LVQ_Flash_Write+0xec>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <LVQ_Flash_Write+0xec>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6113      	str	r3, [r2, #16]
	/* Write FLASH CR_PG to 1 */
	FLASH->CR |= FLASH_CR_PG;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <LVQ_Flash_Write+0xec>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	4a1f      	ldr	r2, [pc, #124]	; (800094c <LVQ_Flash_Write+0xec>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6113      	str	r3, [r2, #16]
	/* Perform word write at the desired address */
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e00c      	b.n	80008f4 <LVQ_Flash_Write+0x94>
	{
		*(__IO uint32_t*) (u32StartAddr + u32Count*4u) = *(uint32_t*) (u32BufferWrite + u32Count);
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	0091      	lsls	r1, r2, #2
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	440a      	add	r2, r1
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6013      	str	r3, [r2, #0]
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3ee      	bcc.n	80008da <LVQ_Flash_Write+0x7a>
	}
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 80008fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000900:	613b      	str	r3, [r7, #16]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000902:	e007      	b.n	8000914 <LVQ_Flash_Write+0xb4>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	3b01      	subs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <LVQ_Flash_Write+0xb4>
		{
			return LVQ_Flash_Status_Errors;
 8000910:	2300      	movs	r3, #0
 8000912:	e016      	b.n	8000942 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LVQ_Flash_Write+0xec>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800091c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000920:	d102      	bne.n	8000928 <LVQ_Flash_Write+0xc8>
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1ed      	bne.n	8000904 <LVQ_Flash_Write+0xa4>
		}
	}
	/* Clear PG bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_PG;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <LVQ_Flash_Write+0xec>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <LVQ_Flash_Write+0xec>)
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LVQ_Flash_Write+0xec>)
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <LVQ_Flash_Write+0xec>)
 800093a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093e:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023c00 	.word	0x40023c00

08000950 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;

LVQ_USART_Callback_t LVQ_USART_Callback = NULL;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_UART_RxCpltCallback+0x30>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d10a      	bne.n	8000978 <HAL_UART_RxCpltCallback+0x28>
	{
		LVQ_USART_Callback(rx_data);
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_UART_RxCpltCallback+0x34>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_UART_RxCpltCallback+0x38>)
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	4610      	mov	r0, r2
 800096c:	4798      	blx	r3
		HAL_UART_Receive_IT(USART_UD,&rx_data,1);
 800096e:	2201      	movs	r2, #1
 8000970:	4905      	ldr	r1, [pc, #20]	; (8000988 <HAL_UART_RxCpltCallback+0x38>)
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_UART_RxCpltCallback+0x3c>)
 8000974:	f002 f821 	bl	80029ba <HAL_UART_Receive_IT>
	}
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40011000 	.word	0x40011000
 8000984:	20000098 	.word	0x20000098
 8000988:	20000095 	.word	0x20000095
 800098c:	200001ec 	.word	0x200001ec

08000990 <LVQ_USART_Set_Callback>:

void LVQ_USART_Set_Callback(void* cb)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
		LVQ_USART_Callback = cb;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <LVQ_USART_Set_Callback+0x1c>)
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000098 	.word	0x20000098

080009b0 <LVQ_OTA_Init>:
		uint8_t Index = 0;
		uint32_t MaxSizeFlash = 507904;
#endif

void LVQ_OTA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(USART_UD,&rx_data,1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	4903      	ldr	r1, [pc, #12]	; (80009c4 <LVQ_OTA_Init+0x14>)
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <LVQ_OTA_Init+0x18>)
 80009ba:	f001 fffe 	bl	80029ba <HAL_UART_Receive_IT>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000095 	.word	0x20000095
 80009c8:	200001ec 	.word	0x200001ec

080009cc <LVQ_OTA_SetCallback_CheckUpdateFirmware>:

void LVQ_OTA_SetCallback_CheckUpdateFirmware(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	LVQ_USART_Set_Callback(LVQ_OTA_CheckUpdate);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <LVQ_OTA_SetCallback_CheckUpdateFirmware+0x10>)
 80009d2:	f7ff ffdd 	bl	8000990 <LVQ_USART_Set_Callback>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	08000b09 	.word	0x08000b09

080009e0 <LVQ_OTA_SetCallback_UpdateFirmware>:

void LVQ_OTA_SetCallback_UpdateFirmware(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	LVQ_USART_Set_Callback(LVQ_OTA_CharReceived);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <LVQ_OTA_SetCallback_UpdateFirmware+0x10>)
 80009e6:	f7ff ffd3 	bl	8000990 <LVQ_USART_Set_Callback>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08000aa1 	.word	0x08000aa1

080009f4 <LVQ_OTA_Run>:

volatile uint8_t u8LineReceivedFlag = FALSE;      /* Flag to check if the NodeMCU finished sending a complete line */
volatile uint8_t u8FinishReceiveFlag = FALSE;     /* Flag to check if NodeMCU finished sending the code to run application code */

void LVQ_OTA_Run(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    while (u8FinishReceiveFlag == FALSE)
 80009f8:	e034      	b.n	8000a64 <LVQ_OTA_Run+0x70>
    {

        if (u8LineReceivedFlag == TRUE)
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <LVQ_OTA_Run+0x8c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d12f      	bne.n	8000a64 <LVQ_OTA_Run+0x70>
        {
            switch (u8RecieveBuffer[u8RecieveCounter])
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <LVQ_OTA_Run+0x90>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <LVQ_OTA_Run+0x94>)
 8000a0e:	5c9b      	ldrb	r3, [r3, r2]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b58      	cmp	r3, #88	; 0x58
 8000a14:	d002      	beq.n	8000a1c <LVQ_OTA_Run+0x28>
 8000a16:	2b59      	cmp	r3, #89	; 0x59
 8000a18:	d00a      	beq.n	8000a30 <LVQ_OTA_Run+0x3c>
							HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
						else
							HAL_UART_Transmit(USART_UD, (uint8_t*) "STM32 Flash Address Error !!!\r\n", 31, 100);
						break;
				default:
						break;
 8000a1a:	e020      	b.n	8000a5e <LVQ_OTA_Run+0x6a>
						u8RecieveCounter = 0;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <LVQ_OTA_Run+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000a22:	230a      	movs	r3, #10
 8000a24:	2201      	movs	r2, #1
 8000a26:	4919      	ldr	r1, [pc, #100]	; (8000a8c <LVQ_OTA_Run+0x98>)
 8000a28:	4819      	ldr	r0, [pc, #100]	; (8000a90 <LVQ_OTA_Run+0x9c>)
 8000a2a:	f001 ff34 	bl	8002896 <HAL_UART_Transmit>
						break;
 8000a2e:	e016      	b.n	8000a5e <LVQ_OTA_Run+0x6a>
						LVQ_OTA_WriteFlashMemory();
 8000a30:	f000 f912 	bl	8000c58 <LVQ_OTA_WriteFlashMemory>
						u8RecieveCounter = 0;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <LVQ_OTA_Run+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
						if( u32AddressWriteFlash )
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <LVQ_OTA_Run+0xa0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <LVQ_OTA_Run+0x5c>
							HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000a42:	230a      	movs	r3, #10
 8000a44:	2201      	movs	r2, #1
 8000a46:	4911      	ldr	r1, [pc, #68]	; (8000a8c <LVQ_OTA_Run+0x98>)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <LVQ_OTA_Run+0x9c>)
 8000a4a:	f001 ff24 	bl	8002896 <HAL_UART_Transmit>
						break;
 8000a4e:	e005      	b.n	8000a5c <LVQ_OTA_Run+0x68>
							HAL_UART_Transmit(USART_UD, (uint8_t*) "STM32 Flash Address Error !!!\r\n", 31, 100);
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	221f      	movs	r2, #31
 8000a54:	4910      	ldr	r1, [pc, #64]	; (8000a98 <LVQ_OTA_Run+0xa4>)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <LVQ_OTA_Run+0x9c>)
 8000a58:	f001 ff1d 	bl	8002896 <HAL_UART_Transmit>
						break;
 8000a5c:	bf00      	nop
            }
            u8LineReceivedFlag = FALSE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <LVQ_OTA_Run+0x8c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
    while (u8FinishReceiveFlag == FALSE)
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LVQ_OTA_Run+0xa8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0c5      	beq.n	80009fa <LVQ_OTA_Run+0x6>
        }
    }
		
    HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000a6e:	230a      	movs	r3, #10
 8000a70:	2201      	movs	r2, #1
 8000a72:	4906      	ldr	r1, [pc, #24]	; (8000a8c <LVQ_OTA_Run+0x98>)
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <LVQ_OTA_Run+0x9c>)
 8000a76:	f001 ff0e 	bl	8002896 <HAL_UART_Transmit>
		
	/* NVIC_SystemReset(); */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001e8 	.word	0x200001e8
 8000a84:	20000114 	.word	0x20000114
 8000a88:	200000b0 	.word	0x200000b0
 8000a8c:	08004244 	.word	0x08004244
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	200001e4 	.word	0x200001e4
 8000a98:	08004248 	.word	0x08004248
 8000a9c:	200001e9 	.word	0x200001e9

08000aa0 <LVQ_OTA_CharReceived>:

void LVQ_OTA_CharReceived(uint8_t rec)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
    u8RecieveBuffer[u8RecieveCounter] = rec;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <LVQ_OTA_CharReceived+0x58>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <LVQ_OTA_CharReceived+0x5c>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	5453      	strb	r3, [r2, r1]
    switch (rec)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b59      	cmp	r3, #89	; 0x59
 8000abc:	dc02      	bgt.n	8000ac4 <LVQ_OTA_CharReceived+0x24>
 8000abe:	2b58      	cmp	r3, #88	; 0x58
 8000ac0:	da03      	bge.n	8000aca <LVQ_OTA_CharReceived+0x2a>
 8000ac2:	e00a      	b.n	8000ada <LVQ_OTA_CharReceived+0x3a>
 8000ac4:	2b5a      	cmp	r3, #90	; 0x5a
 8000ac6:	d004      	beq.n	8000ad2 <LVQ_OTA_CharReceived+0x32>
 8000ac8:	e007      	b.n	8000ada <LVQ_OTA_CharReceived+0x3a>
    {
			case OTA_DATA_START_CHAR:
			case OTA_LINE_BREAK_CHAR:
					u8LineReceivedFlag = TRUE;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <LVQ_OTA_CharReceived+0x60>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
					break;
 8000ad0:	e00b      	b.n	8000aea <LVQ_OTA_CharReceived+0x4a>
			case OTA_DATA_END_CHAR:
					u8FinishReceiveFlag = TRUE;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <LVQ_OTA_CharReceived+0x64>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
					break;
 8000ad8:	e007      	b.n	8000aea <LVQ_OTA_CharReceived+0x4a>
			default:
					u8RecieveCounter++;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <LVQ_OTA_CharReceived+0x58>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <LVQ_OTA_CharReceived+0x58>)
 8000ae6:	701a      	strb	r2, [r3, #0]
					break;
 8000ae8:	bf00      	nop
    }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000114 	.word	0x20000114
 8000afc:	200000b0 	.word	0x200000b0
 8000b00:	200001e8 	.word	0x200001e8
 8000b04:	200001e9 	.word	0x200001e9

08000b08 <LVQ_OTA_CheckUpdate>:

void LVQ_OTA_CheckUpdate(uint8_t rec)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
		switch(rec)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b55      	cmp	r3, #85	; 0x55
 8000b16:	d006      	beq.n	8000b26 <LVQ_OTA_CheckUpdate+0x1e>
 8000b18:	2b55      	cmp	r3, #85	; 0x55
 8000b1a:	dc54      	bgt.n	8000bc6 <LVQ_OTA_CheckUpdate+0xbe>
 8000b1c:	2b0a      	cmp	r3, #10
 8000b1e:	d00c      	beq.n	8000b3a <LVQ_OTA_CheckUpdate+0x32>
 8000b20:	2b53      	cmp	r3, #83	; 0x53
 8000b22:	d150      	bne.n	8000bc6 <LVQ_OTA_CheckUpdate+0xbe>
		{
				case 'S':
					break;
 8000b24:	e05a      	b.n	8000bdc <LVQ_OTA_CheckUpdate+0xd4>
				case 'U':
					FlagOTA = TRUE;
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <LVQ_OTA_CheckUpdate+0xdc>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	2201      	movs	r2, #1
 8000b30:	492d      	ldr	r1, [pc, #180]	; (8000be8 <LVQ_OTA_CheckUpdate+0xe0>)
 8000b32:	482e      	ldr	r0, [pc, #184]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000b34:	f001 feaf 	bl	8002896 <HAL_UART_Transmit>
					break;
 8000b38:	e050      	b.n	8000bdc <LVQ_OTA_CheckUpdate+0xd4>
				case '\n':
					for( uint8_t i = 0; i < Index; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e010      	b.n	8000b62 <LVQ_OTA_CheckUpdate+0x5a>
						SizeCurrent = SizeCurrent * 10 + ( Size[i] - 48 );
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <LVQ_OTA_CheckUpdate+0xe8>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <LVQ_OTA_CheckUpdate+0xec>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	440b      	add	r3, r1
 8000b56:	3b30      	subs	r3, #48	; 0x30
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <LVQ_OTA_CheckUpdate+0xe8>)
 8000b5a:	6013      	str	r3, [r2, #0]
					for( uint8_t i = 0; i < Index; i++)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <LVQ_OTA_CheckUpdate+0xf0>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3e9      	bcc.n	8000b40 <LVQ_OTA_CheckUpdate+0x38>
					if( SizeCurrent > MaxSizeFlash )
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <LVQ_OTA_CheckUpdate+0xe8>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <LVQ_OTA_CheckUpdate+0xf4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d906      	bls.n	8000b86 <LVQ_OTA_CheckUpdate+0x7e>
						HAL_UART_Transmit(USART_UD, OTA_CANCEL_UPDATE, 1, 10);
 8000b78:	230a      	movs	r3, #10
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4920      	ldr	r1, [pc, #128]	; (8000c00 <LVQ_OTA_CheckUpdate+0xf8>)
 8000b7e:	481b      	ldr	r0, [pc, #108]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000b80:	f001 fe89 	bl	8002896 <HAL_UART_Transmit>
						HAL_UART_Transmit(USART_UD, (uint8_t*) "\r\nSTM32 Flash: ", 13, 100);
						sprintf(TX, "%ld", SizeCurrent);
						HAL_UART_Transmit(USART_UD, (uint8_t*) TX, sizeof(TX), 100);
						HAL_UART_Transmit(USART_UD, (uint8_t*) " Bytes\r\n", 7, 100);
					}
					break;
 8000b84:	e02a      	b.n	8000bdc <LVQ_OTA_CheckUpdate+0xd4>
						HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000b86:	230a      	movs	r3, #10
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4917      	ldr	r1, [pc, #92]	; (8000be8 <LVQ_OTA_CheckUpdate+0xe0>)
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000b8e:	f001 fe82 	bl	8002896 <HAL_UART_Transmit>
						HAL_UART_Transmit(USART_UD, (uint8_t*) "\r\nSTM32 Flash: ", 13, 100);
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	220d      	movs	r2, #13
 8000b96:	491b      	ldr	r1, [pc, #108]	; (8000c04 <LVQ_OTA_CheckUpdate+0xfc>)
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000b9a:	f001 fe7c 	bl	8002896 <HAL_UART_Transmit>
						sprintf(TX, "%ld", SizeCurrent);
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <LVQ_OTA_CheckUpdate+0xe8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4918      	ldr	r1, [pc, #96]	; (8000c08 <LVQ_OTA_CheckUpdate+0x100>)
 8000ba6:	4819      	ldr	r0, [pc, #100]	; (8000c0c <LVQ_OTA_CheckUpdate+0x104>)
 8000ba8:	f002 fed2 	bl	8003950 <siprintf>
						HAL_UART_Transmit(USART_UD, (uint8_t*) TX, sizeof(TX), 100);
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	2206      	movs	r2, #6
 8000bb0:	4916      	ldr	r1, [pc, #88]	; (8000c0c <LVQ_OTA_CheckUpdate+0x104>)
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000bb4:	f001 fe6f 	bl	8002896 <HAL_UART_Transmit>
						HAL_UART_Transmit(USART_UD, (uint8_t*) " Bytes\r\n", 7, 100);
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	2207      	movs	r2, #7
 8000bbc:	4914      	ldr	r1, [pc, #80]	; (8000c10 <LVQ_OTA_CheckUpdate+0x108>)
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <LVQ_OTA_CheckUpdate+0xe4>)
 8000bc0:	f001 fe69 	bl	8002896 <HAL_UART_Transmit>
					break;
 8000bc4:	e00a      	b.n	8000bdc <LVQ_OTA_CheckUpdate+0xd4>
				default:
					Size[Index++] = rec;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <LVQ_OTA_CheckUpdate+0xf0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	b2d1      	uxtb	r1, r2
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LVQ_OTA_CheckUpdate+0xf0>)
 8000bd0:	7011      	strb	r1, [r2, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <LVQ_OTA_CheckUpdate+0xec>)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	5453      	strb	r3, [r2, r1]
					break;
 8000bda:	bf00      	nop
		}
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000094 	.word	0x20000094
 8000be8:	08004244 	.word	0x08004244
 8000bec:	200001ec 	.word	0x200001ec
 8000bf0:	2000009c 	.word	0x2000009c
 8000bf4:	200000a0 	.word	0x200000a0
 8000bf8:	200000ae 	.word	0x200000ae
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	08004268 	.word	0x08004268
 8000c04:	0800426c 	.word	0x0800426c
 8000c08:	0800427c 	.word	0x0800427c
 8000c0c:	200000a8 	.word	0x200000a8
 8000c10:	08004280 	.word	0x08004280

08000c14 <getHex>:

static uint8_t getHex(uint8_t Copy_uint8_tAsci)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    uint8_t Result = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]

    /*0 ... 9*/
    if ((Copy_uint8_tAsci >= 48) && (Copy_uint8_tAsci <= 57))
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b2f      	cmp	r3, #47	; 0x2f
 8000c26:	d906      	bls.n	8000c36 <getHex+0x22>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b39      	cmp	r3, #57	; 0x39
 8000c2c:	d803      	bhi.n	8000c36 <getHex+0x22>
    {
        Result = Copy_uint8_tAsci - 48;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	3b30      	subs	r3, #48	; 0x30
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e008      	b.n	8000c48 <getHex+0x34>
    }

    /*A ... F*/
    else if ((Copy_uint8_tAsci >= 65) && (Copy_uint8_tAsci <= 70))
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b40      	cmp	r3, #64	; 0x40
 8000c3a:	d905      	bls.n	8000c48 <getHex+0x34>
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b46      	cmp	r3, #70	; 0x46
 8000c40:	d802      	bhi.n	8000c48 <getHex+0x34>
    {
        Result = Copy_uint8_tAsci - 55;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3b37      	subs	r3, #55	; 0x37
 8000c46:	73fb      	strb	r3, [r7, #15]
    }

    return Result;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <LVQ_OTA_WriteFlashMemory>:

void LVQ_OTA_WriteFlashMemory(void)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
    uint8_t CC, i;
    uint8_t u8DataDigits[4];
    uint8_t u8DataCounter = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71bb      	strb	r3, [r7, #6]

    switch (getHex(u8RecieveBuffer[8]))
 8000c62:	4b84      	ldr	r3, [pc, #528]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000c64:	7a1b      	ldrb	r3, [r3, #8]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ffd3 	bl	8000c14 <getHex>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	f000 80f9 	beq.w	8000e68 <LVQ_OTA_WriteFlashMemory+0x210>
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	f300 80f8 	bgt.w	8000e6c <LVQ_OTA_WriteFlashMemory+0x214>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <LVQ_OTA_WriteFlashMemory+0x34>
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	f040 80f3 	bne.w	8000e6c <LVQ_OTA_WriteFlashMemory+0x214>
    {

			case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
					LVQ_OTA_SetHighAddress();
 8000c86:	f000 f8ff 	bl	8000e88 <LVQ_OTA_SetHighAddress>
					break;
 8000c8a:	e0f0      	b.n	8000e6e <LVQ_OTA_WriteFlashMemory+0x216>

			case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */

					/* LVQ_GPIO_TogglePinValue(GPIOA, GPIO_PIN_5); */
					/* Get Character Count */
					CC = (getHex(u8RecieveBuffer[1]) << 4) | getHex(u8RecieveBuffer[2]);
 8000c8c:	4b79      	ldr	r3, [pc, #484]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffbe 	bl	8000c14 <getHex>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	b25c      	sxtb	r4, r3
 8000c9e:	4b75      	ldr	r3, [pc, #468]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffb5 	bl	8000c14 <getHex>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	717b      	strb	r3, [r7, #5]
					u32SizeDataFirmware += CC;
 8000cb4:	797a      	ldrb	r2, [r7, #5]
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <LVQ_OTA_WriteFlashMemory+0x220>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a6e      	ldr	r2, [pc, #440]	; (8000e78 <LVQ_OTA_WriteFlashMemory+0x220>)
 8000cbe:	6013      	str	r3, [r2, #0]

					/* Get low part of address */
					u8DataDigits[0] = getHex(u8RecieveBuffer[3]);
 8000cc0:	4b6c      	ldr	r3, [pc, #432]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000cc2:	78db      	ldrb	r3, [r3, #3]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffa4 	bl	8000c14 <getHex>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	703b      	strb	r3, [r7, #0]
					u8DataDigits[1] = getHex(u8RecieveBuffer[4]);
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff9c 	bl	8000c14 <getHex>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	707b      	strb	r3, [r7, #1]
					u8DataDigits[2] = getHex(u8RecieveBuffer[5]);
 8000ce0:	4b64      	ldr	r3, [pc, #400]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000ce2:	795b      	ldrb	r3, [r3, #5]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff94 	bl	8000c14 <getHex>
 8000cec:	4603      	mov	r3, r0
 8000cee:	70bb      	strb	r3, [r7, #2]
					u8DataDigits[3] = getHex(u8RecieveBuffer[6]);
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000cf2:	799b      	ldrb	r3, [r3, #6]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff8c 	bl	8000c14 <getHex>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	70fb      	strb	r3, [r7, #3]

					/* Set full address */
					u32AddressWriteFlash = u32AddressWriteFlash & 0xFFFF0000;
 8000d00:	4b5e      	ldr	r3, [pc, #376]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d0a:	6013      	str	r3, [r2, #0]
					u32AddressWriteFlash = u32AddressWriteFlash |
										 (u8DataDigits[3])      |
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	461a      	mov	r2, r3
					u32AddressWriteFlash = u32AddressWriteFlash |
 8000d10:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4313      	orrs	r3, r2
										 (u8DataDigits[2] << 4) |
 8000d16:	78ba      	ldrb	r2, [r7, #2]
 8000d18:	0112      	lsls	r2, r2, #4
										 (u8DataDigits[3])      |
 8000d1a:	4313      	orrs	r3, r2
										 (u8DataDigits[1] << 8) |
 8000d1c:	787a      	ldrb	r2, [r7, #1]
 8000d1e:	0212      	lsls	r2, r2, #8
										 (u8DataDigits[2] << 4) |
 8000d20:	4313      	orrs	r3, r2
										 (u8DataDigits[0] << 12);
 8000d22:	783a      	ldrb	r2, [r7, #0]
 8000d24:	0312      	lsls	r2, r2, #12
										 (u8DataDigits[1] << 8) |
 8000d26:	4313      	orrs	r3, r2
					u32AddressWriteFlash = u32AddressWriteFlash |
 8000d28:	4a54      	ldr	r2, [pc, #336]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d2a:	6013      	str	r3, [r2, #0]
					/* Check address wite flash data */
					if( u32AddressWriteFlash < 0x08004000 )
 8000d2c:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <LVQ_OTA_WriteFlashMemory+0x228>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d203      	bcs.n	8000d3e <LVQ_OTA_WriteFlashMemory+0xe6>
					{
							u32AddressWriteFlash = 0;
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e097      	b.n	8000e6e <LVQ_OTA_WriteFlashMemory+0x216>
							return;
					}
				
					/* Get the data of the record */
					for (i = 0; i < CC / 2; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e047      	b.n	8000dd4 <LVQ_OTA_WriteFlashMemory+0x17c>
					{
							u8DataDigits[0] = getHex(u8RecieveBuffer[4 * i + 9]);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	3309      	adds	r3, #9
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000d4c:	5cd3      	ldrb	r3, [r2, r3]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5f 	bl	8000c14 <getHex>
 8000d56:	4603      	mov	r3, r0
 8000d58:	703b      	strb	r3, [r7, #0]
							u8DataDigits[1] = getHex(u8RecieveBuffer[4 * i + 10]);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	330a      	adds	r3, #10
 8000d60:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <getHex>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	707b      	strb	r3, [r7, #1]
							u8DataDigits[2] = getHex(u8RecieveBuffer[4 * i + 11]);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	330b      	adds	r3, #11
 8000d76:	4a3f      	ldr	r2, [pc, #252]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff49 	bl	8000c14 <getHex>
 8000d82:	4603      	mov	r3, r0
 8000d84:	70bb      	strb	r3, [r7, #2]
							u8DataDigits[3] = getHex(u8RecieveBuffer[4 * i + 12]);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff3e 	bl	8000c14 <getHex>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	70fb      	strb	r3, [r7, #3]
							u32DataWriteFlash[u8DataCounter] = (u8DataDigits[3] << 8)  |
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
															   (u8DataDigits[2] << 12) |
 8000da2:	78bb      	ldrb	r3, [r7, #2]
 8000da4:	031b      	lsls	r3, r3, #12
							u32DataWriteFlash[u8DataCounter] = (u8DataDigits[3] << 8)  |
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21a      	sxth	r2, r3
															   (u8DataDigits[1] << 0)  |
 8000dac:	787b      	ldrb	r3, [r7, #1]
 8000dae:	b21b      	sxth	r3, r3
															   (u8DataDigits[2] << 12) |
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b21a      	sxth	r2, r3
															   (u8DataDigits[0] << 4);
 8000db4:	783b      	ldrb	r3, [r7, #0]
 8000db6:	011b      	lsls	r3, r3, #4
															   (u8DataDigits[1] << 0)  |
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21a      	sxth	r2, r3
							u32DataWriteFlash[u8DataCounter] = (u8DataDigits[3] << 8)  |
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
															   (u8DataDigits[1] << 0)  |
 8000dc0:	b291      	uxth	r1, r2
							u32DataWriteFlash[u8DataCounter] = (u8DataDigits[3] << 8)  |
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <LVQ_OTA_WriteFlashMemory+0x22c>)
 8000dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							u8DataCounter++;
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	71bb      	strb	r3, [r7, #6]
					for (i = 0; i < CC / 2; i++)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3b1      	bcc.n	8000d44 <LVQ_OTA_WriteFlashMemory+0xec>
					}

					if (CC % 2 != 0)
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d033      	beq.n	8000e54 <LVQ_OTA_WriteFlashMemory+0x1fc>
					{
							u8DataDigits[0] = getHex(u8RecieveBuffer[4 * (CC / 2) + 9]);
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	085b      	lsrs	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	3309      	adds	r3, #9
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff09 	bl	8000c14 <getHex>
 8000e02:	4603      	mov	r3, r0
 8000e04:	703b      	strb	r3, [r7, #0]
							u8DataDigits[1] = getHex(u8RecieveBuffer[4 * (CC / 2) + 10]);
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	085b      	lsrs	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	330a      	adds	r3, #10
 8000e10:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <LVQ_OTA_WriteFlashMemory+0x21c>)
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fefc 	bl	8000c14 <getHex>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	707b      	strb	r3, [r7, #1]
							u32DataWriteFlash[u8DataCounter] = 0xFF00 | (u8DataDigits[0] << 4) | (u8DataDigits[1] << 0);
 8000e20:	783b      	ldrb	r3, [r7, #0]
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	b291      	uxth	r1, r2
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <LVQ_OTA_WriteFlashMemory+0x22c>)
 8000e3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4 + 1);
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LVQ_OTA_WriteFlashMemory+0x22c>)
 8000e4e:	f7ff fd07 	bl	8000860 <LVQ_Flash_Write>
					else
					{
							LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
					}

					break;
 8000e52:	e00c      	b.n	8000e6e <LVQ_OTA_WriteFlashMemory+0x216>
							LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <LVQ_OTA_WriteFlashMemory+0x224>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4908      	ldr	r1, [pc, #32]	; (8000e84 <LVQ_OTA_WriteFlashMemory+0x22c>)
 8000e62:	f7ff fcfd 	bl	8000860 <LVQ_Flash_Write>
					break;
 8000e66:	e002      	b.n	8000e6e <LVQ_OTA_WriteFlashMemory+0x216>
					break;
 8000e68:	bf00      	nop
 8000e6a:	e000      	b.n	8000e6e <LVQ_OTA_WriteFlashMemory+0x216>
			default:
					break;
 8000e6c:	bf00      	nop
    }
}
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	200000b0 	.word	0x200000b0
 8000e78:	20000118 	.word	0x20000118
 8000e7c:	200001e4 	.word	0x200001e4
 8000e80:	08004000 	.word	0x08004000
 8000e84:	2000011c 	.word	0x2000011c

08000e88 <LVQ_OTA_SetHighAddress>:

void LVQ_OTA_SetHighAddress(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
													 (getHex(u8RecieveBuffer[10]) << 24) |
													 (getHex(u8RecieveBuffer[11]) << 20) |
													 (getHex(u8RecieveBuffer[12]) << 16);
	  */
	
		u32AddressWriteFlash = 0x08000000; /* Address Save Firmware Update */
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <LVQ_OTA_SetHighAddress+0x18>)
 8000e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200001e4 	.word	0x200001e4

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f000 fac5 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f86b 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f000 f92f 	bl	8001114 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb6:	f000 f903 	bl	80010c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 f8d7 	bl	800106c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LVQ_OTA_Init();
 8000ebe:	f7ff fd77 	bl	80009b0 <LVQ_OTA_Init>
  LVQ_OTA_SetCallback_CheckUpdateFirmware();
 8000ec2:	f7ff fd83 	bl	80009cc <LVQ_OTA_SetCallback_CheckUpdateFirmware>

	uwTick = 0;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <main+0xc8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
	while( HAL_GetTick() < TimeOut  )
 8000ecc:	e032      	b.n	8000f34 <main+0x90>
	{
		if( FlagOTA )
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <main+0xcc>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d02e      	beq.n	8000f34 <main+0x90>
		{
				uint8_t StartSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION);
 8000ed6:	4827      	ldr	r0, [pc, #156]	; (8000f74 <main+0xd0>)
 8000ed8:	f7ff fb6c 	bl	80005b4 <LVQ_GetSectorFromAddress>
 8000edc:	4603      	mov	r3, r0
 8000ede:	75fb      	strb	r3, [r7, #23]
				uint8_t EndSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION + SizeCurrent);
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <main+0xd4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ee8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb61 	bl	80005b4 <LVQ_GetSectorFromAddress>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	72fb      	strb	r3, [r7, #11]
				uint8_t NumberSector = EndSector - StartSector + 1;
 8000ef6:	7afa      	ldrb	r2, [r7, #11]
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	72bb      	strb	r3, [r7, #10]

				/* Erase sector for write data */
				for(uint8_t i = 0; i < NumberSector; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	75bb      	strb	r3, [r7, #22]
 8000f06:	e00d      	b.n	8000f24 <main+0x80>
				{
						LVQ_Flash_Erase(LVQ_GetAddressFromSector(StartSector));;
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fbcc 	bl	80006a8 <LVQ_GetAddressFromSector>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc28 	bl	8000768 <LVQ_Flash_Erase>
						StartSector++;
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
				for(uint8_t i = 0; i < NumberSector; i++)
 8000f1e:	7dbb      	ldrb	r3, [r7, #22]
 8000f20:	3301      	adds	r3, #1
 8000f22:	75bb      	strb	r3, [r7, #22]
 8000f24:	7dba      	ldrb	r2, [r7, #22]
 8000f26:	7abb      	ldrb	r3, [r7, #10]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3ed      	bcc.n	8000f08 <main+0x64>
				}
				LVQ_OTA_SetCallback_UpdateFirmware();
 8000f2c:	f7ff fd58 	bl	80009e0 <LVQ_OTA_SetCallback_UpdateFirmware>
				LVQ_OTA_Run();
 8000f30:	f7ff fd60 	bl	80009f4 <LVQ_OTA_Run>
	while( HAL_GetTick() < TimeOut  )
 8000f34:	f000 fae6 	bl	8001504 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <main+0xd8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3c5      	bcc.n	8000ece <main+0x2a>
		}
	}

  SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <main+0xdc>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <main+0xdc>)
 8000f48:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000f4c:	6253      	str	r3, [r2, #36]	; 0x24
  __set_MSP(*((volatile uint32_t*) ADDRESS_FIRMWARE_APPLICATION));
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <main+0xd0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f383 8808 	msr	MSP, r3
}
 8000f5a:	bf00      	nop
  uint32_t u32JumpAddress = *( (volatile uint32_t*) (ADDRESS_FIRMWARE_APPLICATION + 4) );
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <main+0xe0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	613b      	str	r3, [r7, #16]
  void (*reset_handler) (void) = (void *) u32JumpAddress;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	60fb      	str	r3, [r7, #12]
  reset_handler();
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <main+0xc6>
 8000f6c:	20000278 	.word	0x20000278
 8000f70:	20000094 	.word	0x20000094
 8000f74:	08008000 	.word	0x08008000
 8000f78:	2000009c 	.word	0x2000009c
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	08008004 	.word	0x08008004

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fcd2 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <SystemClock_Config+0xdc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <SystemClock_Config+0xdc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <SystemClock_Config+0xdc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <SystemClock_Config+0xe0>)
 8000fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <SystemClock_Config+0xe0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	2310      	movs	r3, #16
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ffc:	23b4      	movs	r3, #180	; 0xb4
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f955 	bl	80022c0 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800101c:	f000 f8a2 	bl	8001164 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001020:	f000 fdb4 	bl	8001b8c <HAL_PWREx_EnableOverDrive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800102a:	f000 f89b 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2105      	movs	r1, #5
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fded 	bl	8001c2c <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001058:	f000 f884 	bl	8001164 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART1_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 80010a4:	f001 fbaa 	bl	80027fc <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f859 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001ec 	.word	0x200001ec
 80010bc:	40011000 	.word	0x40011000

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART2_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f8:	f001 fb80 	bl	80027fc <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f82f 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000230 	.word	0x20000230
 8001110:	40004400 	.word	0x40004400

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_GPIO_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <MX_GPIO_Init+0x4c>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_GPIO_Init+0x4c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_GPIO_Init+0x4c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <MX_GPIO_Init+0x4c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_GPIO_Init+0x4c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_UART_MspInit+0x108>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d135      	bne.n	800124e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_UART_MspInit+0x10c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a38      	ldr	r2, [pc, #224]	; (80012cc <HAL_UART_MspInit+0x10c>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_UART_MspInit+0x10c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_UART_MspInit+0x10c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_UART_MspInit+0x10c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_UART_MspInit+0x10c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800121a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800122c:	2307      	movs	r3, #7
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4826      	ldr	r0, [pc, #152]	; (80012d0 <HAL_UART_MspInit+0x110>)
 8001238:	f000 fb14 	bl	8001864 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2025      	movs	r0, #37	; 0x25
 8001242:	f000 fa46 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001246:	2025      	movs	r0, #37	; 0x25
 8001248:	f000 fa5f 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800124c:	e038      	b.n	80012c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d133      	bne.n	80012c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_UART_MspInit+0x10c>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_UART_MspInit+0x10c>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_UART_MspInit+0x10c>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_UART_MspInit+0x10c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_UART_MspInit+0x10c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_UART_MspInit+0x10c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001290:	230c      	movs	r3, #12
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a0:	2307      	movs	r3, #7
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <HAL_UART_MspInit+0x110>)
 80012ac:	f000 fada 	bl	8001864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f000 fa0c 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ba:	2026      	movs	r0, #38	; 0x26
 80012bc:	f000 fa25 	bl	800170a <HAL_NVIC_EnableIRQ>
}
 80012c0:	bf00      	nop
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40004400 	.word	0x40004400

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f8da 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <USART1_IRQHandler+0x10>)
 8001332:	f001 fb73 	bl	8002a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001ec 	.word	0x200001ec

08001340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <USART2_IRQHandler+0x10>)
 8001346:	f001 fb69 	bl	8002a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000230 	.word	0x20000230

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f002 fab2 	bl	80038ec <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20020000 	.word	0x20020000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	20000274 	.word	0x20000274
 80013bc:	20000290 	.word	0x20000290

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800140e:	f7ff ffd7 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fa71 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fd45 	bl	8000ea4 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001428:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 800142c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001430:	2000028c 	.word	0x2000028c

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_Init+0x40>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_Init+0x40>)
 800144e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x40>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f92b 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fe80 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f943 	bl	8001726 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f90b 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000010 	.word	0x20000010
 80014d8:	2000000c 	.word	0x2000000c

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000278 	.word	0x20000278

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000278 	.word	0x20000278

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff feda 	bl	8001504 <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d008      	beq.n	8001770 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e052      	b.n	8001816 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0216 	bic.w	r2, r2, #22
 800177e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <HAL_DMA_Abort+0x62>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0208 	bic.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c0:	e013      	b.n	80017ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c2:	f7ff fe9f 	bl	8001504 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d90c      	bls.n	80017ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e015      	b.n	8001816 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e4      	bne.n	80017c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	223f      	movs	r2, #63	; 0x3f
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d004      	beq.n	800183c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e00c      	b.n	8001856 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2205      	movs	r2, #5
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e165      	b.n	8001b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8154 	bne.w	8001b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <HAL_GPIO_Init+0x308>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d025      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4e      	ldr	r2, [pc, #312]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01f      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4b      	ldr	r2, [pc, #300]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x206>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x202>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00c      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00a      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f ae96 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_PWREx_EnableOverDrive+0x94>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff fca4 	bl	8001504 <HAL_GetTick>
 8001bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bbe:	e009      	b.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc0:	f7ff fca0 	bl	8001504 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	d901      	bls.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e01f      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7ff fc8c 	bl	8001504 <HAL_GetTick>
 8001bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bee:	e009      	b.n	8001c04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc88 	bl	8001504 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bfe:	d901      	bls.n	8001c04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e007      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	420e0040 	.word	0x420e0040
 8001c24:	40007000 	.word	0x40007000
 8001c28:	420e0044 	.word	0x420e0044

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cc      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d90c      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d044      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d119      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e067      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4934      	ldr	r1, [pc, #208]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fbf2 	bl	8001504 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff fbee 	bl	8001504 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e04f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d20c      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f855 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fb52 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00
 8001de8:	40023800 	.word	0x40023800
 8001dec:	0800428c 	.word	0x0800428c
 8001df0:	20000008 	.word	0x20000008
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	0800429c 	.word	0x0800429c

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff ffdc 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0b5b      	lsrs	r3, r3, #13
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	0800429c 	.word	0x0800429c

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e64:	b0ae      	sub	sp, #184	; 0xb8
 8001e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e86:	4bcb      	ldr	r3, [pc, #812]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	f200 8206 	bhi.w	80022a0 <HAL_RCC_GetSysClockFreq+0x440>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ed1 	.word	0x08001ed1
 8001ea0:	080022a1 	.word	0x080022a1
 8001ea4:	080022a1 	.word	0x080022a1
 8001ea8:	080022a1 	.word	0x080022a1
 8001eac:	08001ed9 	.word	0x08001ed9
 8001eb0:	080022a1 	.word	0x080022a1
 8001eb4:	080022a1 	.word	0x080022a1
 8001eb8:	080022a1 	.word	0x080022a1
 8001ebc:	08001ee1 	.word	0x08001ee1
 8001ec0:	080022a1 	.word	0x080022a1
 8001ec4:	080022a1 	.word	0x080022a1
 8001ec8:	080022a1 	.word	0x080022a1
 8001ecc:	080020d1 	.word	0x080020d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4bb9      	ldr	r3, [pc, #740]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ed6:	e1e7      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed8:	4bb8      	ldr	r3, [pc, #736]	; (80021bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ede:	e1e3      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4bb4      	ldr	r3, [pc, #720]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eec:	4bb1      	ldr	r3, [pc, #708]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d071      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4bae      	ldr	r3, [pc, #696]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f1e:	4622      	mov	r2, r4
 8001f20:	462b      	mov	r3, r5
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	0159      	lsls	r1, r3, #5
 8001f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f30:	0150      	lsls	r0, r2, #5
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4621      	mov	r1, r4
 8001f38:	1a51      	subs	r1, r2, r1
 8001f3a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f50:	4649      	mov	r1, r9
 8001f52:	018b      	lsls	r3, r1, #6
 8001f54:	4641      	mov	r1, r8
 8001f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	018a      	lsls	r2, r1, #6
 8001f5e:	4641      	mov	r1, r8
 8001f60:	1a51      	subs	r1, r2, r1
 8001f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f64:	4649      	mov	r1, r9
 8001f66:	eb63 0301 	sbc.w	r3, r3, r1
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f78:	4649      	mov	r1, r9
 8001f7a:	00cb      	lsls	r3, r1, #3
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f82:	4641      	mov	r1, r8
 8001f84:	00ca      	lsls	r2, r1, #3
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
 8001f92:	462b      	mov	r3, r5
 8001f94:	460a      	mov	r2, r1
 8001f96:	eb42 0303 	adc.w	r3, r2, r3
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fa8:	4629      	mov	r1, r5
 8001faa:	024b      	lsls	r3, r1, #9
 8001fac:	4621      	mov	r1, r4
 8001fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	024a      	lsls	r2, r1, #9
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fda:	e067      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fe8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ffe:	4622      	mov	r2, r4
 8002000:	462b      	mov	r3, r5
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	0159      	lsls	r1, r3, #5
 800200c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002010:	0150      	lsls	r0, r2, #5
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4621      	mov	r1, r4
 8002018:	1a51      	subs	r1, r2, r1
 800201a:	62b9      	str	r1, [r7, #40]	; 0x28
 800201c:	4629      	mov	r1, r5
 800201e:	eb63 0301 	sbc.w	r3, r3, r1
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002030:	4649      	mov	r1, r9
 8002032:	018b      	lsls	r3, r1, #6
 8002034:	4641      	mov	r1, r8
 8002036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800203a:	4641      	mov	r1, r8
 800203c:	018a      	lsls	r2, r1, #6
 800203e:	4641      	mov	r1, r8
 8002040:	ebb2 0a01 	subs.w	sl, r2, r1
 8002044:	4649      	mov	r1, r9
 8002046:	eb63 0b01 	sbc.w	fp, r3, r1
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800205a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800205e:	4692      	mov	sl, r2
 8002060:	469b      	mov	fp, r3
 8002062:	4623      	mov	r3, r4
 8002064:	eb1a 0303 	adds.w	r3, sl, r3
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	462b      	mov	r3, r5
 800206c:	eb4b 0303 	adc.w	r3, fp, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800207e:	4629      	mov	r1, r5
 8002080:	028b      	lsls	r3, r1, #10
 8002082:	4621      	mov	r1, r4
 8002084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002088:	4621      	mov	r1, r4
 800208a:	028a      	lsls	r2, r1, #10
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002094:	2200      	movs	r2, #0
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
 8002098:	677a      	str	r2, [r7, #116]	; 0x74
 800209a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800209e:	f7fe f907 	bl	80002b0 <__aeabi_uldivmod>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4613      	mov	r3, r2
 80020a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80020be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020ce:	e0eb      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020dc:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d06b      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	2200      	movs	r2, #0
 80020f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80020f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	663b      	str	r3, [r7, #96]	; 0x60
 80020fc:	2300      	movs	r3, #0
 80020fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002104:	4622      	mov	r2, r4
 8002106:	462b      	mov	r3, r5
 8002108:	f04f 0000 	mov.w	r0, #0
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	0159      	lsls	r1, r3, #5
 8002112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002116:	0150      	lsls	r0, r2, #5
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4621      	mov	r1, r4
 800211e:	1a51      	subs	r1, r2, r1
 8002120:	61b9      	str	r1, [r7, #24]
 8002122:	4629      	mov	r1, r5
 8002124:	eb63 0301 	sbc.w	r3, r3, r1
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002136:	4659      	mov	r1, fp
 8002138:	018b      	lsls	r3, r1, #6
 800213a:	4651      	mov	r1, sl
 800213c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002140:	4651      	mov	r1, sl
 8002142:	018a      	lsls	r2, r1, #6
 8002144:	4651      	mov	r1, sl
 8002146:	ebb2 0801 	subs.w	r8, r2, r1
 800214a:	4659      	mov	r1, fp
 800214c:	eb63 0901 	sbc.w	r9, r3, r1
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002164:	4690      	mov	r8, r2
 8002166:	4699      	mov	r9, r3
 8002168:	4623      	mov	r3, r4
 800216a:	eb18 0303 	adds.w	r3, r8, r3
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	462b      	mov	r3, r5
 8002172:	eb49 0303 	adc.w	r3, r9, r3
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002184:	4629      	mov	r1, r5
 8002186:	024b      	lsls	r3, r1, #9
 8002188:	4621      	mov	r1, r4
 800218a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800218e:	4621      	mov	r1, r4
 8002190:	024a      	lsls	r2, r1, #9
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800219a:	2200      	movs	r2, #0
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
 800219e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021a4:	f7fe f884 	bl	80002b0 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021b2:	e065      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x420>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c0:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	2200      	movs	r2, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	4611      	mov	r1, r2
 80021cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021d0:	653b      	str	r3, [r7, #80]	; 0x50
 80021d2:	2300      	movs	r3, #0
 80021d4:	657b      	str	r3, [r7, #84]	; 0x54
 80021d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80021da:	4642      	mov	r2, r8
 80021dc:	464b      	mov	r3, r9
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	0159      	lsls	r1, r3, #5
 80021e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ec:	0150      	lsls	r0, r2, #5
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4641      	mov	r1, r8
 80021f4:	1a51      	subs	r1, r2, r1
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	4649      	mov	r1, r9
 80021fa:	eb63 0301 	sbc.w	r3, r3, r1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800220c:	4659      	mov	r1, fp
 800220e:	018b      	lsls	r3, r1, #6
 8002210:	4651      	mov	r1, sl
 8002212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002216:	4651      	mov	r1, sl
 8002218:	018a      	lsls	r2, r1, #6
 800221a:	4651      	mov	r1, sl
 800221c:	1a54      	subs	r4, r2, r1
 800221e:	4659      	mov	r1, fp
 8002220:	eb63 0501 	sbc.w	r5, r3, r1
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	00eb      	lsls	r3, r5, #3
 800222e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002232:	00e2      	lsls	r2, r4, #3
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	4643      	mov	r3, r8
 800223a:	18e3      	adds	r3, r4, r3
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	464b      	mov	r3, r9
 8002240:	eb45 0303 	adc.w	r3, r5, r3
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002252:	4629      	mov	r1, r5
 8002254:	028b      	lsls	r3, r1, #10
 8002256:	4621      	mov	r1, r4
 8002258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800225c:	4621      	mov	r1, r4
 800225e:	028a      	lsls	r2, r1, #10
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002268:	2200      	movs	r2, #0
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
 800226c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800226e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002272:	f7fe f81d 	bl	80002b0 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4613      	mov	r3, r2
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0f1b      	lsrs	r3, r3, #28
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800228e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800229e:	e003      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	37b8      	adds	r7, #184	; 0xb8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400

080022c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e28d      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8083 	beq.w	80023e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022e0:	4b94      	ldr	r3, [pc, #592]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d019      	beq.n	8002320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ec:	4b91      	ldr	r3, [pc, #580]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f8:	4b8e      	ldr	r3, [pc, #568]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002304:	d00c      	beq.n	8002320 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d112      	bne.n	8002338 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231e:	d10b      	bne.n	8002338 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	4b84      	ldr	r3, [pc, #528]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05b      	beq.n	80023e4 <HAL_RCC_OscConfig+0x124>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d157      	bne.n	80023e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e25a      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x90>
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0xcc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0xb4>
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a72      	ldr	r2, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xcc>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6b      	ldr	r2, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f8b6 	bl	8001504 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7ff f8b2 	bl	8001504 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e21f      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xdc>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f8a2 	bl	8001504 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c4:	f7ff f89e 	bl	8001504 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e20b      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x104>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d06f      	beq.n	80024d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d017      	beq.n	800242e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x186>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1d3      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x278>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff f84b 	bl	8001504 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff f847 	bl	8001504 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1b4      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4925      	ldr	r1, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x278>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f82a 	bl	8001504 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7ff f826 	bl	8001504 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e193      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x27c>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff f80a 	bl	8001504 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7ff f806 	bl	8001504 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e173      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x234>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_OscConfig+0x27c>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fff3 	bl	8001504 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe ffef 	bl	8001504 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d907      	bls.n	8002540 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e15c      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b8a      	ldr	r3, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ea      	bne.n	8002522 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b7f      	ldr	r3, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a7e      	ldr	r2, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b7c      	ldr	r3, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b79      	ldr	r3, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x4b0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x4b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4b0>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe ffaf 	bl	8001504 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe ffab 	bl	8001504 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e118      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x4b0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x31e>
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x358>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x340>
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x358>
 8002600:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe ff70 	bl	8001504 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe ff6c 	bl	8001504 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0d7      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x368>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe ff5a 	bl	8001504 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe ff56 	bl	8001504 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0c1      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	4a3a      	ldr	r2, [pc, #232]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80ad 	beq.w	80027ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d145      	bne.n	8002732 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x4b4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe ff2a 	bl	8001504 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe ff26 	bl	8001504 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e093      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x4b4>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fefb 	bl	8001504 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fef7 	bl	8001504 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e064      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x452>
 8002730:	e05c      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x4b4>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fee4 	bl	8001504 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fee0 	bl	8001504 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04d      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x4ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x480>
 800275e:	e045      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e040      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <HAL_RCC_OscConfig+0x538>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d030      	beq.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d129      	bne.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d122      	bne.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d119      	bne.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d10f      	bne.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e03f      	b.n	800288e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fccc 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	; 0x24
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800283e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fddf 	bl	8003404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	; 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d17c      	bne.n	80029b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Transmit+0x2c>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e075      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_UART_Transmit+0x3e>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e06e      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2221      	movs	r2, #33	; 0x21
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ea:	f7fe fe0b 	bl	8001504 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d108      	bne.n	8002918 <HAL_UART_Transmit+0x82>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e003      	b.n	8002920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002928:	e02a      	b.n	8002980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fb1f 	bl	8002f78 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e036      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	3302      	adds	r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e007      	b.n	8002972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cf      	bne.n	800292a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 faef 	bl	8002f78 <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e006      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d11d      	bne.n	8002a10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Receive_IT+0x26>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e016      	b.n	8002a12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Receive_IT+0x38>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e00f      	b.n	8002a12 <HAL_UART_Receive_IT+0x58>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fb24 	bl	8003054 <UART_Start_Receive_IT>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e000      	b.n	8002a12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0ba      	sub	sp, #232	; 0xe8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_UART_IRQHandler+0x66>
 8002a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fc07 	bl	800328e <UART_Receive_IT>
      return;
 8002a80:	e256      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80de 	beq.w	8002c48 <HAL_UART_IRQHandler+0x22c>
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80d1 	beq.w	8002c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_UART_IRQHandler+0xae>
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_UART_IRQHandler+0xd2>
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0202 	orr.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xf6>
 8002afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_UART_IRQHandler+0x126>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0208 	orr.w	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 81ed 	beq.w	8002f26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_UART_IRQHandler+0x14e>
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fb92 	bl	800328e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_UART_IRQHandler+0x17a>
 8002b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04f      	beq.n	8002c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa9a 	bl	80030d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d141      	bne.n	8002c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1d9      	bne.n	8002baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_UART_IRQHandler+0x3dc>)
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fe07 	bl	800181e <HAL_DMA_Abort_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c20:	4610      	mov	r0, r2
 8002c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00e      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f990 	bl	8002f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00a      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f98c 	bl	8002f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e006      	b.n	8002c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f988 	bl	8002f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c42:	e170      	b.n	8002f26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	bf00      	nop
    return;
 8002c46:	e16e      	b.n	8002f26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 814a 	bne.w	8002ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8143 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 813c 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	f040 80b4 	bne.w	8002dfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8140 	beq.w	8002f2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	f080 8139 	bcs.w	8002f2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	f000 8088 	beq.w	8002dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d9      	bne.n	8002cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3314      	adds	r3, #20
 8002d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e1      	bne.n	8002d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	f023 0310 	bic.w	r3, r3, #16
 8002db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e3      	bne.n	8002d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fcb0 	bl	800173e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8b6 	bl	8002f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002df4:	e099      	b.n	8002f2a <HAL_UART_IRQHandler+0x50e>
 8002df6:	bf00      	nop
 8002df8:	08003197 	.word	0x08003197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 808b 	beq.w	8002f2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8086 	beq.w	8002f2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e46:	647a      	str	r2, [r7, #68]	; 0x44
 8002e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e3      	bne.n	8002e22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3314      	adds	r3, #20
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	623b      	str	r3, [r7, #32]
   return(result);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e3      	bne.n	8002e5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0310 	bic.w	r3, r3, #16
 8002eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e3      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f83e 	bl	8002f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee4:	e023      	b.n	8002f2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_UART_IRQHandler+0x4ea>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f95d 	bl	80031be <UART_Transmit_IT>
    return;
 8002f04:	e014      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00e      	beq.n	8002f30 <HAL_UART_IRQHandler+0x514>
 8002f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f99d 	bl	800325e <UART_EndTransmit_IT>
    return;
 8002f24:	e004      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
    return;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
      return;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <HAL_UART_IRQHandler+0x514>
      return;
 8002f2e:	bf00      	nop
  }
}
 8002f30:	37e8      	adds	r7, #232	; 0xe8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop

08002f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b090      	sub	sp, #64	; 0x40
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f88:	e050      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d04c      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f98:	f7fe fab4 	bl	8001504 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d241      	bcs.n	800302c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc8:	637a      	str	r2, [r7, #52]	; 0x34
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	613b      	str	r3, [r7, #16]
   return(result);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffc:	623a      	str	r2, [r7, #32]
 8002ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	69f9      	ldr	r1, [r7, #28]
 8003002:	6a3a      	ldr	r2, [r7, #32]
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	61bb      	str	r3, [r7, #24]
   return(result);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e5      	bne.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e00f      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	429a      	cmp	r2, r3
 8003048:	d09f      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3740      	adds	r7, #64	; 0x40
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2222      	movs	r2, #34	; 0x22
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0220 	orr.w	r2, r2, #32
 80030c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b095      	sub	sp, #84	; 0x54
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f8:	643a      	str	r2, [r7, #64]	; 0x40
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	61fb      	str	r3, [r7, #28]
   return(result);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	2b01      	cmp	r3, #1
 8003146:	d119      	bne.n	800317c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	60bb      	str	r3, [r7, #8]
   return(result);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f023 0310 	bic.w	r3, r3, #16
 800315e:	647b      	str	r3, [r7, #68]	; 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003168:	61ba      	str	r2, [r7, #24]
 800316a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	613b      	str	r3, [r7, #16]
   return(result);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e5      	bne.n	8003148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800318a:	bf00      	nop
 800318c:	3754      	adds	r7, #84	; 0x54
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7ff fecb 	bl	8002f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b21      	cmp	r3, #33	; 0x21
 80031d0:	d13e      	bne.n	8003250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	d114      	bne.n	8003206 <UART_Transmit_IT+0x48>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	1c9a      	adds	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]
 8003204:	e008      	b.n	8003218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6211      	str	r1, [r2, #32]
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29b      	uxth	r3, r3
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4619      	mov	r1, r3
 8003226:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10f      	bne.n	800324c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fe5a 	bl	8002f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08c      	sub	sp, #48	; 0x30
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b22      	cmp	r3, #34	; 0x22
 80032a0:	f040 80ab 	bne.w	80033fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d117      	bne.n	80032de <UART_Receive_IT+0x50>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d113      	bne.n	80032de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	e026      	b.n	800332c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d007      	beq.n	8003302 <UART_Receive_IT+0x74>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <UART_Receive_IT+0x82>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e008      	b.n	8003322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	b2da      	uxtb	r2, r3
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4619      	mov	r1, r3
 800333a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800333c:	2b00      	cmp	r3, #0
 800333e:	d15a      	bne.n	80033f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0220 	bic.w	r2, r2, #32
 800334e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	2b01      	cmp	r3, #1
 800337e:	d135      	bne.n	80033ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	613b      	str	r3, [r7, #16]
   return(result);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f023 0310 	bic.w	r3, r3, #16
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	623a      	str	r2, [r7, #32]
 80033a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	69f9      	ldr	r1, [r7, #28]
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d10a      	bne.n	80033de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fdbb 	bl	8002f60 <HAL_UARTEx_RxEventCallback>
 80033ea:	e002      	b.n	80033f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fd faaf 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e002      	b.n	80033fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3730      	adds	r7, #48	; 0x30
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b0c0      	sub	sp, #256	; 0x100
 800340a:	af00      	add	r7, sp, #0
 800340c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	ea40 0301 	orr.w	r3, r0, r1
 800342c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	431a      	orrs	r2, r3
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800345c:	f021 010c 	bic.w	r1, r1, #12
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346a:	430b      	orrs	r3, r1
 800346c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	6999      	ldr	r1, [r3, #24]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	ea40 0301 	orr.w	r3, r0, r1
 800348a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <UART_SetConfig+0x2cc>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <UART_SetConfig+0xa0>
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <UART_SetConfig+0x2d0>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d104      	bne.n	80034ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7fe fcc8 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80034a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034ac:	e003      	b.n	80034b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ae:	f7fe fcaf 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 80034b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c0:	f040 810c 	bne.w	80036dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034de:	415b      	adcs	r3, r3
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034e6:	4621      	mov	r1, r4
 80034e8:	eb12 0801 	adds.w	r8, r2, r1
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb43 0901 	adc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003514:	462b      	mov	r3, r5
 8003516:	eb49 0303 	adc.w	r3, r9, r3
 800351a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800352e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003532:	460b      	mov	r3, r1
 8003534:	18db      	adds	r3, r3, r3
 8003536:	653b      	str	r3, [r7, #80]	; 0x50
 8003538:	4613      	mov	r3, r2
 800353a:	eb42 0303 	adc.w	r3, r2, r3
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
 8003540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003548:	f7fc feb2 	bl	80002b0 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <UART_SetConfig+0x2d4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011c      	lsls	r4, r3, #4
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	64b9      	str	r1, [r7, #72]	; 0x48
 8003574:	415b      	adcs	r3, r3
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800357c:	4641      	mov	r1, r8
 800357e:	eb12 0a01 	adds.w	sl, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb43 0b01 	adc.w	fp, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	4692      	mov	sl, r2
 800359e:	469b      	mov	fp, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	eb1a 0303 	adds.w	r3, sl, r3
 80035a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb4b 0303 	adc.w	r3, fp, r3
 80035b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035c8:	460b      	mov	r3, r1
 80035ca:	18db      	adds	r3, r3, r3
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
 80035ce:	4613      	mov	r3, r2
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
 80035d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035de:	f7fc fe67 	bl	80002b0 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <UART_SetConfig+0x2d4>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2264      	movs	r2, #100	; 0x64
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <UART_SetConfig+0x2d4>)
 8003600:	fba3 2302 	umull	r2, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800360c:	441c      	add	r4, r3
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800361c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	63b9      	str	r1, [r7, #56]	; 0x38
 8003628:	415b      	adcs	r3, r3
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6339      	str	r1, [r7, #48]	; 0x30
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003664:	464b      	mov	r3, r9
 8003666:	460a      	mov	r2, r1
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800367c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369a:	f7fc fe09 	bl	80002b0 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <UART_SetConfig+0x2d4>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	2164      	movs	r1, #100	; 0x64
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	3332      	adds	r3, #50	; 0x32
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <UART_SetConfig+0x2d4>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f003 0207 	and.w	r2, r3, #7
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4422      	add	r2, r4
 80036ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036cc:	e105      	b.n	80038da <UART_SetConfig+0x4d6>
 80036ce:	bf00      	nop
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011400 	.word	0x40011400
 80036d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ee:	4642      	mov	r2, r8
 80036f0:	464b      	mov	r3, r9
 80036f2:	1891      	adds	r1, r2, r2
 80036f4:	6239      	str	r1, [r7, #32]
 80036f6:	415b      	adcs	r3, r3
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fe:	4641      	mov	r1, r8
 8003700:	1854      	adds	r4, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb43 0501 	adc.w	r5, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003724:	464b      	mov	r3, r9
 8003726:	eb45 0303 	adc.w	r3, r5, r3
 800372a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374a:	4629      	mov	r1, r5
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	4621      	mov	r1, r4
 8003750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003754:	4621      	mov	r1, r4
 8003756:	008a      	lsls	r2, r1, #2
 8003758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800375c:	f7fc fda8 	bl	80002b0 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <UART_SetConfig+0x4e4>)
 8003766:	fba3 2302 	umull	r2, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	011c      	lsls	r4, r3, #4
 800376e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800377c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003780:	4642      	mov	r2, r8
 8003782:	464b      	mov	r3, r9
 8003784:	1891      	adds	r1, r2, r2
 8003786:	61b9      	str	r1, [r7, #24]
 8003788:	415b      	adcs	r3, r3
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003790:	4641      	mov	r1, r8
 8003792:	1851      	adds	r1, r2, r1
 8003794:	6139      	str	r1, [r7, #16]
 8003796:	4649      	mov	r1, r9
 8003798:	414b      	adcs	r3, r1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a8:	4659      	mov	r1, fp
 80037aa:	00cb      	lsls	r3, r1, #3
 80037ac:	4651      	mov	r1, sl
 80037ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b2:	4651      	mov	r1, sl
 80037b4:	00ca      	lsls	r2, r1, #3
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	4642      	mov	r2, r8
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c4:	464b      	mov	r3, r9
 80037c6:	460a      	mov	r2, r1
 80037c8:	eb42 0303 	adc.w	r3, r2, r3
 80037cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037e8:	4649      	mov	r1, r9
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f2:	4641      	mov	r1, r8
 80037f4:	008a      	lsls	r2, r1, #2
 80037f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fa:	f7fc fd59 	bl	80002b0 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <UART_SetConfig+0x4e4>)
 8003804:	fba3 1302 	umull	r1, r3, r3, r2
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	2164      	movs	r1, #100	; 0x64
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	3332      	adds	r3, #50	; 0x32
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <UART_SetConfig+0x4e4>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003822:	441c      	add	r4, r3
 8003824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003828:	2200      	movs	r2, #0
 800382a:	673b      	str	r3, [r7, #112]	; 0x70
 800382c:	677a      	str	r2, [r7, #116]	; 0x74
 800382e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003832:	4642      	mov	r2, r8
 8003834:	464b      	mov	r3, r9
 8003836:	1891      	adds	r1, r2, r2
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	415b      	adcs	r3, r3
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003842:	4641      	mov	r1, r8
 8003844:	1851      	adds	r1, r2, r1
 8003846:	6039      	str	r1, [r7, #0]
 8003848:	4649      	mov	r1, r9
 800384a:	414b      	adcs	r3, r1
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385a:	4659      	mov	r1, fp
 800385c:	00cb      	lsls	r3, r1, #3
 800385e:	4651      	mov	r1, sl
 8003860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003864:	4651      	mov	r1, sl
 8003866:	00ca      	lsls	r2, r1, #3
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	4603      	mov	r3, r0
 800386e:	4642      	mov	r2, r8
 8003870:	189b      	adds	r3, r3, r2
 8003872:	66bb      	str	r3, [r7, #104]	; 0x68
 8003874:	464b      	mov	r3, r9
 8003876:	460a      	mov	r2, r1
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	663b      	str	r3, [r7, #96]	; 0x60
 8003888:	667a      	str	r2, [r7, #100]	; 0x64
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003896:	4649      	mov	r1, r9
 8003898:	008b      	lsls	r3, r1, #2
 800389a:	4641      	mov	r1, r8
 800389c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a0:	4641      	mov	r1, r8
 80038a2:	008a      	lsls	r2, r1, #2
 80038a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038a8:	f7fc fd02 	bl	80002b0 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <UART_SetConfig+0x4e4>)
 80038b2:	fba3 1302 	umull	r1, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2164      	movs	r1, #100	; 0x64
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	3332      	adds	r3, #50	; 0x32
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <UART_SetConfig+0x4e4>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	f003 020f 	and.w	r2, r3, #15
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4422      	add	r2, r4
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e6:	bf00      	nop
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 fc8e 	bl	800422c <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	080042e0 	.word	0x080042e0
 8003934:	080042e0 	.word	0x080042e0
 8003938:	080042e0 	.word	0x080042e0
 800393c:	080042e4 	.word	0x080042e4

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <siprintf>:
 8003950:	b40e      	push	{r1, r2, r3}
 8003952:	b500      	push	{lr}
 8003954:	b09c      	sub	sp, #112	; 0x70
 8003956:	ab1d      	add	r3, sp, #116	; 0x74
 8003958:	9002      	str	r0, [sp, #8]
 800395a:	9006      	str	r0, [sp, #24]
 800395c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003960:	4809      	ldr	r0, [pc, #36]	; (8003988 <siprintf+0x38>)
 8003962:	9107      	str	r1, [sp, #28]
 8003964:	9104      	str	r1, [sp, #16]
 8003966:	4909      	ldr	r1, [pc, #36]	; (800398c <siprintf+0x3c>)
 8003968:	f853 2b04 	ldr.w	r2, [r3], #4
 800396c:	9105      	str	r1, [sp, #20]
 800396e:	6800      	ldr	r0, [r0, #0]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	a902      	add	r1, sp, #8
 8003974:	f000 f868 	bl	8003a48 <_svfiprintf_r>
 8003978:	9b02      	ldr	r3, [sp, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	b01c      	add	sp, #112	; 0x70
 8003980:	f85d eb04 	ldr.w	lr, [sp], #4
 8003984:	b003      	add	sp, #12
 8003986:	4770      	bx	lr
 8003988:	20000014 	.word	0x20000014
 800398c:	ffff0208 	.word	0xffff0208

08003990 <__ssputs_r>:
 8003990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	688e      	ldr	r6, [r1, #8]
 8003996:	429e      	cmp	r6, r3
 8003998:	4682      	mov	sl, r0
 800399a:	460c      	mov	r4, r1
 800399c:	4690      	mov	r8, r2
 800399e:	461f      	mov	r7, r3
 80039a0:	d838      	bhi.n	8003a14 <__ssputs_r+0x84>
 80039a2:	898a      	ldrh	r2, [r1, #12]
 80039a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039a8:	d032      	beq.n	8003a10 <__ssputs_r+0x80>
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	6909      	ldr	r1, [r1, #16]
 80039ae:	eba5 0901 	sub.w	r9, r5, r1
 80039b2:	6965      	ldr	r5, [r4, #20]
 80039b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039bc:	3301      	adds	r3, #1
 80039be:	444b      	add	r3, r9
 80039c0:	106d      	asrs	r5, r5, #1
 80039c2:	429d      	cmp	r5, r3
 80039c4:	bf38      	it	cc
 80039c6:	461d      	movcc	r5, r3
 80039c8:	0553      	lsls	r3, r2, #21
 80039ca:	d531      	bpl.n	8003a30 <__ssputs_r+0xa0>
 80039cc:	4629      	mov	r1, r5
 80039ce:	f000 fb63 	bl	8004098 <_malloc_r>
 80039d2:	4606      	mov	r6, r0
 80039d4:	b950      	cbnz	r0, 80039ec <__ssputs_r+0x5c>
 80039d6:	230c      	movs	r3, #12
 80039d8:	f8ca 3000 	str.w	r3, [sl]
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e2:	81a3      	strh	r3, [r4, #12]
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ec:	6921      	ldr	r1, [r4, #16]
 80039ee:	464a      	mov	r2, r9
 80039f0:	f000 fabe 	bl	8003f70 <memcpy>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	6126      	str	r6, [r4, #16]
 8003a02:	6165      	str	r5, [r4, #20]
 8003a04:	444e      	add	r6, r9
 8003a06:	eba5 0509 	sub.w	r5, r5, r9
 8003a0a:	6026      	str	r6, [r4, #0]
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	463e      	mov	r6, r7
 8003a10:	42be      	cmp	r6, r7
 8003a12:	d900      	bls.n	8003a16 <__ssputs_r+0x86>
 8003a14:	463e      	mov	r6, r7
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	4632      	mov	r2, r6
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	f000 fab6 	bl	8003f8c <memmove>
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	1b9b      	subs	r3, r3, r6
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	4433      	add	r3, r6
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e7db      	b.n	80039e8 <__ssputs_r+0x58>
 8003a30:	462a      	mov	r2, r5
 8003a32:	f000 fba5 	bl	8004180 <_realloc_r>
 8003a36:	4606      	mov	r6, r0
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d1e1      	bne.n	8003a00 <__ssputs_r+0x70>
 8003a3c:	6921      	ldr	r1, [r4, #16]
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f000 fabe 	bl	8003fc0 <_free_r>
 8003a44:	e7c7      	b.n	80039d6 <__ssputs_r+0x46>
	...

08003a48 <_svfiprintf_r>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	898b      	ldrh	r3, [r1, #12]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	b09d      	sub	sp, #116	; 0x74
 8003a54:	4607      	mov	r7, r0
 8003a56:	460d      	mov	r5, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	d50e      	bpl.n	8003a7a <_svfiprintf_r+0x32>
 8003a5c:	690b      	ldr	r3, [r1, #16]
 8003a5e:	b963      	cbnz	r3, 8003a7a <_svfiprintf_r+0x32>
 8003a60:	2140      	movs	r1, #64	; 0x40
 8003a62:	f000 fb19 	bl	8004098 <_malloc_r>
 8003a66:	6028      	str	r0, [r5, #0]
 8003a68:	6128      	str	r0, [r5, #16]
 8003a6a:	b920      	cbnz	r0, 8003a76 <_svfiprintf_r+0x2e>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e0d1      	b.n	8003c1a <_svfiprintf_r+0x1d2>
 8003a76:	2340      	movs	r3, #64	; 0x40
 8003a78:	616b      	str	r3, [r5, #20]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7e:	2320      	movs	r3, #32
 8003a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a88:	2330      	movs	r3, #48	; 0x30
 8003a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c34 <_svfiprintf_r+0x1ec>
 8003a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	4623      	mov	r3, r4
 8003a98:	469a      	mov	sl, r3
 8003a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a9e:	b10a      	cbz	r2, 8003aa4 <_svfiprintf_r+0x5c>
 8003aa0:	2a25      	cmp	r2, #37	; 0x25
 8003aa2:	d1f9      	bne.n	8003a98 <_svfiprintf_r+0x50>
 8003aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8003aa8:	d00b      	beq.n	8003ac2 <_svfiprintf_r+0x7a>
 8003aaa:	465b      	mov	r3, fp
 8003aac:	4622      	mov	r2, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7ff ff6d 	bl	8003990 <__ssputs_r>
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	f000 80aa 	beq.w	8003c10 <_svfiprintf_r+0x1c8>
 8003abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003abe:	445a      	add	r2, fp
 8003ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a2 	beq.w	8003c10 <_svfiprintf_r+0x1c8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ad6:	f10a 0a01 	add.w	sl, sl, #1
 8003ada:	9304      	str	r3, [sp, #16]
 8003adc:	9307      	str	r3, [sp, #28]
 8003ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ae4:	4654      	mov	r4, sl
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aec:	4851      	ldr	r0, [pc, #324]	; (8003c34 <_svfiprintf_r+0x1ec>)
 8003aee:	f7fc fb8f 	bl	8000210 <memchr>
 8003af2:	9a04      	ldr	r2, [sp, #16]
 8003af4:	b9d8      	cbnz	r0, 8003b2e <_svfiprintf_r+0xe6>
 8003af6:	06d0      	lsls	r0, r2, #27
 8003af8:	bf44      	itt	mi
 8003afa:	2320      	movmi	r3, #32
 8003afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b00:	0711      	lsls	r1, r2, #28
 8003b02:	bf44      	itt	mi
 8003b04:	232b      	movmi	r3, #43	; 0x2b
 8003b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b10:	d015      	beq.n	8003b3e <_svfiprintf_r+0xf6>
 8003b12:	9a07      	ldr	r2, [sp, #28]
 8003b14:	4654      	mov	r4, sl
 8003b16:	2000      	movs	r0, #0
 8003b18:	f04f 0c0a 	mov.w	ip, #10
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b22:	3b30      	subs	r3, #48	; 0x30
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	d94e      	bls.n	8003bc6 <_svfiprintf_r+0x17e>
 8003b28:	b1b0      	cbz	r0, 8003b58 <_svfiprintf_r+0x110>
 8003b2a:	9207      	str	r2, [sp, #28]
 8003b2c:	e014      	b.n	8003b58 <_svfiprintf_r+0x110>
 8003b2e:	eba0 0308 	sub.w	r3, r0, r8
 8003b32:	fa09 f303 	lsl.w	r3, r9, r3
 8003b36:	4313      	orrs	r3, r2
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	46a2      	mov	sl, r4
 8003b3c:	e7d2      	b.n	8003ae4 <_svfiprintf_r+0x9c>
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	1d19      	adds	r1, r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	9103      	str	r1, [sp, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfbb      	ittet	lt
 8003b4a:	425b      	neglt	r3, r3
 8003b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b50:	9307      	strge	r3, [sp, #28]
 8003b52:	9307      	strlt	r3, [sp, #28]
 8003b54:	bfb8      	it	lt
 8003b56:	9204      	strlt	r2, [sp, #16]
 8003b58:	7823      	ldrb	r3, [r4, #0]
 8003b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b5c:	d10c      	bne.n	8003b78 <_svfiprintf_r+0x130>
 8003b5e:	7863      	ldrb	r3, [r4, #1]
 8003b60:	2b2a      	cmp	r3, #42	; 0x2a
 8003b62:	d135      	bne.n	8003bd0 <_svfiprintf_r+0x188>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	1d1a      	adds	r2, r3, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	9203      	str	r2, [sp, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bfb8      	it	lt
 8003b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b74:	3402      	adds	r4, #2
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c44 <_svfiprintf_r+0x1fc>
 8003b7c:	7821      	ldrb	r1, [r4, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4650      	mov	r0, sl
 8003b82:	f7fc fb45 	bl	8000210 <memchr>
 8003b86:	b140      	cbz	r0, 8003b9a <_svfiprintf_r+0x152>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	eba0 000a 	sub.w	r0, r0, sl
 8003b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	4303      	orrs	r3, r0
 8003b96:	3401      	adds	r4, #1
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b9e:	4826      	ldr	r0, [pc, #152]	; (8003c38 <_svfiprintf_r+0x1f0>)
 8003ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f7fc fb33 	bl	8000210 <memchr>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d038      	beq.n	8003c20 <_svfiprintf_r+0x1d8>
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <_svfiprintf_r+0x1f4>)
 8003bb0:	bb1b      	cbnz	r3, 8003bfa <_svfiprintf_r+0x1b2>
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	3307      	adds	r3, #7
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	3308      	adds	r3, #8
 8003bbc:	9303      	str	r3, [sp, #12]
 8003bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc0:	4433      	add	r3, r6
 8003bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc4:	e767      	b.n	8003a96 <_svfiprintf_r+0x4e>
 8003bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bca:	460c      	mov	r4, r1
 8003bcc:	2001      	movs	r0, #1
 8003bce:	e7a5      	b.n	8003b1c <_svfiprintf_r+0xd4>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be2:	3a30      	subs	r2, #48	; 0x30
 8003be4:	2a09      	cmp	r2, #9
 8003be6:	d903      	bls.n	8003bf0 <_svfiprintf_r+0x1a8>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0c5      	beq.n	8003b78 <_svfiprintf_r+0x130>
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	e7c3      	b.n	8003b78 <_svfiprintf_r+0x130>
 8003bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7f0      	b.n	8003bdc <_svfiprintf_r+0x194>
 8003bfa:	ab03      	add	r3, sp, #12
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	462a      	mov	r2, r5
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_svfiprintf_r+0x1f8>)
 8003c02:	a904      	add	r1, sp, #16
 8003c04:	4638      	mov	r0, r7
 8003c06:	f3af 8000 	nop.w
 8003c0a:	1c42      	adds	r2, r0, #1
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	d1d6      	bne.n	8003bbe <_svfiprintf_r+0x176>
 8003c10:	89ab      	ldrh	r3, [r5, #12]
 8003c12:	065b      	lsls	r3, r3, #25
 8003c14:	f53f af2c 	bmi.w	8003a70 <_svfiprintf_r+0x28>
 8003c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c1a:	b01d      	add	sp, #116	; 0x74
 8003c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c20:	ab03      	add	r3, sp, #12
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	462a      	mov	r2, r5
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <_svfiprintf_r+0x1f8>)
 8003c28:	a904      	add	r1, sp, #16
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f000 f87a 	bl	8003d24 <_printf_i>
 8003c30:	e7eb      	b.n	8003c0a <_svfiprintf_r+0x1c2>
 8003c32:	bf00      	nop
 8003c34:	080042a4 	.word	0x080042a4
 8003c38:	080042ae 	.word	0x080042ae
 8003c3c:	00000000 	.word	0x00000000
 8003c40:	08003991 	.word	0x08003991
 8003c44:	080042aa 	.word	0x080042aa

08003c48 <_printf_common>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4616      	mov	r6, r2
 8003c4e:	4699      	mov	r9, r3
 8003c50:	688a      	ldr	r2, [r1, #8]
 8003c52:	690b      	ldr	r3, [r1, #16]
 8003c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bfb8      	it	lt
 8003c5c:	4613      	movlt	r3, r2
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c64:	4607      	mov	r7, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	b10a      	cbz	r2, 8003c6e <_printf_common+0x26>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0699      	lsls	r1, r3, #26
 8003c72:	bf42      	ittt	mi
 8003c74:	6833      	ldrmi	r3, [r6, #0]
 8003c76:	3302      	addmi	r3, #2
 8003c78:	6033      	strmi	r3, [r6, #0]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d106      	bne.n	8003c90 <_printf_common+0x48>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dc26      	bgt.n	8003cde <_printf_common+0x96>
 8003c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c94:	1e13      	subs	r3, r2, #0
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	bf18      	it	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	0692      	lsls	r2, r2, #26
 8003c9e:	d42b      	bmi.n	8003cf8 <_printf_common+0xb0>
 8003ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	47c0      	blx	r8
 8003caa:	3001      	adds	r0, #1
 8003cac:	d01e      	beq.n	8003cec <_printf_common+0xa4>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	68e5      	ldr	r5, [r4, #12]
 8003cb2:	6832      	ldr	r2, [r6, #0]
 8003cb4:	f003 0306 	and.w	r3, r3, #6
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	bf08      	it	eq
 8003cbc:	1aad      	subeq	r5, r5, r2
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	6922      	ldr	r2, [r4, #16]
 8003cc2:	bf0c      	ite	eq
 8003cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc8:	2500      	movne	r5, #0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bfc4      	itt	gt
 8003cce:	1a9b      	subgt	r3, r3, r2
 8003cd0:	18ed      	addgt	r5, r5, r3
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	341a      	adds	r4, #26
 8003cd6:	42b5      	cmp	r5, r6
 8003cd8:	d11a      	bne.n	8003d10 <_printf_common+0xc8>
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e008      	b.n	8003cf0 <_printf_common+0xa8>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4652      	mov	r2, sl
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	47c0      	blx	r8
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d103      	bne.n	8003cf4 <_printf_common+0xac>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf4:	3501      	adds	r5, #1
 8003cf6:	e7c6      	b.n	8003c86 <_printf_common+0x3e>
 8003cf8:	18e1      	adds	r1, r4, r3
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	2030      	movs	r0, #48	; 0x30
 8003cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d02:	4422      	add	r2, r4
 8003d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	e7c7      	b.n	8003ca0 <_printf_common+0x58>
 8003d10:	2301      	movs	r3, #1
 8003d12:	4622      	mov	r2, r4
 8003d14:	4649      	mov	r1, r9
 8003d16:	4638      	mov	r0, r7
 8003d18:	47c0      	blx	r8
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d0e6      	beq.n	8003cec <_printf_common+0xa4>
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7d9      	b.n	8003cd6 <_printf_common+0x8e>
	...

08003d24 <_printf_i>:
 8003d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d28:	7e0f      	ldrb	r7, [r1, #24]
 8003d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d2c:	2f78      	cmp	r7, #120	; 0x78
 8003d2e:	4691      	mov	r9, r2
 8003d30:	4680      	mov	r8, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	469a      	mov	sl, r3
 8003d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d3a:	d807      	bhi.n	8003d4c <_printf_i+0x28>
 8003d3c:	2f62      	cmp	r7, #98	; 0x62
 8003d3e:	d80a      	bhi.n	8003d56 <_printf_i+0x32>
 8003d40:	2f00      	cmp	r7, #0
 8003d42:	f000 80d8 	beq.w	8003ef6 <_printf_i+0x1d2>
 8003d46:	2f58      	cmp	r7, #88	; 0x58
 8003d48:	f000 80a3 	beq.w	8003e92 <_printf_i+0x16e>
 8003d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d54:	e03a      	b.n	8003dcc <_printf_i+0xa8>
 8003d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d5a:	2b15      	cmp	r3, #21
 8003d5c:	d8f6      	bhi.n	8003d4c <_printf_i+0x28>
 8003d5e:	a101      	add	r1, pc, #4	; (adr r1, 8003d64 <_printf_i+0x40>)
 8003d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003dd1 	.word	0x08003dd1
 8003d6c:	08003d4d 	.word	0x08003d4d
 8003d70:	08003d4d 	.word	0x08003d4d
 8003d74:	08003d4d 	.word	0x08003d4d
 8003d78:	08003d4d 	.word	0x08003d4d
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003d4d 	.word	0x08003d4d
 8003d84:	08003d4d 	.word	0x08003d4d
 8003d88:	08003d4d 	.word	0x08003d4d
 8003d8c:	08003d4d 	.word	0x08003d4d
 8003d90:	08003edd 	.word	0x08003edd
 8003d94:	08003e01 	.word	0x08003e01
 8003d98:	08003ebf 	.word	0x08003ebf
 8003d9c:	08003d4d 	.word	0x08003d4d
 8003da0:	08003d4d 	.word	0x08003d4d
 8003da4:	08003eff 	.word	0x08003eff
 8003da8:	08003d4d 	.word	0x08003d4d
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003d4d 	.word	0x08003d4d
 8003db4:	08003d4d 	.word	0x08003d4d
 8003db8:	08003ec7 	.word	0x08003ec7
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	602a      	str	r2, [r5, #0]
 8003dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0a3      	b.n	8003f18 <_printf_i+0x1f4>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	6829      	ldr	r1, [r5, #0]
 8003dd4:	0606      	lsls	r6, r0, #24
 8003dd6:	f101 0304 	add.w	r3, r1, #4
 8003dda:	d50a      	bpl.n	8003df2 <_printf_i+0xce>
 8003ddc:	680e      	ldr	r6, [r1, #0]
 8003dde:	602b      	str	r3, [r5, #0]
 8003de0:	2e00      	cmp	r6, #0
 8003de2:	da03      	bge.n	8003dec <_printf_i+0xc8>
 8003de4:	232d      	movs	r3, #45	; 0x2d
 8003de6:	4276      	negs	r6, r6
 8003de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dec:	485e      	ldr	r0, [pc, #376]	; (8003f68 <_printf_i+0x244>)
 8003dee:	230a      	movs	r3, #10
 8003df0:	e019      	b.n	8003e26 <_printf_i+0x102>
 8003df2:	680e      	ldr	r6, [r1, #0]
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dfa:	bf18      	it	ne
 8003dfc:	b236      	sxthne	r6, r6
 8003dfe:	e7ef      	b.n	8003de0 <_printf_i+0xbc>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	1d19      	adds	r1, r3, #4
 8003e06:	6029      	str	r1, [r5, #0]
 8003e08:	0601      	lsls	r1, r0, #24
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0xec>
 8003e0c:	681e      	ldr	r6, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0xf2>
 8003e10:	0646      	lsls	r6, r0, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0xe8>
 8003e14:	881e      	ldrh	r6, [r3, #0]
 8003e16:	4854      	ldr	r0, [pc, #336]	; (8003f68 <_printf_i+0x244>)
 8003e18:	2f6f      	cmp	r7, #111	; 0x6f
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	230a      	movne	r3, #10
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e26:	6865      	ldr	r5, [r4, #4]
 8003e28:	60a5      	str	r5, [r4, #8]
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	bfa2      	ittt	ge
 8003e2e:	6821      	ldrge	r1, [r4, #0]
 8003e30:	f021 0104 	bicge.w	r1, r1, #4
 8003e34:	6021      	strge	r1, [r4, #0]
 8003e36:	b90e      	cbnz	r6, 8003e3c <_printf_i+0x118>
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	d04d      	beq.n	8003ed8 <_printf_i+0x1b4>
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e42:	fb03 6711 	mls	r7, r3, r1, r6
 8003e46:	5dc7      	ldrb	r7, [r0, r7]
 8003e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e4c:	4637      	mov	r7, r6
 8003e4e:	42bb      	cmp	r3, r7
 8003e50:	460e      	mov	r6, r1
 8003e52:	d9f4      	bls.n	8003e3e <_printf_i+0x11a>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10b      	bne.n	8003e70 <_printf_i+0x14c>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	07de      	lsls	r6, r3, #31
 8003e5c:	d508      	bpl.n	8003e70 <_printf_i+0x14c>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	6861      	ldr	r1, [r4, #4]
 8003e62:	4299      	cmp	r1, r3
 8003e64:	bfde      	ittt	le
 8003e66:	2330      	movle	r3, #48	; 0x30
 8003e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e70:	1b52      	subs	r2, r2, r5
 8003e72:	6122      	str	r2, [r4, #16]
 8003e74:	f8cd a000 	str.w	sl, [sp]
 8003e78:	464b      	mov	r3, r9
 8003e7a:	aa03      	add	r2, sp, #12
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f7ff fee2 	bl	8003c48 <_printf_common>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d14c      	bne.n	8003f22 <_printf_i+0x1fe>
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	b004      	add	sp, #16
 8003e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e92:	4835      	ldr	r0, [pc, #212]	; (8003f68 <_printf_i+0x244>)
 8003e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e98:	6829      	ldr	r1, [r5, #0]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ea0:	6029      	str	r1, [r5, #0]
 8003ea2:	061d      	lsls	r5, r3, #24
 8003ea4:	d514      	bpl.n	8003ed0 <_printf_i+0x1ac>
 8003ea6:	07df      	lsls	r7, r3, #31
 8003ea8:	bf44      	itt	mi
 8003eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8003eae:	6023      	strmi	r3, [r4, #0]
 8003eb0:	b91e      	cbnz	r6, 8003eba <_printf_i+0x196>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f023 0320 	bic.w	r3, r3, #32
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	2310      	movs	r3, #16
 8003ebc:	e7b0      	b.n	8003e20 <_printf_i+0xfc>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	2378      	movs	r3, #120	; 0x78
 8003ec8:	4828      	ldr	r0, [pc, #160]	; (8003f6c <_printf_i+0x248>)
 8003eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ece:	e7e3      	b.n	8003e98 <_printf_i+0x174>
 8003ed0:	0659      	lsls	r1, r3, #25
 8003ed2:	bf48      	it	mi
 8003ed4:	b2b6      	uxthmi	r6, r6
 8003ed6:	e7e6      	b.n	8003ea6 <_printf_i+0x182>
 8003ed8:	4615      	mov	r5, r2
 8003eda:	e7bb      	b.n	8003e54 <_printf_i+0x130>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	6826      	ldr	r6, [r4, #0]
 8003ee0:	6961      	ldr	r1, [r4, #20]
 8003ee2:	1d18      	adds	r0, r3, #4
 8003ee4:	6028      	str	r0, [r5, #0]
 8003ee6:	0635      	lsls	r5, r6, #24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	d501      	bpl.n	8003ef0 <_printf_i+0x1cc>
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <_printf_i+0x1d2>
 8003ef0:	0670      	lsls	r0, r6, #25
 8003ef2:	d5fb      	bpl.n	8003eec <_printf_i+0x1c8>
 8003ef4:	8019      	strh	r1, [r3, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	4615      	mov	r5, r2
 8003efc:	e7ba      	b.n	8003e74 <_printf_i+0x150>
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	602a      	str	r2, [r5, #0]
 8003f04:	681d      	ldr	r5, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f7fc f980 	bl	8000210 <memchr>
 8003f10:	b108      	cbz	r0, 8003f16 <_printf_i+0x1f2>
 8003f12:	1b40      	subs	r0, r0, r5
 8003f14:	6060      	str	r0, [r4, #4]
 8003f16:	6863      	ldr	r3, [r4, #4]
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f20:	e7a8      	b.n	8003e74 <_printf_i+0x150>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	462a      	mov	r2, r5
 8003f26:	4649      	mov	r1, r9
 8003f28:	4640      	mov	r0, r8
 8003f2a:	47d0      	blx	sl
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d0ab      	beq.n	8003e88 <_printf_i+0x164>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	079b      	lsls	r3, r3, #30
 8003f34:	d413      	bmi.n	8003f5e <_printf_i+0x23a>
 8003f36:	68e0      	ldr	r0, [r4, #12]
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	4298      	cmp	r0, r3
 8003f3c:	bfb8      	it	lt
 8003f3e:	4618      	movlt	r0, r3
 8003f40:	e7a4      	b.n	8003e8c <_printf_i+0x168>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4632      	mov	r2, r6
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d09b      	beq.n	8003e88 <_printf_i+0x164>
 8003f50:	3501      	adds	r5, #1
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	9903      	ldr	r1, [sp, #12]
 8003f56:	1a5b      	subs	r3, r3, r1
 8003f58:	42ab      	cmp	r3, r5
 8003f5a:	dcf2      	bgt.n	8003f42 <_printf_i+0x21e>
 8003f5c:	e7eb      	b.n	8003f36 <_printf_i+0x212>
 8003f5e:	2500      	movs	r5, #0
 8003f60:	f104 0619 	add.w	r6, r4, #25
 8003f64:	e7f5      	b.n	8003f52 <_printf_i+0x22e>
 8003f66:	bf00      	nop
 8003f68:	080042b5 	.word	0x080042b5
 8003f6c:	080042c6 	.word	0x080042c6

08003f70 <memcpy>:
 8003f70:	440a      	add	r2, r1
 8003f72:	4291      	cmp	r1, r2
 8003f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f78:	d100      	bne.n	8003f7c <memcpy+0xc>
 8003f7a:	4770      	bx	lr
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f86:	4291      	cmp	r1, r2
 8003f88:	d1f9      	bne.n	8003f7e <memcpy+0xe>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <memmove>:
 8003f8c:	4288      	cmp	r0, r1
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	eb01 0402 	add.w	r4, r1, r2
 8003f94:	d902      	bls.n	8003f9c <memmove+0x10>
 8003f96:	4284      	cmp	r4, r0
 8003f98:	4623      	mov	r3, r4
 8003f9a:	d807      	bhi.n	8003fac <memmove+0x20>
 8003f9c:	1e43      	subs	r3, r0, #1
 8003f9e:	42a1      	cmp	r1, r4
 8003fa0:	d008      	beq.n	8003fb4 <memmove+0x28>
 8003fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003faa:	e7f8      	b.n	8003f9e <memmove+0x12>
 8003fac:	4402      	add	r2, r0
 8003fae:	4601      	mov	r1, r0
 8003fb0:	428a      	cmp	r2, r1
 8003fb2:	d100      	bne.n	8003fb6 <memmove+0x2a>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fbe:	e7f7      	b.n	8003fb0 <memmove+0x24>

08003fc0 <_free_r>:
 8003fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	d044      	beq.n	8004050 <_free_r+0x90>
 8003fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fca:	9001      	str	r0, [sp, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f1a1 0404 	sub.w	r4, r1, #4
 8003fd2:	bfb8      	it	lt
 8003fd4:	18e4      	addlt	r4, r4, r3
 8003fd6:	f000 f913 	bl	8004200 <__malloc_lock>
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <_free_r+0x94>)
 8003fdc:	9801      	ldr	r0, [sp, #4]
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	b933      	cbnz	r3, 8003ff0 <_free_r+0x30>
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	6014      	str	r4, [r2, #0]
 8003fe6:	b003      	add	sp, #12
 8003fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fec:	f000 b90e 	b.w	800420c <__malloc_unlock>
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d908      	bls.n	8004006 <_free_r+0x46>
 8003ff4:	6825      	ldr	r5, [r4, #0]
 8003ff6:	1961      	adds	r1, r4, r5
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	bf01      	itttt	eq
 8003ffc:	6819      	ldreq	r1, [r3, #0]
 8003ffe:	685b      	ldreq	r3, [r3, #4]
 8004000:	1949      	addeq	r1, r1, r5
 8004002:	6021      	streq	r1, [r4, #0]
 8004004:	e7ed      	b.n	8003fe2 <_free_r+0x22>
 8004006:	461a      	mov	r2, r3
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	b10b      	cbz	r3, 8004010 <_free_r+0x50>
 800400c:	42a3      	cmp	r3, r4
 800400e:	d9fa      	bls.n	8004006 <_free_r+0x46>
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	1855      	adds	r5, r2, r1
 8004014:	42a5      	cmp	r5, r4
 8004016:	d10b      	bne.n	8004030 <_free_r+0x70>
 8004018:	6824      	ldr	r4, [r4, #0]
 800401a:	4421      	add	r1, r4
 800401c:	1854      	adds	r4, r2, r1
 800401e:	42a3      	cmp	r3, r4
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	d1e0      	bne.n	8003fe6 <_free_r+0x26>
 8004024:	681c      	ldr	r4, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	6053      	str	r3, [r2, #4]
 800402a:	4421      	add	r1, r4
 800402c:	6011      	str	r1, [r2, #0]
 800402e:	e7da      	b.n	8003fe6 <_free_r+0x26>
 8004030:	d902      	bls.n	8004038 <_free_r+0x78>
 8004032:	230c      	movs	r3, #12
 8004034:	6003      	str	r3, [r0, #0]
 8004036:	e7d6      	b.n	8003fe6 <_free_r+0x26>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	1961      	adds	r1, r4, r5
 800403c:	428b      	cmp	r3, r1
 800403e:	bf04      	itt	eq
 8004040:	6819      	ldreq	r1, [r3, #0]
 8004042:	685b      	ldreq	r3, [r3, #4]
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	bf04      	itt	eq
 8004048:	1949      	addeq	r1, r1, r5
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	6054      	str	r4, [r2, #4]
 800404e:	e7ca      	b.n	8003fe6 <_free_r+0x26>
 8004050:	b003      	add	sp, #12
 8004052:	bd30      	pop	{r4, r5, pc}
 8004054:	2000027c 	.word	0x2000027c

08004058 <sbrk_aligned>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4e0e      	ldr	r6, [pc, #56]	; (8004094 <sbrk_aligned+0x3c>)
 800405c:	460c      	mov	r4, r1
 800405e:	6831      	ldr	r1, [r6, #0]
 8004060:	4605      	mov	r5, r0
 8004062:	b911      	cbnz	r1, 800406a <sbrk_aligned+0x12>
 8004064:	f000 f8bc 	bl	80041e0 <_sbrk_r>
 8004068:	6030      	str	r0, [r6, #0]
 800406a:	4621      	mov	r1, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f8b7 	bl	80041e0 <_sbrk_r>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	d00a      	beq.n	800408c <sbrk_aligned+0x34>
 8004076:	1cc4      	adds	r4, r0, #3
 8004078:	f024 0403 	bic.w	r4, r4, #3
 800407c:	42a0      	cmp	r0, r4
 800407e:	d007      	beq.n	8004090 <sbrk_aligned+0x38>
 8004080:	1a21      	subs	r1, r4, r0
 8004082:	4628      	mov	r0, r5
 8004084:	f000 f8ac 	bl	80041e0 <_sbrk_r>
 8004088:	3001      	adds	r0, #1
 800408a:	d101      	bne.n	8004090 <sbrk_aligned+0x38>
 800408c:	f04f 34ff 	mov.w	r4, #4294967295
 8004090:	4620      	mov	r0, r4
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	20000280 	.word	0x20000280

08004098 <_malloc_r>:
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	1ccd      	adds	r5, r1, #3
 800409e:	f025 0503 	bic.w	r5, r5, #3
 80040a2:	3508      	adds	r5, #8
 80040a4:	2d0c      	cmp	r5, #12
 80040a6:	bf38      	it	cc
 80040a8:	250c      	movcc	r5, #12
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	4607      	mov	r7, r0
 80040ae:	db01      	blt.n	80040b4 <_malloc_r+0x1c>
 80040b0:	42a9      	cmp	r1, r5
 80040b2:	d905      	bls.n	80040c0 <_malloc_r+0x28>
 80040b4:	230c      	movs	r3, #12
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	2600      	movs	r6, #0
 80040ba:	4630      	mov	r0, r6
 80040bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c0:	4e2e      	ldr	r6, [pc, #184]	; (800417c <_malloc_r+0xe4>)
 80040c2:	f000 f89d 	bl	8004200 <__malloc_lock>
 80040c6:	6833      	ldr	r3, [r6, #0]
 80040c8:	461c      	mov	r4, r3
 80040ca:	bb34      	cbnz	r4, 800411a <_malloc_r+0x82>
 80040cc:	4629      	mov	r1, r5
 80040ce:	4638      	mov	r0, r7
 80040d0:	f7ff ffc2 	bl	8004058 <sbrk_aligned>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	4604      	mov	r4, r0
 80040d8:	d14d      	bne.n	8004176 <_malloc_r+0xde>
 80040da:	6834      	ldr	r4, [r6, #0]
 80040dc:	4626      	mov	r6, r4
 80040de:	2e00      	cmp	r6, #0
 80040e0:	d140      	bne.n	8004164 <_malloc_r+0xcc>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	4631      	mov	r1, r6
 80040e6:	4638      	mov	r0, r7
 80040e8:	eb04 0803 	add.w	r8, r4, r3
 80040ec:	f000 f878 	bl	80041e0 <_sbrk_r>
 80040f0:	4580      	cmp	r8, r0
 80040f2:	d13a      	bne.n	800416a <_malloc_r+0xd2>
 80040f4:	6821      	ldr	r1, [r4, #0]
 80040f6:	3503      	adds	r5, #3
 80040f8:	1a6d      	subs	r5, r5, r1
 80040fa:	f025 0503 	bic.w	r5, r5, #3
 80040fe:	3508      	adds	r5, #8
 8004100:	2d0c      	cmp	r5, #12
 8004102:	bf38      	it	cc
 8004104:	250c      	movcc	r5, #12
 8004106:	4629      	mov	r1, r5
 8004108:	4638      	mov	r0, r7
 800410a:	f7ff ffa5 	bl	8004058 <sbrk_aligned>
 800410e:	3001      	adds	r0, #1
 8004110:	d02b      	beq.n	800416a <_malloc_r+0xd2>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	442b      	add	r3, r5
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	e00e      	b.n	8004138 <_malloc_r+0xa0>
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	1b52      	subs	r2, r2, r5
 800411e:	d41e      	bmi.n	800415e <_malloc_r+0xc6>
 8004120:	2a0b      	cmp	r2, #11
 8004122:	d916      	bls.n	8004152 <_malloc_r+0xba>
 8004124:	1961      	adds	r1, r4, r5
 8004126:	42a3      	cmp	r3, r4
 8004128:	6025      	str	r5, [r4, #0]
 800412a:	bf18      	it	ne
 800412c:	6059      	strne	r1, [r3, #4]
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	bf08      	it	eq
 8004132:	6031      	streq	r1, [r6, #0]
 8004134:	5162      	str	r2, [r4, r5]
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	4638      	mov	r0, r7
 800413a:	f104 060b 	add.w	r6, r4, #11
 800413e:	f000 f865 	bl	800420c <__malloc_unlock>
 8004142:	f026 0607 	bic.w	r6, r6, #7
 8004146:	1d23      	adds	r3, r4, #4
 8004148:	1af2      	subs	r2, r6, r3
 800414a:	d0b6      	beq.n	80040ba <_malloc_r+0x22>
 800414c:	1b9b      	subs	r3, r3, r6
 800414e:	50a3      	str	r3, [r4, r2]
 8004150:	e7b3      	b.n	80040ba <_malloc_r+0x22>
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	42a3      	cmp	r3, r4
 8004156:	bf0c      	ite	eq
 8004158:	6032      	streq	r2, [r6, #0]
 800415a:	605a      	strne	r2, [r3, #4]
 800415c:	e7ec      	b.n	8004138 <_malloc_r+0xa0>
 800415e:	4623      	mov	r3, r4
 8004160:	6864      	ldr	r4, [r4, #4]
 8004162:	e7b2      	b.n	80040ca <_malloc_r+0x32>
 8004164:	4634      	mov	r4, r6
 8004166:	6876      	ldr	r6, [r6, #4]
 8004168:	e7b9      	b.n	80040de <_malloc_r+0x46>
 800416a:	230c      	movs	r3, #12
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4638      	mov	r0, r7
 8004170:	f000 f84c 	bl	800420c <__malloc_unlock>
 8004174:	e7a1      	b.n	80040ba <_malloc_r+0x22>
 8004176:	6025      	str	r5, [r4, #0]
 8004178:	e7de      	b.n	8004138 <_malloc_r+0xa0>
 800417a:	bf00      	nop
 800417c:	2000027c 	.word	0x2000027c

08004180 <_realloc_r>:
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	4680      	mov	r8, r0
 8004186:	4614      	mov	r4, r2
 8004188:	460e      	mov	r6, r1
 800418a:	b921      	cbnz	r1, 8004196 <_realloc_r+0x16>
 800418c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004190:	4611      	mov	r1, r2
 8004192:	f7ff bf81 	b.w	8004098 <_malloc_r>
 8004196:	b92a      	cbnz	r2, 80041a4 <_realloc_r+0x24>
 8004198:	f7ff ff12 	bl	8003fc0 <_free_r>
 800419c:	4625      	mov	r5, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a4:	f000 f838 	bl	8004218 <_malloc_usable_size_r>
 80041a8:	4284      	cmp	r4, r0
 80041aa:	4607      	mov	r7, r0
 80041ac:	d802      	bhi.n	80041b4 <_realloc_r+0x34>
 80041ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041b2:	d812      	bhi.n	80041da <_realloc_r+0x5a>
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f7ff ff6e 	bl	8004098 <_malloc_r>
 80041bc:	4605      	mov	r5, r0
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0ed      	beq.n	800419e <_realloc_r+0x1e>
 80041c2:	42bc      	cmp	r4, r7
 80041c4:	4622      	mov	r2, r4
 80041c6:	4631      	mov	r1, r6
 80041c8:	bf28      	it	cs
 80041ca:	463a      	movcs	r2, r7
 80041cc:	f7ff fed0 	bl	8003f70 <memcpy>
 80041d0:	4631      	mov	r1, r6
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7ff fef4 	bl	8003fc0 <_free_r>
 80041d8:	e7e1      	b.n	800419e <_realloc_r+0x1e>
 80041da:	4635      	mov	r5, r6
 80041dc:	e7df      	b.n	800419e <_realloc_r+0x1e>
	...

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4d06      	ldr	r5, [pc, #24]	; (80041fc <_sbrk_r+0x1c>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	f7fd f8b2 	bl	8001354 <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000284 	.word	0x20000284

08004200 <__malloc_lock>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__malloc_lock+0x8>)
 8004202:	f000 b811 	b.w	8004228 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	20000288 	.word	0x20000288

0800420c <__malloc_unlock>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__malloc_unlock+0x8>)
 800420e:	f000 b80c 	b.w	800422a <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	20000288 	.word	0x20000288

08004218 <_malloc_usable_size_r>:
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f18      	subs	r0, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfbc      	itt	lt
 8004222:	580b      	ldrlt	r3, [r1, r0]
 8004224:	18c0      	addlt	r0, r0, r3
 8004226:	4770      	bx	lr

08004228 <__retarget_lock_acquire_recursive>:
 8004228:	4770      	bx	lr

0800422a <__retarget_lock_release_recursive>:
 800422a:	4770      	bx	lr

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
