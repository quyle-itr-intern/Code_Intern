
BOOTLOADER_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb4  08004eb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ebc  08004ebc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000074  08004f38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004f38  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b575  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f00  00000000  00000000  0002b619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002193b  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4f1  00000000  00000000  0004fe83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9466  00000000  00000000  0005c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001257da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  0012582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e6c 	.word	0x08004e6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08004e6c 	.word	0x08004e6c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db12      	blt.n	8000540 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 021f 	and.w	r2, r3, #31
 8000520:	490a      	ldr	r1, [pc, #40]	; (800054c <__NVIC_DisableIRQ+0x44>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	2001      	movs	r0, #1
 800052a:	fa00 f202 	lsl.w	r2, r0, r2
 800052e:	3320      	adds	r3, #32
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000534:	f3bf 8f4f 	dsb	sy
}
 8000538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053a:	f3bf 8f6f 	isb	sy
}
 800053e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100

08000550 <app_ota_get_high_address>:
volatile uint32_t size_data_firmware = 0;
volatile uint16_t data_write_flash[50] = {0}; /* Array to store the data of line to pass it to Flash Writer */
volatile uint32_t address_write_flash;		  /* Pointer to store the address in to write */

void app_ota_get_high_address(app_ota_hex_form_data_t hex_data)
{
 8000550:	b084      	sub	sp, #16
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	f107 0c10 	add.w	ip, r7, #16
 800055c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t address = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
	address |= hex_data.data[0] << 8 | hex_data.data[1];
 8000564:	7d3b      	ldrb	r3, [r7, #20]
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	7d7a      	ldrb	r2, [r7, #21]
 800056a:	4313      	orrs	r3, r2
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
	address_write_flash = 0x08000000 | (address << 16); /* Address Save Firmware Update */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	041b      	lsls	r3, r3, #16
 8000578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <app_ota_get_high_address+0x40>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	b004      	add	sp, #16
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000170 	.word	0x20000170

08000594 <app_ota_write_flash_memory>:

void app_ota_write_flash_memory(app_ota_hex_form_data_t *hex_data)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
	uint8_t data_count, i;
	uint8_t counter_index = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	73bb      	strb	r3, [r7, #14]

	switch (hex_data->record_type)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	f000 808a 	beq.w	80006be <app_ota_write_flash_memory+0x12a>
 80005aa:	2b05      	cmp	r3, #5
 80005ac:	f300 8089 	bgt.w	80006c2 <app_ota_write_flash_memory+0x12e>
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d017      	beq.n	80005e4 <app_ota_write_flash_memory+0x50>
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	f040 8084 	bne.w	80006c2 <app_ota_write_flash_memory+0x12e>
	{
	case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
	{
		app_ota_get_high_address(*hex_data);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4616      	mov	r6, r2
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	689a      	ldr	r2, [r3, #8]
 80005c6:	4615      	mov	r5, r2
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	4614      	mov	r4, r2
 80005cc:	466a      	mov	r2, sp
 80005ce:	3310      	adds	r3, #16
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	6010      	str	r0, [r2, #0]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	7113      	strb	r3, [r2, #4]
 80005d8:	4630      	mov	r0, r6
 80005da:	462a      	mov	r2, r5
 80005dc:	4623      	mov	r3, r4
 80005de:	f7ff ffb7 	bl	8000550 <app_ota_get_high_address>
		break;
 80005e2:	e06f      	b.n	80006c4 <app_ota_write_flash_memory+0x130>
		break;
	}
	case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
	{
		/* Get Character Count */
		data_count = hex_data->byte_count;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	737b      	strb	r3, [r7, #13]
		size_data_firmware += data_count;
 80005ea:	7b7a      	ldrb	r2, [r7, #13]
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <app_ota_write_flash_memory+0x138>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a36      	ldr	r2, [pc, #216]	; (80006cc <app_ota_write_flash_memory+0x138>)
 80005f4:	6013      	str	r3, [r2, #0]

		/* Set full address */
		address_write_flash = address_write_flash & 0xFFFF0000;
 80005f6:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	041b      	lsls	r3, r3, #16
 80005fe:	4a34      	ldr	r2, [pc, #208]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 8000600:	6013      	str	r3, [r2, #0]
		address_write_flash = address_write_flash |
							  (hex_data->address[0] << 8) |
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	461a      	mov	r2, r3
		address_write_flash = address_write_flash |
 800060a:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4313      	orrs	r3, r2
							  (hex_data->address[1]);
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7892      	ldrb	r2, [r2, #2]
							  (hex_data->address[0] << 8) |
 8000614:	4313      	orrs	r3, r2
		address_write_flash = address_write_flash |
 8000616:	4a2e      	ldr	r2, [pc, #184]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 8000618:	6013      	str	r3, [r2, #0]

		/* Check address wite flash data */
		if (address_write_flash < ADDRESS_FIRMWARE_APPLICATION)
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <app_ota_write_flash_memory+0x140>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d203      	bcs.n	800062c <app_ota_write_flash_memory+0x98>
		{
			address_write_flash = 0;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
			return;
 800062a:	e04b      	b.n	80006c4 <app_ota_write_flash_memory+0x130>
		}

		/* Get the data of the record */
		for (i = 0; i < data_count; i += 2)
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e018      	b.n	8000664 <app_ota_write_flash_memory+0xd0>
		{
			data_write_flash[counter_index] = (hex_data->data[i + 1] << 8) | (hex_data->data[i]);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	440b      	add	r3, r1
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21a      	sxth	r2, r3
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	b291      	uxth	r1, r2
 8000652:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <app_ota_write_flash_memory+0x144>)
 8000654:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			counter_index++;
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	3301      	adds	r3, #1
 800065c:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < data_count; i += 2)
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	3302      	adds	r3, #2
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3e2      	bcc.n	8000632 <app_ota_write_flash_memory+0x9e>
		}

		if (data_count % 2 != 0)
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d018      	beq.n	80006aa <app_ota_write_flash_memory+0x116>
		{
			data_write_flash[counter_index] = 0xFF00 | (hex_data->data[data_count - 1]);
 8000678:	7b7b      	ldrb	r3, [r7, #13]
 800067a:	3b01      	subs	r3, #1
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4413      	add	r3, r2
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	b21b      	sxth	r3, r3
 8000684:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000688:	b21a      	sxth	r2, r3
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	b291      	uxth	r1, r2
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <app_ota_write_flash_memory+0x144>)
 8000690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bsp_flash_write(address_write_flash, (uint32_t *)data_write_flash, data_count / 4 + 1);
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	089b      	lsrs	r3, r3, #2
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	461a      	mov	r2, r3
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <app_ota_write_flash_memory+0x144>)
 80006a4:	f000 fd82 	bl	80011ac <bsp_flash_write>
		}
		else
			bsp_flash_write(address_write_flash, (uint32_t *)data_write_flash, data_count / 4);
		break;
 80006a8:	e00c      	b.n	80006c4 <app_ota_write_flash_memory+0x130>
			bsp_flash_write(address_write_flash, (uint32_t *)data_write_flash, data_count / 4);
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <app_ota_write_flash_memory+0x13c>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <app_ota_write_flash_memory+0x144>)
 80006b8:	f000 fd78 	bl	80011ac <bsp_flash_write>
		break;
 80006bc:	e002      	b.n	80006c4 <app_ota_write_flash_memory+0x130>
		break;
 80006be:	bf00      	nop
 80006c0:	e000      	b.n	80006c4 <app_ota_write_flash_memory+0x130>
	}
	default:
		break;
 80006c2:	bf00      	nop
	}
}
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000108 	.word	0x20000108
 80006d0:	20000170 	.word	0x20000170
 80006d4:	08008000 	.word	0x08008000
 80006d8:	2000010c 	.word	0x2000010c

080006dc <app_ota_start_up_bootloader>:

void app_ota_start_up_bootloader(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
	HAL_DMA_UnRegisterCallback(&hdma_usart1_rx, HAL_DMA_XFER_HALFCPLT_CB_ID);
 80006e2:	2101      	movs	r1, #1
 80006e4:	482f      	ldr	r0, [pc, #188]	; (80007a4 <app_ota_start_up_bootloader+0xc8>)
 80006e6:	f001 fdcd 	bl	8002284 <HAL_DMA_UnRegisterCallback>
	if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data_receive_dma, RX_BUFFER_SIZE))
 80006ea:	2232      	movs	r2, #50	; 0x32
 80006ec:	492e      	ldr	r1, [pc, #184]	; (80007a8 <app_ota_start_up_bootloader+0xcc>)
 80006ee:	482f      	ldr	r0, [pc, #188]	; (80007ac <app_ota_start_up_bootloader+0xd0>)
 80006f0:	f003 f9d8 	bl	8003aa4 <HAL_UARTEx_ReceiveToIdle_DMA>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <app_ota_start_up_bootloader+0x22>
	{
		Error_Handler();
 80006fa:	f000 fef1 	bl	80014e0 <Error_Handler>
	}

	buffer_save_data_handle = rx_buffer;
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <app_ota_start_up_bootloader+0xd4>)
 8000700:	4a2c      	ldr	r2, [pc, #176]	; (80007b4 <app_ota_start_up_bootloader+0xd8>)
 8000702:	601a      	str	r2, [r3, #0]

	uint32_t time_last = HAL_GetTick();
 8000704:	f001 f8ee 	bl	80018e4 <HAL_GetTick>
 8000708:	60b8      	str	r0, [r7, #8]
	while (HAL_GetTick() - time_last < 3000)
 800070a:	e03d      	b.n	8000788 <app_ota_start_up_bootloader+0xac>
	{
		if (flag_ota_update == TRUE && flag_size_flash == TRUE)
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <app_ota_start_up_bootloader+0xdc>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d139      	bne.n	8000788 <app_ota_start_up_bootloader+0xac>
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <app_ota_start_up_bootloader+0xe0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d135      	bne.n	8000788 <app_ota_start_up_bootloader+0xac>
		{
			flag_earse_ok = FALSE;
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <app_ota_start_up_bootloader+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
			uint8_t start_sector = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION);
 8000722:	4828      	ldr	r0, [pc, #160]	; (80007c4 <app_ota_start_up_bootloader+0xe8>)
 8000724:	f000 fc00 	bl	8000f28 <bsp_get_sector_from_address>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]
			uint8_t end_sector = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION + size_current);
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <app_ota_start_up_bootloader+0xec>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000734:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fbf5 	bl	8000f28 <bsp_get_sector_from_address>
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
			uint8_t number_sector = end_sector - start_sector + 1;
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	71bb      	strb	r3, [r7, #6]

			/* Erase sector for write data */
			for (uint8_t i = 0; i < number_sector; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	73bb      	strb	r3, [r7, #14]
 8000752:	e00d      	b.n	8000770 <app_ota_start_up_bootloader+0x94>
			{
				bsp_flash_erase(bsp_get_address_from_sector(start_sector));
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fc60 	bl	800101c <bsp_get_address_from_sector>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fca8 	bl	80010b4 <bsp_flash_erase>
				start_sector++;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	3301      	adds	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 0; i < number_sector; i++)
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	3301      	adds	r3, #1
 800076e:	73bb      	strb	r3, [r7, #14]
 8000770:	7bba      	ldrb	r2, [r7, #14]
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	429a      	cmp	r2, r3
 8000776:	d3ed      	bcc.n	8000754 <app_ota_start_up_bootloader+0x78>
			}
			flag_earse_ok = TRUE;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <app_ota_start_up_bootloader+0xe4>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			while (flag_ota_complete == FALSE)
 800077e:	bf00      	nop
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <app_ota_start_up_bootloader+0xf0>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0fb      	beq.n	8000780 <app_ota_start_up_bootloader+0xa4>
	while (HAL_GetTick() - time_last < 3000)
 8000788:	f001 f8ac 	bl	80018e4 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000796:	4293      	cmp	r3, r2
 8000798:	d9b8      	bls.n	800070c <app_ota_start_up_bootloader+0x30>
			{
			}
		}
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000200 	.word	0x20000200
 80007a8:	20000098 	.word	0x20000098
 80007ac:	20000178 	.word	0x20000178
 80007b0:	20000104 	.word	0x20000104
 80007b4:	200000d0 	.word	0x200000d0
 80007b8:	20000090 	.word	0x20000090
 80007bc:	20000091 	.word	0x20000091
 80007c0:	20000093 	.word	0x20000093
 80007c4:	08008000 	.word	0x08008000
 80007c8:	200000cc 	.word	0x200000cc
 80007cc:	20000092 	.word	0x20000092

080007d0 <app_ota_jump_to_firmware>:

void app_ota_jump_to_firmware(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(USART1_IRQn);
 80007d6:	2025      	movs	r0, #37	; 0x25
 80007d8:	f7ff fe96 	bl	8000508 <__NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
 80007dc:	203a      	movs	r0, #58	; 0x3a
 80007de:	f001 f9b6 	bl	8001b4e <HAL_NVIC_DisableIRQ>

	HAL_UART_DeInit(&huart1);
 80007e2:	4811      	ldr	r0, [pc, #68]	; (8000828 <app_ota_jump_to_firmware+0x58>)
 80007e4:	f003 f89d 	bl	8003922 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <app_ota_jump_to_firmware+0x5c>)
 80007ea:	f003 f89a 	bl	8003922 <HAL_UART_DeInit>
	HAL_DMA_DeInit(&hdma_usart1_rx);
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <app_ota_jump_to_firmware+0x60>)
 80007f0:	f001 fa76 	bl	8001ce0 <HAL_DMA_DeInit>
	HAL_RCC_DeInit();
 80007f4:	f002 fcb2 	bl	800315c <HAL_RCC_DeInit>

	SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <app_ota_jump_to_firmware+0x64>)
 80007fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <app_ota_jump_to_firmware+0x64>)
 80007fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000802:	6253      	str	r3, [r2, #36]	; 0x24
	__set_MSP(*((volatile uint32_t *)ADDRESS_FIRMWARE_APPLICATION));
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <app_ota_jump_to_firmware+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f383 8808 	msr	MSP, r3
}
 8000810:	bf00      	nop
	uint32_t u32JumpAddress = *((volatile uint32_t *)(ADDRESS_FIRMWARE_APPLICATION + 4));
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <app_ota_jump_to_firmware+0x6c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]
	void (*reset_handler)(void) = (void *)u32JumpAddress;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	60bb      	str	r3, [r7, #8]
	reset_handler();
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4798      	blx	r3
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000178 	.word	0x20000178
 800082c:	200001bc 	.word	0x200001bc
 8000830:	20000200 	.word	0x20000200
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	08008000 	.word	0x08008000
 800083c:	08008004 	.word	0x08008004

08000840 <app_ota_parse_element>:

void app_ota_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 8000840:	b480      	push	{r7}
 8000842:	b08f      	sub	sp, #60	; 0x3c
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t count_array = 0U;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t buffer_temp[32];

	/* Convert data string to data hex and save to des buffer*/
	for (uint8_t count = 0U; count < length; count++)
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800085a:	e05f      	b.n	800091c <app_ota_parse_element+0xdc>
	{
		if (buff[count] >= '0' && buff[count] <= '9')
 800085c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b2f      	cmp	r3, #47	; 0x2f
 8000868:	d914      	bls.n	8000894 <app_ota_parse_element+0x54>
 800086a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b39      	cmp	r3, #57	; 0x39
 8000876:	d80d      	bhi.n	8000894 <app_ota_parse_element+0x54>
			buffer_temp[count] = buff[count] - 48;
 8000878:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000886:	3a30      	subs	r2, #48	; 0x30
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	3338      	adds	r3, #56	; 0x38
 800088c:	443b      	add	r3, r7
 800088e:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000892:	e01a      	b.n	80008ca <app_ota_parse_element+0x8a>
		else if (buff[count] >= 'A' && buff[count] <= 'F')
 8000894:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b40      	cmp	r3, #64	; 0x40
 80008a0:	d942      	bls.n	8000928 <app_ota_parse_element+0xe8>
 80008a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b46      	cmp	r3, #70	; 0x46
 80008ae:	d83b      	bhi.n	8000928 <app_ota_parse_element+0xe8>
			buffer_temp[count] = buff[count] - 65 + 10;
 80008b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	4413      	add	r3, r2
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008be:	3a37      	subs	r2, #55	; 0x37
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	3338      	adds	r3, #56	; 0x38
 80008c4:	443b      	add	r3, r7
 80008c6:	f803 2c24 	strb.w	r2, [r3, #-36]
		else
			return;
		if (count % 2 != 0)
 80008ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01c      	beq.n	8000912 <app_ota_parse_element+0xd2>
		{
			des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 80008d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008dc:	3b01      	subs	r3, #1
 80008de:	3338      	adds	r3, #56	; 0x38
 80008e0:	443b      	add	r3, r7
 80008e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008ee:	3338      	adds	r3, #56	; 0x38
 80008f0:	443b      	add	r3, r7
 80008f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b259      	sxtb	r1, r3
 80008fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	b2ca      	uxtb	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
			count_array++;
 8000908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800090c:	3301      	adds	r3, #1
 800090e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (uint8_t count = 0U; count < length; count++)
 8000912:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000916:	3301      	adds	r3, #1
 8000918:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800091c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	429a      	cmp	r2, r3
 8000924:	d39a      	bcc.n	800085c <app_ota_parse_element+0x1c>
 8000926:	e000      	b.n	800092a <app_ota_parse_element+0xea>
			return;
 8000928:	bf00      	nop
		}
	}
}
 800092a:	373c      	adds	r7, #60	; 0x3c
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <app_ota_handle_data_receive>:

uint8_t app_ota_handle_data_receive(app_ota_hex_form_data_t *hex_data, uint8_t *data, uint16_t size)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	4613      	mov	r3, r2
 8000940:	80fb      	strh	r3, [r7, #6]
	uint8_t cal_check_sum = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	app_ota_field_hex_files_t state = START_CODE;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t buffer_save_data_hex[16];

	/* parse string to hex form data hex */
	for (uint8_t count = 0; count < size; count++)
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000954:	e0e4      	b.n	8000b20 <app_ota_handle_data_receive+0x1ec>
	{
		switch (state)
 8000956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095a:	2b06      	cmp	r3, #6
 800095c:	f200 80d9 	bhi.w	8000b12 <app_ota_handle_data_receive+0x1de>
 8000960:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <app_ota_handle_data_receive+0x34>)
 8000962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000966:	bf00      	nop
 8000968:	08000985 	.word	0x08000985
 800096c:	0800099f 	.word	0x0800099f
 8000970:	080009c7 	.word	0x080009c7
 8000974:	080009f5 	.word	0x080009f5
 8000978:	08000a1d 	.word	0x08000a1d
 800097c:	08000a83 	.word	0x08000a83
 8000980:	08000aa5 	.word	0x08000aa5
		{
		case START_CODE:
		{
			if (data[count] != ':')
 8000984:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b3a      	cmp	r3, #58	; 0x3a
 8000990:	d001      	beq.n	8000996 <app_ota_handle_data_receive+0x62>
				return STATE_ERRORS;
 8000992:	2300      	movs	r3, #0
 8000994:	e0cc      	b.n	8000b30 <app_ota_handle_data_receive+0x1fc>
			else
				state = BYTE_COUNT;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800099c:	e0bb      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case BYTE_COUNT:
		{
			app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 800099e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	18d1      	adds	r1, r2, r3
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2202      	movs	r2, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff47 	bl	8000840 <app_ota_parse_element>
			hex_data->byte_count = buffer_save_data_hex[0];
 80009b2:	7d3a      	ldrb	r2, [r7, #20]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	701a      	strb	r2, [r3, #0]
			count = 2U;
 80009b8:	2302      	movs	r3, #2
 80009ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			state = ADDRESS;
 80009be:	2302      	movs	r3, #2
 80009c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 80009c4:	e0a7      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case ADDRESS:
		{
			app_ota_parse_element(buffer_save_data_hex, &data[count], 4U);
 80009c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	18d1      	adds	r1, r2, r3
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2204      	movs	r2, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff33 	bl	8000840 <app_ota_parse_element>
			hex_data->address[0] = buffer_save_data_hex[0];
 80009da:	7d3a      	ldrb	r2, [r7, #20]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	705a      	strb	r2, [r3, #1]
			hex_data->address[1] = buffer_save_data_hex[1];
 80009e0:	7d7a      	ldrb	r2, [r7, #21]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	709a      	strb	r2, [r3, #2]
			count = 6U;
 80009e6:	2306      	movs	r3, #6
 80009e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			state = RECORD_TYPE;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 80009f2:	e090      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case RECORD_TYPE:
		{
			app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 80009f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2202      	movs	r2, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff1c 	bl	8000840 <app_ota_parse_element>
			hex_data->record_type = buffer_save_data_hex[0];
 8000a08:	7d3a      	ldrb	r2, [r7, #20]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	70da      	strb	r2, [r3, #3]
			count = 8U;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			state = DATA;
 8000a14:	2304      	movs	r3, #4
 8000a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8000a1a:	e07c      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case DATA:
		{
			app_ota_parse_element(buffer_save_data_hex, &data[count], (hex_data->byte_count * 2U));
 8000a1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff05 	bl	8000840 <app_ota_parse_element>
			for (count = 0; count < hex_data->byte_count; count++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a3c:	e010      	b.n	8000a60 <app_ota_handle_data_receive+0x12c>
			{
				hex_data->data[count] = buffer_save_data_hex[count];
 8000a3e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a46:	3228      	adds	r2, #40	; 0x28
 8000a48:	443a      	add	r2, r7
 8000a4a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	460a      	mov	r2, r1
 8000a54:	711a      	strb	r2, [r3, #4]
			for (count = 0; count < hex_data->byte_count; count++)
 8000a56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3e8      	bcc.n	8000a3e <app_ota_handle_data_receive+0x10a>
			}
			count = 8U + (hex_data->byte_count * 2U);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	3304      	adds	r3, #4
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			state = CHECKSUM;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8000a80:	e049      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case CHECKSUM:
		{
			app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 8000a82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	18d1      	adds	r1, r2, r3
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2202      	movs	r2, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fed5 	bl	8000840 <app_ota_parse_element>
			hex_data->check_sum = buffer_save_data_hex[0];
 8000a96:	7d3a      	ldrb	r2, [r7, #20]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	751a      	strb	r2, [r3, #20]
			state = DONE;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8000aa2:	e038      	b.n	8000b16 <app_ota_handle_data_receive+0x1e2>
		}
		case DONE:
		{
			cal_check_sum = hex_data->byte_count + hex_data->address[0] + hex_data->address[1] + hex_data->record_type;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	4413      	add	r3, r2
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	78db      	ldrb	r3, [r3, #3]
 8000abc:	4413      	add	r3, r2
 8000abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (count = 0; count < hex_data->byte_count; count++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000ac8:	e00e      	b.n	8000ae8 <app_ota_handle_data_receive+0x1b4>
			{
				cal_check_sum += hex_data->data[count];
 8000aca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	791a      	ldrb	r2, [r3, #4]
 8000ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ad8:	4413      	add	r3, r2
 8000ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for (count = 0; count < hex_data->byte_count; count++)
 8000ade:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3ea      	bcc.n	8000aca <app_ota_handle_data_receive+0x196>
			}
			cal_check_sum = ~cal_check_sum + 1U;
 8000af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af8:	425b      	negs	r3, r3
 8000afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (cal_check_sum == hex_data->check_sum)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	7d1b      	ldrb	r3, [r3, #20]
 8000b02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d101      	bne.n	8000b0e <app_ota_handle_data_receive+0x1da>
				return STATE_NO_ERRORS;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e010      	b.n	8000b30 <app_ota_handle_data_receive+0x1fc>
			else
				return STATE_ERRORS;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e00e      	b.n	8000b30 <app_ota_handle_data_receive+0x1fc>
		}
		default:
			return STATE_ERRORS;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e00c      	b.n	8000b30 <app_ota_handle_data_receive+0x1fc>
	for (uint8_t count = 0; count < size; count++)
 8000b16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000b20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f63f af14 	bhi.w	8000956 <app_ota_handle_data_receive+0x22>
		}
	}
	return STATE_ERRORS;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <app_ota_handle_data_receive_dma>:

void app_ota_handle_data_receive_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80fb      	strh	r3, [r7, #6]
	app_ota_hex_form_data_t hex_data;
	uint8_t *buff = data;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
	switch (buff[0])
 8000b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	3b3a      	subs	r3, #58	; 0x3a
 8000b50:	2b20      	cmp	r3, #32
 8000b52:	f200 80d2 	bhi.w	8000cfa <app_ota_handle_data_receive_dma+0x1c2>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <app_ota_handle_data_receive_dma+0x24>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000c85 	.word	0x08000c85
 8000b60:	08000cfb 	.word	0x08000cfb
 8000b64:	08000cfb 	.word	0x08000cfb
 8000b68:	08000cfb 	.word	0x08000cfb
 8000b6c:	08000cfb 	.word	0x08000cfb
 8000b70:	08000cfb 	.word	0x08000cfb
 8000b74:	08000cfb 	.word	0x08000cfb
 8000b78:	08000cfb 	.word	0x08000cfb
 8000b7c:	08000cfb 	.word	0x08000cfb
 8000b80:	08000cfb 	.word	0x08000cfb
 8000b84:	08000cfb 	.word	0x08000cfb
 8000b88:	08000cfb 	.word	0x08000cfb
 8000b8c:	08000cfb 	.word	0x08000cfb
 8000b90:	08000cfb 	.word	0x08000cfb
 8000b94:	08000cfb 	.word	0x08000cfb
 8000b98:	08000cfb 	.word	0x08000cfb
 8000b9c:	08000cfb 	.word	0x08000cfb
 8000ba0:	08000cfb 	.word	0x08000cfb
 8000ba4:	08000cfb 	.word	0x08000cfb
 8000ba8:	08000cfb 	.word	0x08000cfb
 8000bac:	08000cfb 	.word	0x08000cfb
 8000bb0:	08000cfb 	.word	0x08000cfb
 8000bb4:	08000cfb 	.word	0x08000cfb
 8000bb8:	08000cfb 	.word	0x08000cfb
 8000bbc:	08000cfb 	.word	0x08000cfb
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000cfb 	.word	0x08000cfb
 8000bc8:	08000be1 	.word	0x08000be1
 8000bcc:	08000cfb 	.word	0x08000cfb
 8000bd0:	08000cfb 	.word	0x08000cfb
 8000bd4:	08000c69 	.word	0x08000c69
 8000bd8:	08000cfb 	.word	0x08000cfb
 8000bdc:	08000ce7 	.word	0x08000ce7
	{
	case APP_OTA_UPDATE_FW:
	{
		flag_ota_update = TRUE;
 8000be0:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <app_ota_handle_data_receive_dma+0x1d8>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
 8000be6:	230a      	movs	r3, #10
 8000be8:	2201      	movs	r2, #1
 8000bea:	494a      	ldr	r1, [pc, #296]	; (8000d14 <app_ota_handle_data_receive_dma+0x1dc>)
 8000bec:	484a      	ldr	r0, [pc, #296]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000bee:	f002 fec7 	bl	8003980 <HAL_UART_Transmit>
		break;
 8000bf2:	e085      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
	}
	case APP_OTA_CHECK_SIZE_FLASH:
	{
		size_current = 0;
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <app_ota_handle_data_receive_dma+0x1e4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
		uint8_t index = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (buff[index] != '\n')
 8000c00:	e014      	b.n	8000c2c <app_ota_handle_data_receive_dma+0xf4>
		{
			size_current = size_current * 10 + (buff[index] - 48);
 8000c02:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <app_ota_handle_data_receive_dma+0x1e4>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	3b30      	subs	r3, #48	; 0x30
 8000c1e:	4a3f      	ldr	r2, [pc, #252]	; (8000d1c <app_ota_handle_data_receive_dma+0x1e4>)
 8000c20:	6013      	str	r3, [r2, #0]
			index++;
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c26:	3301      	adds	r3, #1
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (buff[index] != '\n')
 8000c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c32:	4413      	add	r3, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d1e3      	bne.n	8000c02 <app_ota_handle_data_receive_dma+0xca>
		}
		if (size_current > max_size_flash)
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <app_ota_handle_data_receive_dma+0x1e4>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <app_ota_handle_data_receive_dma+0x1e8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d906      	bls.n	8000c54 <app_ota_handle_data_receive_dma+0x11c>
			HAL_UART_Transmit(USART_UD, APP_OTA_CANCEL_UPDATE, 1, 10);
 8000c46:	230a      	movs	r3, #10
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4936      	ldr	r1, [pc, #216]	; (8000d24 <app_ota_handle_data_receive_dma+0x1ec>)
 8000c4c:	4832      	ldr	r0, [pc, #200]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000c4e:	f002 fe97 	bl	8003980 <HAL_UART_Transmit>
		else
		{
			HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
			flag_size_flash = TRUE;
		}
		break;
 8000c52:	e055      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
			HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
 8000c54:	230a      	movs	r3, #10
 8000c56:	2201      	movs	r2, #1
 8000c58:	492e      	ldr	r1, [pc, #184]	; (8000d14 <app_ota_handle_data_receive_dma+0x1dc>)
 8000c5a:	482f      	ldr	r0, [pc, #188]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000c5c:	f002 fe90 	bl	8003980 <HAL_UART_Transmit>
			flag_size_flash = TRUE;
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <app_ota_handle_data_receive_dma+0x1f0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
		break;
 8000c66:	e04b      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
	}
	case APP_OTA_UPDATE_START:
	{
		if (flag_earse_ok == TRUE)
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <app_ota_handle_data_receive_dma+0x1f4>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d146      	bne.n	8000cfe <app_ota_handle_data_receive_dma+0x1c6>
		{
			flag_earse_ok = FALSE;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <app_ota_handle_data_receive_dma+0x1f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
 8000c76:	230a      	movs	r3, #10
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4926      	ldr	r1, [pc, #152]	; (8000d14 <app_ota_handle_data_receive_dma+0x1dc>)
 8000c7c:	4826      	ldr	r0, [pc, #152]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000c7e:	f002 fe7f 	bl	8003980 <HAL_UART_Transmit>
		}
		break;
 8000c82:	e03c      	b.n	8000cfe <app_ota_handle_data_receive_dma+0x1c6>
	}
	case ':':
	{
		if ((app_ota_handle_data_receive(&hex_data, buff, size) == STATE_NO_ERRORS) && flag_ota_update && flag_size_flash)
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe51 	bl	8000934 <app_ota_handle_data_receive>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d11e      	bne.n	8000cd6 <app_ota_handle_data_receive_dma+0x19e>
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <app_ota_handle_data_receive_dma+0x1d8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d01a      	beq.n	8000cd6 <app_ota_handle_data_receive_dma+0x19e>
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <app_ota_handle_data_receive_dma+0x1f0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d016      	beq.n	8000cd6 <app_ota_handle_data_receive_dma+0x19e>
		{
			app_ota_write_flash_memory(&hex_data);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc71 	bl	8000594 <app_ota_write_flash_memory>
			if (!address_write_flash)
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <app_ota_handle_data_receive_dma+0x1f8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d106      	bne.n	8000cc8 <app_ota_handle_data_receive_dma+0x190>
				HAL_UART_Transmit(USART_UD, APP_OTA_RESEND_DATA, 1, 10);
 8000cba:	230a      	movs	r3, #10
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	491d      	ldr	r1, [pc, #116]	; (8000d34 <app_ota_handle_data_receive_dma+0x1fc>)
 8000cc0:	4815      	ldr	r0, [pc, #84]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000cc2:	f002 fe5d 	bl	8003980 <HAL_UART_Transmit>
			if (!address_write_flash)
 8000cc6:	e00d      	b.n	8000ce4 <app_ota_handle_data_receive_dma+0x1ac>
			else
				HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
 8000cc8:	230a      	movs	r3, #10
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4911      	ldr	r1, [pc, #68]	; (8000d14 <app_ota_handle_data_receive_dma+0x1dc>)
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000cd0:	f002 fe56 	bl	8003980 <HAL_UART_Transmit>
			if (!address_write_flash)
 8000cd4:	e006      	b.n	8000ce4 <app_ota_handle_data_receive_dma+0x1ac>
		}
		else
			HAL_UART_Transmit(USART_UD, APP_OTA_RESEND_DATA, 1, 10);
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4916      	ldr	r1, [pc, #88]	; (8000d34 <app_ota_handle_data_receive_dma+0x1fc>)
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000cde:	f002 fe4f 	bl	8003980 <HAL_UART_Transmit>
		break;
 8000ce2:	e00d      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
 8000ce4:	e00c      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
	}
	case APP_OTA_UPDATE_FW_COMPLETE:
	{
		flag_ota_complete = TRUE;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <app_ota_handle_data_receive_dma+0x200>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, APP_OTA_READ_CONFIRM_CHAR, 1, 10);
 8000cec:	230a      	movs	r3, #10
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4908      	ldr	r1, [pc, #32]	; (8000d14 <app_ota_handle_data_receive_dma+0x1dc>)
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <app_ota_handle_data_receive_dma+0x1e0>)
 8000cf4:	f002 fe44 	bl	8003980 <HAL_UART_Transmit>
		break;
 8000cf8:	e002      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
	}
	default:
		break;
 8000cfa:	bf00      	nop
 8000cfc:	e000      	b.n	8000d00 <app_ota_handle_data_receive_dma+0x1c8>
		break;
 8000cfe:	bf00      	nop
	}
	free(buff);
 8000d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d02:	f004 f849 	bl	8004d98 <free>
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	; 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000090 	.word	0x20000090
 8000d14:	08004e84 	.word	0x08004e84
 8000d18:	20000178 	.word	0x20000178
 8000d1c:	200000cc 	.word	0x200000cc
 8000d20:	20000000 	.word	0x20000000
 8000d24:	08004e88 	.word	0x08004e88
 8000d28:	20000091 	.word	0x20000091
 8000d2c:	20000093 	.word	0x20000093
 8000d30:	20000170 	.word	0x20000170
 8000d34:	08004e8c 	.word	0x08004e8c
 8000d38:	20000092 	.word	0x20000092

08000d3c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b096      	sub	sp, #88	; 0x58
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
	uint16_t number_char_receive;
	uint8_t check_data_full[50];

	if ((huart->Instance == USART1))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a65      	ldr	r2, [pc, #404]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	f040 80c5 	bne.w	8000ede <HAL_UARTEx_RxEventCallback+0x1a2>
	{
		static uint16_t old_pos = 0;
		uint16_t i;

		if (g_flag_cplt_dma)
 8000d54:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d031      	beq.n	8000dc0 <HAL_UARTEx_RxEventCallback+0x84>
		{
			g_flag_cplt_dma = FALSE;
 8000d5c:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < size - old_pos; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000d68:	e012      	b.n	8000d90 <HAL_UARTEx_RxEventCallback+0x54>
			{
				check_data_full[i] = data_receive_dma[old_pos + i];
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d74:	441a      	add	r2, r3
 8000d76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d7a:	495d      	ldr	r1, [pc, #372]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000d7c:	5c8a      	ldrb	r2, [r1, r2]
 8000d7e:	3358      	adds	r3, #88	; 0x58
 8000d80:	443b      	add	r3, r7
 8000d82:	f803 2c38 	strb.w	r2, [r3, #-56]
			for (i = 0; i < size - old_pos; i++)
 8000d86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000d90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	4955      	ldr	r1, [pc, #340]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000d98:	8809      	ldrh	r1, [r1, #0]
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbe4      	blt.n	8000d6a <HAL_UARTEx_RxEventCallback+0x2e>
			}
			app_ota_hex_form_data_t hex_data;
			if (app_ota_handle_data_receive(&hex_data, check_data_full, size - old_pos) == STATE_ERRORS)
 8000da0:	4b52      	ldr	r3, [pc, #328]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f107 0120 	add.w	r1, r7, #32
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fdbe 	bl	8000934 <app_ota_handle_data_receive>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 808f 	beq.w	8000ede <HAL_UARTEx_RxEventCallback+0x1a2>
				return;
		}

		if (size != old_pos)
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	f000 8086 	beq.w	8000ed8 <HAL_UARTEx_RxEventCallback+0x19c>
		{
			if (size > old_pos)
 8000dcc:	4b47      	ldr	r3, [pc, #284]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	887a      	ldrh	r2, [r7, #2]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d923      	bls.n	8000e1e <HAL_UARTEx_RxEventCallback+0xe2>
			{
				number_char_receive = size - old_pos;
 8000dd6:	4b45      	ldr	r3, [pc, #276]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				for (i = 0; i < number_char_receive; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000de8:	e012      	b.n	8000e10 <HAL_UARTEx_RxEventCallback+0xd4>
				{
					buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000df4:	441a      	add	r2, r3
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000dfe:	440b      	add	r3, r1
 8000e00:	493b      	ldr	r1, [pc, #236]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000e02:	5c8a      	ldrb	r2, [r1, r2]
 8000e04:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < number_char_receive; i++)
 8000e06:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000e10:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000e14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3e6      	bcc.n	8000dea <HAL_UARTEx_RxEventCallback+0xae>
 8000e1c:	e046      	b.n	8000eac <HAL_UARTEx_RxEventCallback+0x170>
				}
			}
			else
			{
				number_char_receive = RX_BUFFER_SIZE - old_pos;
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000e26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				for (i = 0; i < number_char_receive; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000e30:	e012      	b.n	8000e58 <HAL_UARTEx_RxEventCallback+0x11c>
				{
					buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e3c:	441a      	add	r2, r3
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e46:	440b      	add	r3, r1
 8000e48:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000e4a:	5c8a      	ldrb	r2, [r1, r2]
 8000e4c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < number_char_receive; i++)
 8000e4e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e52:	3301      	adds	r3, #1
 8000e54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000e58:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000e5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3e6      	bcc.n	8000e32 <HAL_UARTEx_RxEventCallback+0xf6>
				}
				if (size > 0)
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d020      	beq.n	8000eac <HAL_UARTEx_RxEventCallback+0x170>
				{
					for (i = 0; i < size; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000e70:	e011      	b.n	8000e96 <HAL_UARTEx_RxEventCallback+0x15a>
					{
						buffer_save_data_handle[number_char_receive + i] = data_receive_dma[i];
 8000e72:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 8000e7e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000e82:	4401      	add	r1, r0
 8000e84:	440b      	add	r3, r1
 8000e86:	491a      	ldr	r1, [pc, #104]	; (8000ef0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000e88:	5c8a      	ldrb	r2, [r1, r2]
 8000e8a:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < size; i++)
 8000e8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e90:	3301      	adds	r3, #1
 8000e92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000e96:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3e8      	bcc.n	8000e72 <HAL_UARTEx_RxEventCallback+0x136>
					}
					number_char_receive += size;
 8000ea0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				}
			}

#ifdef DEBUG
			HAL_UART_Transmit(&huart2, buffer_save_data_handle, number_char_receive, 100);
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000eb8:	f002 fd62 	bl	8003980 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, 100);
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000ec4:	f002 fd5c 	bl	8003980 <HAL_UART_Transmit>
#endif
			app_ota_handle_data_receive_dma(huart, buffer_save_data_handle, number_char_receive);
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fe30 	bl	8000b38 <app_ota_handle_data_receive_dma>
		}
		old_pos = size;
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	8013      	strh	r3, [r2, #0]
	}
}
 8000ede:	3758      	adds	r7, #88	; 0x58
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	20000094 	.word	0x20000094
 8000eec:	20000174 	.word	0x20000174
 8000ef0:	20000098 	.word	0x20000098
 8000ef4:	20000104 	.word	0x20000104
 8000ef8:	200001bc 	.word	0x200001bc
 8000efc:	08004e90 	.word	0x08004e90

08000f00 <bsp_flash_unlock>:

#define KEY1 (uint32_t)0x45670123
#define KEY2 (uint32_t)0xCDEF89AB

void bsp_flash_unlock(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	FLASH->KEYR = KEY1;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <bsp_flash_unlock+0x1c>)
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <bsp_flash_unlock+0x20>)
 8000f08:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = KEY2;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <bsp_flash_unlock+0x1c>)
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <bsp_flash_unlock+0x24>)
 8000f0e:	605a      	str	r2, [r3, #4]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00
 8000f20:	45670123 	.word	0x45670123
 8000f24:	cdef89ab 	.word	0xcdef89ab

08000f28 <bsp_get_sector_from_address>:

uint8_t bsp_get_sector_from_address(uint32_t start_address)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint8_t sector_number = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
	if ((start_address >= 0x08000000) && (start_address < 0x08003FFF))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f3a:	d306      	bcc.n	8000f4a <bsp_get_sector_from_address+0x22>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <bsp_get_sector_from_address+0xc8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d802      	bhi.n	8000f4a <bsp_get_sector_from_address+0x22>
		sector_number = BSP_FLASH_SECTOR_0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e04b      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08004000) && (start_address < 0x08007FFF))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <bsp_get_sector_from_address+0xcc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d306      	bcc.n	8000f60 <bsp_get_sector_from_address+0x38>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <bsp_get_sector_from_address+0xd0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d802      	bhi.n	8000f60 <bsp_get_sector_from_address+0x38>
		sector_number = BSP_FLASH_SECTOR_1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e040      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08008000) && (start_address < 0x0800BFFF))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <bsp_get_sector_from_address+0xd4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d306      	bcc.n	8000f76 <bsp_get_sector_from_address+0x4e>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <bsp_get_sector_from_address+0xd8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d802      	bhi.n	8000f76 <bsp_get_sector_from_address+0x4e>
		sector_number = BSP_FLASH_SECTOR_2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e035      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x0800C000) && (start_address < 0x0800FFFF))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <bsp_get_sector_from_address+0xdc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d306      	bcc.n	8000f8c <bsp_get_sector_from_address+0x64>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <bsp_get_sector_from_address+0xe0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d202      	bcs.n	8000f8c <bsp_get_sector_from_address+0x64>
		sector_number = BSP_FLASH_SECTOR_3;
 8000f86:	2303      	movs	r3, #3
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e02a      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08010000) && (start_address < 0x0801FFFF))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <bsp_get_sector_from_address+0xe0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d906      	bls.n	8000fa2 <bsp_get_sector_from_address+0x7a>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <bsp_get_sector_from_address+0xe4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d202      	bcs.n	8000fa2 <bsp_get_sector_from_address+0x7a>
		sector_number = BSP_FLASH_SECTOR_4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e01f      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08020000) && (start_address < 0x0803FFFF))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <bsp_get_sector_from_address+0xe4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d906      	bls.n	8000fb8 <bsp_get_sector_from_address+0x90>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <bsp_get_sector_from_address+0xe8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d202      	bcs.n	8000fb8 <bsp_get_sector_from_address+0x90>
		sector_number = BSP_FLASH_SECTOR_5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e014      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08040000) && (start_address < 0x0805FFFF))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <bsp_get_sector_from_address+0xe8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d906      	bls.n	8000fce <bsp_get_sector_from_address+0xa6>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <bsp_get_sector_from_address+0xec>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d202      	bcs.n	8000fce <bsp_get_sector_from_address+0xa6>
		sector_number = BSP_FLASH_SECTOR_6;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e009      	b.n	8000fe2 <bsp_get_sector_from_address+0xba>
	else if ((start_address >= 0x08060000) && (start_address < 0x0807FFFF))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a10      	ldr	r2, [pc, #64]	; (8001014 <bsp_get_sector_from_address+0xec>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d905      	bls.n	8000fe2 <bsp_get_sector_from_address+0xba>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <bsp_get_sector_from_address+0xf0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d201      	bcs.n	8000fe2 <bsp_get_sector_from_address+0xba>
		sector_number = BSP_FLASH_SECTOR_7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	73fb      	strb	r3, [r7, #15]
	return sector_number;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08003ffe 	.word	0x08003ffe
 8000ff4:	08004000 	.word	0x08004000
 8000ff8:	08007ffe 	.word	0x08007ffe
 8000ffc:	08008000 	.word	0x08008000
 8001000:	0800bffe 	.word	0x0800bffe
 8001004:	0800c000 	.word	0x0800c000
 8001008:	0800ffff 	.word	0x0800ffff
 800100c:	0801ffff 	.word	0x0801ffff
 8001010:	0803ffff 	.word	0x0803ffff
 8001014:	0805ffff 	.word	0x0805ffff
 8001018:	0807ffff 	.word	0x0807ffff

0800101c <bsp_get_address_from_sector>:

uint32_t bsp_get_address_from_sector(uint8_t sector_number)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint32_t address_sector = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
	if (sector_number == BSP_FLASH_SECTOR_0)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d103      	bne.n	8001038 <bsp_get_address_from_sector+0x1c>
		address_sector = 0x08000000;
 8001030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e028      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_1)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <bsp_get_address_from_sector+0x28>
		address_sector = 0x08004000;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <bsp_get_address_from_sector+0x7c>)
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e022      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_2)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d102      	bne.n	8001050 <bsp_get_address_from_sector+0x34>
		address_sector = 0x08008000;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <bsp_get_address_from_sector+0x80>)
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e01c      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_3)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d102      	bne.n	800105c <bsp_get_address_from_sector+0x40>
		address_sector = 0x0800C000;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <bsp_get_address_from_sector+0x84>)
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e016      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_4)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d102      	bne.n	8001068 <bsp_get_address_from_sector+0x4c>
		address_sector = 0x08010000;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <bsp_get_address_from_sector+0x88>)
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e010      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_5)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d102      	bne.n	8001074 <bsp_get_address_from_sector+0x58>
		address_sector = 0x08020000;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <bsp_get_address_from_sector+0x8c>)
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e00a      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_6)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b06      	cmp	r3, #6
 8001078:	d102      	bne.n	8001080 <bsp_get_address_from_sector+0x64>
		address_sector = 0x08040000;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <bsp_get_address_from_sector+0x90>)
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e004      	b.n	800108a <bsp_get_address_from_sector+0x6e>
	else if (sector_number == BSP_FLASH_SECTOR_7)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b07      	cmp	r3, #7
 8001084:	d101      	bne.n	800108a <bsp_get_address_from_sector+0x6e>
		address_sector = 0x08060000;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <bsp_get_address_from_sector+0x94>)
 8001088:	60fb      	str	r3, [r7, #12]
	return address_sector;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	08004000 	.word	0x08004000
 800109c:	08008000 	.word	0x08008000
 80010a0:	0800c000 	.word	0x0800c000
 80010a4:	08010000 	.word	0x08010000
 80010a8:	08020000 	.word	0x08020000
 80010ac:	08040000 	.word	0x08040000
 80010b0:	08060000 	.word	0x08060000

080010b4 <bsp_flash_erase>:

bsp_flash_status_t bsp_flash_erase(uint32_t start_address)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint32_t time_out = BSP_FLASH_TIMEOUT;
 80010bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010c0:	60fb      	str	r3, [r7, #12]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80010c2:	e007      	b.n	80010d4 <bsp_flash_erase+0x20>
	{
		if (--time_out == 0x00)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <bsp_flash_erase+0x20>
		{
			return bsp_flash_status_errors;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e064      	b.n	800119e <bsp_flash_erase+0xea>
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <bsp_flash_erase+0xf4>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d102      	bne.n	80010e8 <bsp_flash_erase+0x34>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ed      	bne.n	80010c4 <bsp_flash_erase+0x10>
		}
	}
	/* Wating for Bsy bit */
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <bsp_flash_erase+0xf4>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010f4:	d101      	bne.n	80010fa <bsp_flash_erase+0x46>
	{
		bsp_flash_unlock();
 80010f6:	f7ff ff03 	bl	8000f00 <bsp_flash_unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <bsp_flash_erase+0xf4>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	6113      	str	r3, [r2, #16]
	/* Set the SER bit in the FLASH_CR register */
	FLASH->CR |= FLASH_CR_SER;
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <bsp_flash_erase+0xf4>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6113      	str	r3, [r2, #16]
	/* Program the FLASH_CR register to select a sector_number to erase */
	FLASH->CR |= bsp_get_sector_from_address(start_address) << 3;
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff08 	bl	8000f28 <bsp_get_sector_from_address>
 8001118:	4603      	mov	r3, r0
 800111a:	00da      	lsls	r2, r3, #3
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <bsp_flash_erase+0xf4>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4611      	mov	r1, r2
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6113      	str	r3, [r2, #16]
	/* Set the STRT bit in the FLASH CR register */
	FLASH->CR |= FLASH_CR_STRT;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <bsp_flash_erase+0xf4>)
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <bsp_flash_erase+0xf4>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001132:	6113      	str	r3, [r2, #16]
	/* Wait for the BSY bit to be reset */
	time_out = BSP_FLASH_TIMEOUT;
 8001134:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001138:	60fb      	str	r3, [r7, #12]
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 800113a:	e007      	b.n	800114c <bsp_flash_erase+0x98>
	{
		/* Wating for Bsy bit */
		if (--time_out == 0x00)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3b01      	subs	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <bsp_flash_erase+0x98>
		{
			return bsp_flash_status_errors;
 8001148:	2300      	movs	r3, #0
 800114a:	e028      	b.n	800119e <bsp_flash_erase+0xea>
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <bsp_flash_erase+0xf4>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d102      	bne.n	8001160 <bsp_flash_erase+0xac>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ed      	bne.n	800113c <bsp_flash_erase+0x88>
		}
	}
	/* Check FLASH End of Operation flag  */
	if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <bsp_flash_erase+0xc4>
	{
		/* Clear FLASH End of Operation pending bit */
		FLASH->SR &= ~FLASH_FLAG_EOP;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <bsp_flash_erase+0xf4>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	60d3      	str	r3, [r2, #12]
	}
	/* Clear SER bit in the FLASH_CR register */
	FLASH->CR &= FLASH_CR_SER;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <bsp_flash_erase+0xf4>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <bsp_flash_erase+0xf4>)
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	6113      	str	r3, [r2, #16]
	/* Clear STRT bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_STRT;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <bsp_flash_erase+0xf4>)
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	6113      	str	r3, [r2, #16]
	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <bsp_flash_erase+0xf4>)
 8001196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119a:	6113      	str	r3, [r2, #16]
	return bsp_flash_status_ok;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <bsp_flash_write>:

bsp_flash_status_t bsp_flash_write(volatile uint32_t start_address, uint32_t *buffer_write, uint32_t length)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	uint32_t count = 0u;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
	uint32_t time_out = BSP_FLASH_TIMEOUT;
 80011bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011c0:	613b      	str	r3, [r7, #16]
	/* Check input parameters */
	if ((buffer_write == 0u) || (length == 0u))
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <bsp_flash_write+0x22>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <bsp_flash_write+0x36>
	{
		return bsp_flash_status_errors;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e05d      	b.n	800128e <bsp_flash_write+0xe2>
	}
	/* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
	{
		/* Wating for Bsy bit */
		if (--time_out == 0x00)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <bsp_flash_write+0x36>
		{
			return bsp_flash_status_errors;
 80011de:	2300      	movs	r3, #0
 80011e0:	e055      	b.n	800128e <bsp_flash_write+0xe2>
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <bsp_flash_write+0xec>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ee:	d102      	bne.n	80011f6 <bsp_flash_write+0x4a>
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ed      	bne.n	80011d2 <bsp_flash_write+0x26>
		}
	}
	/* Check unlock sequences */
	if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <bsp_flash_write+0xec>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001202:	d101      	bne.n	8001208 <bsp_flash_write+0x5c>
	{
		bsp_flash_unlock();
 8001204:	f7ff fe7c 	bl	8000f00 <bsp_flash_unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <bsp_flash_write+0xec>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <bsp_flash_write+0xec>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6113      	str	r3, [r2, #16]
	/* Write FLASH CR_PG to 1 */
	FLASH->CR |= FLASH_CR_PG;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <bsp_flash_write+0xec>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <bsp_flash_write+0xec>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6113      	str	r3, [r2, #16]
	/* Perform word write at the desired address */
	for (count = 0; count < length; count++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00c      	b.n	8001240 <bsp_flash_write+0x94>
	{
		*(__IO uint32_t *)(start_address + count * 4u) = *(uint32_t *)(buffer_write + count);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	0091      	lsls	r1, r2, #2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	440a      	add	r2, r1
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6013      	str	r3, [r2, #0]
	for (count = 0; count < length; count++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3ee      	bcc.n	8001226 <bsp_flash_write+0x7a>
	}
	/* Wait for the BSY bit to be reset */
	time_out = BSP_FLASH_TIMEOUT;
 8001248:	f644 6320 	movw	r3, #20000	; 0x4e20
 800124c:	613b      	str	r3, [r7, #16]
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 800124e:	e007      	b.n	8001260 <bsp_flash_write+0xb4>
	{
		/* Wating for Bsy bit */
		if (--time_out == 0x00)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3b01      	subs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <bsp_flash_write+0xb4>
		{
			return bsp_flash_status_errors;
 800125c:	2300      	movs	r3, #0
 800125e:	e016      	b.n	800128e <bsp_flash_write+0xe2>
	while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <bsp_flash_write+0xec>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d102      	bne.n	8001274 <bsp_flash_write+0xc8>
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ed      	bne.n	8001250 <bsp_flash_write+0xa4>
		}
	}
	/* Clear PG bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_PG;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <bsp_flash_write+0xec>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <bsp_flash_write+0xec>)
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	6113      	str	r3, [r2, #16]
	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <bsp_flash_write+0xec>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <bsp_flash_write+0xec>)
 8001286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800128a:	6113      	str	r3, [r2, #16]
	return bsp_flash_status_ok;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 faba 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f80e 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f000 f8f2 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ac:	f000 f8d0 	bl	8001450 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012b0:	f000 f87a 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 f8a2 	bl	80013fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  app_ota_start_up_bootloader();
 80012b8:	f7ff fa10 	bl	80006dc <app_ota_start_up_bootloader>
  app_ota_jump_to_firmware();
 80012bc:	f7ff fa88 	bl	80007d0 <app_ota_jump_to_firmware>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <main+0x24>
	...

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2234      	movs	r2, #52	; 0x34
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fd68 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <SystemClock_Config+0xdc>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <SystemClock_Config+0xdc>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <SystemClock_Config+0xdc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <SystemClock_Config+0xe0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <SystemClock_Config+0xe0>)
 800130e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <SystemClock_Config+0xe0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001334:	2308      	movs	r3, #8
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001338:	23b4      	movs	r3, #180	; 0xb4
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fffd 	bl	800334c <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001358:	f000 f8c2 	bl	80014e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800135c:	f001 fb64 	bl	8002a28 <HAL_PWREx_EnableOverDrive>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001366:	f000 f8bb 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001376:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2105      	movs	r1, #5
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fb9d 	bl	8002ac8 <HAL_RCC_ClockConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001394:	f000 f8a4 	bl	80014e0 <Error_Handler>
  }
}
 8001398:	bf00      	nop
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f002 fa52 	bl	8003888 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f879 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000178 	.word	0x20000178
 80013f8:	40011000 	.word	0x40011000

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f002 fa28 	bl	8003888 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 f84f 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001bc 	.word	0x200001bc
 800144c:	40004400 	.word	0x40004400

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	203a      	movs	r0, #58	; 0x3a
 8001478:	f000 fb3f 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800147c:	203a      	movs	r0, #58	; 0x3a
 800147e:	f000 fb58 	bl	8001b32 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_GPIO_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_UART_MspInit+0x158>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d164      	bne.n	8001628 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_UART_MspInit+0x15c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001596:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a8:	2307      	movs	r3, #7
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	483a      	ldr	r0, [pc, #232]	; (800169c <HAL_UART_MspInit+0x160>)
 80015b4:	f000 ffb0 	bl	8002518 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <HAL_UART_MspInit+0x168>)
 80015bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <HAL_UART_MspInit+0x164>)
 80015fc:	f000 fac2 	bl	8001b84 <HAL_DMA_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001606:	f7ff ff6b 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <HAL_UART_MspInit+0x164>)
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <HAL_UART_MspInit+0x164>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2025      	movs	r0, #37	; 0x25
 800161c:	f000 fa6d 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001620:	2025      	movs	r0, #37	; 0x25
 8001622:	f000 fa86 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001626:	e030      	b.n	800168a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <HAL_UART_MspInit+0x16c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12b      	bne.n	800168a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_UART_MspInit+0x15c>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_UART_MspInit+0x15c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166a:	230c      	movs	r3, #12
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167a:	2307      	movs	r3, #7
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_UART_MspInit+0x160>)
 8001686:	f000 ff47 	bl	8002518 <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40011000 	.word	0x40011000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	20000200 	.word	0x20000200
 80016a4:	40026440 	.word	0x40026440
 80016a8:	40004400 	.word	0x40004400

080016ac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_UART_MspDeInit+0x60>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d113      	bne.n	80016e6 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspDeInit+0x64>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <HAL_UART_MspDeInit+0x64>)
 80016c4:	f023 0310 	bic.w	r3, r3, #16
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80016ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016ce:	4811      	ldr	r0, [pc, #68]	; (8001714 <HAL_UART_MspDeInit+0x68>)
 80016d0:	f001 f8b6 	bl	8002840 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb01 	bl	8001ce0 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80016de:	2025      	movs	r0, #37	; 0x25
 80016e0:	f000 fa35 	bl	8001b4e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80016e4:	e00e      	b.n	8001704 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_UART_MspDeInit+0x6c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d109      	bne.n	8001704 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_UART_MspDeInit+0x64>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_UART_MspDeInit+0x64>)
 80016f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80016fc:	210c      	movs	r1, #12
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspDeInit+0x68>)
 8001700:	f001 f89e 	bl	8002840 <HAL_GPIO_DeInit>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40011000 	.word	0x40011000
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40004400 	.word	0x40004400

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f8a8 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <USART1_IRQHandler+0x10>)
 8001776:	f002 f9fb 	bl	8003b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000178 	.word	0x20000178

08001784 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <DMA2_Stream2_IRQHandler+0x14>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <DMA2_Stream2_IRQHandler+0x18>)
 8001790:	f000 fbee 	bl	8001f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000094 	.word	0x20000094
 800179c:	20000200 	.word	0x20000200

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ca:	490e      	ldr	r1, [pc, #56]	; (8001804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e0:	4c0b      	ldr	r4, [pc, #44]	; (8001810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ee:	f7ff ffd7 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f003 faad 	bl	8004d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff fd51 	bl	800129c <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001808:	08004ec4 	.word	0x08004ec4
  ldr r2, =_sbss
 800180c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001810:	2000026c 	.word	0x2000026c

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f94f 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fe4e 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f975 	bl	8001b6a <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f92f 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000004 	.word	0x20000004
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	20000008 	.word	0x20000008

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000260 	.word	0x20000260

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000260 	.word	0x20000260

080018fc <__NVIC_SetPriorityGrouping>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_DisableIRQ>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db12      	blt.n	80019d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <__NVIC_DisableIRQ+0x44>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	3320      	adds	r3, #32
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80019c8:	f3bf 8f4f 	dsb	sy
}
 80019cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ce:	f3bf 8f6f 	isb	sy
}
 80019d2:	bf00      	nop
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff05 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff1a 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff8e 	bl	8001a38 <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff0d 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff1d 	bl	800199c <__NVIC_DisableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff94 	bl	8001aa0 <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fea8 	bl	80018e4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e099      	b.n	8001cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	e00f      	b.n	8001be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc2:	f7ff fe8f 	bl	80018e4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d908      	bls.n	8001be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e078      	b.n	8001cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e8      	bne.n	8001bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_DMA_Init+0x158>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4313      	orrs	r3, r2
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f023 0307 	bic.w	r3, r3, #7
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d117      	bne.n	8001ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fbc9 	bl	8002420 <DMA_CheckFifoParam>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fb80 	bl	80023b4 <DMA_CalcBaseAndBitshift>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f010803f 	.word	0xf010803f

08001ce0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e050      	b.n	8001d94 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e048      	b.n	8001d94 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2221      	movs	r2, #33	; 0x21
 8001d40:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fb36 	bl	80023b4 <DMA_CalcBaseAndBitshift>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	223f      	movs	r2, #63	; 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Start_IT+0x26>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e040      	b.n	8001e44 <HAL_DMA_Start_IT+0xa8>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d12f      	bne.n	8001e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fab4 	bl	8002358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	223f      	movs	r2, #63	; 0x3f
 8001df6:	409a      	lsls	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0216 	orr.w	r2, r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e005      	b.n	8001e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5a:	f7ff fd43 	bl	80018e4 <HAL_GetTick>
 8001e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e052      	b.n	8001f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0216 	bic.w	r2, r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_DMA_Abort+0x62>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ece:	e013      	b.n	8001ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed0:	f7ff fd08 	bl	80018e4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d90c      	bls.n	8001ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e015      	b.n	8001f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e4      	bne.n	8001ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	223f      	movs	r2, #63	; 0x3f
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00c      	b.n	8001f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_DMA_IRQHandler+0x248>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a8e      	ldr	r2, [pc, #568]	; (80021bc <HAL_DMA_IRQHandler+0x24c>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2208      	movs	r2, #8
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2201      	movs	r2, #1
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2204      	movs	r2, #4
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00b      	beq.n	8002048 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2204      	movs	r2, #4
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f043 0204 	orr.w	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2210      	movs	r2, #16
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d043      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03c      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2210      	movs	r2, #16
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d024      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e01f      	b.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
 80020b0:	e016      	b.n	80020e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0208 	bic.w	r2, r2, #8
 80020ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2220      	movs	r2, #32
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 808f 	beq.w	8002210 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8087 	beq.w	8002210 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2220      	movs	r2, #32
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b05      	cmp	r3, #5
 8002118:	d136      	bne.n	8002188 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0216 	bic.w	r2, r2, #22
 8002128:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002138:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_DMA_IRQHandler+0x1da>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0208 	bic.w	r2, r2, #8
 8002158:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	223f      	movs	r2, #63	; 0x3f
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217a:	2b00      	cmp	r3, #0
 800217c:	d07e      	beq.n	800227c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
        }
        return;
 8002186:	e079      	b.n	800227c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01d      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
 80021b4:	e02c      	b.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
 80021b6:	bf00      	nop
 80021b8:	20000004 	.word	0x20000004
 80021bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e01e      	b.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10f      	bne.n	8002200 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0210 	bic.w	r2, r2, #16
 80021ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	2b00      	cmp	r3, #0
 8002216:	d032      	beq.n	800227e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d307      	bcc.n	8002258 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f2      	bne.n	800223c <HAL_DMA_IRQHandler+0x2cc>
 8002256:	e000      	b.n	800225a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002258:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
 800227a:	e000      	b.n	800227e <HAL_DMA_IRQHandler+0x30e>
        return;
 800227c:	bf00      	nop
    }
  }
}
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_UnRegisterCallback+0x1e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e053      	b.n	800234a <HAL_DMA_UnRegisterCallback+0xc6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d142      	bne.n	800233c <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d83c      	bhi.n	8002336 <HAL_DMA_UnRegisterCallback+0xb2>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <HAL_DMA_UnRegisterCallback+0x40>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022e1 	.word	0x080022e1
 80022c8:	080022e9 	.word	0x080022e9
 80022cc:	080022f1 	.word	0x080022f1
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	08002301 	.word	0x08002301
 80022d8:	08002309 	.word	0x08002309
 80022dc:	08002311 	.word	0x08002311
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80022e6:	e02b      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80022ee:	e027      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80022f6:	e023      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002306:	e01b      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800230e:	e017      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002334:	e004      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      break;
 800233a:	e001      	b.n	8002340 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d108      	bne.n	8002398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002396:	e007      	b.n	80023a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b10      	subs	r3, #16
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <DMA_CalcBaseAndBitshift+0x64>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <DMA_CalcBaseAndBitshift+0x68>)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d909      	bls.n	80023f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
 80023f4:	e007      	b.n	8002406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	aaaaaaab 	.word	0xaaaaaaab
 800241c:	08004eac 	.word	0x08004eac

08002420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d856      	bhi.n	80024ee <DMA_CheckFifoParam+0xce>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x28>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002459 	.word	0x08002459
 800244c:	0800246b 	.word	0x0800246b
 8002450:	08002459 	.word	0x08002459
 8002454:	080024ef 	.word	0x080024ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d046      	beq.n	80024f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e043      	b.n	80024f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002472:	d140      	bne.n	80024f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e03d      	b.n	80024f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d121      	bne.n	80024c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d837      	bhi.n	80024fa <DMA_CheckFifoParam+0xda>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x70>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024a7 	.word	0x080024a7
 8002498:	080024a1 	.word	0x080024a1
 800249c:	080024b9 	.word	0x080024b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e030      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d025      	beq.n	80024fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b6:	e022      	b.n	80024fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c6:	e01c      	b.n	8002502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d903      	bls.n	80024d6 <DMA_CheckFifoParam+0xb6>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d4:	e018      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      break;
 80024da:	e015      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e00b      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024ee:	bf00      	nop
 80024f0:	e00a      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e008      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e006      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e004      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e002      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;   
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
    }
  } 
  
  return status; 
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e165      	b.n	8002800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8154 	bne.w	80027fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ae 	beq.w	80027fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_GPIO_Init+0x304>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4f      	ldr	r2, [pc, #316]	; (8002820 <HAL_GPIO_Init+0x308>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_GPIO_Init+0x314>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_GPIO_Init+0x318>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x20a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x31c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x206>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a49      	ldr	r2, [pc, #292]	; (8002838 <HAL_GPIO_Init+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x202>
 8002716:	2306      	movs	r3, #6
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271a:	2307      	movs	r3, #7
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x304>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_GPIO_Init+0x324>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_GPIO_Init+0x324>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_GPIO_Init+0x324>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_GPIO_Init+0x324>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_GPIO_Init+0x324>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae96 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e0c7      	b.n	80029ec <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	f040 80b7 	bne.w	80029e6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002878:	4a62      	ldr	r2, [pc, #392]	; (8002a04 <HAL_GPIO_DeInit+0x1c4>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_GPIO_DeInit+0x1c8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_DeInit+0xae>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a59      	ldr	r2, [pc, #356]	; (8002a0c <HAL_GPIO_DeInit+0x1cc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_DeInit+0xaa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_GPIO_DeInit+0x1d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_DeInit+0xa6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <HAL_GPIO_DeInit+0x1d4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_DeInit+0xa2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <HAL_GPIO_DeInit+0x1d8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_DeInit+0x9e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <HAL_GPIO_DeInit+0x1dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_DeInit+0x9a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a54      	ldr	r2, [pc, #336]	; (8002a20 <HAL_GPIO_DeInit+0x1e0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_DeInit+0x96>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_DeInit+0xb0>
 80028ee:	2300      	movs	r3, #0
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d132      	bne.n	8002966 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	4946      	ldr	r1, [pc, #280]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	4943      	ldr	r1, [pc, #268]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800291c:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	493f      	ldr	r1, [pc, #252]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 8002926:	4013      	ands	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800292a:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	493c      	ldr	r1, [pc, #240]	; (8002a24 <HAL_GPIO_DeInit+0x1e4>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_GPIO_DeInit+0x1c4>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	43da      	mvns	r2, r3
 8002958:	482a      	ldr	r0, [pc, #168]	; (8002a04 <HAL_GPIO_DeInit+0x1c4>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	400a      	ands	r2, r1
 8002960:	3302      	adds	r3, #2
 8002962:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2103      	movs	r1, #3
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	08d2      	lsrs	r2, r2, #3
 800299c:	4019      	ands	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2103      	movs	r1, #3
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2103      	movs	r1, #3
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f af34 	bls.w	800285c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_PWREx_EnableOverDrive+0x94>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a54:	f7fe ff46 	bl	80018e4 <HAL_GetTick>
 8002a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a5a:	e009      	b.n	8002a70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a5c:	f7fe ff42 	bl	80018e4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6a:	d901      	bls.n	8002a70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e01f      	b.n	8002ab0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d1ee      	bne.n	8002a5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a84:	f7fe ff2e 	bl	80018e4 <HAL_GetTick>
 8002a88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a8a:	e009      	b.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff2a 	bl	80018e4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9a:	d901      	bls.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e007      	b.n	8002ab0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aac:	d1ee      	bne.n	8002a8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	420e0040 	.word	0x420e0040
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	420e0044 	.word	0x420e0044

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fe94 	bl	80018e4 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe fe90 	bl	80018e4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f855 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fdf4 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08004e94 	.word	0x08004e94
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	20000008 	.word	0x20000008

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08004ea4 	.word	0x08004ea4

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08004ea4 	.word	0x08004ea4

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b0ae      	sub	sp, #184	; 0xb8
 8002d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d22:	4bcb      	ldr	r3, [pc, #812]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	f200 8206 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x440>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	0800313d 	.word	0x0800313d
 8002d40:	0800313d 	.word	0x0800313d
 8002d44:	0800313d 	.word	0x0800313d
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	0800313d 	.word	0x0800313d
 8002d50:	0800313d 	.word	0x0800313d
 8002d54:	0800313d 	.word	0x0800313d
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	0800313d 	.word	0x0800313d
 8002d60:	0800313d 	.word	0x0800313d
 8002d64:	0800313d 	.word	0x0800313d
 8002d68:	08002f6d 	.word	0x08002f6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4bb9      	ldr	r3, [pc, #740]	; (8003054 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d72:	e1e7      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d74:	4bb8      	ldr	r3, [pc, #736]	; (8003058 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d7a:	e1e3      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7c:	4bb4      	ldr	r3, [pc, #720]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d88:	4bb1      	ldr	r3, [pc, #708]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d071      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d94:	4bae      	ldr	r3, [pc, #696]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002da0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dec:	4649      	mov	r1, r9
 8002dee:	018b      	lsls	r3, r1, #6
 8002df0:	4641      	mov	r1, r8
 8002df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df6:	4641      	mov	r1, r8
 8002df8:	018a      	lsls	r2, r1, #6
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e00:	4649      	mov	r1, r9
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e14:	4649      	mov	r1, r9
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4641      	mov	r1, r8
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4622      	mov	r2, r4
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2e:	462b      	mov	r3, r5
 8002e30:	460a      	mov	r2, r1
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e44:	4629      	mov	r1, r5
 8002e46:	024b      	lsls	r3, r1, #9
 8002e48:	4621      	mov	r1, r4
 8002e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e4e:	4621      	mov	r1, r4
 8002e50:	024a      	lsls	r2, r1, #9
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e68:	f7fd f9cc 	bl	8000204 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e76:	e067      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e92:	2300      	movs	r3, #0
 8002e94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ecc:	4649      	mov	r1, r9
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4641      	mov	r1, r8
 8002edc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ef2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002efa:	4692      	mov	sl, r2
 8002efc:	469b      	mov	fp, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb1a 0303 	adds.w	r3, sl, r3
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	462b      	mov	r3, r5
 8002f08:	eb4b 0303 	adc.w	r3, fp, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	028b      	lsls	r3, r1, #10
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f24:	4621      	mov	r1, r4
 8002f26:	028a      	lsls	r2, r1, #10
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f30:	2200      	movs	r2, #0
 8002f32:	673b      	str	r3, [r7, #112]	; 0x70
 8002f34:	677a      	str	r2, [r7, #116]	; 0x74
 8002f36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f3a:	f7fd f963 	bl	8000204 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4613      	mov	r3, r2
 8002f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f6a:	e0eb      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d06b      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f96:	663b      	str	r3, [r7, #96]	; 0x60
 8002f98:	2300      	movs	r3, #0
 8002f9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	0159      	lsls	r1, r3, #5
 8002fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb2:	0150      	lsls	r0, r2, #5
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4621      	mov	r1, r4
 8002fba:	1a51      	subs	r1, r2, r1
 8002fbc:	61b9      	str	r1, [r7, #24]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	018b      	lsls	r3, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fdc:	4651      	mov	r1, sl
 8002fde:	018a      	lsls	r2, r1, #6
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe6:	4659      	mov	r1, fp
 8002fe8:	eb63 0901 	sbc.w	r9, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003000:	4690      	mov	r8, r2
 8003002:	4699      	mov	r9, r3
 8003004:	4623      	mov	r3, r4
 8003006:	eb18 0303 	adds.w	r3, r8, r3
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	462b      	mov	r3, r5
 800300e:	eb49 0303 	adc.w	r3, r9, r3
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003020:	4629      	mov	r1, r5
 8003022:	024b      	lsls	r3, r1, #9
 8003024:	4621      	mov	r1, r4
 8003026:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302a:	4621      	mov	r1, r4
 800302c:	024a      	lsls	r2, r1, #9
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003036:	2200      	movs	r2, #0
 8003038:	65bb      	str	r3, [r7, #88]	; 0x58
 800303a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800303c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003040:	f7fd f8e0 	bl	8000204 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800304e:	e065      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x420>
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_GetSysClockFreq+0x458>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	4618      	mov	r0, r3
 8003066:	4611      	mov	r1, r2
 8003068:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800306c:	653b      	str	r3, [r7, #80]	; 0x50
 800306e:	2300      	movs	r3, #0
 8003070:	657b      	str	r3, [r7, #84]	; 0x54
 8003072:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003076:	4642      	mov	r2, r8
 8003078:	464b      	mov	r3, r9
 800307a:	f04f 0000 	mov.w	r0, #0
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	0159      	lsls	r1, r3, #5
 8003084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003088:	0150      	lsls	r0, r2, #5
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4641      	mov	r1, r8
 8003090:	1a51      	subs	r1, r2, r1
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	4649      	mov	r1, r9
 8003096:	eb63 0301 	sbc.w	r3, r3, r1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030a8:	4659      	mov	r1, fp
 80030aa:	018b      	lsls	r3, r1, #6
 80030ac:	4651      	mov	r1, sl
 80030ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b2:	4651      	mov	r1, sl
 80030b4:	018a      	lsls	r2, r1, #6
 80030b6:	4651      	mov	r1, sl
 80030b8:	1a54      	subs	r4, r2, r1
 80030ba:	4659      	mov	r1, fp
 80030bc:	eb63 0501 	sbc.w	r5, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	00eb      	lsls	r3, r5, #3
 80030ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ce:	00e2      	lsls	r2, r4, #3
 80030d0:	4614      	mov	r4, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	4643      	mov	r3, r8
 80030d6:	18e3      	adds	r3, r4, r3
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	464b      	mov	r3, r9
 80030dc:	eb45 0303 	adc.w	r3, r5, r3
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ee:	4629      	mov	r1, r5
 80030f0:	028b      	lsls	r3, r1, #10
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f8:	4621      	mov	r1, r4
 80030fa:	028a      	lsls	r2, r1, #10
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003104:	2200      	movs	r2, #0
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	64fa      	str	r2, [r7, #76]	; 0x4c
 800310a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800310e:	f7fd f879 	bl	8000204 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4613      	mov	r3, r2
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_RCC_GetSysClockFreq+0x458>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0f1b      	lsrs	r3, r3, #28
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800312a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800312e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800313a:	e003      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetSysClockFreq+0x45c>)
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003144:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003148:	4618      	mov	r0, r3
 800314a:	37b8      	adds	r7, #184	; 0xb8
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400

0800315c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003162:	f7fe fbbf 	bl	80018e4 <HAL_GetTick>
 8003166:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003168:	4b72      	ldr	r3, [pc, #456]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a71      	ldr	r2, [pc, #452]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe fbb5 	bl	80018e4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0d0      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003188:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003194:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800319a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031a0:	f7fe fba0 	bl	80018e4 <HAL_GetTick>
 80031a4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fe fb99 	bl	80018e4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0b2      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031c4:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031d0:	f7fe fb88 	bl	80018e4 <HAL_GetTick>
 80031d4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80031dc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80031e0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fb7e 	bl	80018e4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e099      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031f6:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003202:	f7fe fb6f 	bl	80018e4 <HAL_GetTick>
 8003206:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003208:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a49      	ldr	r2, [pc, #292]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800320e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003212:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fb65 	bl	80018e4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e080      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003228:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003234:	f7fe fb56 	bl	80018e4 <HAL_GetTick>
 8003238:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 8003240:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003244:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003248:	f7fe fb4c 	bl	80018e4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e067      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003266:	f7fe fb3d 	bl	80018e4 <HAL_GetTick>
 800326a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a30      	ldr	r2, [pc, #192]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327a:	f7fe fb33 	bl	80018e4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e04e      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 800329a:	4a27      	ldr	r2, [pc, #156]	; (8003338 <HAL_RCC_DeInit+0x1dc>)
 800329c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <HAL_RCC_DeInit+0x1dc>)
 80032a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <HAL_RCC_DeInit+0x1e0>)
 80032aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80032b8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032d8:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80032dc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_DeInit+0x1d8>)
 8003308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCC_DeInit+0x1e4>)
 8003310:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <HAL_RCC_DeInit+0x1e8>)
 8003312:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_DeInit+0x1ec>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fa9f 	bl	800185c <HAL_InitTick>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003328:	2300      	movs	r3, #0
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	24003010 	.word	0x24003010
 800333c:	04003010 	.word	0x04003010
 8003340:	20000004 	.word	0x20000004
 8003344:	00f42400 	.word	0x00f42400
 8003348:	20000008 	.word	0x20000008

0800334c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e28d      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8083 	beq.w	8003472 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b04      	cmp	r3, #4
 8003376:	d019      	beq.n	80033ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003378:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003380:	2b08      	cmp	r3, #8
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003384:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003390:	d00c      	beq.n	80033ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003392:	4b8b      	ldr	r3, [pc, #556]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800339a:	2b0c      	cmp	r3, #12
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05b      	beq.n	8003470 <HAL_RCC_OscConfig+0x124>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d157      	bne.n	8003470 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e25a      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x90>
 80033ce:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7b      	ldr	r2, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xcc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0xb4>
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xcc>
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6b      	ldr	r2, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fa60 	bl	80018e4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fa5c 	bl	80018e4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e21f      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xdc>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fa4c 	bl	80018e4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fa48 	bl	80018e4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e20b      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x104>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06f      	beq.n	800355e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800347e:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003492:	2b08      	cmp	r3, #8
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x186>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1d3      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4937      	ldr	r1, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x278>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe f9f5 	bl	80018e4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe f9f1 	bl	80018e4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1b4      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4925      	ldr	r1, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x278>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe f9d4 	bl	80018e4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe f9d0 	bl	80018e4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e193      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d036      	beq.n	80035d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe f9b4 	bl	80018e4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe f9b0 	bl	80018e4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e173      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x234>
 800359e:	e01b      	b.n	80035d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fe f99d 	bl	80018e4 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	e00e      	b.n	80035cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fe f999 	bl	80018e4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d907      	bls.n	80035cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e15c      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	42470000 	.word	0x42470000
 80035c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b8a      	ldr	r3, [pc, #552]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ea      	bne.n	80035ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8097 	beq.w	8003714 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b83      	ldr	r3, [pc, #524]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b79      	ldr	r3, [pc, #484]	; (80037fc <HAL_RCC_OscConfig+0x4b0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x4b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCC_OscConfig+0x4b0>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fe f959 	bl	80018e4 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe f955 	bl	80018e4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e118      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCC_OscConfig+0x4b0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x31e>
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	e01c      	b.n	80036a4 <HAL_RCC_OscConfig+0x358>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x340>
 8003672:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5d      	ldr	r2, [pc, #372]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0x358>
 800368c:	4b5a      	ldr	r3, [pc, #360]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a59      	ldr	r2, [pc, #356]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a56      	ldr	r2, [pc, #344]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe f91a 	bl	80018e4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe f916 	bl	80018e4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0d7      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ee      	beq.n	80036b4 <HAL_RCC_OscConfig+0x368>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe f904 	bl	80018e4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe f900 	bl	80018e4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0c1      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ee      	bne.n	80036e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80ad 	beq.w	8003878 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	d060      	beq.n	80037ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d145      	bne.n	80037be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b33      	ldr	r3, [pc, #204]	; (8003800 <HAL_RCC_OscConfig+0x4b4>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe f8d4 	bl	80018e4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe f8d0 	bl	80018e4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e093      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	3b01      	subs	r3, #1
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	071b      	lsls	r3, r3, #28
 800378a:	491b      	ldr	r1, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x4b4>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe f8a5 	bl	80018e4 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe f8a1 	bl	80018e4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e064      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x452>
 80037bc:	e05c      	b.n	8003878 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_OscConfig+0x4b4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f88e 	bl	80018e4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe f88a 	bl	80018e4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04d      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x480>
 80037ea:	e045      	b.n	8003878 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e040      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40007000 	.word	0x40007000
 8003800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003804:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_RCC_OscConfig+0x538>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d030      	beq.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d129      	bne.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d122      	bne.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383c:	4293      	cmp	r3, r2
 800383e:	d119      	bne.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d10f      	bne.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e03f      	b.n	800391a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd fe44 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 ffcb 	bl	8004868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e021      	b.n	8003978 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fd fead 	bl	80016ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d17c      	bne.n	8003a9a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_UART_Transmit+0x2c>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e075      	b.n	8003a9c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_UART_Transmit+0x3e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e06e      	b.n	8003a9c <HAL_UART_Transmit+0x11c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2221      	movs	r2, #33	; 0x21
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d4:	f7fd ff86 	bl	80018e4 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d108      	bne.n	8003a02 <HAL_UART_Transmit+0x82>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e003      	b.n	8003a0a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a12:	e02a      	b.n	8003a6a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fc54 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e036      	b.n	8003a9c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	3302      	adds	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e007      	b.n	8003a5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1cf      	bne.n	8003a14 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2140      	movs	r1, #64	; 0x40
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fc24 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e006      	b.n	8003a9c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	; 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d152      	bne.n	8003b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e04b      	b.n	8003b66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e044      	b.n	8003b66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fc59 	bl	80043a8 <UART_Start_Receive_DMA>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d12c      	bne.n	8003b5e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d125      	bne.n	8003b58 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	617b      	str	r3, [r7, #20]
   return(result);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f043 0310 	orr.w	r3, r3, #16
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b42:	627a      	str	r2, [r7, #36]	; 0x24
 8003b44:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6a39      	ldr	r1, [r7, #32]
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b56:	e002      	b.n	8003b5e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b62:	e000      	b.n	8003b66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3730      	adds	r7, #48	; 0x30
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0ba      	sub	sp, #232	; 0xe8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x66>
 8003bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fd8f 	bl	80046f2 <UART_Receive_IT>
      return;
 8003bd4:	e256      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80de 	beq.w	8003d9c <HAL_UART_IRQHandler+0x22c>
 8003be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80d1 	beq.w	8003d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_UART_IRQHandler+0xae>
 8003c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_UART_IRQHandler+0xd2>
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_UART_IRQHandler+0xf6>
 8003c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d011      	beq.n	8003c96 <HAL_UART_IRQHandler+0x126>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 81ed 	beq.w	800407a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_UART_IRQHandler+0x14e>
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd1a 	bl	80046f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_UART_IRQHandler+0x17a>
 8003ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04f      	beq.n	8003d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fc22 	bl	8004534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d141      	bne.n	8003d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1d9      	bne.n	8003cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	4a7d      	ldr	r2, [pc, #500]	; (8003f4c <HAL_UART_IRQHandler+0x3dc>)
 8003d58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe f8e4 	bl	8001f2c <HAL_DMA_Abort_IT>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	e00e      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9a4 	bl	80040c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	e00a      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9a0 	bl	80040c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	e006      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f99c 	bl	80040c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d96:	e170      	b.n	800407a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	bf00      	nop
    return;
 8003d9a:	e16e      	b.n	800407a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 814a 	bne.w	800403a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8143 	beq.w	800403a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 813c 	beq.w	800403a <HAL_UART_IRQHandler+0x4ca>
  {
	 __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	f040 80b4 	bne.w	8003f50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8140 	beq.w	800407e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f080 8139 	bcs.w	800407e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	f000 8088 	beq.w	8003f32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1d9      	bne.n	8003e22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e1      	bne.n	8003e6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	f023 0310 	bic.w	r3, r3, #16
 8003f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e3      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd ff8d 	bl	8001e4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fefa 	bl	8000d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f48:	e099      	b.n	800407e <HAL_UART_IRQHandler+0x50e>
 8003f4a:	bf00      	nop
 8003f4c:	080045fb 	.word	0x080045fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 808b 	beq.w	8004082 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8086 	beq.w	8004082 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60fb      	str	r3, [r7, #12]
   return(result);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e3      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800402c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fe82 	bl	8000d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004038:	e023      	b.n	8004082 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_UART_IRQHandler+0x4ea>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fae5 	bl	8004622 <UART_Transmit_IT>
    return;
 8004058:	e014      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <HAL_UART_IRQHandler+0x514>
 8004066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb25 	bl	80046c2 <UART_EndTransmit_IT>
    return;
 8004078:	e004      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
    return;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
      return;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
      return;
 8004082:	bf00      	nop
  }
}
 8004084:	37e8      	adds	r7, #232	; 0xe8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop

0800408c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b09c      	sub	sp, #112	; 0x70
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d172      	bne.n	80041de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	2200      	movs	r2, #0
 80040fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004114:	66bb      	str	r3, [r7, #104]	; 0x68
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800411e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004120:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
 800414a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004152:	647a      	str	r2, [r7, #68]	; 0x44
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	623b      	str	r3, [r7, #32]
   return(result);
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004186:	633a      	str	r2, [r7, #48]	; 0x30
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d119      	bne.n	80041de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ca:	61fa      	str	r2, [r7, #28]
 80041cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	617b      	str	r3, [r7, #20]
   return(result);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d106      	bne.n	80041f4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ea:	4619      	mov	r1, r3
 80041ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041ee:	f7fc fda5 	bl	8000d3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f2:	e002      	b.n	80041fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041f6:	f7ff ff53 	bl	80040a0 <HAL_UART_RxCpltCallback>
}
 80041fa:	bf00      	nop
 80041fc:	3770      	adds	r7, #112	; 0x70
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	2b01      	cmp	r3, #1
 8004216:	d108      	bne.n	800422a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7fc fd8a 	bl	8000d3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004228:	e002      	b.n	8004230 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff ff42 	bl	80040b4 <HAL_UART_RxHalfCpltCallback>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d108      	bne.n	800427e <UART_DMAError+0x46>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004278:	68b8      	ldr	r0, [r7, #8]
 800427a:	f000 f933 	bl	80044e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b22      	cmp	r3, #34	; 0x22
 800429e:	d108      	bne.n	80042b2 <UART_DMAError+0x7a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042ac:	68b8      	ldr	r0, [r7, #8]
 80042ae:	f000 f941 	bl	8004534 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0210 	orr.w	r2, r3, #16
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7ff ff02 	bl	80040c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b090      	sub	sp, #64	; 0x40
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	e050      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d04c      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
 80042ec:	f7fd fafa 	bl	80018e4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d241      	bcs.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800431c:	637a      	str	r2, [r7, #52]	; 0x34
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	613b      	str	r3, [r7, #16]
   return(result);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004350:	623a      	str	r2, [r7, #32]
 8004352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	69f9      	ldr	r1, [r7, #28]
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	61bb      	str	r3, [r7, #24]
   return(result);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e00f      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	d09f      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3740      	adds	r7, #64	; 0x40
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b098      	sub	sp, #96	; 0x60
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2222      	movs	r2, #34	; 0x22
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <UART_Start_Receive_DMA+0x130>)
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <UART_Start_Receive_DMA+0x134>)
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <UART_Start_Receive_DMA+0x138>)
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	2200      	movs	r2, #0
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f7fd fcc8 	bl	8001d9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	65bb      	str	r3, [r7, #88]	; 0x58
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004452:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	657b      	str	r3, [r7, #84]	; 0x54
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004486:	63ba      	str	r2, [r7, #56]	; 0x38
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800448c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	617b      	str	r3, [r7, #20]
   return(result);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044ba:	627a      	str	r2, [r7, #36]	; 0x24
 80044bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6a39      	ldr	r1, [r7, #32]
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3760      	adds	r7, #96	; 0x60
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080040dd 	.word	0x080040dd
 80044dc:	08004203 	.word	0x08004203
 80044e0:	08004239 	.word	0x08004239

080044e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	61ba      	str	r2, [r7, #24]
 800450e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	613b      	str	r3, [r7, #16]
   return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004528:	bf00      	nop
 800452a:	3724      	adds	r7, #36	; 0x24
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b095      	sub	sp, #84	; 0x54
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455c:	643a      	str	r2, [r7, #64]	; 0x40
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004590:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d119      	bne.n	80045e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	61ba      	str	r2, [r7, #24]
 80045ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045ee:	bf00      	nop
 80045f0:	3754      	adds	r7, #84	; 0x54
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fd57 	bl	80040c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b21      	cmp	r3, #33	; 0x21
 8004634:	d13e      	bne.n	80046b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d114      	bne.n	800466a <UART_Transmit_IT+0x48>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d110      	bne.n	800466a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	621a      	str	r2, [r3, #32]
 8004668:	e008      	b.n	800467c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6211      	str	r1, [r2, #32]
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29b      	uxth	r3, r3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4619      	mov	r1, r3
 800468a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800469e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fcd2 	bl	800408c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b08c      	sub	sp, #48	; 0x30
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b22      	cmp	r3, #34	; 0x22
 8004704:	f040 80ab 	bne.w	800485e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d117      	bne.n	8004742 <UART_Receive_IT+0x50>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d113      	bne.n	8004742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	b29a      	uxth	r2, r3
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	1c9a      	adds	r2, r3, #2
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
 8004740:	e026      	b.n	8004790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d007      	beq.n	8004766 <UART_Receive_IT+0x74>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <UART_Receive_IT+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e008      	b.n	8004786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004780:	b2da      	uxtb	r2, r3
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4619      	mov	r1, r3
 800479e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d15a      	bne.n	800485a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0220 	bic.w	r2, r2, #32
 80047b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d135      	bne.n	8004850 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	613b      	str	r3, [r7, #16]
   return(result);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f023 0310 	bic.w	r3, r3, #16
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	623a      	str	r2, [r7, #32]
 800480c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	6a3a      	ldr	r2, [r7, #32]
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	61bb      	str	r3, [r7, #24]
   return(result);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e5      	bne.n	80047ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b10      	cmp	r3, #16
 800482a:	d10a      	bne.n	8004842 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fc fa77 	bl	8000d3c <HAL_UARTEx_RxEventCallback>
 800484e:	e002      	b.n	8004856 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fc25 	bl	80040a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e002      	b.n	8004860 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3730      	adds	r7, #48	; 0x30
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b0c0      	sub	sp, #256	; 0x100
 800486e:	af00      	add	r7, sp, #0
 8004870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	ea40 0301 	orr.w	r3, r0, r1
 8004890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048c0:	f021 010c 	bic.w	r1, r1, #12
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ce:	430b      	orrs	r3, r1
 80048d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	6999      	ldr	r1, [r3, #24]
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	ea40 0301 	orr.w	r3, r0, r1
 80048ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <UART_SetConfig+0x2cc>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d005      	beq.n	8004908 <UART_SetConfig+0xa0>
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b8d      	ldr	r3, [pc, #564]	; (8004b38 <UART_SetConfig+0x2d0>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d104      	bne.n	8004912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe f9e4 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 800490c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004910:	e003      	b.n	800491a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004912:	f7fe f9cb 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	f040 810c 	bne.w	8004b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	1891      	adds	r1, r2, r2
 8004940:	65b9      	str	r1, [r7, #88]	; 0x58
 8004942:	415b      	adcs	r3, r3
 8004944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800494a:	4621      	mov	r1, r4
 800494c:	eb12 0801 	adds.w	r8, r2, r1
 8004950:	4629      	mov	r1, r5
 8004952:	eb43 0901 	adc.w	r9, r3, r1
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496a:	4690      	mov	r8, r2
 800496c:	4699      	mov	r9, r3
 800496e:	4623      	mov	r3, r4
 8004970:	eb18 0303 	adds.w	r3, r8, r3
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004978:	462b      	mov	r3, r5
 800497a:	eb49 0303 	adc.w	r3, r9, r3
 800497e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800498e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004996:	460b      	mov	r3, r1
 8004998:	18db      	adds	r3, r3, r3
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
 800499c:	4613      	mov	r3, r2
 800499e:	eb42 0303 	adc.w	r3, r2, r3
 80049a2:	657b      	str	r3, [r7, #84]	; 0x54
 80049a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049ac:	f7fb fc2a 	bl	8000204 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	011c      	lsls	r4, r3, #4
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049d8:	415b      	adcs	r3, r3
 80049da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049e0:	4641      	mov	r1, r8
 80049e2:	eb12 0a01 	adds.w	sl, r2, r1
 80049e6:	4649      	mov	r1, r9
 80049e8:	eb43 0b01 	adc.w	fp, r3, r1
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	4692      	mov	sl, r2
 8004a02:	469b      	mov	fp, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	eb1a 0303 	adds.w	r3, sl, r3
 8004a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	eb4b 0303 	adc.w	r3, fp, r3
 8004a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	18db      	adds	r3, r3, r3
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	4613      	mov	r3, r2
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a42:	f7fb fbdf 	bl	8000204 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2264      	movs	r2, #100	; 0x64
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	1acb      	subs	r3, r1, r3
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004a64:	fba3 2302 	umull	r2, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a70:	441c      	add	r4, r3
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	1891      	adds	r1, r2, r2
 8004a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a94:	4641      	mov	r1, r8
 8004a96:	1851      	adds	r1, r2, r1
 8004a98:	6339      	str	r1, [r7, #48]	; 0x30
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	414b      	adcs	r3, r1
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004aac:	4659      	mov	r1, fp
 8004aae:	00cb      	lsls	r3, r1, #3
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	00ca      	lsls	r2, r1, #3
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac8:	464b      	mov	r3, r9
 8004aca:	460a      	mov	r2, r1
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004afe:	f7fb fb81 	bl	8000204 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	3332      	adds	r3, #50	; 0x32
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	f003 0207 	and.w	r2, r3, #7
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4422      	add	r2, r4
 8004b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b30:	e105      	b.n	8004d3e <UART_SetConfig+0x4d6>
 8004b32:	bf00      	nop
 8004b34:	40011000 	.word	0x40011000
 8004b38:	40011400 	.word	0x40011400
 8004b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	6239      	str	r1, [r7, #32]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b62:	4641      	mov	r1, r8
 8004b64:	1854      	adds	r4, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb43 0501 	adc.w	r5, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	00eb      	lsls	r3, r5, #3
 8004b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	4643      	mov	r3, r8
 8004b82:	18e3      	adds	r3, r4, r3
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b88:	464b      	mov	r3, r9
 8004b8a:	eb45 0303 	adc.w	r3, r5, r3
 8004b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bae:	4629      	mov	r1, r5
 8004bb0:	008b      	lsls	r3, r1, #2
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb8:	4621      	mov	r1, r4
 8004bba:	008a      	lsls	r2, r1, #2
 8004bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bc0:	f7fb fb20 	bl	8000204 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4b60      	ldr	r3, [pc, #384]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	011c      	lsls	r4, r3, #4
 8004bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	61b9      	str	r1, [r7, #24]
 8004bec:	415b      	adcs	r3, r3
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6139      	str	r1, [r7, #16]
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c56:	4641      	mov	r1, r8
 8004c58:	008a      	lsls	r2, r1, #2
 8004c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c5e:	f7fb fad1 	bl	8000204 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c86:	441c      	add	r4, r3
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c90:	677a      	str	r2, [r7, #116]	; 0x74
 8004c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c96:	4642      	mov	r2, r8
 8004c98:	464b      	mov	r3, r9
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	1851      	adds	r1, r2, r1
 8004caa:	6039      	str	r1, [r7, #0]
 8004cac:	4649      	mov	r1, r9
 8004cae:	414b      	adcs	r3, r1
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	00cb      	lsls	r3, r1, #3
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc8:	4651      	mov	r1, sl
 8004cca:	00ca      	lsls	r2, r1, #3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4642      	mov	r2, r8
 8004cd4:	189b      	adds	r3, r3, r2
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd8:	464b      	mov	r3, r9
 8004cda:	460a      	mov	r2, r1
 8004cdc:	eb42 0303 	adc.w	r3, r2, r3
 8004ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	663b      	str	r3, [r7, #96]	; 0x60
 8004cec:	667a      	str	r2, [r7, #100]	; 0x64
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	008b      	lsls	r3, r1, #2
 8004cfe:	4641      	mov	r1, r8
 8004d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d04:	4641      	mov	r1, r8
 8004d06:	008a      	lsls	r2, r1, #2
 8004d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d0c:	f7fb fa7a 	bl	8000204 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004d16:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2164      	movs	r1, #100	; 0x64
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	3332      	adds	r3, #50	; 0x32
 8004d28:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4422      	add	r2, r4
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	bf00      	nop
 8004d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	51eb851f 	.word	0x51eb851f

08004d50 <__libc_init_array>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4d0d      	ldr	r5, [pc, #52]	; (8004d88 <__libc_init_array+0x38>)
 8004d54:	4c0d      	ldr	r4, [pc, #52]	; (8004d8c <__libc_init_array+0x3c>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	2600      	movs	r6, #0
 8004d5c:	42a6      	cmp	r6, r4
 8004d5e:	d109      	bne.n	8004d74 <__libc_init_array+0x24>
 8004d60:	4d0b      	ldr	r5, [pc, #44]	; (8004d90 <__libc_init_array+0x40>)
 8004d62:	4c0c      	ldr	r4, [pc, #48]	; (8004d94 <__libc_init_array+0x44>)
 8004d64:	f000 f882 	bl	8004e6c <_init>
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	42a6      	cmp	r6, r4
 8004d70:	d105      	bne.n	8004d7e <__libc_init_array+0x2e>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d78:	4798      	blx	r3
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	e7ee      	b.n	8004d5c <__libc_init_array+0xc>
 8004d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d82:	4798      	blx	r3
 8004d84:	3601      	adds	r6, #1
 8004d86:	e7f2      	b.n	8004d6e <__libc_init_array+0x1e>
 8004d88:	08004ebc 	.word	0x08004ebc
 8004d8c:	08004ebc 	.word	0x08004ebc
 8004d90:	08004ebc 	.word	0x08004ebc
 8004d94:	08004ec0 	.word	0x08004ec0

08004d98 <free>:
 8004d98:	4b02      	ldr	r3, [pc, #8]	; (8004da4 <free+0xc>)
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f000 b80b 	b.w	8004db8 <_free_r>
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <_free_r>:
 8004db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d044      	beq.n	8004e48 <_free_r+0x90>
 8004dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc2:	9001      	str	r0, [sp, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dca:	bfb8      	it	lt
 8004dcc:	18e4      	addlt	r4, r4, r3
 8004dce:	f000 f83f 	bl	8004e50 <__malloc_lock>
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <_free_r+0x94>)
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	b933      	cbnz	r3, 8004de8 <_free_r+0x30>
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de4:	f000 b83a 	b.w	8004e5c <__malloc_unlock>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d908      	bls.n	8004dfe <_free_r+0x46>
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	e7ed      	b.n	8004dda <_free_r+0x22>
 8004dfe:	461a      	mov	r2, r3
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b10b      	cbz	r3, 8004e08 <_free_r+0x50>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d9fa      	bls.n	8004dfe <_free_r+0x46>
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	1855      	adds	r5, r2, r1
 8004e0c:	42a5      	cmp	r5, r4
 8004e0e:	d10b      	bne.n	8004e28 <_free_r+0x70>
 8004e10:	6824      	ldr	r4, [r4, #0]
 8004e12:	4421      	add	r1, r4
 8004e14:	1854      	adds	r4, r2, r1
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	d1e0      	bne.n	8004dde <_free_r+0x26>
 8004e1c:	681c      	ldr	r4, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6053      	str	r3, [r2, #4]
 8004e22:	4421      	add	r1, r4
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	e7da      	b.n	8004dde <_free_r+0x26>
 8004e28:	d902      	bls.n	8004e30 <_free_r+0x78>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	e7d6      	b.n	8004dde <_free_r+0x26>
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	1961      	adds	r1, r4, r5
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf04      	itt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	bf04      	itt	eq
 8004e40:	1949      	addeq	r1, r1, r5
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6054      	str	r4, [r2, #4]
 8004e46:	e7ca      	b.n	8004dde <_free_r+0x26>
 8004e48:	b003      	add	sp, #12
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	20000264 	.word	0x20000264

08004e50 <__malloc_lock>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__malloc_lock+0x8>)
 8004e52:	f000 b809 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	20000268 	.word	0x20000268

08004e5c <__malloc_unlock>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__malloc_unlock+0x8>)
 8004e5e:	f000 b804 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	20000268 	.word	0x20000268

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr
