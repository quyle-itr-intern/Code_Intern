
ADC_TRIGGER_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c3c  08003c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c44  08003c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003c58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003c58  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9e  00000000  00000000  0002c3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002229d  00000000  00000000  0002f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e36e  00000000  00000000  00051abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d706e  00000000  00000000  0005fe2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136e99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  00136eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c14 	.word	0x08003c14

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003c14 	.word	0x08003c14

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile float fadc_volts = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	fadc_volts = HAL_ADC_GetValue(&hadc1)*1.0/4095 * 3.3;
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000d52:	f000 fd75 	bl	8001840 <HAL_ADC_GetValue>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb97 	bl	800048c <__aeabi_ui2d>
 8000d5e:	a310      	add	r3, pc, #64	; (adr r3, 8000da0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f7ff fd36 	bl	80007d4 <__aeabi_ddiv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	a30d      	add	r3, pc, #52	; (adr r3, 8000da8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fc03 	bl	8000580 <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fe0f 	bl	80009a4 <__aeabi_d2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d8a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000d90:	f001 fa6f 	bl	8002272 <HAL_GPIO_TogglePin>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	f3af 8000 	nop.w
 8000da0:	00000000 	.word	0x00000000
 8000da4:	40affe00 	.word	0x40affe00
 8000da8:	66666666 	.word	0x66666666
 8000dac:	400a6666 	.word	0x400a6666
 8000db0:	20000028 	.word	0x20000028
 8000db4:	200000b8 	.word	0x200000b8
 8000db8:	40020000 	.word	0x40020000

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 fa9a 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f812 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f948 	bl	800105c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dcc:	f000 f880 	bl	8000ed0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dd0:	f000 f8d0 	bl	8000f74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <main+0x28>)
 8000dd6:	f000 fb45 	bl	8001464 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <main+0x2c>)
 8000dde:	f002 f90f 	bl	8003000 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <main+0x26>
 8000de4:	20000028 	.word	0x20000028
 8000de8:	20000070 	.word	0x20000070

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 ff02 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e60:	23b4      	movs	r3, #180	; 0xb4
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fd7d 	bl	8002974 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e80:	f000 f92e 	bl	80010e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e84:	f001 fa10 	bl	80022a8 <HAL_PWREx_EnableOverDrive>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e8e:	f000 f927 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2302      	movs	r3, #2
 8000e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2105      	movs	r1, #5
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fa49 	bl	8002348 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ebc:	f000 f910 	bl	80010e0 <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3750      	adds	r7, #80	; 0x50
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f36:	f000 fa51 	bl	80013dc <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f40:	f000 f8ce 	bl	80010e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000f56:	f000 fc95 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f60:	f000 f8be 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000028 	.word	0x20000028
 8000f70:	40012000 	.word	0x40012000

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fac:	f242 3227 	movw	r2, #8999	; 0x2327
 8000fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fcc:	4821      	ldr	r0, [pc, #132]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fce:	f001 ff6f 	bl	8002eb0 <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fd8:	f000 f882 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481a      	ldr	r0, [pc, #104]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000fea:	f002 f993 	bl	8003314 <HAL_TIM_ConfigClockSource>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ff4:	f000 f874 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <MX_TIM3_Init+0xe0>)
 8000ffa:	f001 ffa8 	bl	8002f4e <HAL_TIM_PWM_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001004:	f000 f86c 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001008:	2320      	movs	r3, #32
 800100a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4619      	mov	r1, r3
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <MX_TIM3_Init+0xe0>)
 8001018:	f002 fd54 	bl	8003ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001022:	f000 f85d 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001026:	2360      	movs	r3, #96	; 0x60
 8001028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM3_Init+0xe0>)
 800103e:	f002 f8a7 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001048:	f000 f84a 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3738      	adds	r7, #56	; 0x38
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000070 	.word	0x20000070
 8001058:	40000400 	.word	0x40000400

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_GPIO_Init+0x7c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_GPIO_Init+0x7c>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_GPIO_Init+0x7c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_GPIO_Init+0x7c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x7c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_GPIO_Init+0x7c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_GPIO_Init+0x80>)
 80010b0:	f001 f8c6 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010b4:	2320      	movs	r3, #32
 80010b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0x80>)
 80010cc:	f000 ff24 	bl	8001f18 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0x8c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12f      	bne.n	80011be <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0x90>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_ADC_MspInit+0x90>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_ADC_MspInit+0x90>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_ADC_MspInit+0x90>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_ADC_MspInit+0x90>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_ADC_MspInit+0x90>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_ADC_MspInit+0x94>)
 80011aa:	f000 feb5 	bl	8001f18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2012      	movs	r0, #18
 80011b4:	f000 fe79 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b8:	2012      	movs	r0, #18
 80011ba:	f000 fe92 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_Base_MspInit+0x3c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10d      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_TIM_Base_MspInit+0x40>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_TIM_Base_MspInit+0x40>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_TIM_Base_MspInit+0x40>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40000400 	.word	0x40000400
 8001214:	40023800 	.word	0x40023800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f89a 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <ADC_IRQHandler+0x10>)
 8001272:	f000 f9d5 	bl	8001620 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000028 	.word	0x20000028

08001280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f002 fc73 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fd71 	bl	8000dbc <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012e8:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 80012ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012f0:	200000c0 	.word	0x200000c0

080012f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <CAN1_RX0_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fdb7 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fede 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fdcf 	bl	8001efe <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 fd97 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000008 	.word	0x20000008
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	200000bc 	.word	0x200000bc

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200000bc 	.word	0x200000bc

080013dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e033      	b.n	800145a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe9e 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d118      	bne.n	800144c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001422:	f023 0302 	bic.w	r3, r3, #2
 8001426:	f043 0202 	orr.w	r2, r3, #2
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fb5a 	bl	8001ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f023 0303 	bic.w	r3, r3, #3
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
 800144a:	e001      	b.n	8001450 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADC_Start_IT+0x1a>
 800147a:	2302      	movs	r3, #2
 800147c:	e0bd      	b.n	80015fa <HAL_ADC_Start_IT+0x196>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d018      	beq.n	80014c6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a4:	4b58      	ldr	r3, [pc, #352]	; (8001608 <HAL_ADC_Start_IT+0x1a4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_ADC_Start_IT+0x1a8>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9a      	lsrs	r2, r3, #18
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 8085 	bne.w	80015e0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001500:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001514:	d106      	bne.n	8001524 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f023 0206 	bic.w	r2, r3, #6
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
 8001522:	e002      	b.n	800152a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_ADC_Start_IT+0x1ac>)
 8001534:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800154e:	f043 0320 	orr.w	r3, r3, #32
 8001552:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12a      	bne.n	80015b6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2b      	ldr	r2, [pc, #172]	; (8001614 <HAL_ADC_Start_IT+0x1b0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d015      	beq.n	8001596 <HAL_ADC_Start_IT+0x132>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <HAL_ADC_Start_IT+0x1b4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d105      	bne.n	8001580 <HAL_ADC_Start_IT+0x11c>
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_ADC_Start_IT+0x1ac>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_ADC_Start_IT+0x1b8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d136      	bne.n	80015f8 <HAL_ADC_Start_IT+0x194>
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_ADC_Start_IT+0x1ac>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d130      	bne.n	80015f8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d129      	bne.n	80015f8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e020      	b.n	80015f8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_ADC_Start_IT+0x1b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d11b      	bne.n	80015f8 <HAL_ADC_Start_IT+0x194>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d114      	bne.n	80015f8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	e00b      	b.n	80015f8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f043 0210 	orr.w	r2, r3, #16
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83
 8001610:	40012300 	.word	0x40012300
 8001614:	40012000 	.word	0x40012000
 8001618:	40012100 	.word	0x40012100
 800161c:	40012200 	.word	0x40012200

08001620 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d049      	beq.n	80016ea <HAL_ADC_IRQHandler+0xca>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d046      	beq.n	80016ea <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d12b      	bne.n	80016da <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001686:	2b00      	cmp	r3, #0
 8001688:	d127      	bne.n	80016da <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d119      	bne.n	80016da <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0220 	bic.w	r2, r2, #32
 80016b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fb34 	bl	8000d48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0212 	mvn.w	r2, #18
 80016e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d057      	beq.n	80017b0 <HAL_ADC_IRQHandler+0x190>
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d054      	beq.n	80017b0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d139      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001744:	2b00      	cmp	r3, #0
 8001746:	d12b      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d124      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11d      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fa9d 	bl	8001ce0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f06f 020c 	mvn.w	r2, #12
 80017ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d017      	beq.n	80017f6 <HAL_ADC_IRQHandler+0x1d6>
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10d      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f837 	bl	800185a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0201 	mvn.w	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001804:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d015      	beq.n	8001838 <HAL_ADC_IRQHandler+0x218>
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d012      	beq.n	8001838 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f043 0202 	orr.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 0220 	mvn.w	r2, #32
 8001826:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f820 	bl	800186e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f06f 0220 	mvn.w	r2, #32
 8001836:	601a      	str	r2, [r3, #0]
  }
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1c>
 800189c:	2302      	movs	r3, #2
 800189e:	e113      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x244>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d925      	bls.n	80018fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	3b1e      	subs	r3, #30
 80018c6:	2207      	movs	r2, #7
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43da      	mvns	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	400a      	ands	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4403      	add	r3, r0
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	409a      	lsls	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	e022      	b.n	8001942 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6919      	ldr	r1, [r3, #16]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	2207      	movs	r2, #7
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	400a      	ands	r2, r1
 800191e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	4603      	mov	r3, r0
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4403      	add	r3, r0
 8001938:	409a      	lsls	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b06      	cmp	r3, #6
 8001948:	d824      	bhi.n	8001994 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b05      	subs	r3, #5
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b05      	subs	r3, #5
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
 8001992:	e04c      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b23      	subs	r3, #35	; 0x23
 80019ae:	221f      	movs	r2, #31
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b23      	subs	r3, #35	; 0x23
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
 80019e4:	e023      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b41      	subs	r3, #65	; 0x41
 80019f8:	221f      	movs	r2, #31
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	400a      	ands	r2, r1
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b41      	subs	r3, #65	; 0x41
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_ADC_ConfigChannel+0x250>)
 8001a30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_ADC_ConfigChannel+0x254>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d10f      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1d8>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_ADC_ConfigChannel+0x254>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12b      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_ADC_ConfigChannel+0x258>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x1f4>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b11      	cmp	r3, #17
 8001a76:	d122      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_ADC_ConfigChannel+0x258>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d111      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_ADC_ConfigChannel+0x25c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_ADC_ConfigChannel+0x260>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9a      	lsrs	r2, r3, #18
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	10000012 	.word	0x10000012
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <ADC_Init+0x1f0>)
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <ADC_Init+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6899      	ldr	r1, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6899      	ldr	r1, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e00f      	b.n	8001be6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0202 	bic.w	r2, r2, #2
 8001bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6899      	ldr	r1, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e1b      	ldrb	r3, [r3, #24]
 8001c00:	005a      	lsls	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	035a      	lsls	r2, r3, #13
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	e007      	b.n	8001c5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	051a      	lsls	r2, r3, #20
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9e:	025a      	lsls	r2, r3, #9
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	029a      	lsls	r2, r3, #10
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	0f000001 	.word	0x0f000001

08001ce0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e165      	b.n	8002200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8154 	bne.w	80021fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d130      	bne.n	8001fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ae 	beq.w	80021fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a5c      	ldr	r2, [pc, #368]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_GPIO_Init+0x300>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_GPIO_Init+0x304>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x308>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x21a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_GPIO_Init+0x30c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x216>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x310>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x212>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x314>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x20e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_GPIO_Init+0x318>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x20a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x31c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x206>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x320>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x202>
 8002116:	2306      	movs	r3, #6
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800211a:	2307      	movs	r3, #7
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x21c>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x304>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_GPIO_Init+0x324>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a31      	ldr	r2, [pc, #196]	; (800223c <HAL_GPIO_Init+0x324>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_GPIO_Init+0x324>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_GPIO_Init+0x324>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_GPIO_Init+0x324>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_GPIO_Init+0x324>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_GPIO_Init+0x324>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_GPIO_Init+0x324>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae96 	bls.w	8001f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800225c:	e003      	b.n	8002266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	041a      	lsls	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002284:	887a      	ldrh	r2, [r7, #2]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43d9      	mvns	r1, r3
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	400b      	ands	r3, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_PWREx_EnableOverDrive+0x94>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7ff f876 	bl	80013c4 <HAL_GetTick>
 80022d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022da:	e009      	b.n	80022f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022dc:	f7ff f872 	bl	80013c4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ea:	d901      	bls.n	80022f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e01f      	b.n	8002330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_PWREx_EnableOverDrive+0x98>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d1ee      	bne.n	80022dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7ff f85e 	bl	80013c4 <HAL_GetTick>
 8002308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800230a:	e009      	b.n	8002320 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800230c:	f7ff f85a 	bl	80013c4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231a:	d901      	bls.n	8002320 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e007      	b.n	8002330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_PWREx_EnableOverDrive+0x98>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232c:	d1ee      	bne.n	800230c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	420e0040 	.word	0x420e0040
 8002340:	40007000 	.word	0x40007000
 8002344:	420e0044 	.word	0x420e0044

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0cc      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d90c      	bls.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e067      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe ffc4 	bl	80013c4 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe ffc0 	bl	80013c4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff24 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00
 8002504:	40023800 	.word	0x40023800
 8002508:	08003c2c 	.word	0x08003c2c
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0ae      	sub	sp, #184	; 0xb8
 800251a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4bcb      	ldr	r3, [pc, #812]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b0c      	cmp	r3, #12
 8002544:	f200 8206 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x440>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002585 	.word	0x08002585
 8002554:	08002955 	.word	0x08002955
 8002558:	08002955 	.word	0x08002955
 800255c:	08002955 	.word	0x08002955
 8002560:	0800258d 	.word	0x0800258d
 8002564:	08002955 	.word	0x08002955
 8002568:	08002955 	.word	0x08002955
 800256c:	08002955 	.word	0x08002955
 8002570:	08002595 	.word	0x08002595
 8002574:	08002955 	.word	0x08002955
 8002578:	08002955 	.word	0x08002955
 800257c:	08002955 	.word	0x08002955
 8002580:	08002785 	.word	0x08002785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4bb9      	ldr	r3, [pc, #740]	; (800286c <HAL_RCC_GetSysClockFreq+0x358>)
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800258a:	e1e7      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258c:	4bb8      	ldr	r3, [pc, #736]	; (8002870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002592:	e1e3      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4bb4      	ldr	r3, [pc, #720]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a0:	4bb1      	ldr	r3, [pc, #708]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d071      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ac:	4bae      	ldr	r3, [pc, #696]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025d2:	4622      	mov	r2, r4
 80025d4:	462b      	mov	r3, r5
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e4:	0150      	lsls	r0, r2, #5
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4621      	mov	r1, r4
 80025ec:	1a51      	subs	r1, r2, r1
 80025ee:	6439      	str	r1, [r7, #64]	; 0x40
 80025f0:	4629      	mov	r1, r5
 80025f2:	eb63 0301 	sbc.w	r3, r3, r1
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002604:	4649      	mov	r1, r9
 8002606:	018b      	lsls	r3, r1, #6
 8002608:	4641      	mov	r1, r8
 800260a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260e:	4641      	mov	r1, r8
 8002610:	018a      	lsls	r2, r1, #6
 8002612:	4641      	mov	r1, r8
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	63b9      	str	r1, [r7, #56]	; 0x38
 8002618:	4649      	mov	r1, r9
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800262c:	4649      	mov	r1, r9
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4641      	mov	r1, r8
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4641      	mov	r1, r8
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4622      	mov	r2, r4
 8002642:	189b      	adds	r3, r3, r2
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
 8002646:	462b      	mov	r3, r5
 8002648:	460a      	mov	r2, r1
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800265c:	4629      	mov	r1, r5
 800265e:	024b      	lsls	r3, r1, #9
 8002660:	4621      	mov	r1, r4
 8002662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002666:	4621      	mov	r1, r4
 8002668:	024a      	lsls	r2, r1, #9
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800267c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002680:	f7fe f9e0 	bl	8000a44 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800268e:	e067      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002690:	4b75      	ldr	r3, [pc, #468]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800269c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026aa:	2300      	movs	r3, #0
 80026ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	0159      	lsls	r1, r3, #5
 80026c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c4:	0150      	lsls	r0, r2, #5
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4621      	mov	r1, r4
 80026cc:	1a51      	subs	r1, r2, r1
 80026ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80026d0:	4629      	mov	r1, r5
 80026d2:	eb63 0301 	sbc.w	r3, r3, r1
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026e4:	4649      	mov	r1, r9
 80026e6:	018b      	lsls	r3, r1, #6
 80026e8:	4641      	mov	r1, r8
 80026ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ee:	4641      	mov	r1, r8
 80026f0:	018a      	lsls	r2, r1, #6
 80026f2:	4641      	mov	r1, r8
 80026f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f8:	4649      	mov	r1, r9
 80026fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800270a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800270e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002712:	4692      	mov	sl, r2
 8002714:	469b      	mov	fp, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb1a 0303 	adds.w	r3, sl, r3
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	462b      	mov	r3, r5
 8002720:	eb4b 0303 	adc.w	r3, fp, r3
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002732:	4629      	mov	r1, r5
 8002734:	028b      	lsls	r3, r1, #10
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800273c:	4621      	mov	r1, r4
 800273e:	028a      	lsls	r2, r1, #10
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002748:	2200      	movs	r2, #0
 800274a:	673b      	str	r3, [r7, #112]	; 0x70
 800274c:	677a      	str	r2, [r7, #116]	; 0x74
 800274e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002752:	f7fe f977 	bl	8000a44 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4613      	mov	r3, r2
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002760:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002782:	e0eb      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d06b      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_RCC_GetSysClockFreq+0x354>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	2200      	movs	r2, #0
 80027a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ae:	663b      	str	r3, [r7, #96]	; 0x60
 80027b0:	2300      	movs	r3, #0
 80027b2:	667b      	str	r3, [r7, #100]	; 0x64
 80027b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027b8:	4622      	mov	r2, r4
 80027ba:	462b      	mov	r3, r5
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0159      	lsls	r1, r3, #5
 80027c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ca:	0150      	lsls	r0, r2, #5
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4621      	mov	r1, r4
 80027d2:	1a51      	subs	r1, r2, r1
 80027d4:	61b9      	str	r1, [r7, #24]
 80027d6:	4629      	mov	r1, r5
 80027d8:	eb63 0301 	sbc.w	r3, r3, r1
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ea:	4659      	mov	r1, fp
 80027ec:	018b      	lsls	r3, r1, #6
 80027ee:	4651      	mov	r1, sl
 80027f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f4:	4651      	mov	r1, sl
 80027f6:	018a      	lsls	r2, r1, #6
 80027f8:	4651      	mov	r1, sl
 80027fa:	ebb2 0801 	subs.w	r8, r2, r1
 80027fe:	4659      	mov	r1, fp
 8002800:	eb63 0901 	sbc.w	r9, r3, r1
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002818:	4690      	mov	r8, r2
 800281a:	4699      	mov	r9, r3
 800281c:	4623      	mov	r3, r4
 800281e:	eb18 0303 	adds.w	r3, r8, r3
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	462b      	mov	r3, r5
 8002826:	eb49 0303 	adc.w	r3, r9, r3
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002838:	4629      	mov	r1, r5
 800283a:	024b      	lsls	r3, r1, #9
 800283c:	4621      	mov	r1, r4
 800283e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002842:	4621      	mov	r1, r4
 8002844:	024a      	lsls	r2, r1, #9
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800284e:	2200      	movs	r2, #0
 8002850:	65bb      	str	r3, [r7, #88]	; 0x58
 8002852:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002858:	f7fe f8f4 	bl	8000a44 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002866:	e065      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x420>
 8002868:	40023800 	.word	0x40023800
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_RCC_GetSysClockFreq+0x458>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	4618      	mov	r0, r3
 800287e:	4611      	mov	r1, r2
 8002880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002884:	653b      	str	r3, [r7, #80]	; 0x50
 8002886:	2300      	movs	r3, #0
 8002888:	657b      	str	r3, [r7, #84]	; 0x54
 800288a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800288e:	4642      	mov	r2, r8
 8002890:	464b      	mov	r3, r9
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4641      	mov	r1, r8
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	4649      	mov	r1, r9
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	1a54      	subs	r4, r2, r1
 80028d2:	4659      	mov	r1, fp
 80028d4:	eb63 0501 	sbc.w	r5, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	18e3      	adds	r3, r4, r3
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	464b      	mov	r3, r9
 80028f4:	eb45 0303 	adc.w	r3, r5, r3
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002906:	4629      	mov	r1, r5
 8002908:	028b      	lsls	r3, r1, #10
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002910:	4621      	mov	r1, r4
 8002912:	028a      	lsls	r2, r1, #10
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800291c:	2200      	movs	r2, #0
 800291e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002920:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002926:	f7fe f88d 	bl	8000a44 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4613      	mov	r3, r2
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_RCC_GetSysClockFreq+0x458>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0f1b      	lsrs	r3, r3, #28
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002952:	e003      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800295a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002960:	4618      	mov	r0, r3
 8002962:	37b8      	adds	r7, #184	; 0xb8
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400

08002974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e28d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8083 	beq.w	8002a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002994:	4b94      	ldr	r3, [pc, #592]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b04      	cmp	r3, #4
 800299e:	d019      	beq.n	80029d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a0:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ac:	4b8e      	ldr	r3, [pc, #568]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d00c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b8b      	ldr	r3, [pc, #556]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c6:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x124>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d157      	bne.n	8002a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e25a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x90>
 80029f6:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xcc>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0xb4>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xcc>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b6c      	ldr	r3, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6b      	ldr	r2, [pc, #428]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fcbc 	bl	80013c4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fcb8 	bl	80013c4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e21f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xdc>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fca8 	bl	80013c4 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fca4 	bl	80013c4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e20b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x104>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06f      	beq.n	8002b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d017      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x186>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1d3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x278>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fc51 	bl	80013c4 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe fc4d 	bl	80013c4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1b4      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x278>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fc30 	bl	80013c4 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7fe fc2c 	bl	80013c4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e193      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x27c>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fc10 	bl	80013c4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fc0c 	bl	80013c4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e173      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x234>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x27c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe fbf9 	bl	80013c4 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fbf5 	bl	80013c4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e15c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a7e      	ldr	r2, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fbb5 	bl	80013c4 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe fbb1 	bl	80013c4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e118      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x4b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x31e>
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x358>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x340>
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x358>
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fb76 	bl	80013c4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fb72 	bl	80013c4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0d7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x368>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe fb60 	bl	80013c4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fb5c 	bl	80013c4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0c1      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b40      	ldr	r3, [pc, #256]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80ad 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d060      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d145      	bne.n	8002de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fb30 	bl	80013c4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe fb2c 	bl	80013c4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e093      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	071b      	lsls	r3, r3, #28
 8002db2:	491b      	ldr	r1, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fb01 	bl	80013c4 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fafd 	bl	80013c4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e064      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x452>
 8002de4:	e05c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCC_OscConfig+0x4b4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe faea 	bl	80013c4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fae6 	bl	80013c4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x480>
 8002e12:	e045      	b.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e040      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_RCC_OscConfig+0x538>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d030      	beq.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d129      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d122      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d119      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	3b01      	subs	r3, #1
 8002e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d10f      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e041      	b.n	8002f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe f97c 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 fad8 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e041      	b.n	8002fe4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f839 	bl	8002fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fa89 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x24>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e022      	b.n	800306a <HAL_TIM_PWM_Start+0x6a>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d109      	bne.n	800303e <HAL_TIM_PWM_Start+0x3e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e015      	b.n	800306a <HAL_TIM_PWM_Start+0x6a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d109      	bne.n	8003058 <HAL_TIM_PWM_Start+0x58>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e008      	b.n	800306a <HAL_TIM_PWM_Start+0x6a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07c      	b.n	800316c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <HAL_TIM_PWM_Start+0x82>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003080:	e013      	b.n	80030aa <HAL_TIM_PWM_Start+0xaa>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start+0x92>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003090:	e00b      	b.n	80030aa <HAL_TIM_PWM_Start+0xaa>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start+0xa2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	e003      	b.n	80030aa <HAL_TIM_PWM_Start+0xaa>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fce0 	bl	8003a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_TIM_PWM_Start+0x174>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIM_PWM_Start+0xcc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <HAL_TIM_PWM_Start+0x178>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_PWM_Start+0xd0>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_TIM_PWM_Start+0xd2>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_TIM_PWM_Start+0x174>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d022      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d01d      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_TIM_PWM_Start+0x17c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIM_PWM_Start+0x180>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_TIM_PWM_Start+0x184>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_TIM_PWM_Start+0x178>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <HAL_TIM_PWM_Start+0x188>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIM_PWM_Start+0x136>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_TIM_PWM_Start+0x18c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d010      	beq.n	800316a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	e007      	b.n	800316a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40010000 	.word	0x40010000
 8003178:	40010400 	.word	0x40010400
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40014000 	.word	0x40014000
 800318c:	40001800 	.word	0x40001800

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0ae      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	f200 809f 	bhi.w	80032fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	080032fd 	.word	0x080032fd
 80031cc:	080032fd 	.word	0x080032fd
 80031d0:	080032fd 	.word	0x080032fd
 80031d4:	08003239 	.word	0x08003239
 80031d8:	080032fd 	.word	0x080032fd
 80031dc:	080032fd 	.word	0x080032fd
 80031e0:	080032fd 	.word	0x080032fd
 80031e4:	0800327b 	.word	0x0800327b
 80031e8:	080032fd 	.word	0x080032fd
 80031ec:	080032fd 	.word	0x080032fd
 80031f0:	080032fd 	.word	0x080032fd
 80031f4:	080032bb 	.word	0x080032bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f9f0 	bl	80035e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6999      	ldr	r1, [r3, #24]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	619a      	str	r2, [r3, #24]
      break;
 8003236:	e064      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fa40 	bl	80036c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6999      	ldr	r1, [r3, #24]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	619a      	str	r2, [r3, #24]
      break;
 8003278:	e043      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fa95 	bl	80037b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0208 	orr.w	r2, r2, #8
 8003294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0204 	bic.w	r2, r2, #4
 80032a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69d9      	ldr	r1, [r3, #28]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	61da      	str	r2, [r3, #28]
      break;
 80032b8:	e023      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fae9 	bl	8003898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69d9      	ldr	r1, [r3, #28]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	021a      	lsls	r2, r3, #8
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	61da      	str	r2, [r3, #28]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIM_ConfigClockSource+0x1c>
 800332c:	2302      	movs	r3, #2
 800332e:	e0b4      	b.n	800349a <HAL_TIM_ConfigClockSource+0x186>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d03e      	beq.n	80033e8 <HAL_TIM_ConfigClockSource+0xd4>
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	f200 8087 	bhi.w	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	f000 8086 	beq.w	8003486 <HAL_TIM_ConfigClockSource+0x172>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d87f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d01a      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xa6>
 8003384:	2b70      	cmp	r3, #112	; 0x70
 8003386:	d87b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b60      	cmp	r3, #96	; 0x60
 800338a:	d050      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x11a>
 800338c:	2b60      	cmp	r3, #96	; 0x60
 800338e:	d877      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b50      	cmp	r3, #80	; 0x50
 8003392:	d03c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0xfa>
 8003394:	2b50      	cmp	r3, #80	; 0x50
 8003396:	d873      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d058      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x13a>
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d86f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b30      	cmp	r3, #48	; 0x30
 80033a2:	d064      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b30      	cmp	r3, #48	; 0x30
 80033a6:	d86b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d060      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d867      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d05a      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	e062      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6899      	ldr	r1, [r3, #8]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f000 fb35 	bl	8003a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	609a      	str	r2, [r3, #8]
      break;
 80033e6:	e04f      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f000 fb1e 	bl	8003a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340a:	609a      	str	r2, [r3, #8]
      break;
 800340c:	e03c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 fa92 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2150      	movs	r1, #80	; 0x50
 8003426:	4618      	mov	r0, r3
 8003428:	f000 faeb 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800342c:	e02c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	461a      	mov	r2, r3
 800343c:	f000 fab1 	bl	80039a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2160      	movs	r1, #96	; 0x60
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fadb 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800344c:	e01c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	f000 fa72 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	4618      	mov	r0, r3
 8003468:	f000 facb 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800346c:	e00c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f000 fac2 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800347e:	e003      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e000      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a40      	ldr	r2, [pc, #256]	; (80035b8 <TIM_Base_SetConfig+0x114>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <TIM_Base_SetConfig+0x118>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <TIM_Base_SetConfig+0x11c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <TIM_Base_SetConfig+0x120>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3a      	ldr	r2, [pc, #232]	; (80035c8 <TIM_Base_SetConfig+0x124>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <TIM_Base_SetConfig+0x114>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d027      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <TIM_Base_SetConfig+0x118>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d023      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <TIM_Base_SetConfig+0x11c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <TIM_Base_SetConfig+0x120>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <TIM_Base_SetConfig+0x124>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d017      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <TIM_Base_SetConfig+0x128>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <TIM_Base_SetConfig+0x12c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <TIM_Base_SetConfig+0x130>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <TIM_Base_SetConfig+0x134>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <TIM_Base_SetConfig+0x138>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <TIM_Base_SetConfig+0x13c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <TIM_Base_SetConfig+0x114>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <TIM_Base_SetConfig+0x124>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40000c00 	.word	0x40000c00
 80035c8:	40010400 	.word	0x40010400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800
 80035d8:	40001800 	.word	0x40001800
 80035dc:	40001c00 	.word	0x40001c00
 80035e0:	40002000 	.word	0x40002000

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a20      	ldr	r2, [pc, #128]	; (80036bc <TIM_OC1_SetConfig+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC1_SetConfig+0x64>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <TIM_OC1_SetConfig+0xdc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10c      	bne.n	8003662 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0308 	bic.w	r3, r3, #8
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <TIM_OC1_SetConfig+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_OC1_SetConfig+0x8e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <TIM_OC1_SetConfig+0xdc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40010400 	.word	0x40010400

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <TIM_OC2_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC2_SetConfig+0x68>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a21      	ldr	r2, [pc, #132]	; (80037ac <TIM_OC2_SetConfig+0xe8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10d      	bne.n	8003748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <TIM_OC2_SetConfig+0xe4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC2_SetConfig+0x94>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <TIM_OC2_SetConfig+0xe8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a21      	ldr	r2, [pc, #132]	; (8003890 <TIM_OC3_SetConfig+0xe0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC3_SetConfig+0x66>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a20      	ldr	r2, [pc, #128]	; (8003894 <TIM_OC3_SetConfig+0xe4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10d      	bne.n	8003832 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <TIM_OC3_SetConfig+0xe0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC3_SetConfig+0x92>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <TIM_OC3_SetConfig+0xe4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d113      	bne.n	800386a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000
 8003894:	40010400 	.word	0x40010400

08003898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	031b      	lsls	r3, r3, #12
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <TIM_OC4_SetConfig+0xa4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_OC4_SetConfig+0x68>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a11      	ldr	r2, [pc, #68]	; (8003940 <TIM_OC4_SetConfig+0xa8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d109      	bne.n	8003914 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40010400 	.word	0x40010400

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0210 	bic.w	r2, r3, #16
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f043 0307 	orr.w	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1a      	ldr	r2, [r3, #32]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e05a      	b.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d01d      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10c      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40001800 	.word	0x40001800

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4d0d      	ldr	r5, [pc, #52]	; (8003bf4 <__libc_init_array+0x38>)
 8003bc0:	4c0d      	ldr	r4, [pc, #52]	; (8003bf8 <__libc_init_array+0x3c>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	4d0b      	ldr	r5, [pc, #44]	; (8003bfc <__libc_init_array+0x40>)
 8003bce:	4c0c      	ldr	r4, [pc, #48]	; (8003c00 <__libc_init_array+0x44>)
 8003bd0:	f000 f820 	bl	8003c14 <_init>
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	2600      	movs	r6, #0
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08003c44 	.word	0x08003c44
 8003bf8:	08003c44 	.word	0x08003c44
 8003bfc:	08003c44 	.word	0x08003c44
 8003c00:	08003c48 	.word	0x08003c48

08003c04 <memset>:
 8003c04:	4402      	add	r2, r0
 8003c06:	4603      	mov	r3, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <_init>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr

08003c20 <_fini>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr
