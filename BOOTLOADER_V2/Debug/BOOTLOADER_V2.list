
BOOTLOADER_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e8c  08004e8c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e94  08004e94  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200000a4  08004f40  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004f40  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5c4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f29  00000000  00000000  0002b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021919  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c59e  00000000  00000000  0004ff19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9476  00000000  00000000  0005c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012592d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  00125980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e44 	.word	0x08004e44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	08004e44 	.word	0x08004e44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <LVQ_GetSectorFromAddress>:

#define KEY1 		(uint32_t) 0x45670123
#define KEY2        (uint32_t) 0xCDEF89AB

uint8_t LVQ_GetSectorFromAddress(volatile uint32_t u32StartAddr)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint8_t Sector = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
	if( (u32StartAddr >= 0x08000000) && (u32StartAddr < 0x08003FFF) )
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800051a:	d306      	bcc.n	800052a <LVQ_GetSectorFromAddress+0x22>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <LVQ_GetSectorFromAddress+0xc8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d802      	bhi.n	800052a <LVQ_GetSectorFromAddress+0x22>
			Sector = LVQ_FLASH_SECTOR_0;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e04b      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08004000) && (u32StartAddr < 0x08007FFF) )
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <LVQ_GetSectorFromAddress+0xcc>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d306      	bcc.n	8000540 <LVQ_GetSectorFromAddress+0x38>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <LVQ_GetSectorFromAddress+0xd0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d802      	bhi.n	8000540 <LVQ_GetSectorFromAddress+0x38>
			Sector = LVQ_FLASH_SECTOR_1;
 800053a:	2301      	movs	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e040      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08008000) && (u32StartAddr < 0x0800BFFF) )
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a26      	ldr	r2, [pc, #152]	; (80005dc <LVQ_GetSectorFromAddress+0xd4>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d306      	bcc.n	8000556 <LVQ_GetSectorFromAddress+0x4e>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <LVQ_GetSectorFromAddress+0xd8>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d802      	bhi.n	8000556 <LVQ_GetSectorFromAddress+0x4e>
			Sector = LVQ_FLASH_SECTOR_2;
 8000550:	2302      	movs	r3, #2
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e035      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x0800C000) && (u32StartAddr < 0x0800FFFF) )
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <LVQ_GetSectorFromAddress+0xdc>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d306      	bcc.n	800056c <LVQ_GetSectorFromAddress+0x64>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <LVQ_GetSectorFromAddress+0xe0>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d202      	bcs.n	800056c <LVQ_GetSectorFromAddress+0x64>
			Sector = LVQ_FLASH_SECTOR_3;
 8000566:	2303      	movs	r3, #3
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e02a      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08010000) && (u32StartAddr < 0x0801FFFF) )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <LVQ_GetSectorFromAddress+0xe0>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d906      	bls.n	8000582 <LVQ_GetSectorFromAddress+0x7a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <LVQ_GetSectorFromAddress+0xe4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d202      	bcs.n	8000582 <LVQ_GetSectorFromAddress+0x7a>
			Sector = LVQ_FLASH_SECTOR_4;
 800057c:	2304      	movs	r3, #4
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e01f      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08020000) && (u32StartAddr < 0x0803FFFF) )
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a19      	ldr	r2, [pc, #100]	; (80005ec <LVQ_GetSectorFromAddress+0xe4>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d906      	bls.n	8000598 <LVQ_GetSectorFromAddress+0x90>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <LVQ_GetSectorFromAddress+0xe8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d202      	bcs.n	8000598 <LVQ_GetSectorFromAddress+0x90>
			Sector = LVQ_FLASH_SECTOR_5;
 8000592:	2305      	movs	r3, #5
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e014      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08040000) && (u32StartAddr < 0x0805FFFF) )
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <LVQ_GetSectorFromAddress+0xe8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d906      	bls.n	80005ae <LVQ_GetSectorFromAddress+0xa6>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <LVQ_GetSectorFromAddress+0xec>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d202      	bcs.n	80005ae <LVQ_GetSectorFromAddress+0xa6>
			Sector = LVQ_FLASH_SECTOR_6;
 80005a8:	2306      	movs	r3, #6
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e009      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08060000) && (u32StartAddr < 0x0807FFFF) )
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <LVQ_GetSectorFromAddress+0xec>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d905      	bls.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <LVQ_GetSectorFromAddress+0xf0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d201      	bcs.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
			Sector = LVQ_FLASH_SECTOR_7;
 80005be:	2307      	movs	r3, #7
 80005c0:	73fb      	strb	r3, [r7, #15]
	return Sector;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	08003ffe 	.word	0x08003ffe
 80005d4:	08004000 	.word	0x08004000
 80005d8:	08007ffe 	.word	0x08007ffe
 80005dc:	08008000 	.word	0x08008000
 80005e0:	0800bffe 	.word	0x0800bffe
 80005e4:	0800c000 	.word	0x0800c000
 80005e8:	0800ffff 	.word	0x0800ffff
 80005ec:	0801ffff 	.word	0x0801ffff
 80005f0:	0803ffff 	.word	0x0803ffff
 80005f4:	0805ffff 	.word	0x0805ffff
 80005f8:	0807ffff 	.word	0x0807ffff

080005fc <LVQ_GetAddressFromSector>:

uint32_t LVQ_GetAddressFromSector(uint8_t u8Sector)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint32_t Address = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
	if( u8Sector == 0 )
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <LVQ_GetAddressFromSector+0x1c>
			Address = 0x08000000;
 8000610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e028      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 1 )
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d102      	bne.n	8000624 <LVQ_GetAddressFromSector+0x28>
			Address = 0x08004000;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <LVQ_GetAddressFromSector+0x7c>)
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e022      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 2 )
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d102      	bne.n	8000630 <LVQ_GetAddressFromSector+0x34>
			Address = 0x08008000;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <LVQ_GetAddressFromSector+0x80>)
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e01c      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 3 )
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d102      	bne.n	800063c <LVQ_GetAddressFromSector+0x40>
			Address = 0x0800C000;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <LVQ_GetAddressFromSector+0x84>)
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e016      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 4 )
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b04      	cmp	r3, #4
 8000640:	d102      	bne.n	8000648 <LVQ_GetAddressFromSector+0x4c>
			Address = 0x08010000;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <LVQ_GetAddressFromSector+0x88>)
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e010      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 5 )
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b05      	cmp	r3, #5
 800064c:	d102      	bne.n	8000654 <LVQ_GetAddressFromSector+0x58>
			Address = 0x08020000;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <LVQ_GetAddressFromSector+0x8c>)
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e00a      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 6 )
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d102      	bne.n	8000660 <LVQ_GetAddressFromSector+0x64>
			Address = 0x08040000;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <LVQ_GetAddressFromSector+0x90>)
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e004      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 7 )
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b07      	cmp	r3, #7
 8000664:	d101      	bne.n	800066a <LVQ_GetAddressFromSector+0x6e>
			Address = 0x08060000;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <LVQ_GetAddressFromSector+0x94>)
 8000668:	60fb      	str	r3, [r7, #12]
	return Address;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	08004000 	.word	0x08004000
 800067c:	08008000 	.word	0x08008000
 8000680:	0800c000 	.word	0x0800c000
 8000684:	08010000 	.word	0x08010000
 8000688:	08020000 	.word	0x08020000
 800068c:	08040000 	.word	0x08040000
 8000690:	08060000 	.word	0x08060000

08000694 <LVQ_Flash_Unlock>:

void LVQ_Flash_Unlock(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
		FLASH->KEYR = KEY1;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LVQ_Flash_Unlock+0x1c>)
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <LVQ_Flash_Unlock+0x20>)
 800069c:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = KEY2;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <LVQ_Flash_Unlock+0x1c>)
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <LVQ_Flash_Unlock+0x24>)
 80006a2:	605a      	str	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023c00 	.word	0x40023c00
 80006b4:	45670123 	.word	0x45670123
 80006b8:	cdef89ab 	.word	0xcdef89ab

080006bc <LVQ_Flash_Erase>:

LVQ_Flash_Status_t LVQ_Flash_Erase(volatile uint32_t u32StartAddr)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 80006c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006c8:	60fb      	str	r3, [r7, #12]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 80006ca:	e007      	b.n	80006dc <LVQ_Flash_Erase+0x20>
	{
		if (--Timeout == 0x00)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <LVQ_Flash_Erase+0x20>
		{
			return LVQ_Flash_Status_Errors;
 80006d8:	2300      	movs	r3, #0
 80006da:	e065      	b.n	80007a8 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e8:	d102      	bne.n	80006f0 <LVQ_Flash_Erase+0x34>
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1ed      	bne.n	80006cc <LVQ_Flash_Erase+0x10>
		}
	}
	/* Wating for Bsy bit */
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) ==  FLASH_CR_LOCK)
 80006f0:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80006fc:	d101      	bne.n	8000702 <LVQ_Flash_Erase+0x46>
	{
			LVQ_Flash_Unlock();
 80006fe:	f7ff ffc9 	bl	8000694 <LVQ_Flash_Unlock>
	}

	FLASH->CR |= FLASH_PSIZE_WORD;
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070c:	6113      	str	r3, [r2, #16]
	/* Set the SER bit in the FLASH_CR register */
	FLASH->CR |= FLASH_CR_SER;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6113      	str	r3, [r2, #16]
	/* Program the FLASH_CR register to select a sector to erase */
	FLASH->CR |= LVQ_GetSectorFromAddress(u32StartAddr) << 3;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fef3 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000722:	4603      	mov	r3, r0
 8000724:	00da      	lsls	r2, r3, #3
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4611      	mov	r1, r2
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6113      	str	r3, [r2, #16]
	/* Set the STRT bit in the FLASH CR register */
	FLASH->CR |= FLASH_CR_STRT;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073c:	6113      	str	r3, [r2, #16]
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 800073e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000742:	60fb      	str	r3, [r7, #12]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000744:	e007      	b.n	8000756 <LVQ_Flash_Erase+0x9a>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3b01      	subs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <LVQ_Flash_Erase+0x9a>
		{
			return LVQ_Flash_Status_Errors;
 8000752:	2300      	movs	r3, #0
 8000754:	e028      	b.n	80007a8 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d102      	bne.n	800076a <LVQ_Flash_Erase+0xae>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ed      	bne.n	8000746 <LVQ_Flash_Erase+0x8a>
		}
	}

	/* Check FLASH End of Operation flag  */
	if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <LVQ_Flash_Erase+0xc6>
	{
			/* Clear FLASH End of Operation pending bit */
			FLASH->SR &= ~FLASH_FLAG_EOP;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	60d3      	str	r3, [r2, #12]
	}
	/* Clear SER bit in the FLASH_CR register */
	FLASH->CR &= FLASH_CR_SER;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	6113      	str	r3, [r2, #16]
	/* Clear STRT bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_STRT;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000798:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80007a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007a4:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023c00 	.word	0x40023c00

080007b4 <LVQ_Flash_Write>:

LVQ_Flash_Status_t LVQ_Flash_Write(volatile uint32_t u32StartAddr, uint32_t* u32BufferWrite, uint32_t u32Length)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	uint32_t u32Count = 0u;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 80007c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007c8:	613b      	str	r3, [r7, #16]
	/* Check input parameters */
	if( (u32BufferWrite == 0u) || (u32Length == 0u) )
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <LVQ_Flash_Write+0x22>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d109      	bne.n	80007ea <LVQ_Flash_Write+0x36>
	{
		 return LVQ_Flash_Status_Errors;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e05d      	b.n	8000896 <LVQ_Flash_Write+0xe2>

	/* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3b01      	subs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <LVQ_Flash_Write+0x36>
		{
			return LVQ_Flash_Status_Errors;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e055      	b.n	8000896 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <LVQ_Flash_Write+0xec>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f6:	d102      	bne.n	80007fe <LVQ_Flash_Write+0x4a>
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ed      	bne.n	80007da <LVQ_Flash_Write+0x26>
		}
	}
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800080a:	d101      	bne.n	8000810 <LVQ_Flash_Write+0x5c>
	{
		LVQ_Flash_Unlock();
 800080c:	f7ff ff42 	bl	8000694 <LVQ_Flash_Unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6113      	str	r3, [r2, #16]
	/* Write FLASH CR_PG to 1 */
	FLASH->CR |= FLASH_CR_PG;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6113      	str	r3, [r2, #16]
	/* Perform word write at the desired address */
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00c      	b.n	8000848 <LVQ_Flash_Write+0x94>
	{
		*(__IO uint32_t*) (u32StartAddr + u32Count*4u) = *(uint32_t*) (u32BufferWrite + u32Count);
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	0091      	lsls	r1, r2, #2
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	440a      	add	r2, r1
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6013      	str	r3, [r2, #0]
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3ee      	bcc.n	800082e <LVQ_Flash_Write+0x7a>
	}
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 8000850:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000854:	613b      	str	r3, [r7, #16]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000856:	e007      	b.n	8000868 <LVQ_Flash_Write+0xb4>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	3b01      	subs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <LVQ_Flash_Write+0xb4>
		{
			return LVQ_Flash_Status_Errors;
 8000864:	2300      	movs	r3, #0
 8000866:	e016      	b.n	8000896 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000874:	d102      	bne.n	800087c <LVQ_Flash_Write+0xc8>
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1ed      	bne.n	8000858 <LVQ_Flash_Write+0xa4>
		}
	}
	/* Clear PG bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_PG;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800088e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000892:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db12      	blt.n	80008dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	490a      	ldr	r1, [pc, #40]	; (80008e8 <__NVIC_DisableIRQ+0x44>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	3320      	adds	r3, #32
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
}
 80008d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
}
 80008da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <get_high_address>:
volatile uint32_t u32SizeDataFirmware = 0;
volatile uint16_t u32DataWriteFlash[50] = {0};   /* Array to store the data of line to pass it to Flash Writer */
volatile uint32_t u32AddressWriteFlash;           /* Pointer to store the address in to write */

void get_high_address(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
	uint32_t address = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
	address |= hex_data.u8Data[0] << 8 | hex_data.u8Data[1];
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <get_high_address+0x38>)
 80008f8:	791b      	ldrb	r3, [r3, #4]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	4a09      	ldr	r2, [pc, #36]	; (8000924 <get_high_address+0x38>)
 80008fe:	7952      	ldrb	r2, [r2, #5]
 8000900:	4313      	orrs	r3, r2
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4313      	orrs	r3, r2
 8000908:	607b      	str	r3, [r7, #4]
	u32AddressWriteFlash = 0x08000000 | ( address << 16); /* Address Save Firmware Update */
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <get_high_address+0x3c>)
 8000914:	6013      	str	r3, [r2, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200000cc 	.word	0x200000cc
 8000928:	20000248 	.word	0x20000248

0800092c <write_flash_memory>:

void write_flash_memory(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	uint8_t CC, i;
	uint8_t u8data_rawCounter = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]

	switch (hex_data.u8RecordType)
 8000936:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <write_flash_memory+0x10c>)
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	2b05      	cmp	r3, #5
 800093c:	d075      	beq.n	8000a2a <write_flash_memory+0xfe>
 800093e:	2b05      	cmp	r3, #5
 8000940:	dc75      	bgt.n	8000a2e <write_flash_memory+0x102>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <write_flash_memory+0x24>
 8000946:	2b04      	cmp	r3, #4
 8000948:	d171      	bne.n	8000a2e <write_flash_memory+0x102>
	{
		case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
		{	get_high_address();
 800094a:	f7ff ffcf 	bl	80008ec <get_high_address>
			break;
 800094e:	e06f      	b.n	8000a30 <write_flash_memory+0x104>
			break;
		}
		case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
		{
			/* Get Character Count */
			CC = hex_data.u8ByteCount;
 8000950:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <write_flash_memory+0x10c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	717b      	strb	r3, [r7, #5]
			u32SizeDataFirmware += CC;
 8000956:	797a      	ldrb	r2, [r7, #5]
 8000958:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <write_flash_memory+0x110>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a37      	ldr	r2, [pc, #220]	; (8000a3c <write_flash_memory+0x110>)
 8000960:	6013      	str	r3, [r2, #0]

			/* Set full address */
			u32AddressWriteFlash = u32AddressWriteFlash & 0xFFFF0000;
 8000962:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <write_flash_memory+0x114>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	041b      	lsls	r3, r3, #16
 800096a:	4a35      	ldr	r2, [pc, #212]	; (8000a40 <write_flash_memory+0x114>)
 800096c:	6013      	str	r3, [r2, #0]
			u32AddressWriteFlash = u32AddressWriteFlash 	|
								 ( hex_data.u8Addr[0] << 8) |
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <write_flash_memory+0x10c>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	461a      	mov	r2, r3
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <write_flash_memory+0x114>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4313      	orrs	r3, r2
								 ( hex_data.u8Addr[1] );
 800097c:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <write_flash_memory+0x10c>)
 800097e:	7892      	ldrb	r2, [r2, #2]
								 ( hex_data.u8Addr[0] << 8) |
 8000980:	4313      	orrs	r3, r2
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <write_flash_memory+0x114>)
 8000984:	6013      	str	r3, [r2, #0]

			/* Check address wite flash data */
			if( u32AddressWriteFlash < 0x08004000 )
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <write_flash_memory+0x114>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <write_flash_memory+0x118>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d203      	bcs.n	8000998 <write_flash_memory+0x6c>
			{
				u32AddressWriteFlash = 0;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <write_flash_memory+0x114>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
				return;
 8000996:	e04b      	b.n	8000a30 <write_flash_memory+0x104>
			}

			/* Get the data of the record */
			for (i = 0; i < CC; i += 2)
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	e018      	b.n	80009d0 <write_flash_memory+0xa4>
			{
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <write_flash_memory+0x10c>)
 80009a4:	4413      	add	r3, r2
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
													   ( hex_data.u8Data[i] );
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4922      	ldr	r1, [pc, #136]	; (8000a38 <write_flash_memory+0x10c>)
 80009b0:	440b      	add	r3, r1
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	b21b      	sxth	r3, r3
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	b291      	uxth	r1, r2
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <write_flash_memory+0x11c>)
 80009c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	     		u8data_rawCounter++;
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	3301      	adds	r3, #1
 80009c8:	71bb      	strb	r3, [r7, #6]
			for (i = 0; i < CC; i += 2)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3302      	adds	r3, #2
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d3e2      	bcc.n	800099e <write_flash_memory+0x72>
			}

			if (CC % 2 != 0)
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d018      	beq.n	8000a16 <write_flash_memory+0xea>
			{
				u32DataWriteFlash[u8data_rawCounter] = 0xFF00 | ( hex_data.u8Data[CC-1] );
 80009e4:	797b      	ldrb	r3, [r7, #5]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <write_flash_memory+0x10c>)
 80009ea:	4413      	add	r3, r2
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	f063 03ff 	orn	r3, r3, #255	; 0xff
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	b291      	uxth	r1, r2
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <write_flash_memory+0x11c>)
 80009fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4 + 1);
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <write_flash_memory+0x114>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	490e      	ldr	r1, [pc, #56]	; (8000a48 <write_flash_memory+0x11c>)
 8000a10:	f7ff fed0 	bl	80007b4 <LVQ_Flash_Write>
			}
			else
			{
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
			}
			break;
 8000a14:	e00c      	b.n	8000a30 <write_flash_memory+0x104>
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <write_flash_memory+0x114>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	797b      	ldrb	r3, [r7, #5]
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	4909      	ldr	r1, [pc, #36]	; (8000a48 <write_flash_memory+0x11c>)
 8000a24:	f7ff fec6 	bl	80007b4 <LVQ_Flash_Write>
			break;
 8000a28:	e002      	b.n	8000a30 <write_flash_memory+0x104>
			break;
 8000a2a:	bf00      	nop
 8000a2c:	e000      	b.n	8000a30 <write_flash_memory+0x104>
		}
		default:
				break;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	200001e0 	.word	0x200001e0
 8000a40:	20000248 	.word	0x20000248
 8000a44:	08004000 	.word	0x08004000
 8000a48:	200001e4 	.word	0x200001e4

08000a4c <start_up_bootloader>:

void start_up_bootloader(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
	HAL_DMA_UnRegisterCallback(&hdma_usart1_rx, HAL_DMA_XFER_HALFCPLT_CB_ID);
 8000a52:	2101      	movs	r1, #1
 8000a54:	4835      	ldr	r0, [pc, #212]	; (8000b2c <start_up_bootloader+0xe0>)
 8000a56:	f001 fc01 	bl	800225c <HAL_DMA_UnRegisterCallback>
	if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&huart1, u8data_receive_dma, RX_BUFFER_SIZE))
 8000a5a:	2232      	movs	r2, #50	; 0x32
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <start_up_bootloader+0xe4>)
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <start_up_bootloader+0xe8>)
 8000a60:	f003 f80c 	bl	8003a7c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <start_up_bootloader+0x22>
	{
	  Error_Handler();
 8000a6a:	f000 fd25 	bl	80014b8 <Error_Handler>
	}

	pBufferReadyForReception = aRXBufferA;
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <start_up_bootloader+0xec>)
 8000a70:	4a32      	ldr	r2, [pc, #200]	; (8000b3c <start_up_bootloader+0xf0>)
 8000a72:	601a      	str	r2, [r3, #0]
	pBufferReadyForUser      = aRXBufferB;
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <start_up_bootloader+0xf4>)
 8000a76:	4a33      	ldr	r2, [pc, #204]	; (8000b44 <start_up_bootloader+0xf8>)
 8000a78:	601a      	str	r2, [r3, #0]
	uwNbReceivedChars        = 0;
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <start_up_bootloader+0xfc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, aTextInfoStart, sizeof(aTextInfoStart), 100);
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	222e      	movs	r2, #46	; 0x2e
 8000a84:	4931      	ldr	r1, [pc, #196]	; (8000b4c <start_up_bootloader+0x100>)
 8000a86:	4832      	ldr	r0, [pc, #200]	; (8000b50 <start_up_bootloader+0x104>)
 8000a88:	f002 ff66 	bl	8003958 <HAL_UART_Transmit>

	uint32_t time_last = HAL_GetTick();
 8000a8c:	f000 ff16 	bl	80018bc <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
	while( HAL_GetTick() - time_last < 3000 )
 8000a92:	e03d      	b.n	8000b10 <start_up_bootloader+0xc4>
	{
		if( flag_ota_update == TRUE && flag_size_flash == TRUE )
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <start_up_bootloader+0x108>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d139      	bne.n	8000b10 <start_up_bootloader+0xc4>
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <start_up_bootloader+0x10c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d135      	bne.n	8000b10 <start_up_bootloader+0xc4>
		{
			flag_earse_ok = FALSE;
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <start_up_bootloader+0x110>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
			uint8_t StartSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION);
 8000aaa:	482d      	ldr	r0, [pc, #180]	; (8000b60 <start_up_bootloader+0x114>)
 8000aac:	f7ff fd2c 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	73fb      	strb	r3, [r7, #15]
			uint8_t EndSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION + SizeCurrent);
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <start_up_bootloader+0x118>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000abc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd21 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
			uint8_t NumberSector = EndSector - StartSector + 1;
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	71bb      	strb	r3, [r7, #6]

			/* Erase sector for write data */
			for(uint8_t i = 0; i < NumberSector; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73bb      	strb	r3, [r7, #14]
 8000ada:	e00d      	b.n	8000af8 <start_up_bootloader+0xac>
			{
					LVQ_Flash_Erase(LVQ_GetAddressFromSector(StartSector));;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd8c 	bl	80005fc <LVQ_GetAddressFromSector>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fde8 	bl	80006bc <LVQ_Flash_Erase>
					StartSector++;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 0; i < NumberSector; i++)
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	3301      	adds	r3, #1
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	7bba      	ldrb	r2, [r7, #14]
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d3ed      	bcc.n	8000adc <start_up_bootloader+0x90>
			}
			flag_earse_ok = TRUE;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <start_up_bootloader+0x110>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
			while( flag_ota_complete == FALSE )
 8000b06:	bf00      	nop
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <start_up_bootloader+0x11c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0fb      	beq.n	8000b08 <start_up_bootloader+0xbc>
	while( HAL_GetTick() - time_last < 3000 )
 8000b10:	f000 fed4 	bl	80018bc <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d9b8      	bls.n	8000a94 <start_up_bootloader+0x48>
			{

			}
		}
	}
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200002dc 	.word	0x200002dc
 8000b30:	20000104 	.word	0x20000104
 8000b34:	20000254 	.word	0x20000254
 8000b38:	200001dc 	.word	0x200001dc
 8000b3c:	20000138 	.word	0x20000138
 8000b40:	200001d8 	.word	0x200001d8
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	200001d4 	.word	0x200001d4
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000298 	.word	0x20000298
 8000b54:	200000c0 	.word	0x200000c0
 8000b58:	200000c1 	.word	0x200000c1
 8000b5c:	200000c3 	.word	0x200000c3
 8000b60:	08008000 	.word	0x08008000
 8000b64:	200000c4 	.word	0x200000c4
 8000b68:	200000c2 	.word	0x200000c2

08000b6c <start_up_firmware_update>:

void start_up_firmware_update(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(USART1_IRQn);
 8000b72:	2025      	movs	r0, #37	; 0x25
 8000b74:	f7ff fe96 	bl	80008a4 <__NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
 8000b78:	203a      	movs	r0, #58	; 0x3a
 8000b7a:	f000 ffd4 	bl	8001b26 <HAL_NVIC_DisableIRQ>

  HAL_UART_DeInit(&huart1);
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <start_up_firmware_update+0x58>)
 8000b80:	f002 febb 	bl	80038fa <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <start_up_firmware_update+0x5c>)
 8000b86:	f002 feb8 	bl	80038fa <HAL_UART_DeInit>
  HAL_DMA_DeInit(&hdma_usart1_rx);
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <start_up_firmware_update+0x60>)
 8000b8c:	f001 f894 	bl	8001cb8 <HAL_DMA_DeInit>
  HAL_RCC_DeInit();
 8000b90:	f002 fad0 	bl	8003134 <HAL_RCC_DeInit>

  SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <start_up_firmware_update+0x64>)
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <start_up_firmware_update+0x64>)
 8000b9a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000b9e:	6253      	str	r3, [r2, #36]	; 0x24
  __set_MSP(*((volatile uint32_t*) ADDRESS_FIRMWARE_APPLICATION));
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <start_up_firmware_update+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f383 8808 	msr	MSP, r3
}
 8000bac:	bf00      	nop
  uint32_t u32JumpAddress = *( (volatile uint32_t*) (ADDRESS_FIRMWARE_APPLICATION + 4) );
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <start_up_firmware_update+0x6c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]
  void (*reset_handler) (void) = (void *) u32JumpAddress;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	60bb      	str	r3, [r7, #8]
  reset_handler();
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4798      	blx	r3
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000254 	.word	0x20000254
 8000bc8:	20000298 	.word	0x20000298
 8000bcc:	200002dc 	.word	0x200002dc
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	08008000 	.word	0x08008000
 8000bd8:	08008004 	.word	0x08008004

08000bdc <Parse_Element>:

void Parse_Element(uint8_t *buff, uint8_t u8length)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b08d      	sub	sp, #52	; 0x34
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	uint8_t u8count_array = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t u8temp_buffer[32];

    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000bf4:	e05e      	b.n	8000cb4 <Parse_Element+0xd8>
    {
        if(buff[u8Count] >= '0' && buff[u8Count] <= '9')
 8000bf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b2f      	cmp	r3, #47	; 0x2f
 8000c02:	d914      	bls.n	8000c2e <Parse_Element+0x52>
 8000c04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b39      	cmp	r3, #57	; 0x39
 8000c10:	d80d      	bhi.n	8000c2e <Parse_Element+0x52>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 48;
 8000c12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c20:	3a30      	subs	r2, #48	; 0x30
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	3330      	adds	r3, #48	; 0x30
 8000c26:	443b      	add	r3, r7
 8000c28:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000c2c:	e01a      	b.n	8000c64 <Parse_Element+0x88>
        }
        else if(buff[u8Count] >= 'A' && buff[u8Count] <= 'F')
 8000c2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b40      	cmp	r3, #64	; 0x40
 8000c3a:	d941      	bls.n	8000cc0 <Parse_Element+0xe4>
 8000c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b46      	cmp	r3, #70	; 0x46
 8000c48:	d83a      	bhi.n	8000cc0 <Parse_Element+0xe4>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 65 + 10;
 8000c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c58:	3a37      	subs	r2, #55	; 0x37
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	3330      	adds	r3, #48	; 0x30
 8000c5e:	443b      	add	r3, r7
 8000c60:	f803 2c24 	strb.w	r2, [r3, #-36]
        else
        {
           return;
        }

        if(u8Count % 2 != 0)
 8000c64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01b      	beq.n	8000caa <Parse_Element+0xce>
        {
            cInternalBufferData[u8count_array] = ((u8temp_buffer[u8Count - 1] << 4) | (u8temp_buffer[u8Count]));
 8000c72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c76:	3b01      	subs	r3, #1
 8000c78:	3330      	adds	r3, #48	; 0x30
 8000c7a:	443b      	add	r3, r7
 8000c7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c88:	3330      	adds	r3, #48	; 0x30
 8000c8a:	443b      	add	r3, r7
 8000c8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c9a:	b2d1      	uxtb	r1, r2
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <Parse_Element+0xf0>)
 8000c9e:	54d1      	strb	r1, [r2, r3]
            u8count_array++;
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 8000caa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000cb4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d39b      	bcc.n	8000bf6 <Parse_Element+0x1a>
 8000cbe:	e000      	b.n	8000cc2 <Parse_Element+0xe6>
           return;
 8000cc0:	bf00      	nop
        }
    }
}
 8000cc2:	3734      	adds	r7, #52	; 0x34
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200000e4 	.word	0x200000e4

08000cd0 <handle_data_hex>:

uint8_t handle_data_hex(uint8_t* pData, uint16_t Size)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
	uint8_t u8CaculChecksum = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

	State = START_CODE;
 8000ce0:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <handle_data_hex+0x1b4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	e0c0      	b.n	8000e6e <handle_data_hex+0x19e>
	{
		switch(State)
 8000cec:	4b65      	ldr	r3, [pc, #404]	; (8000e84 <handle_data_hex+0x1b4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b06      	cmp	r3, #6
 8000cf2:	f200 80b7 	bhi.w	8000e64 <handle_data_hex+0x194>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <handle_data_hex+0x2c>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d19 	.word	0x08000d19
 8000d00:	08000d31 	.word	0x08000d31
 8000d04:	08000d53 	.word	0x08000d53
 8000d08:	08000d7d 	.word	0x08000d7d
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000def 	.word	0x08000def
 8000d14:	08000e0d 	.word	0x08000e0d
		{
			case START_CODE:
			{
				if(pData[u8Count] != ':')
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b3a      	cmp	r3, #58	; 0x3a
 8000d22:	d001      	beq.n	8000d28 <handle_data_hex+0x58>
				{
					return STATE_ERRORS;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e0a9      	b.n	8000e7c <handle_data_hex+0x1ac>
				}
				else
				{
				   State = BYTE_COUNT;
 8000d28:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <handle_data_hex+0x1b4>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d2e:	e09b      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case BYTE_COUNT:
			{
				Parse_Element(&pData[u8Count], 2U);
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	2102      	movs	r1, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff4f 	bl	8000bdc <Parse_Element>
				hex_data.u8ByteCount = cInternalBufferData[0];
 8000d3e:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <handle_data_hex+0x1b8>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <handle_data_hex+0x1bc>)
 8000d44:	701a      	strb	r2, [r3, #0]
				u8Count = 2U;
 8000d46:	2302      	movs	r3, #2
 8000d48:	73bb      	strb	r3, [r7, #14]
				State = ADDRESS;
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <handle_data_hex+0x1b4>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	701a      	strb	r2, [r3, #0]
				break;
 8000d50:	e08a      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case ADDRESS:
			{
				Parse_Element(&pData[u8Count], 4U);
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff3e 	bl	8000bdc <Parse_Element>
				hex_data.u8Addr[0] = cInternalBufferData[0];
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <handle_data_hex+0x1b8>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <handle_data_hex+0x1bc>)
 8000d66:	705a      	strb	r2, [r3, #1]
				hex_data.u8Addr[1] = cInternalBufferData[1];
 8000d68:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <handle_data_hex+0x1b8>)
 8000d6a:	785a      	ldrb	r2, [r3, #1]
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <handle_data_hex+0x1bc>)
 8000d6e:	709a      	strb	r2, [r3, #2]
				u8Count = 6U;
 8000d70:	2306      	movs	r3, #6
 8000d72:	73bb      	strb	r3, [r7, #14]
				State = RECORD_TYPE;
 8000d74:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <handle_data_hex+0x1b4>)
 8000d76:	2203      	movs	r2, #3
 8000d78:	701a      	strb	r2, [r3, #0]
				break;
 8000d7a:	e075      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case RECORD_TYPE:
			{
				Parse_Element(&pData[u8Count], 2U);
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	2102      	movs	r1, #2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff29 	bl	8000bdc <Parse_Element>
				hex_data.u8RecordType = cInternalBufferData[0];
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <handle_data_hex+0x1b8>)
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <handle_data_hex+0x1bc>)
 8000d90:	70da      	strb	r2, [r3, #3]
				u8Count = 8U;
 8000d92:	2308      	movs	r3, #8
 8000d94:	73bb      	strb	r3, [r7, #14]
				State = DATA;
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <handle_data_hex+0x1b4>)
 8000d98:	2204      	movs	r2, #4
 8000d9a:	701a      	strb	r2, [r3, #0]
				break;
 8000d9c:	e064      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case DATA:
			{
				Parse_Element(&pData[u8Count], (hex_data.u8ByteCount*2U));
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <handle_data_hex+0x1bc>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f7ff ff14 	bl	8000bdc <Parse_Element>
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	e00a      	b.n	8000dd0 <handle_data_hex+0x100>
				{
					hex_data.u8Data[u8Count] = cInternalBufferData[u8Count];
 8000dba:	7bba      	ldrb	r2, [r7, #14]
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	4932      	ldr	r1, [pc, #200]	; (8000e88 <handle_data_hex+0x1b8>)
 8000dc0:	5c89      	ldrb	r1, [r1, r2]
 8000dc2:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <handle_data_hex+0x1bc>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	711a      	strb	r2, [r3, #4]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	73bb      	strb	r3, [r7, #14]
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <handle_data_hex+0x1bc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	7bba      	ldrb	r2, [r7, #14]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d3ef      	bcc.n	8000dba <handle_data_hex+0xea>
				}
				u8Count = 8U + (hex_data.u8ByteCount*2U);
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <handle_data_hex+0x1bc>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3304      	adds	r3, #4
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	73bb      	strb	r3, [r7, #14]
				State = CHECKSUM;
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <handle_data_hex+0x1b4>)
 8000de8:	2205      	movs	r2, #5
 8000dea:	701a      	strb	r2, [r3, #0]
				break;
 8000dec:	e03c      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case CHECKSUM:
			{
				Parse_Element(&pData[u8Count], 2U);
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	2102      	movs	r1, #2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fef0 	bl	8000bdc <Parse_Element>
				hex_data.u8CheckSum = cInternalBufferData[0];
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <handle_data_hex+0x1b8>)
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e02:	751a      	strb	r2, [r3, #20]
				State = DONE;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <handle_data_hex+0x1b4>)
 8000e06:	2206      	movs	r2, #6
 8000e08:	701a      	strb	r2, [r3, #0]
				break;
 8000e0a:	e02d      	b.n	8000e68 <handle_data_hex+0x198>
			}
			case DONE:
			{
				u8CaculChecksum = hex_data.u8ByteCount + hex_data.u8Addr[0] + hex_data.u8Addr[1] + hex_data.u8RecordType;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	4413      	add	r3, r2
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e1a:	789b      	ldrb	r3, [r3, #2]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e22:	78db      	ldrb	r3, [r3, #3]
 8000e24:	4413      	add	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e009      	b.n	8000e42 <handle_data_hex+0x172>
				{
					u8CaculChecksum += hex_data.u8Data[u8Count];
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e32:	4413      	add	r3, r2
 8000e34:	791a      	ldrb	r2, [r3, #4]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	4413      	add	r3, r2
 8000e3a:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	73bb      	strb	r3, [r7, #14]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	7bba      	ldrb	r2, [r7, #14]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3f0      	bcc.n	8000e2e <handle_data_hex+0x15e>
				}
				u8CaculChecksum = ~u8CaculChecksum + 1U;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	425b      	negs	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
				if (u8CaculChecksum == hex_data.u8CheckSum )
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <handle_data_hex+0x1bc>)
 8000e54:	7d1b      	ldrb	r3, [r3, #20]
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d101      	bne.n	8000e60 <handle_data_hex+0x190>
				{
					return STATE_NO_ERRORS;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e00d      	b.n	8000e7c <handle_data_hex+0x1ac>
				}
				else
				{
					return STATE_ERRORS;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e00b      	b.n	8000e7c <handle_data_hex+0x1ac>
				}
			}
			default:
			{
				return STATE_ERRORS;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e009      	b.n	8000e7c <handle_data_hex+0x1ac>
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73bb      	strb	r3, [r7, #14]
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f63f af39 	bhi.w	8000cec <handle_data_hex+0x1c>
			}
	   }
	}
	return STATE_ERRORS;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000136 	.word	0x20000136
 8000e88:	200000e4 	.word	0x200000e4
 8000e8c:	200000cc 	.word	0x200000cc

08000e90 <handle_data_receive>:

uint8_t handle_data_receive(uint8_t* pData, uint16_t Size)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
  return handle_data_hex(pData, Size);
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff15 	bl	8000cd0 <handle_data_hex>
 8000ea6:	4603      	mov	r3, r0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <handle_data_receive_dma>:

void handle_data_receive_dma(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t* pBuff = pData;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	617b      	str	r3, [r7, #20]
  switch( pBuff[0] )
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3b3a      	subs	r3, #58	; 0x3a
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	f200 80d0 	bhi.w	800106e <handle_data_receive_dma+0x1be>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <handle_data_receive_dma+0x24>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08001003 	.word	0x08001003
 8000ed8:	0800106f 	.word	0x0800106f
 8000edc:	0800106f 	.word	0x0800106f
 8000ee0:	0800106f 	.word	0x0800106f
 8000ee4:	0800106f 	.word	0x0800106f
 8000ee8:	0800106f 	.word	0x0800106f
 8000eec:	0800106f 	.word	0x0800106f
 8000ef0:	0800106f 	.word	0x0800106f
 8000ef4:	0800106f 	.word	0x0800106f
 8000ef8:	0800106f 	.word	0x0800106f
 8000efc:	0800106f 	.word	0x0800106f
 8000f00:	0800106f 	.word	0x0800106f
 8000f04:	0800106f 	.word	0x0800106f
 8000f08:	0800106f 	.word	0x0800106f
 8000f0c:	0800106f 	.word	0x0800106f
 8000f10:	0800106f 	.word	0x0800106f
 8000f14:	0800106f 	.word	0x0800106f
 8000f18:	0800106f 	.word	0x0800106f
 8000f1c:	0800106f 	.word	0x0800106f
 8000f20:	0800106f 	.word	0x0800106f
 8000f24:	0800106f 	.word	0x0800106f
 8000f28:	0800106f 	.word	0x0800106f
 8000f2c:	0800106f 	.word	0x0800106f
 8000f30:	0800106f 	.word	0x0800106f
 8000f34:	0800106f 	.word	0x0800106f
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	0800106f 	.word	0x0800106f
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	0800106f 	.word	0x0800106f
 8000f48:	0800106f 	.word	0x0800106f
 8000f4c:	08000fe7 	.word	0x08000fe7
 8000f50:	0800106f 	.word	0x0800106f
 8000f54:	0800105b 	.word	0x0800105b
  {
	  case OTA_UPDATE_FW:
	  {
		flag_ota_update = TRUE;
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <handle_data_receive_dma+0x1d4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000f5e:	230a      	movs	r3, #10
 8000f60:	2201      	movs	r2, #1
 8000f62:	4949      	ldr	r1, [pc, #292]	; (8001088 <handle_data_receive_dma+0x1d8>)
 8000f64:	4849      	ldr	r0, [pc, #292]	; (800108c <handle_data_receive_dma+0x1dc>)
 8000f66:	f002 fcf7 	bl	8003958 <HAL_UART_Transmit>
		break;
 8000f6a:	e083      	b.n	8001074 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_CHECK_SIZE_FLASH:
	  {
        Index = 1;
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <handle_data_receive_dma+0x1e0>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
        SizeCurrent = 0;
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <handle_data_receive_dma+0x1e4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
		while( pBuff[Index] != '\n' )
 8000f78:	e016      	b.n	8000fa8 <handle_data_receive_dma+0xf8>
		{
			SizeCurrent = SizeCurrent * 10 + ( pBuff[Index] - 48 );
 8000f7a:	4b46      	ldr	r3, [pc, #280]	; (8001094 <handle_data_receive_dma+0x1e4>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b41      	ldr	r3, [pc, #260]	; (8001090 <handle_data_receive_dma+0x1e0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	440b      	add	r3, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	3b30      	subs	r3, #48	; 0x30
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <handle_data_receive_dma+0x1e4>)
 8000f9a:	6013      	str	r3, [r2, #0]
			Index++;
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <handle_data_receive_dma+0x1e0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <handle_data_receive_dma+0x1e0>)
 8000fa6:	701a      	strb	r2, [r3, #0]
		while( pBuff[Index] != '\n' )
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <handle_data_receive_dma+0x1e0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d1e0      	bne.n	8000f7a <handle_data_receive_dma+0xca>
		}
		if( SizeCurrent > MaxSizeFlash )
 8000fb8:	4b36      	ldr	r3, [pc, #216]	; (8001094 <handle_data_receive_dma+0x1e4>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <handle_data_receive_dma+0x1e8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d906      	bls.n	8000fd2 <handle_data_receive_dma+0x122>
			HAL_UART_Transmit(USART_UD, OTA_CANCEL_UPDATE, 1, 10);
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <handle_data_receive_dma+0x1ec>)
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <handle_data_receive_dma+0x1dc>)
 8000fcc:	f002 fcc4 	bl	8003958 <HAL_UART_Transmit>
		else
		{
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
			flag_size_flash = TRUE;
		}
		break;
 8000fd0:	e050      	b.n	8001074 <handle_data_receive_dma+0x1c4>
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	492c      	ldr	r1, [pc, #176]	; (8001088 <handle_data_receive_dma+0x1d8>)
 8000fd8:	482c      	ldr	r0, [pc, #176]	; (800108c <handle_data_receive_dma+0x1dc>)
 8000fda:	f002 fcbd 	bl	8003958 <HAL_UART_Transmit>
			flag_size_flash = TRUE;
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <handle_data_receive_dma+0x1f0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
		break;
 8000fe4:	e046      	b.n	8001074 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_UPDATE_START:
	  {
	    if( flag_earse_ok == TRUE )
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <handle_data_receive_dma+0x1f4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d141      	bne.n	8001072 <handle_data_receive_dma+0x1c2>
	    {
	    	flag_earse_ok = FALSE;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <handle_data_receive_dma+0x1f4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
		    HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4923      	ldr	r1, [pc, #140]	; (8001088 <handle_data_receive_dma+0x1d8>)
 8000ffa:	4824      	ldr	r0, [pc, #144]	; (800108c <handle_data_receive_dma+0x1dc>)
 8000ffc:	f002 fcac 	bl	8003958 <HAL_UART_Transmit>
	    }
		break;
 8001000:	e037      	b.n	8001072 <handle_data_receive_dma+0x1c2>
	  }
	  case ':':
	  {
		if( ( handle_data_receive(pBuff, Size) == STATE_NO_ERRORS ) && flag_ota_update && flag_size_flash )
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4619      	mov	r1, r3
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff42 	bl	8000e90 <handle_data_receive>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d11b      	bne.n	800104a <handle_data_receive_dma+0x19a>
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <handle_data_receive_dma+0x1d4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d017      	beq.n	800104a <handle_data_receive_dma+0x19a>
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <handle_data_receive_dma+0x1f0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d013      	beq.n	800104a <handle_data_receive_dma+0x19a>
		{
	      write_flash_memory();
 8001022:	f7ff fc83 	bl	800092c <write_flash_memory>
	      if( !u32AddressWriteFlash )
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <handle_data_receive_dma+0x1f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <handle_data_receive_dma+0x18c>
	    	  HAL_UART_Transmit(USART_UD, OTA_RESEND_DATA, 1, 10);
 800102e:	230a      	movs	r3, #10
 8001030:	2201      	movs	r2, #1
 8001032:	491e      	ldr	r1, [pc, #120]	; (80010ac <handle_data_receive_dma+0x1fc>)
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <handle_data_receive_dma+0x1dc>)
 8001036:	f002 fc8f 	bl	8003958 <HAL_UART_Transmit>
	      if( !u32AddressWriteFlash )
 800103a:	e00d      	b.n	8001058 <handle_data_receive_dma+0x1a8>
	      else
	    	  HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 800103c:	230a      	movs	r3, #10
 800103e:	2201      	movs	r2, #1
 8001040:	4911      	ldr	r1, [pc, #68]	; (8001088 <handle_data_receive_dma+0x1d8>)
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <handle_data_receive_dma+0x1dc>)
 8001044:	f002 fc88 	bl	8003958 <HAL_UART_Transmit>
	      if( !u32AddressWriteFlash )
 8001048:	e006      	b.n	8001058 <handle_data_receive_dma+0x1a8>
		}
	    else
		  HAL_UART_Transmit(USART_UD, OTA_RESEND_DATA, 1, 10);
 800104a:	230a      	movs	r3, #10
 800104c:	2201      	movs	r2, #1
 800104e:	4917      	ldr	r1, [pc, #92]	; (80010ac <handle_data_receive_dma+0x1fc>)
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <handle_data_receive_dma+0x1dc>)
 8001052:	f002 fc81 	bl	8003958 <HAL_UART_Transmit>
		break;
 8001056:	e00d      	b.n	8001074 <handle_data_receive_dma+0x1c4>
 8001058:	e00c      	b.n	8001074 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_UPDATE_FW_COMPLETE:
	  {
		flag_ota_complete = TRUE;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <handle_data_receive_dma+0x200>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8001060:	230a      	movs	r3, #10
 8001062:	2201      	movs	r2, #1
 8001064:	4908      	ldr	r1, [pc, #32]	; (8001088 <handle_data_receive_dma+0x1d8>)
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <handle_data_receive_dma+0x1dc>)
 8001068:	f002 fc76 	bl	8003958 <HAL_UART_Transmit>
		break;
 800106c:	e002      	b.n	8001074 <handle_data_receive_dma+0x1c4>
	  }
	  default:
		break;
 800106e:	bf00      	nop
 8001070:	e000      	b.n	8001074 <handle_data_receive_dma+0x1c4>
		break;
 8001072:	bf00      	nop
  }
  free(pBuff);
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f003 fe7b 	bl	8004d70 <free>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000c0 	.word	0x200000c0
 8001088:	08004e5c 	.word	0x08004e5c
 800108c:	20000254 	.word	0x20000254
 8001090:	200000c8 	.word	0x200000c8
 8001094:	200000c4 	.word	0x200000c4
 8001098:	20000000 	.word	0x20000000
 800109c:	08004e60 	.word	0x08004e60
 80010a0:	200000c1 	.word	0x200000c1
 80010a4:	200000c3 	.word	0x200000c3
 80010a8:	20000248 	.word	0x20000248
 80010ac:	08004e64 	.word	0x08004e64
 80010b0:	200000c2 	.word	0x200000c2

080010b4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
  if( (huart->Instance == USART1) )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a60      	ldr	r2, [pc, #384]	; (8001248 <HAL_UARTEx_RxEventCallback+0x194>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	f040 80ba 	bne.w	8001240 <HAL_UARTEx_RxEventCallback+0x18c>
  {
	static uint16_t old_pos = 0;
	static uint8_t *ptemp;
	uint16_t i;

	if( g_flag_cplt_dma )
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_UARTEx_RxEventCallback+0x198>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d026      	beq.n	8001122 <HAL_UARTEx_RxEventCallback+0x6e>
	{
	  g_flag_cplt_dma = FALSE;
 80010d4:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_UARTEx_RxEventCallback+0x198>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	  for (i = 0; i < Size - old_pos; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
 80010de:	e00c      	b.n	80010fa <HAL_UARTEx_RxEventCallback+0x46>
	  {
		  checkamount[i] = u8data_receive_dma[old_pos + i];
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	441a      	add	r2, r3
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	4959      	ldr	r1, [pc, #356]	; (8001254 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80010ee:	5c89      	ldrb	r1, [r1, r2]
 80010f0:	4a59      	ldr	r2, [pc, #356]	; (8001258 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80010f2:	54d1      	strb	r1, [r2, r3]
	  for (i = 0; i < Size - old_pos; i++)
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	3301      	adds	r3, #1
 80010f8:	81fb      	strh	r3, [r7, #14]
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4954      	ldr	r1, [pc, #336]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001100:	8809      	ldrh	r1, [r1, #0]
 8001102:	1a5b      	subs	r3, r3, r1
 8001104:	429a      	cmp	r2, r3
 8001106:	dbeb      	blt.n	80010e0 <HAL_UARTEx_RxEventCallback+0x2c>
	  }
	  if( handle_data_hex(checkamount, Size - old_pos) == STATE_ERRORS )
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4850      	ldr	r0, [pc, #320]	; (8001258 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001116:	f7ff fddb 	bl	8000cd0 <handle_data_hex>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 808e 	beq.w	800123e <HAL_UARTEx_RxEventCallback+0x18a>
	    return;
	}

	if (Size != old_pos)
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	f000 8084 	beq.w	8001236 <HAL_UARTEx_RxEventCallback+0x182>
	{
	  if (Size > old_pos)
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	429a      	cmp	r2, r3
 8001136:	d91e      	bls.n	8001176 <HAL_UARTEx_RxEventCallback+0xc2>
	  {
	    uwNbReceivedChars = Size - old_pos;
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001144:	601a      	str	r2, [r3, #0]
	    for (i = 0; i < uwNbReceivedChars; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	81fb      	strh	r3, [r7, #14]
 800114a:	e00e      	b.n	800116a <HAL_UARTEx_RxEventCallback+0xb6>
		{
			pBufferReadyForUser[i] = u8data_receive_dma[old_pos + i];
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	441a      	add	r2, r3
 8001156:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	440b      	add	r3, r1
 800115e:	493d      	ldr	r1, [pc, #244]	; (8001254 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001160:	5c8a      	ldrb	r2, [r1, r2]
 8001162:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < uwNbReceivedChars; i++)
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	3301      	adds	r3, #1
 8001168:	81fb      	strh	r3, [r7, #14]
 800116a:	89fa      	ldrh	r2, [r7, #14]
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3eb      	bcc.n	800114c <HAL_UARTEx_RxEventCallback+0x98>
 8001174:	e03b      	b.n	80011ee <HAL_UARTEx_RxEventCallback+0x13a>
		}
	  }
	  else
	  {
	    uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800117e:	461a      	mov	r2, r3
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001182:	601a      	str	r2, [r3, #0]
		for (i = 0; i < uwNbReceivedChars; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	81fb      	strh	r3, [r7, #14]
 8001188:	e00e      	b.n	80011a8 <HAL_UARTEx_RxEventCallback+0xf4>
		{
			pBufferReadyForUser[i] = u8data_receive_dma[old_pos + i];
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	441a      	add	r2, r3
 8001194:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	440b      	add	r3, r1
 800119c:	492d      	ldr	r1, [pc, #180]	; (8001254 <HAL_UARTEx_RxEventCallback+0x1a0>)
 800119e:	5c8a      	ldrb	r2, [r1, r2]
 80011a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < uwNbReceivedChars; i++)
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	3301      	adds	r3, #1
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	89fa      	ldrh	r2, [r7, #14]
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3eb      	bcc.n	800118a <HAL_UARTEx_RxEventCallback+0xd6>
		}
	   if (Size > 0)
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01a      	beq.n	80011ee <HAL_UARTEx_RxEventCallback+0x13a>
	   {
	     for (i = 0; i < Size; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	81fb      	strh	r3, [r7, #14]
 80011bc:	e00d      	b.n	80011da <HAL_UARTEx_RxEventCallback+0x126>
		 {
		   pBufferReadyForUser[uwNbReceivedChars + i] = u8data_receive_dma[i];
 80011be:	89fa      	ldrh	r2, [r7, #14]
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	89f8      	ldrh	r0, [r7, #14]
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4403      	add	r3, r0
 80011cc:	440b      	add	r3, r1
 80011ce:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80011d0:	5c8a      	ldrb	r2, [r1, r2]
 80011d2:	701a      	strb	r2, [r3, #0]
	     for (i = 0; i < Size; i++)
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	3301      	adds	r3, #1
 80011d8:	81fb      	strh	r3, [r7, #14]
 80011da:	89fa      	ldrh	r2, [r7, #14]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3ed      	bcc.n	80011be <HAL_UARTEx_RxEventCallback+0x10a>
		 }
		 uwNbReceivedChars += Size;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011ec:	6013      	str	r3, [r2, #0]
	   }
	  }

	  #ifdef DEBUG
	    HAL_UART_Transmit(&huart2, pBufferReadyForUser, uwNbReceivedChars, 100);
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80011fc:	f002 fbac 	bl	8003958 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 100);
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	2201      	movs	r2, #1
 8001204:	4918      	ldr	r1, [pc, #96]	; (8001268 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001208:	f002 fba6 	bl	8003958 <HAL_UART_Transmit>
	  #endif
	  handle_data_receive_dma(huart, pBufferReadyForUser, uwNbReceivedChars);
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	b292      	uxth	r2, r2
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe49 	bl	8000eb0 <handle_data_receive_dma>

	  ptemp = pBufferReadyForUser;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001224:	6013      	str	r3, [r2, #0]
	  pBufferReadyForUser = pBufferReadyForReception;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800122c:	6013      	str	r3, [r2, #0]
	  pBufferReadyForReception = ptemp;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001234:	6013      	str	r3, [r2, #0]
   }
   old_pos = Size;
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	8013      	strh	r3, [r2, #0]
 800123c:	e000      	b.n	8001240 <HAL_UARTEx_RxEventCallback+0x18c>
	    return;
 800123e:	bf00      	nop
  }
}
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000
 800124c:	200000e1 	.word	0x200000e1
 8001250:	2000024c 	.word	0x2000024c
 8001254:	20000104 	.word	0x20000104
 8001258:	200001a0 	.word	0x200001a0
 800125c:	200001d4 	.word	0x200001d4
 8001260:	200001d8 	.word	0x200001d8
 8001264:	20000298 	.word	0x20000298
 8001268:	08004e68 	.word	0x08004e68
 800126c:	20000250 	.word	0x20000250
 8001270:	200001dc 	.word	0x200001dc

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f000 faba 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f80e 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 f8f2 	bl	8001468 <MX_GPIO_Init>
  MX_DMA_Init();
 8001284:	f000 f8d0 	bl	8001428 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001288:	f000 f87a 	bl	8001380 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f8a2 	bl	80013d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_up_bootloader();
 8001290:	f7ff fbdc 	bl	8000a4c <start_up_bootloader>

  start_up_firmware_update();
 8001294:	f7ff fc6a 	bl	8000b6c <start_up_firmware_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001298:	e7fe      	b.n	8001298 <main+0x24>
	...

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2234      	movs	r2, #52	; 0x34
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fd68 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <SystemClock_Config+0xdc>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <SystemClock_Config+0xdc>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <SystemClock_Config+0xdc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <SystemClock_Config+0xe0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a25      	ldr	r2, [pc, #148]	; (800137c <SystemClock_Config+0xe0>)
 80012e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <SystemClock_Config+0xe0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001300:	2310      	movs	r3, #16
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001308:	2300      	movs	r3, #0
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800130c:	2308      	movs	r3, #8
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001310:	23b4      	movs	r3, #180	; 0xb4
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fffd 	bl	8003324 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001330:	f000 f8c2 	bl	80014b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001334:	f001 fb64 	bl	8002a00 <HAL_PWREx_EnableOverDrive>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800133e:	f000 f8bb 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2105      	movs	r1, #5
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fb9d 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800136c:	f000 f8a4 	bl	80014b8 <Error_Handler>
  }
}
 8001370:	bf00      	nop
 8001372:	3750      	adds	r7, #80	; 0x50
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART1_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART1_UART_Init+0x4c>)
 80013b8:	f002 fa52 	bl	8003860 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 f879 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000254 	.word	0x20000254
 80013d0:	40011000 	.word	0x40011000

080013d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART2_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART2_UART_Init+0x4c>)
 800140c:	f002 fa28 	bl	8003860 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f84f 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000298 	.word	0x20000298
 8001424:	40004400 	.word	0x40004400

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_DMA_Init+0x3c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <MX_DMA_Init+0x3c>)
 8001438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_DMA_Init+0x3c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	203a      	movs	r0, #58	; 0x3a
 8001450:	f000 fb3f 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001454:	203a      	movs	r0, #58	; 0x3a
 8001456:	f000 fb58 	bl	8001b0a <HAL_NVIC_EnableIRQ>

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_GPIO_Init+0x4c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <MX_GPIO_Init+0x4c>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_GPIO_Init+0x4c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_GPIO_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <MX_GPIO_Init+0x4c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_GPIO_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_MspInit+0x4c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_UART_MspInit+0x158>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d164      	bne.n	8001600 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_UART_MspInit+0x15c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <HAL_UART_MspInit+0x15c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	483a      	ldr	r0, [pc, #232]	; (8001674 <HAL_UART_MspInit+0x160>)
 800158c:	f000 ffb0 	bl	80024f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_UART_MspInit+0x164>)
 8001592:	4a3a      	ldr	r2, [pc, #232]	; (800167c <HAL_UART_MspInit+0x168>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <HAL_UART_MspInit+0x164>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015d2:	4829      	ldr	r0, [pc, #164]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015d4:	f000 fac2 	bl	8001b5c <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015de:	f7ff ff6b 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_UART_MspInit+0x164>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2025      	movs	r0, #37	; 0x25
 80015f4:	f000 fa6d 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f8:	2025      	movs	r0, #37	; 0x25
 80015fa:	f000 fa86 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fe:	e030      	b.n	8001662 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_UART_MspInit+0x16c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12b      	bne.n	8001662 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_UART_MspInit+0x15c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0x15c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x15c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001642:	230c      	movs	r3, #12
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001652:	2307      	movs	r3, #7
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_UART_MspInit+0x160>)
 800165e:	f000 ff47 	bl	80024f0 <HAL_GPIO_Init>
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40011000 	.word	0x40011000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	200002dc 	.word	0x200002dc
 800167c:	40026440 	.word	0x40026440
 8001680:	40004400 	.word	0x40004400

08001684 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_UART_MspDeInit+0x60>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_UART_MspDeInit+0x64>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_UART_MspDeInit+0x64>)
 800169c:	f023 0310 	bic.w	r3, r3, #16
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80016a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <HAL_UART_MspDeInit+0x68>)
 80016a8:	f001 f8b6 	bl	8002818 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fb01 	bl	8001cb8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80016b6:	2025      	movs	r0, #37	; 0x25
 80016b8:	f000 fa35 	bl	8001b26 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80016bc:	e00e      	b.n	80016dc <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_UART_MspDeInit+0x6c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d109      	bne.n	80016dc <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_UART_MspDeInit+0x64>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_UART_MspDeInit+0x64>)
 80016ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80016d4:	210c      	movs	r1, #12
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_UART_MspDeInit+0x68>)
 80016d8:	f001 f89e 	bl	8002818 <HAL_GPIO_DeInit>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40004400 	.word	0x40004400

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f8a8 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <USART1_IRQHandler+0x10>)
 800174e:	f002 f9fb 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000254 	.word	0x20000254

0800175c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <DMA2_Stream2_IRQHandler+0x14>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <DMA2_Stream2_IRQHandler+0x18>)
 8001768:	f000 fbee 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200000e1 	.word	0x200000e1
 8001774:	200002dc 	.word	0x200002dc

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f003 faad 	bl	8004d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fd51 	bl	8001274 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80017e0:	08004e9c 	.word	0x08004e9c
  ldr r2, =_sbss
 80017e4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80017e8:	20000348 	.word	0x20000348

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f94f 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe4e 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f975 	bl	8001b42 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f92f 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000034 	.word	0x20000034
 800188c:	2000003c 	.word	0x2000003c
 8001890:	20000038 	.word	0x20000038

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000003c 	.word	0x2000003c
 80018b8:	2000033c 	.word	0x2000033c

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000033c 	.word	0x2000033c

080018d4 <__NVIC_SetPriorityGrouping>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_DisableIRQ>:
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db12      	blt.n	80019ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	490a      	ldr	r1, [pc, #40]	; (80019b8 <__NVIC_DisableIRQ+0x44>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	3320      	adds	r3, #32
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80019a0:	f3bf 8f4f 	dsb	sy
}
 80019a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a6:	f3bf 8f6f 	isb	sy
}
 80019aa:	bf00      	nop
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff05 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff1a 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff0d 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff1d 	bl	8001974 <__NVIC_DisableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff94 	bl	8001a78 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fea8 	bl	80018bc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e099      	b.n	8001cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b98:	e00f      	b.n	8001bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b9a:	f7ff fe8f 	bl	80018bc <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d908      	bls.n	8001bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e078      	b.n	8001cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e8      	bne.n	8001b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_DMA_Init+0x158>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d117      	bne.n	8001c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fbc9 	bl	80023f8 <DMA_CheckFifoParam>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e016      	b.n	8001cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fb80 	bl	800238c <DMA_CalcBaseAndBitshift>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	f010803f 	.word	0xf010803f

08001cb8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e050      	b.n	8001d6c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d101      	bne.n	8001cda <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e048      	b.n	8001d6c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fb36 	bl	800238c <DMA_CalcBaseAndBitshift>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_Start_IT+0x26>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e040      	b.n	8001e1c <HAL_DMA_Start_IT+0xa8>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d12f      	bne.n	8001e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fab4 	bl	8002330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	223f      	movs	r2, #63	; 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0216 	orr.w	r2, r2, #22
 8001de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e005      	b.n	8001e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e32:	f7ff fd43 	bl	80018bc <HAL_GetTick>
 8001e36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d008      	beq.n	8001e56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e052      	b.n	8001efc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0216 	bic.w	r2, r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_DMA_Abort+0x62>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	e013      	b.n	8001ed0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea8:	f7ff fd08 	bl	80018bc <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d90c      	bls.n	8001ed0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e015      	b.n	8001efc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1e4      	bne.n	8001ea8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	223f      	movs	r2, #63	; 0x3f
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00c      	b.n	8001f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b8e      	ldr	r3, [pc, #568]	; (8002190 <HAL_DMA_IRQHandler+0x248>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	; (8002194 <HAL_DMA_IRQHandler+0x24c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808f 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8087 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07e      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e079      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02c      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
 800218e:	bf00      	nop
 8002190:	20000034 	.word	0x20000034
 8002194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e01e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10f      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0210 	bic.w	r2, r2, #16
 80021c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d032      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2205      	movs	r2, #5
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3301      	adds	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_DMA_IRQHandler+0x2cc>
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002254:	bf00      	nop
    }
  }
}
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_DMA_UnRegisterCallback+0x1e>
 8002276:	2302      	movs	r3, #2
 8002278:	e053      	b.n	8002322 <HAL_DMA_UnRegisterCallback+0xc6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d142      	bne.n	8002314 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d83c      	bhi.n	800230e <HAL_DMA_UnRegisterCallback+0xb2>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_DMA_UnRegisterCallback+0x40>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022c1 	.word	0x080022c1
 80022a4:	080022c9 	.word	0x080022c9
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d9 	.word	0x080022d9
 80022b0:	080022e1 	.word	0x080022e1
 80022b4:	080022e9 	.word	0x080022e9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80022be:	e02b      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80022c6:	e027      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80022ce:	e023      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80022d6:	e01f      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80022de:	e01b      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80022e6:	e017      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800230c:	e004      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      break;
 8002312:	e001      	b.n	8002318 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop

08002330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800234c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d108      	bne.n	8002370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236e:	e007      	b.n	8002380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b10      	subs	r3, #16
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <DMA_CalcBaseAndBitshift+0x64>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a6:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <DMA_CalcBaseAndBitshift+0x68>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d909      	bls.n	80023ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
 80023cc:	e007      	b.n	80023de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	aaaaaaab 	.word	0xaaaaaaab
 80023f4:	08004e84 	.word	0x08004e84

080023f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d856      	bhi.n	80024c6 <DMA_CheckFifoParam+0xce>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <DMA_CheckFifoParam+0x28>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002431 	.word	0x08002431
 8002424:	08002443 	.word	0x08002443
 8002428:	08002431 	.word	0x08002431
 800242c:	080024c7 	.word	0x080024c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d046      	beq.n	80024ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002440:	e043      	b.n	80024ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800244a:	d140      	bne.n	80024ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e03d      	b.n	80024ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d121      	bne.n	80024a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d837      	bhi.n	80024d2 <DMA_CheckFifoParam+0xda>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <DMA_CheckFifoParam+0x70>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002479 	.word	0x08002479
 800246c:	0800247f 	.word	0x0800247f
 8002470:	08002479 	.word	0x08002479
 8002474:	08002491 	.word	0x08002491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e030      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d025      	beq.n	80024d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e022      	b.n	80024d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002498:	d11f      	bne.n	80024da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249e:	e01c      	b.n	80024da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d903      	bls.n	80024ae <DMA_CheckFifoParam+0xb6>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d003      	beq.n	80024b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024ac:	e018      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      break;
 80024b2:	e015      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e00b      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024c6:	bf00      	nop
 80024c8:	e00a      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e008      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e006      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
    }
  } 
  
  return status; 
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e165      	b.n	80027d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8154 	bne.w	80027d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80ae 	beq.w	80027d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <HAL_GPIO_Init+0x300>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a5c      	ldr	r2, [pc, #368]	; (80027f0 <HAL_GPIO_Init+0x300>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_GPIO_Init+0x300>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4f      	ldr	r2, [pc, #316]	; (80027f8 <HAL_GPIO_Init+0x308>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x21a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4e      	ldr	r2, [pc, #312]	; (80027fc <HAL_GPIO_Init+0x30c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x216>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <HAL_GPIO_Init+0x310>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x212>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4c      	ldr	r2, [pc, #304]	; (8002804 <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4b      	ldr	r2, [pc, #300]	; (8002808 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x20a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	; (800280c <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x206>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a49      	ldr	r2, [pc, #292]	; (8002810 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x202>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00c      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00a      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x21c>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x21c>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x21c>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_GPIO_Init+0x304>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <HAL_GPIO_Init+0x324>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_GPIO_Init+0x324>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_GPIO_Init+0x324>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <HAL_GPIO_Init+0x324>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_GPIO_Init+0x324>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_GPIO_Init+0x324>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_GPIO_Init+0x324>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_GPIO_Init+0x324>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f ae96 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e0c7      	b.n	80029c4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	429a      	cmp	r2, r3
 800284c:	f040 80b7 	bne.w	80029be <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002850:	4a62      	ldr	r2, [pc, #392]	; (80029dc <HAL_GPIO_DeInit+0x1c4>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a5a      	ldr	r2, [pc, #360]	; (80029e0 <HAL_GPIO_DeInit+0x1c8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d025      	beq.n	80028c6 <HAL_GPIO_DeInit+0xae>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <HAL_GPIO_DeInit+0x1cc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01f      	beq.n	80028c2 <HAL_GPIO_DeInit+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_GPIO_DeInit+0x1d0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_DeInit+0xa6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_GPIO_DeInit+0x1d4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_DeInit+0xa2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_GPIO_DeInit+0x1d8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_DeInit+0x9e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a55      	ldr	r2, [pc, #340]	; (80029f4 <HAL_GPIO_DeInit+0x1dc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_DeInit+0x9a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_GPIO_DeInit+0x1e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_DeInit+0x96>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00c      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00a      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028b2:	2305      	movs	r3, #5
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_DeInit+0xb0>
 80028c6:	2300      	movs	r3, #0
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d132      	bne.n	800293e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028d8:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	4946      	ldr	r1, [pc, #280]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028e6:	4b45      	ldr	r3, [pc, #276]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4943      	ldr	r1, [pc, #268]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028f4:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	493f      	ldr	r1, [pc, #252]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002902:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	493c      	ldr	r1, [pc, #240]	; (80029fc <HAL_GPIO_DeInit+0x1e4>)
 800290c:	4013      	ands	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002920:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <HAL_GPIO_DeInit+0x1c4>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	43da      	mvns	r2, r3
 8002930:	482a      	ldr	r0, [pc, #168]	; (80029dc <HAL_GPIO_DeInit+0x1c4>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	400a      	ands	r2, r1
 8002938:	3302      	adds	r3, #2
 800293a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2103      	movs	r1, #3
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	08d2      	lsrs	r2, r2, #3
 8002974:	4019      	ands	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2103      	movs	r1, #3
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	2101      	movs	r1, #1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2103      	movs	r1, #3
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	f67f af34 	bls.w	8002834 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7fe ff46 	bl	80018bc <HAL_GetTick>
 8002a30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a32:	e009      	b.n	8002a48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a34:	f7fe ff42 	bl	80018bc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a42:	d901      	bls.n	8002a48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e01f      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d1ee      	bne.n	8002a34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7fe ff2e 	bl	80018bc <HAL_GetTick>
 8002a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a62:	e009      	b.n	8002a78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a64:	f7fe ff2a 	bl	80018bc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a72:	d901      	bls.n	8002a78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e007      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a84:	d1ee      	bne.n	8002a64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	420e0040 	.word	0x420e0040
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	420e0044 	.word	0x420e0044

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cc      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90c      	bls.n	8002adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d044      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e067      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4934      	ldr	r1, [pc, #208]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fe94 	bl	80018bc <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe fe90 	bl	80018bc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20c      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f855 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fdf4 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08004e6c 	.word	0x08004e6c
 8002c64:	20000034 	.word	0x20000034
 8002c68:	20000038 	.word	0x20000038

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000034 	.word	0x20000034

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08004e7c 	.word	0x08004e7c

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08004e7c 	.word	0x08004e7c

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b0ae      	sub	sp, #184	; 0xb8
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfa:	4bcb      	ldr	r3, [pc, #812]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	f200 8206 	bhi.w	8003114 <HAL_RCC_GetSysClockFreq+0x440>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d45 	.word	0x08002d45
 8002d14:	08003115 	.word	0x08003115
 8002d18:	08003115 	.word	0x08003115
 8002d1c:	08003115 	.word	0x08003115
 8002d20:	08002d4d 	.word	0x08002d4d
 8002d24:	08003115 	.word	0x08003115
 8002d28:	08003115 	.word	0x08003115
 8002d2c:	08003115 	.word	0x08003115
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08003115 	.word	0x08003115
 8002d38:	08003115 	.word	0x08003115
 8002d3c:	08003115 	.word	0x08003115
 8002d40:	08002f45 	.word	0x08002f45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4bb9      	ldr	r3, [pc, #740]	; (800302c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d4a:	e1e7      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4bb8      	ldr	r3, [pc, #736]	; (8003030 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d52:	e1e3      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4bb4      	ldr	r3, [pc, #720]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d60:	4bb1      	ldr	r3, [pc, #708]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d071      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4bae      	ldr	r3, [pc, #696]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d78:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4621      	mov	r1, r4
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	6439      	str	r1, [r7, #64]	; 0x40
 8002db0:	4629      	mov	r1, r5
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	647b      	str	r3, [r7, #68]	; 0x44
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dce:	4641      	mov	r1, r8
 8002dd0:	018a      	lsls	r2, r1, #6
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dd8:	4649      	mov	r1, r9
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002dec:	4649      	mov	r1, r9
 8002dee:	00cb      	lsls	r3, r1, #3
 8002df0:	4641      	mov	r1, r8
 8002df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df6:	4641      	mov	r1, r8
 8002df8:	00ca      	lsls	r2, r1, #3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4622      	mov	r2, r4
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
 8002e06:	462b      	mov	r3, r5
 8002e08:	460a      	mov	r2, r1
 8002e0a:	eb42 0303 	adc.w	r3, r2, r3
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	024b      	lsls	r3, r1, #9
 8002e20:	4621      	mov	r1, r4
 8002e22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e26:	4621      	mov	r1, r4
 8002e28:	024a      	lsls	r2, r1, #9
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e40:	f7fd f9e0 	bl	8000204 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e4e:	e067      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e50:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e72:	4622      	mov	r2, r4
 8002e74:	462b      	mov	r3, r5
 8002e76:	f04f 0000 	mov.w	r0, #0
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	0159      	lsls	r1, r3, #5
 8002e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e84:	0150      	lsls	r0, r2, #5
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	1a51      	subs	r1, r2, r1
 8002e8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e90:	4629      	mov	r1, r5
 8002e92:	eb63 0301 	sbc.w	r3, r3, r1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	018b      	lsls	r3, r1, #6
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eae:	4641      	mov	r1, r8
 8002eb0:	018a      	lsls	r2, r1, #6
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eb8:	4649      	mov	r1, r9
 8002eba:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed2:	4692      	mov	sl, r2
 8002ed4:	469b      	mov	fp, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	eb1a 0303 	adds.w	r3, sl, r3
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	462b      	mov	r3, r5
 8002ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	028b      	lsls	r3, r1, #10
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002efc:	4621      	mov	r1, r4
 8002efe:	028a      	lsls	r2, r1, #10
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f08:	2200      	movs	r2, #0
 8002f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f0c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f12:	f7fd f977 	bl	8000204 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f42:	e0eb      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f50:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d06b      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	2200      	movs	r2, #0
 8002f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f70:	2300      	movs	r3, #0
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
 8002f74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f78:	4622      	mov	r2, r4
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	f04f 0000 	mov.w	r0, #0
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	0159      	lsls	r1, r3, #5
 8002f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8a:	0150      	lsls	r0, r2, #5
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4621      	mov	r1, r4
 8002f92:	1a51      	subs	r1, r2, r1
 8002f94:	61b9      	str	r1, [r7, #24]
 8002f96:	4629      	mov	r1, r5
 8002f98:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002faa:	4659      	mov	r1, fp
 8002fac:	018b      	lsls	r3, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	018a      	lsls	r2, r1, #6
 8002fb8:	4651      	mov	r1, sl
 8002fba:	ebb2 0801 	subs.w	r8, r2, r1
 8002fbe:	4659      	mov	r1, fp
 8002fc0:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd8:	4690      	mov	r8, r2
 8002fda:	4699      	mov	r9, r3
 8002fdc:	4623      	mov	r3, r4
 8002fde:	eb18 0303 	adds.w	r3, r8, r3
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	eb49 0303 	adc.w	r3, r9, r3
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	024b      	lsls	r3, r1, #9
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003002:	4621      	mov	r1, r4
 8003004:	024a      	lsls	r2, r1, #9
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300e:	2200      	movs	r2, #0
 8003010:	65bb      	str	r3, [r7, #88]	; 0x58
 8003012:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003014:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003018:	f7fd f8f4 	bl	8000204 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003026:	e065      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x420>
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_GetSysClockFreq+0x458>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	4618      	mov	r0, r3
 800303e:	4611      	mov	r1, r2
 8003040:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003044:	653b      	str	r3, [r7, #80]	; 0x50
 8003046:	2300      	movs	r3, #0
 8003048:	657b      	str	r3, [r7, #84]	; 0x54
 800304a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800304e:	4642      	mov	r2, r8
 8003050:	464b      	mov	r3, r9
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	0159      	lsls	r1, r3, #5
 800305c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003060:	0150      	lsls	r0, r2, #5
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4641      	mov	r1, r8
 8003068:	1a51      	subs	r1, r2, r1
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	4649      	mov	r1, r9
 800306e:	eb63 0301 	sbc.w	r3, r3, r1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003080:	4659      	mov	r1, fp
 8003082:	018b      	lsls	r3, r1, #6
 8003084:	4651      	mov	r1, sl
 8003086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800308a:	4651      	mov	r1, sl
 800308c:	018a      	lsls	r2, r1, #6
 800308e:	4651      	mov	r1, sl
 8003090:	1a54      	subs	r4, r2, r1
 8003092:	4659      	mov	r1, fp
 8003094:	eb63 0501 	sbc.w	r5, r3, r1
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	00eb      	lsls	r3, r5, #3
 80030a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a6:	00e2      	lsls	r2, r4, #3
 80030a8:	4614      	mov	r4, r2
 80030aa:	461d      	mov	r5, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	18e3      	adds	r3, r4, r3
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	464b      	mov	r3, r9
 80030b4:	eb45 0303 	adc.w	r3, r5, r3
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c6:	4629      	mov	r1, r5
 80030c8:	028b      	lsls	r3, r1, #10
 80030ca:	4621      	mov	r1, r4
 80030cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d0:	4621      	mov	r1, r4
 80030d2:	028a      	lsls	r2, r1, #10
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030dc:	2200      	movs	r2, #0
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030e6:	f7fd f88d 	bl	8000204 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4613      	mov	r3, r2
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCC_GetSysClockFreq+0x458>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0f1b      	lsrs	r3, r3, #28
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003112:	e003      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800311a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003120:	4618      	mov	r0, r3
 8003122:	37b8      	adds	r7, #184	; 0xb8
 8003124:	46bd      	mov	sp, r7
 8003126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	00f42400 	.word	0x00f42400

08003134 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800313a:	f7fe fbbf 	bl	80018bc <HAL_GetTick>
 800313e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003140:	4b72      	ldr	r3, [pc, #456]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a71      	ldr	r2, [pc, #452]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314e:	f7fe fbb5 	bl	80018bc <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0d0      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a66      	ldr	r2, [pc, #408]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003178:	f7fe fba0 	bl	80018bc <HAL_GetTick>
 800317c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7fe fb99 	bl	80018bc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0b2      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800319c:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031a8:	f7fe fb88 	bl	80018bc <HAL_GetTick>
 80031ac:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80031ae:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80031b4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80031b8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fb7e 	bl	80018bc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e099      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031da:	f7fe fb6f 	bl	80018bc <HAL_GetTick>
 80031de:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a49      	ldr	r2, [pc, #292]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fb65 	bl	80018bc <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e080      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800320c:	f7fe fb56 	bl	80018bc <HAL_GetTick>
 8003210:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a3d      	ldr	r2, [pc, #244]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003218:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800321c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003220:	f7fe fb4c 	bl	80018bc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e067      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800323e:	f7fe fb3d 	bl	80018bc <HAL_GetTick>
 8003242:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003252:	f7fe fb33 	bl	80018bc <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e04e      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8003270:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003272:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_RCC_DeInit+0x1dc>)
 8003274:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_RCC_DeInit+0x1dc>)
 800327a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_RCC_DeInit+0x1e0>)
 8003282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 800328c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003290:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 8003298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032b0:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80032b4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4a11      	ldr	r2, [pc, #68]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <HAL_RCC_DeInit+0x1d8>)
 80032e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCC_DeInit+0x1e4>)
 80032e8:	4a0c      	ldr	r2, [pc, #48]	; (800331c <HAL_RCC_DeInit+0x1e8>)
 80032ea:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_RCC_DeInit+0x1ec>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fa9f 	bl	8001834 <HAL_InitTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003300:	2300      	movs	r3, #0
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	24003010 	.word	0x24003010
 8003314:	04003010 	.word	0x04003010
 8003318:	20000034 	.word	0x20000034
 800331c:	00f42400 	.word	0x00f42400
 8003320:	20000038 	.word	0x20000038

08003324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e28d      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8083 	beq.w	800344a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003344:	4b94      	ldr	r3, [pc, #592]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b04      	cmp	r3, #4
 800334e:	d019      	beq.n	8003384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003350:	4b91      	ldr	r3, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003358:	2b08      	cmp	r3, #8
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800335c:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003368:	d00c      	beq.n	8003384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b8b      	ldr	r3, [pc, #556]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d112      	bne.n	800339c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x124>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e25a      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x90>
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7b      	ldr	r2, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xcc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0xb4>
 80033be:	4b76      	ldr	r3, [pc, #472]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a75      	ldr	r2, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b73      	ldr	r3, [pc, #460]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a72      	ldr	r2, [pc, #456]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xcc>
 80033d8:	4b6f      	ldr	r3, [pc, #444]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6e      	ldr	r2, [pc, #440]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b6c      	ldr	r3, [pc, #432]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fa60 	bl	80018bc <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fa5c 	bl	80018bc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e21f      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xdc>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fa4c 	bl	80018bc <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fa48 	bl	80018bc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e20b      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x104>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d06f      	beq.n	8003536 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003456:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003462:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800346a:	2b08      	cmp	r3, #8
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x186>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1d3      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4937      	ldr	r1, [pc, #220]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x278>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe f9f5 	bl	80018bc <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fe f9f1 	bl	80018bc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1b4      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4925      	ldr	r1, [pc, #148]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x278>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe f9d4 	bl	80018bc <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003518:	f7fe f9d0 	bl	80018bc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e193      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d036      	beq.n	80035b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCC_OscConfig+0x27c>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe f9b4 	bl	80018bc <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe f9b0 	bl	80018bc <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e173      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x234>
 8003576:	e01b      	b.n	80035b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_OscConfig+0x27c>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe f99d 	bl	80018bc <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	e00e      	b.n	80035a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003586:	f7fe f999 	bl	80018bc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d907      	bls.n	80035a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e15c      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
 8003598:	40023800 	.word	0x40023800
 800359c:	42470000 	.word	0x42470000
 80035a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ea      	bne.n	8003586 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8097 	beq.w	80036ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c2:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a75      	ldr	r2, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fe f959 	bl	80018bc <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fe f955 	bl	80018bc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e118      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x31e>
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x358>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x340>
 800364a:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a60      	ldr	r2, [pc, #384]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0x358>
 8003664:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a59      	ldr	r2, [pc, #356]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f023 0304 	bic.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fe f91a 	bl	80018bc <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fe f916 	bl	80018bc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0d7      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCC_OscConfig+0x368>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe f904 	bl	80018bc <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe f900 	bl	80018bc <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0c1      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ee      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	4a3a      	ldr	r2, [pc, #232]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80ad 	beq.w	8003850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d060      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d145      	bne.n	8003796 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe f8d4 	bl	80018bc <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7fe f8d0 	bl	80018bc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e093      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	491b      	ldr	r1, [pc, #108]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe f8a5 	bl	80018bc <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe f8a1 	bl	80018bc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e064      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x452>
 8003794:	e05c      	b.n	8003850 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f88e 	bl	80018bc <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f88a 	bl	80018bc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04d      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x480>
 80037c2:	e045      	b.n	8003850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e040      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x538>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d030      	beq.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d129      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d122      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	4293      	cmp	r3, r2
 8003816:	d119      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d10f      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e03f      	b.n	80038f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fe44 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 ffcb 	bl	8004840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e021      	b.n	8003950 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003922:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fead 	bl	8001684 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	d17c      	bne.n	8003a72 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Transmit+0x2c>
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e075      	b.n	8003a74 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_UART_Transmit+0x3e>
 8003992:	2302      	movs	r3, #2
 8003994:	e06e      	b.n	8003a74 <HAL_UART_Transmit+0x11c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	; 0x21
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ac:	f7fd ff86 	bl	80018bc <HAL_GetTick>
 80039b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d108      	bne.n	80039da <HAL_UART_Transmit+0x82>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	e003      	b.n	80039e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039ea:	e02a      	b.n	8003a42 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fc54 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e036      	b.n	8003a74 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	3302      	adds	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e007      	b.n	8003a34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1cf      	bne.n	80039ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fc24 	bl	80042a4 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e006      	b.n	8003a74 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d152      	bne.n	8003b3c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e04b      	b.n	8003b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e044      	b.n	8003b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fc59 	bl	8004380 <UART_Start_Receive_DMA>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d12c      	bne.n	8003b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d125      	bne.n	8003b30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f043 0310 	orr.w	r3, r3, #16
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003b1c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b2e:	e002      	b.n	8003b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b3a:	e000      	b.n	8003b3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3730      	adds	r7, #48	; 0x30
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b0ba      	sub	sp, #232	; 0xe8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_UART_IRQHandler+0x66>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fd8f 	bl	80046ca <UART_Receive_IT>
      return;
 8003bac:	e256      	b.n	800405c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80de 	beq.w	8003d74 <HAL_UART_IRQHandler+0x22c>
 8003bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80d1 	beq.w	8003d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xae>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0xd2>
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_UART_IRQHandler+0xf6>
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_UART_IRQHandler+0x126>
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 81ed 	beq.w	8004052 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_UART_IRQHandler+0x14e>
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fd1a 	bl	80046ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x17a>
 8003cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04f      	beq.n	8003d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc22 	bl	800450c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d141      	bne.n	8003d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1d9      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d013      	beq.n	8003d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	; (8003f24 <HAL_UART_IRQHandler+0x3dc>)
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe f8e4 	bl	8001f04 <HAL_DMA_Abort_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e00e      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9a4 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e00a      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f9a0 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e006      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f99c 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d6e:	e170      	b.n	8004052 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	bf00      	nop
    return;
 8003d72:	e16e      	b.n	8004052 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 814a 	bne.w	8004012 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8143 	beq.w	8004012 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 813c 	beq.w	8004012 <HAL_UART_IRQHandler+0x4ca>
  {
	 __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	f040 80b4 	bne.w	8003f28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8140 	beq.w	8004056 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dde:	429a      	cmp	r2, r3
 8003de0:	f080 8139 	bcs.w	8004056 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	f000 8088 	beq.w	8003f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1d9      	bne.n	8003dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e1      	bne.n	8003e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3314      	adds	r3, #20
 8003e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e3      	bne.n	8003e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	f023 0310 	bic.w	r3, r3, #16
 8003ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003eec:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e3      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd ff8d 	bl	8001e24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd f8ca 	bl	80010b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f20:	e099      	b.n	8004056 <HAL_UART_IRQHandler+0x50e>
 8003f22:	bf00      	nop
 8003f24:	080045d3 	.word	0x080045d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808b 	beq.w	800405a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8086 	beq.w	800405a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f72:	647a      	str	r2, [r7, #68]	; 0x44
 8003f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e3      	bne.n	8003f4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	623b      	str	r3, [r7, #32]
   return(result);
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003faa:	633a      	str	r2, [r7, #48]	; 0x30
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e3      	bne.n	8003fcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd f852 	bl	80010b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004010:	e023      	b.n	800405a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_UART_IRQHandler+0x4ea>
 800401e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fae5 	bl	80045fa <UART_Transmit_IT>
    return;
 8004030:	e014      	b.n	800405c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <HAL_UART_IRQHandler+0x514>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb25 	bl	800469a <UART_EndTransmit_IT>
    return;
 8004050:	e004      	b.n	800405c <HAL_UART_IRQHandler+0x514>
    return;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_UART_IRQHandler+0x514>
      return;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_UART_IRQHandler+0x514>
      return;
 800405a:	bf00      	nop
  }
}
 800405c:	37e8      	adds	r7, #232	; 0xe8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop

08004064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b09c      	sub	sp, #112	; 0x70
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d172      	bne.n	80041b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	2200      	movs	r2, #0
 80040d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80040f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	667b      	str	r3, [r7, #100]	; 0x64
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800412a:	647a      	str	r2, [r7, #68]	; 0x44
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	623b      	str	r3, [r7, #32]
   return(result);
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800415e:	633a      	str	r2, [r7, #48]	; 0x30
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	2b01      	cmp	r3, #1
 8004180:	d119      	bne.n	80041b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60fb      	str	r3, [r7, #12]
   return(result);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0310 	bic.w	r3, r3, #16
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	617b      	str	r3, [r7, #20]
   return(result);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d106      	bne.n	80041cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c2:	4619      	mov	r1, r3
 80041c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041c6:	f7fc ff75 	bl	80010b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ca:	e002      	b.n	80041d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041ce:	f7ff ff53 	bl	8004078 <HAL_UART_RxCpltCallback>
}
 80041d2:	bf00      	nop
 80041d4:	3770      	adds	r7, #112	; 0x70
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d108      	bne.n	8004202 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4619      	mov	r1, r3
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7fc ff5a 	bl	80010b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004200:	e002      	b.n	8004208 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff ff42 	bl	800408c <HAL_UART_RxHalfCpltCallback>
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b21      	cmp	r3, #33	; 0x21
 8004242:	d108      	bne.n	8004256 <UART_DMAError+0x46>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004250:	68b8      	ldr	r0, [r7, #8]
 8004252:	f000 f933 	bl	80044bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b22      	cmp	r3, #34	; 0x22
 8004276:	d108      	bne.n	800428a <UART_DMAError+0x7a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2200      	movs	r2, #0
 8004282:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004284:	68b8      	ldr	r0, [r7, #8]
 8004286:	f000 f941 	bl	800450c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	f7ff ff02 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b090      	sub	sp, #64	; 0x40
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	e050      	b.n	8004358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d04c      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042c4:	f7fd fafa 	bl	80018bc <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d241      	bcs.n	8004358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042f4:	637a      	str	r2, [r7, #52]	; 0x34
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	613b      	str	r3, [r7, #16]
   return(result);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004328:	623a      	str	r2, [r7, #32]
 800432a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69f9      	ldr	r1, [r7, #28]
 800432e:	6a3a      	ldr	r2, [r7, #32]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	61bb      	str	r3, [r7, #24]
   return(result);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e00f      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d09f      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3740      	adds	r7, #64	; 0x40
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b098      	sub	sp, #96	; 0x60
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <UART_Start_Receive_DMA+0x130>)
 80043ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	4a3f      	ldr	r2, [pc, #252]	; (80044b4 <UART_Start_Receive_DMA+0x134>)
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <UART_Start_Receive_DMA+0x138>)
 80043be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	2200      	movs	r2, #0
 80043c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043c8:	f107 0308 	add.w	r3, r7, #8
 80043cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	f7fd fcc8 	bl	8001d74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d019      	beq.n	800443e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800441a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	65bb      	str	r3, [r7, #88]	; 0x58
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800442c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3314      	adds	r3, #20
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800445e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e5      	bne.n	800443e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004492:	627a      	str	r2, [r7, #36]	; 0x24
 8004494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6a39      	ldr	r1, [r7, #32]
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3760      	adds	r7, #96	; 0x60
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	080040b5 	.word	0x080040b5
 80044b4:	080041db 	.word	0x080041db
 80044b8:	08004211 	.word	0x08004211

080044bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	61ba      	str	r2, [r7, #24]
 80044e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6979      	ldr	r1, [r7, #20]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	613b      	str	r3, [r7, #16]
   return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004500:	bf00      	nop
 8004502:	3724      	adds	r7, #36	; 0x24
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b095      	sub	sp, #84	; 0x54
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004534:	643a      	str	r2, [r7, #64]	; 0x40
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800453a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	61fb      	str	r3, [r7, #28]
   return(result);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	2b01      	cmp	r3, #1
 8004582:	d119      	bne.n	80045b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60bb      	str	r3, [r7, #8]
   return(result);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0310 	bic.w	r3, r3, #16
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a4:	61ba      	str	r2, [r7, #24]
 80045a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	613b      	str	r3, [r7, #16]
   return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045c6:	bf00      	nop
 80045c8:	3754      	adds	r7, #84	; 0x54
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fd57 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b21      	cmp	r3, #33	; 0x21
 800460c:	d13e      	bne.n	800468c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	d114      	bne.n	8004642 <UART_Transmit_IT+0x48>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d110      	bne.n	8004642 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004634:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	621a      	str	r2, [r3, #32]
 8004640:	e008      	b.n	8004654 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6211      	str	r1, [r2, #32]
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29b      	uxth	r3, r3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4619      	mov	r1, r3
 8004662:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004676:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004686:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fcd2 	bl	8004064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b08c      	sub	sp, #48	; 0x30
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b22      	cmp	r3, #34	; 0x22
 80046dc:	f040 80ab 	bne.w	8004836 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d117      	bne.n	800471a <UART_Receive_IT+0x50>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d113      	bne.n	800471a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	b29a      	uxth	r2, r3
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
 8004718:	e026      	b.n	8004768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d007      	beq.n	800473e <UART_Receive_IT+0x74>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <UART_Receive_IT+0x82>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e008      	b.n	800475e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4619      	mov	r1, r3
 8004776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004778:	2b00      	cmp	r3, #0
 800477a:	d15a      	bne.n	8004832 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0220 	bic.w	r2, r2, #32
 800478a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d135      	bne.n	8004828 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	613b      	str	r3, [r7, #16]
   return(result);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f023 0310 	bic.w	r3, r3, #16
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e2:	623a      	str	r2, [r7, #32]
 80047e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b10      	cmp	r3, #16
 8004802:	d10a      	bne.n	800481a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fc fc47 	bl	80010b4 <HAL_UARTEx_RxEventCallback>
 8004826:	e002      	b.n	800482e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fc25 	bl	8004078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e002      	b.n	8004838 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3730      	adds	r7, #48	; 0x30
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b0c0      	sub	sp, #256	; 0x100
 8004846:	af00      	add	r7, sp, #0
 8004848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	ea40 0301 	orr.w	r3, r0, r1
 8004868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004898:	f021 010c 	bic.w	r1, r1, #12
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048a6:	430b      	orrs	r3, r1
 80048a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	6999      	ldr	r1, [r3, #24]
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	ea40 0301 	orr.w	r3, r0, r1
 80048c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <UART_SetConfig+0x2cc>)
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d005      	beq.n	80048e0 <UART_SetConfig+0xa0>
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <UART_SetConfig+0x2d0>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d104      	bne.n	80048ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e0:	f7fe f9e4 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80048e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048e8:	e003      	b.n	80048f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7fe f9cb 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80048ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fc:	f040 810c 	bne.w	8004b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004904:	2200      	movs	r2, #0
 8004906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800490a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800490e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	1891      	adds	r1, r2, r2
 8004918:	65b9      	str	r1, [r7, #88]	; 0x58
 800491a:	415b      	adcs	r3, r3
 800491c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800491e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004922:	4621      	mov	r1, r4
 8004924:	eb12 0801 	adds.w	r8, r2, r1
 8004928:	4629      	mov	r1, r5
 800492a:	eb43 0901 	adc.w	r9, r3, r1
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004942:	4690      	mov	r8, r2
 8004944:	4699      	mov	r9, r3
 8004946:	4623      	mov	r3, r4
 8004948:	eb18 0303 	adds.w	r3, r8, r3
 800494c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004950:	462b      	mov	r3, r5
 8004952:	eb49 0303 	adc.w	r3, r9, r3
 8004956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800496a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800496e:	460b      	mov	r3, r1
 8004970:	18db      	adds	r3, r3, r3
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
 8004974:	4613      	mov	r3, r2
 8004976:	eb42 0303 	adc.w	r3, r2, r3
 800497a:	657b      	str	r3, [r7, #84]	; 0x54
 800497c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004984:	f7fb fc3e 	bl	8000204 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <UART_SetConfig+0x2d4>)
 800498e:	fba3 2302 	umull	r2, r3, r3, r2
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	011c      	lsls	r4, r3, #4
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	1891      	adds	r1, r2, r2
 80049ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80049b0:	415b      	adcs	r3, r3
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b8:	4641      	mov	r1, r8
 80049ba:	eb12 0a01 	adds.w	sl, r2, r1
 80049be:	4649      	mov	r1, r9
 80049c0:	eb43 0b01 	adc.w	fp, r3, r1
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d8:	4692      	mov	sl, r2
 80049da:	469b      	mov	fp, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	eb1a 0303 	adds.w	r3, sl, r3
 80049e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049e6:	464b      	mov	r3, r9
 80049e8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a04:	460b      	mov	r3, r1
 8004a06:	18db      	adds	r3, r3, r3
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a1a:	f7fb fbf3 	bl	8000204 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004a26:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2264      	movs	r2, #100	; 0x64
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	1acb      	subs	r3, r1, r3
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a3a:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a48:	441c      	add	r4, r3
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a64:	415b      	adcs	r3, r3
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	1851      	adds	r1, r2, r1
 8004a70:	6339      	str	r1, [r7, #48]	; 0x30
 8004a72:	4649      	mov	r1, r9
 8004a74:	414b      	adcs	r3, r1
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a84:	4659      	mov	r1, fp
 8004a86:	00cb      	lsls	r3, r1, #3
 8004a88:	4651      	mov	r1, sl
 8004a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8e:	4651      	mov	r1, sl
 8004a90:	00ca      	lsls	r2, r1, #3
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	4642      	mov	r2, r8
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	18db      	adds	r3, r3, r3
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ad6:	f7fb fb95 	bl	8000204 <__aeabi_uldivmod>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	2164      	movs	r1, #100	; 0x64
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	3332      	adds	r3, #50	; 0x32
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f003 0207 	and.w	r2, r3, #7
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4422      	add	r2, r4
 8004b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b08:	e105      	b.n	8004d16 <UART_SetConfig+0x4d6>
 8004b0a:	bf00      	nop
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	6239      	str	r1, [r7, #32]
 8004b32:	415b      	adcs	r3, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb43 0501 	adc.w	r5, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	18e3      	adds	r3, r4, r3
 8004b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b60:	464b      	mov	r3, r9
 8004b62:	eb45 0303 	adc.w	r3, r5, r3
 8004b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b86:	4629      	mov	r1, r5
 8004b88:	008b      	lsls	r3, r1, #2
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b90:	4621      	mov	r1, r4
 8004b92:	008a      	lsls	r2, r1, #2
 8004b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b98:	f7fb fb34 	bl	8000204 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4b60      	ldr	r3, [pc, #384]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	011c      	lsls	r4, r3, #4
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	61b9      	str	r1, [r7, #24]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6139      	str	r1, [r7, #16]
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c24:	4649      	mov	r1, r9
 8004c26:	008b      	lsls	r3, r1, #2
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2e:	4641      	mov	r1, r8
 8004c30:	008a      	lsls	r2, r1, #2
 8004c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c36:	f7fb fae5 	bl	8000204 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a34      	ldr	r2, [pc, #208]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5e:	441c      	add	r4, r3
 8004c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c64:	2200      	movs	r2, #0
 8004c66:	673b      	str	r3, [r7, #112]	; 0x70
 8004c68:	677a      	str	r2, [r7, #116]	; 0x74
 8004c6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	415b      	adcs	r3, r3
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1851      	adds	r1, r2, r1
 8004c82:	6039      	str	r1, [r7, #0]
 8004c84:	4649      	mov	r1, r9
 8004c86:	414b      	adcs	r3, r1
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c96:	4659      	mov	r1, fp
 8004c98:	00cb      	lsls	r3, r1, #3
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	00ca      	lsls	r2, r1, #3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4642      	mov	r2, r8
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc4:	667a      	str	r2, [r7, #100]	; 0x64
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cdc:	4641      	mov	r1, r8
 8004cde:	008a      	lsls	r2, r1, #2
 8004ce0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ce4:	f7fb fa8e 	bl	8000204 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004cee:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	2164      	movs	r1, #100	; 0x64
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	3332      	adds	r3, #50	; 0x32
 8004d00:	4a08      	ldr	r2, [pc, #32]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4422      	add	r2, r4
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	bf00      	nop
 8004d18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d22:	bf00      	nop
 8004d24:	51eb851f 	.word	0x51eb851f

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4d0d      	ldr	r5, [pc, #52]	; (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	; (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1b64      	subs	r4, r4, r5
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2600      	movs	r6, #0
 8004d34:	42a6      	cmp	r6, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4d0b      	ldr	r5, [pc, #44]	; (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	; (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f000 f882 	bl	8004e44 <_init>
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2600      	movs	r6, #0
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d50:	4798      	blx	r3
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5a:	4798      	blx	r3
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08004e94 	.word	0x08004e94
 8004d64:	08004e94 	.word	0x08004e94
 8004d68:	08004e94 	.word	0x08004e94
 8004d6c:	08004e98 	.word	0x08004e98

08004d70 <free>:
 8004d70:	4b02      	ldr	r3, [pc, #8]	; (8004d7c <free+0xc>)
 8004d72:	4601      	mov	r1, r0
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f000 b80b 	b.w	8004d90 <_free_r>
 8004d7a:	bf00      	nop
 8004d7c:	20000040 	.word	0x20000040

08004d80 <memset>:
 8004d80:	4402      	add	r2, r0
 8004d82:	4603      	mov	r3, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <_free_r>:
 8004d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d92:	2900      	cmp	r1, #0
 8004d94:	d044      	beq.n	8004e20 <_free_r+0x90>
 8004d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9a:	9001      	str	r0, [sp, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004da2:	bfb8      	it	lt
 8004da4:	18e4      	addlt	r4, r4, r3
 8004da6:	f000 f83f 	bl	8004e28 <__malloc_lock>
 8004daa:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <_free_r+0x94>)
 8004dac:	9801      	ldr	r0, [sp, #4]
 8004dae:	6813      	ldr	r3, [r2, #0]
 8004db0:	b933      	cbnz	r3, 8004dc0 <_free_r+0x30>
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	6014      	str	r4, [r2, #0]
 8004db6:	b003      	add	sp, #12
 8004db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dbc:	f000 b83a 	b.w	8004e34 <__malloc_unlock>
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d908      	bls.n	8004dd6 <_free_r+0x46>
 8004dc4:	6825      	ldr	r5, [r4, #0]
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	bf01      	itttt	eq
 8004dcc:	6819      	ldreq	r1, [r3, #0]
 8004dce:	685b      	ldreq	r3, [r3, #4]
 8004dd0:	1949      	addeq	r1, r1, r5
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	e7ed      	b.n	8004db2 <_free_r+0x22>
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b10b      	cbz	r3, 8004de0 <_free_r+0x50>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d9fa      	bls.n	8004dd6 <_free_r+0x46>
 8004de0:	6811      	ldr	r1, [r2, #0]
 8004de2:	1855      	adds	r5, r2, r1
 8004de4:	42a5      	cmp	r5, r4
 8004de6:	d10b      	bne.n	8004e00 <_free_r+0x70>
 8004de8:	6824      	ldr	r4, [r4, #0]
 8004dea:	4421      	add	r1, r4
 8004dec:	1854      	adds	r4, r2, r1
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	d1e0      	bne.n	8004db6 <_free_r+0x26>
 8004df4:	681c      	ldr	r4, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	6053      	str	r3, [r2, #4]
 8004dfa:	4421      	add	r1, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	e7da      	b.n	8004db6 <_free_r+0x26>
 8004e00:	d902      	bls.n	8004e08 <_free_r+0x78>
 8004e02:	230c      	movs	r3, #12
 8004e04:	6003      	str	r3, [r0, #0]
 8004e06:	e7d6      	b.n	8004db6 <_free_r+0x26>
 8004e08:	6825      	ldr	r5, [r4, #0]
 8004e0a:	1961      	adds	r1, r4, r5
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	bf04      	itt	eq
 8004e10:	6819      	ldreq	r1, [r3, #0]
 8004e12:	685b      	ldreq	r3, [r3, #4]
 8004e14:	6063      	str	r3, [r4, #4]
 8004e16:	bf04      	itt	eq
 8004e18:	1949      	addeq	r1, r1, r5
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	6054      	str	r4, [r2, #4]
 8004e1e:	e7ca      	b.n	8004db6 <_free_r+0x26>
 8004e20:	b003      	add	sp, #12
 8004e22:	bd30      	pop	{r4, r5, pc}
 8004e24:	20000340 	.word	0x20000340

08004e28 <__malloc_lock>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__malloc_lock+0x8>)
 8004e2a:	f000 b809 	b.w	8004e40 <__retarget_lock_acquire_recursive>
 8004e2e:	bf00      	nop
 8004e30:	20000344 	.word	0x20000344

08004e34 <__malloc_unlock>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__malloc_unlock+0x8>)
 8004e36:	f000 b804 	b.w	8004e42 <__retarget_lock_release_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	20000344 	.word	0x20000344

08004e40 <__retarget_lock_acquire_recursive>:
 8004e40:	4770      	bx	lr

08004e42 <__retarget_lock_release_recursive>:
 8004e42:	4770      	bx	lr

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
