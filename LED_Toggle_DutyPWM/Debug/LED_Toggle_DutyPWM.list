
LED_Toggle_DutyPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae4  080081d0  080081d0  000081d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08011cb8  08011cb8  00011cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012114  08012114  00033a64  2**0
                  CONTENTS
  4 .ARM          00000008  08012114  08012114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801211c  0801211c  00033a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801211c  0801211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012120  08012120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00013a64  20000000  08012124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20013a64  08025b88  00033a64  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014040  08025b88  00034040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00033a64  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a2b  00000000  00000000  00033a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7d  00000000  00000000  000464bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00048f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ed6  00000000  00000000  0004ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f1d  00000000  00000000  0006fd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e013a  00000000  00000000  00085c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  00165de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	; (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	; (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20013a64 	.word	0x20013a64
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08011c9c 	.word	0x08011c9c

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	; (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	; (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20013a68 	.word	0x20013a68
 800820c:	08011c9c 	.word	0x08011c9c

08008210 <strlen>:
 8008210:	4603      	mov	r3, r0
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	2a00      	cmp	r2, #0
 8008218:	d1fb      	bne.n	8008212 <strlen+0x2>
 800821a:	1a18      	subs	r0, r3, r0
 800821c:	3801      	subs	r0, #1
 800821e:	4770      	bx	lr

08008220 <memchr>:
 8008220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008224:	2a10      	cmp	r2, #16
 8008226:	db2b      	blt.n	8008280 <memchr+0x60>
 8008228:	f010 0f07 	tst.w	r0, #7
 800822c:	d008      	beq.n	8008240 <memchr+0x20>
 800822e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008232:	3a01      	subs	r2, #1
 8008234:	428b      	cmp	r3, r1
 8008236:	d02d      	beq.n	8008294 <memchr+0x74>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	b342      	cbz	r2, 8008290 <memchr+0x70>
 800823e:	d1f6      	bne.n	800822e <memchr+0xe>
 8008240:	b4f0      	push	{r4, r5, r6, r7}
 8008242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800824a:	f022 0407 	bic.w	r4, r2, #7
 800824e:	f07f 0700 	mvns.w	r7, #0
 8008252:	2300      	movs	r3, #0
 8008254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008258:	3c08      	subs	r4, #8
 800825a:	ea85 0501 	eor.w	r5, r5, r1
 800825e:	ea86 0601 	eor.w	r6, r6, r1
 8008262:	fa85 f547 	uadd8	r5, r5, r7
 8008266:	faa3 f587 	sel	r5, r3, r7
 800826a:	fa86 f647 	uadd8	r6, r6, r7
 800826e:	faa5 f687 	sel	r6, r5, r7
 8008272:	b98e      	cbnz	r6, 8008298 <memchr+0x78>
 8008274:	d1ee      	bne.n	8008254 <memchr+0x34>
 8008276:	bcf0      	pop	{r4, r5, r6, r7}
 8008278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800827c:	f002 0207 	and.w	r2, r2, #7
 8008280:	b132      	cbz	r2, 8008290 <memchr+0x70>
 8008282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008286:	3a01      	subs	r2, #1
 8008288:	ea83 0301 	eor.w	r3, r3, r1
 800828c:	b113      	cbz	r3, 8008294 <memchr+0x74>
 800828e:	d1f8      	bne.n	8008282 <memchr+0x62>
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr
 8008294:	3801      	subs	r0, #1
 8008296:	4770      	bx	lr
 8008298:	2d00      	cmp	r5, #0
 800829a:	bf06      	itte	eq
 800829c:	4635      	moveq	r5, r6
 800829e:	3803      	subeq	r0, #3
 80082a0:	3807      	subne	r0, #7
 80082a2:	f015 0f01 	tst.w	r5, #1
 80082a6:	d107      	bne.n	80082b8 <memchr+0x98>
 80082a8:	3001      	adds	r0, #1
 80082aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082ae:	bf02      	ittt	eq
 80082b0:	3001      	addeq	r0, #1
 80082b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80082b6:	3001      	addeq	r0, #1
 80082b8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ba:	3801      	subs	r0, #1
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <__aeabi_drsub>:
 80082c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80082c4:	e002      	b.n	80082cc <__adddf3>
 80082c6:	bf00      	nop

080082c8 <__aeabi_dsub>:
 80082c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080082cc <__adddf3>:
 80082cc:	b530      	push	{r4, r5, lr}
 80082ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082d6:	ea94 0f05 	teq	r4, r5
 80082da:	bf08      	it	eq
 80082dc:	ea90 0f02 	teqeq	r0, r2
 80082e0:	bf1f      	itttt	ne
 80082e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80082e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80082ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80082ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f2:	f000 80e2 	beq.w	80084ba <__adddf3+0x1ee>
 80082f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80082fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80082fe:	bfb8      	it	lt
 8008300:	426d      	neglt	r5, r5
 8008302:	dd0c      	ble.n	800831e <__adddf3+0x52>
 8008304:	442c      	add	r4, r5
 8008306:	ea80 0202 	eor.w	r2, r0, r2
 800830a:	ea81 0303 	eor.w	r3, r1, r3
 800830e:	ea82 0000 	eor.w	r0, r2, r0
 8008312:	ea83 0101 	eor.w	r1, r3, r1
 8008316:	ea80 0202 	eor.w	r2, r0, r2
 800831a:	ea81 0303 	eor.w	r3, r1, r3
 800831e:	2d36      	cmp	r5, #54	; 0x36
 8008320:	bf88      	it	hi
 8008322:	bd30      	pophi	{r4, r5, pc}
 8008324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800832c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008334:	d002      	beq.n	800833c <__adddf3+0x70>
 8008336:	4240      	negs	r0, r0
 8008338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800833c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008348:	d002      	beq.n	8008350 <__adddf3+0x84>
 800834a:	4252      	negs	r2, r2
 800834c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008350:	ea94 0f05 	teq	r4, r5
 8008354:	f000 80a7 	beq.w	80084a6 <__adddf3+0x1da>
 8008358:	f1a4 0401 	sub.w	r4, r4, #1
 800835c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008360:	db0d      	blt.n	800837e <__adddf3+0xb2>
 8008362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008366:	fa22 f205 	lsr.w	r2, r2, r5
 800836a:	1880      	adds	r0, r0, r2
 800836c:	f141 0100 	adc.w	r1, r1, #0
 8008370:	fa03 f20e 	lsl.w	r2, r3, lr
 8008374:	1880      	adds	r0, r0, r2
 8008376:	fa43 f305 	asr.w	r3, r3, r5
 800837a:	4159      	adcs	r1, r3
 800837c:	e00e      	b.n	800839c <__adddf3+0xd0>
 800837e:	f1a5 0520 	sub.w	r5, r5, #32
 8008382:	f10e 0e20 	add.w	lr, lr, #32
 8008386:	2a01      	cmp	r2, #1
 8008388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800838c:	bf28      	it	cs
 800838e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008392:	fa43 f305 	asr.w	r3, r3, r5
 8008396:	18c0      	adds	r0, r0, r3
 8008398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800839c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083a0:	d507      	bpl.n	80083b2 <__adddf3+0xe6>
 80083a2:	f04f 0e00 	mov.w	lr, #0
 80083a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80083b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80083b6:	d31b      	bcc.n	80083f0 <__adddf3+0x124>
 80083b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80083bc:	d30c      	bcc.n	80083d8 <__adddf3+0x10c>
 80083be:	0849      	lsrs	r1, r1, #1
 80083c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083c8:	f104 0401 	add.w	r4, r4, #1
 80083cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80083d4:	f080 809a 	bcs.w	800850c <__adddf3+0x240>
 80083d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80083dc:	bf08      	it	eq
 80083de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083e2:	f150 0000 	adcs.w	r0, r0, #0
 80083e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083ea:	ea41 0105 	orr.w	r1, r1, r5
 80083ee:	bd30      	pop	{r4, r5, pc}
 80083f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80083f4:	4140      	adcs	r0, r0
 80083f6:	eb41 0101 	adc.w	r1, r1, r1
 80083fa:	3c01      	subs	r4, #1
 80083fc:	bf28      	it	cs
 80083fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008402:	d2e9      	bcs.n	80083d8 <__adddf3+0x10c>
 8008404:	f091 0f00 	teq	r1, #0
 8008408:	bf04      	itt	eq
 800840a:	4601      	moveq	r1, r0
 800840c:	2000      	moveq	r0, #0
 800840e:	fab1 f381 	clz	r3, r1
 8008412:	bf08      	it	eq
 8008414:	3320      	addeq	r3, #32
 8008416:	f1a3 030b 	sub.w	r3, r3, #11
 800841a:	f1b3 0220 	subs.w	r2, r3, #32
 800841e:	da0c      	bge.n	800843a <__adddf3+0x16e>
 8008420:	320c      	adds	r2, #12
 8008422:	dd08      	ble.n	8008436 <__adddf3+0x16a>
 8008424:	f102 0c14 	add.w	ip, r2, #20
 8008428:	f1c2 020c 	rsb	r2, r2, #12
 800842c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008430:	fa21 f102 	lsr.w	r1, r1, r2
 8008434:	e00c      	b.n	8008450 <__adddf3+0x184>
 8008436:	f102 0214 	add.w	r2, r2, #20
 800843a:	bfd8      	it	le
 800843c:	f1c2 0c20 	rsble	ip, r2, #32
 8008440:	fa01 f102 	lsl.w	r1, r1, r2
 8008444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008448:	bfdc      	itt	le
 800844a:	ea41 010c 	orrle.w	r1, r1, ip
 800844e:	4090      	lslle	r0, r2
 8008450:	1ae4      	subs	r4, r4, r3
 8008452:	bfa2      	ittt	ge
 8008454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008458:	4329      	orrge	r1, r5
 800845a:	bd30      	popge	{r4, r5, pc}
 800845c:	ea6f 0404 	mvn.w	r4, r4
 8008460:	3c1f      	subs	r4, #31
 8008462:	da1c      	bge.n	800849e <__adddf3+0x1d2>
 8008464:	340c      	adds	r4, #12
 8008466:	dc0e      	bgt.n	8008486 <__adddf3+0x1ba>
 8008468:	f104 0414 	add.w	r4, r4, #20
 800846c:	f1c4 0220 	rsb	r2, r4, #32
 8008470:	fa20 f004 	lsr.w	r0, r0, r4
 8008474:	fa01 f302 	lsl.w	r3, r1, r2
 8008478:	ea40 0003 	orr.w	r0, r0, r3
 800847c:	fa21 f304 	lsr.w	r3, r1, r4
 8008480:	ea45 0103 	orr.w	r1, r5, r3
 8008484:	bd30      	pop	{r4, r5, pc}
 8008486:	f1c4 040c 	rsb	r4, r4, #12
 800848a:	f1c4 0220 	rsb	r2, r4, #32
 800848e:	fa20 f002 	lsr.w	r0, r0, r2
 8008492:	fa01 f304 	lsl.w	r3, r1, r4
 8008496:	ea40 0003 	orr.w	r0, r0, r3
 800849a:	4629      	mov	r1, r5
 800849c:	bd30      	pop	{r4, r5, pc}
 800849e:	fa21 f004 	lsr.w	r0, r1, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f094 0f00 	teq	r4, #0
 80084aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80084ae:	bf06      	itte	eq
 80084b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80084b4:	3401      	addeq	r4, #1
 80084b6:	3d01      	subne	r5, #1
 80084b8:	e74e      	b.n	8008358 <__adddf3+0x8c>
 80084ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084be:	bf18      	it	ne
 80084c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084c4:	d029      	beq.n	800851a <__adddf3+0x24e>
 80084c6:	ea94 0f05 	teq	r4, r5
 80084ca:	bf08      	it	eq
 80084cc:	ea90 0f02 	teqeq	r0, r2
 80084d0:	d005      	beq.n	80084de <__adddf3+0x212>
 80084d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084d6:	bf04      	itt	eq
 80084d8:	4619      	moveq	r1, r3
 80084da:	4610      	moveq	r0, r2
 80084dc:	bd30      	pop	{r4, r5, pc}
 80084de:	ea91 0f03 	teq	r1, r3
 80084e2:	bf1e      	ittt	ne
 80084e4:	2100      	movne	r1, #0
 80084e6:	2000      	movne	r0, #0
 80084e8:	bd30      	popne	{r4, r5, pc}
 80084ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80084ee:	d105      	bne.n	80084fc <__adddf3+0x230>
 80084f0:	0040      	lsls	r0, r0, #1
 80084f2:	4149      	adcs	r1, r1
 80084f4:	bf28      	it	cs
 80084f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80084fa:	bd30      	pop	{r4, r5, pc}
 80084fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008500:	bf3c      	itt	cc
 8008502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008506:	bd30      	popcc	{r4, r5, pc}
 8008508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800850c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008514:	f04f 0000 	mov.w	r0, #0
 8008518:	bd30      	pop	{r4, r5, pc}
 800851a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800851e:	bf1a      	itte	ne
 8008520:	4619      	movne	r1, r3
 8008522:	4610      	movne	r0, r2
 8008524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008528:	bf1c      	itt	ne
 800852a:	460b      	movne	r3, r1
 800852c:	4602      	movne	r2, r0
 800852e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008532:	bf06      	itte	eq
 8008534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008538:	ea91 0f03 	teqeq	r1, r3
 800853c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008540:	bd30      	pop	{r4, r5, pc}
 8008542:	bf00      	nop

08008544 <__aeabi_ui2d>:
 8008544:	f090 0f00 	teq	r0, #0
 8008548:	bf04      	itt	eq
 800854a:	2100      	moveq	r1, #0
 800854c:	4770      	bxeq	lr
 800854e:	b530      	push	{r4, r5, lr}
 8008550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008558:	f04f 0500 	mov.w	r5, #0
 800855c:	f04f 0100 	mov.w	r1, #0
 8008560:	e750      	b.n	8008404 <__adddf3+0x138>
 8008562:	bf00      	nop

08008564 <__aeabi_i2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800857c:	bf48      	it	mi
 800857e:	4240      	negmi	r0, r0
 8008580:	f04f 0100 	mov.w	r1, #0
 8008584:	e73e      	b.n	8008404 <__adddf3+0x138>
 8008586:	bf00      	nop

08008588 <__aeabi_f2d>:
 8008588:	0042      	lsls	r2, r0, #1
 800858a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800858e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008596:	bf1f      	itttt	ne
 8008598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800859c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80085a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80085a4:	4770      	bxne	lr
 80085a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80085aa:	bf08      	it	eq
 80085ac:	4770      	bxeq	lr
 80085ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80085b2:	bf04      	itt	eq
 80085b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80085b8:	4770      	bxeq	lr
 80085ba:	b530      	push	{r4, r5, lr}
 80085bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80085c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085c8:	e71c      	b.n	8008404 <__adddf3+0x138>
 80085ca:	bf00      	nop

080085cc <__aeabi_ul2d>:
 80085cc:	ea50 0201 	orrs.w	r2, r0, r1
 80085d0:	bf08      	it	eq
 80085d2:	4770      	bxeq	lr
 80085d4:	b530      	push	{r4, r5, lr}
 80085d6:	f04f 0500 	mov.w	r5, #0
 80085da:	e00a      	b.n	80085f2 <__aeabi_l2d+0x16>

080085dc <__aeabi_l2d>:
 80085dc:	ea50 0201 	orrs.w	r2, r0, r1
 80085e0:	bf08      	it	eq
 80085e2:	4770      	bxeq	lr
 80085e4:	b530      	push	{r4, r5, lr}
 80085e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80085ea:	d502      	bpl.n	80085f2 <__aeabi_l2d+0x16>
 80085ec:	4240      	negs	r0, r0
 80085ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80085f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80085fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80085fe:	f43f aed8 	beq.w	80083b2 <__adddf3+0xe6>
 8008602:	f04f 0203 	mov.w	r2, #3
 8008606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800860a:	bf18      	it	ne
 800860c:	3203      	addne	r2, #3
 800860e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008612:	bf18      	it	ne
 8008614:	3203      	addne	r2, #3
 8008616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800861a:	f1c2 0320 	rsb	r3, r2, #32
 800861e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008622:	fa20 f002 	lsr.w	r0, r0, r2
 8008626:	fa01 fe03 	lsl.w	lr, r1, r3
 800862a:	ea40 000e 	orr.w	r0, r0, lr
 800862e:	fa21 f102 	lsr.w	r1, r1, r2
 8008632:	4414      	add	r4, r2
 8008634:	e6bd      	b.n	80083b2 <__adddf3+0xe6>
 8008636:	bf00      	nop

08008638 <__aeabi_dmul>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800863e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008646:	bf1d      	ittte	ne
 8008648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800864c:	ea94 0f0c 	teqne	r4, ip
 8008650:	ea95 0f0c 	teqne	r5, ip
 8008654:	f000 f8de 	bleq	8008814 <__aeabi_dmul+0x1dc>
 8008658:	442c      	add	r4, r5
 800865a:	ea81 0603 	eor.w	r6, r1, r3
 800865e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800866a:	bf18      	it	ne
 800866c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008678:	d038      	beq.n	80086ec <__aeabi_dmul+0xb4>
 800867a:	fba0 ce02 	umull	ip, lr, r0, r2
 800867e:	f04f 0500 	mov.w	r5, #0
 8008682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800868a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800868e:	f04f 0600 	mov.w	r6, #0
 8008692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008696:	f09c 0f00 	teq	ip, #0
 800869a:	bf18      	it	ne
 800869c:	f04e 0e01 	orrne.w	lr, lr, #1
 80086a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80086a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80086a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80086ac:	d204      	bcs.n	80086b8 <__aeabi_dmul+0x80>
 80086ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086b2:	416d      	adcs	r5, r5
 80086b4:	eb46 0606 	adc.w	r6, r6, r6
 80086b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80086d0:	bf88      	it	hi
 80086d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80086d6:	d81e      	bhi.n	8008716 <__aeabi_dmul+0xde>
 80086d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80086dc:	bf08      	it	eq
 80086de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80086e2:	f150 0000 	adcs.w	r0, r0, #0
 80086e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80086f0:	ea46 0101 	orr.w	r1, r6, r1
 80086f4:	ea40 0002 	orr.w	r0, r0, r2
 80086f8:	ea81 0103 	eor.w	r1, r1, r3
 80086fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008700:	bfc2      	ittt	gt
 8008702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800870a:	bd70      	popgt	{r4, r5, r6, pc}
 800870c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008710:	f04f 0e00 	mov.w	lr, #0
 8008714:	3c01      	subs	r4, #1
 8008716:	f300 80ab 	bgt.w	8008870 <__aeabi_dmul+0x238>
 800871a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800871e:	bfde      	ittt	le
 8008720:	2000      	movle	r0, #0
 8008722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008726:	bd70      	pople	{r4, r5, r6, pc}
 8008728:	f1c4 0400 	rsb	r4, r4, #0
 800872c:	3c20      	subs	r4, #32
 800872e:	da35      	bge.n	800879c <__aeabi_dmul+0x164>
 8008730:	340c      	adds	r4, #12
 8008732:	dc1b      	bgt.n	800876c <__aeabi_dmul+0x134>
 8008734:	f104 0414 	add.w	r4, r4, #20
 8008738:	f1c4 0520 	rsb	r5, r4, #32
 800873c:	fa00 f305 	lsl.w	r3, r0, r5
 8008740:	fa20 f004 	lsr.w	r0, r0, r4
 8008744:	fa01 f205 	lsl.w	r2, r1, r5
 8008748:	ea40 0002 	orr.w	r0, r0, r2
 800874c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008758:	fa21 f604 	lsr.w	r6, r1, r4
 800875c:	eb42 0106 	adc.w	r1, r2, r6
 8008760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008764:	bf08      	it	eq
 8008766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f1c4 040c 	rsb	r4, r4, #12
 8008770:	f1c4 0520 	rsb	r5, r4, #32
 8008774:	fa00 f304 	lsl.w	r3, r0, r4
 8008778:	fa20 f005 	lsr.w	r0, r0, r5
 800877c:	fa01 f204 	lsl.w	r2, r1, r4
 8008780:	ea40 0002 	orr.w	r0, r0, r2
 8008784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800878c:	f141 0100 	adc.w	r1, r1, #0
 8008790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008794:	bf08      	it	eq
 8008796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	f1c4 0520 	rsb	r5, r4, #32
 80087a0:	fa00 f205 	lsl.w	r2, r0, r5
 80087a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087a8:	fa20 f304 	lsr.w	r3, r0, r4
 80087ac:	fa01 f205 	lsl.w	r2, r1, r5
 80087b0:	ea43 0302 	orr.w	r3, r3, r2
 80087b4:	fa21 f004 	lsr.w	r0, r1, r4
 80087b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087bc:	fa21 f204 	lsr.w	r2, r1, r4
 80087c0:	ea20 0002 	bic.w	r0, r0, r2
 80087c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087cc:	bf08      	it	eq
 80087ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	f094 0f00 	teq	r4, #0
 80087d8:	d10f      	bne.n	80087fa <__aeabi_dmul+0x1c2>
 80087da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80087de:	0040      	lsls	r0, r0, #1
 80087e0:	eb41 0101 	adc.w	r1, r1, r1
 80087e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087e8:	bf08      	it	eq
 80087ea:	3c01      	subeq	r4, #1
 80087ec:	d0f7      	beq.n	80087de <__aeabi_dmul+0x1a6>
 80087ee:	ea41 0106 	orr.w	r1, r1, r6
 80087f2:	f095 0f00 	teq	r5, #0
 80087f6:	bf18      	it	ne
 80087f8:	4770      	bxne	lr
 80087fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80087fe:	0052      	lsls	r2, r2, #1
 8008800:	eb43 0303 	adc.w	r3, r3, r3
 8008804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008808:	bf08      	it	eq
 800880a:	3d01      	subeq	r5, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1c6>
 800880e:	ea43 0306 	orr.w	r3, r3, r6
 8008812:	4770      	bx	lr
 8008814:	ea94 0f0c 	teq	r4, ip
 8008818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881c:	bf18      	it	ne
 800881e:	ea95 0f0c 	teqne	r5, ip
 8008822:	d00c      	beq.n	800883e <__aeabi_dmul+0x206>
 8008824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008828:	bf18      	it	ne
 800882a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800882e:	d1d1      	bne.n	80087d4 <__aeabi_dmul+0x19c>
 8008830:	ea81 0103 	eor.w	r1, r1, r3
 8008834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008838:	f04f 0000 	mov.w	r0, #0
 800883c:	bd70      	pop	{r4, r5, r6, pc}
 800883e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008842:	bf06      	itte	eq
 8008844:	4610      	moveq	r0, r2
 8008846:	4619      	moveq	r1, r3
 8008848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884c:	d019      	beq.n	8008882 <__aeabi_dmul+0x24a>
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	d102      	bne.n	800885a <__aeabi_dmul+0x222>
 8008854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008858:	d113      	bne.n	8008882 <__aeabi_dmul+0x24a>
 800885a:	ea95 0f0c 	teq	r5, ip
 800885e:	d105      	bne.n	800886c <__aeabi_dmul+0x234>
 8008860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008864:	bf1c      	itt	ne
 8008866:	4610      	movne	r0, r2
 8008868:	4619      	movne	r1, r3
 800886a:	d10a      	bne.n	8008882 <__aeabi_dmul+0x24a>
 800886c:	ea81 0103 	eor.w	r1, r1, r3
 8008870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800888a:	bd70      	pop	{r4, r5, r6, pc}

0800888c <__aeabi_ddiv>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800889a:	bf1d      	ittte	ne
 800889c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088a0:	ea94 0f0c 	teqne	r4, ip
 80088a4:	ea95 0f0c 	teqne	r5, ip
 80088a8:	f000 f8a7 	bleq	80089fa <__aeabi_ddiv+0x16e>
 80088ac:	eba4 0405 	sub.w	r4, r4, r5
 80088b0:	ea81 0e03 	eor.w	lr, r1, r3
 80088b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088bc:	f000 8088 	beq.w	80089d0 <__aeabi_ddiv+0x144>
 80088c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80088c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80088e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80088e4:	429d      	cmp	r5, r3
 80088e6:	bf08      	it	eq
 80088e8:	4296      	cmpeq	r6, r2
 80088ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80088ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80088f2:	d202      	bcs.n	80088fa <__aeabi_ddiv+0x6e>
 80088f4:	085b      	lsrs	r3, r3, #1
 80088f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80088fa:	1ab6      	subs	r6, r6, r2
 80088fc:	eb65 0503 	sbc.w	r5, r5, r3
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	ea4f 0232 	mov.w	r2, r2, rrx
 8008906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800890a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800890e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008916:	bf22      	ittt	cs
 8008918:	1ab6      	subcs	r6, r6, r2
 800891a:	4675      	movcs	r5, lr
 800891c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	ebb6 0e02 	subs.w	lr, r6, r2
 800892a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800892e:	bf22      	ittt	cs
 8008930:	1ab6      	subcs	r6, r6, r2
 8008932:	4675      	movcs	r5, lr
 8008934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	ea4f 0232 	mov.w	r2, r2, rrx
 800893e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008946:	bf22      	ittt	cs
 8008948:	1ab6      	subcs	r6, r6, r2
 800894a:	4675      	movcs	r5, lr
 800894c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	ea4f 0232 	mov.w	r2, r2, rrx
 8008956:	ebb6 0e02 	subs.w	lr, r6, r2
 800895a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800895e:	bf22      	ittt	cs
 8008960:	1ab6      	subcs	r6, r6, r2
 8008962:	4675      	movcs	r5, lr
 8008964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008968:	ea55 0e06 	orrs.w	lr, r5, r6
 800896c:	d018      	beq.n	80089a0 <__aeabi_ddiv+0x114>
 800896e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800897a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800897e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800898a:	d1c0      	bne.n	800890e <__aeabi_ddiv+0x82>
 800898c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008990:	d10b      	bne.n	80089aa <__aeabi_ddiv+0x11e>
 8008992:	ea41 0100 	orr.w	r1, r1, r0
 8008996:	f04f 0000 	mov.w	r0, #0
 800899a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800899e:	e7b6      	b.n	800890e <__aeabi_ddiv+0x82>
 80089a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80089a4:	bf04      	itt	eq
 80089a6:	4301      	orreq	r1, r0
 80089a8:	2000      	moveq	r0, #0
 80089aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80089ae:	bf88      	it	hi
 80089b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80089b4:	f63f aeaf 	bhi.w	8008716 <__aeabi_dmul+0xde>
 80089b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089bc:	bf04      	itt	eq
 80089be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089c6:	f150 0000 	adcs.w	r0, r0, #0
 80089ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80089d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089dc:	bfc2      	ittt	gt
 80089de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80089e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80089e6:	bd70      	popgt	{r4, r5, r6, pc}
 80089e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089ec:	f04f 0e00 	mov.w	lr, #0
 80089f0:	3c01      	subs	r4, #1
 80089f2:	e690      	b.n	8008716 <__aeabi_dmul+0xde>
 80089f4:	ea45 0e06 	orr.w	lr, r5, r6
 80089f8:	e68d      	b.n	8008716 <__aeabi_dmul+0xde>
 80089fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80089fe:	ea94 0f0c 	teq	r4, ip
 8008a02:	bf08      	it	eq
 8008a04:	ea95 0f0c 	teqeq	r5, ip
 8008a08:	f43f af3b 	beq.w	8008882 <__aeabi_dmul+0x24a>
 8008a0c:	ea94 0f0c 	teq	r4, ip
 8008a10:	d10a      	bne.n	8008a28 <__aeabi_ddiv+0x19c>
 8008a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a16:	f47f af34 	bne.w	8008882 <__aeabi_dmul+0x24a>
 8008a1a:	ea95 0f0c 	teq	r5, ip
 8008a1e:	f47f af25 	bne.w	800886c <__aeabi_dmul+0x234>
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	e72c      	b.n	8008882 <__aeabi_dmul+0x24a>
 8008a28:	ea95 0f0c 	teq	r5, ip
 8008a2c:	d106      	bne.n	8008a3c <__aeabi_ddiv+0x1b0>
 8008a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a32:	f43f aefd 	beq.w	8008830 <__aeabi_dmul+0x1f8>
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	e722      	b.n	8008882 <__aeabi_dmul+0x24a>
 8008a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a40:	bf18      	it	ne
 8008a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a46:	f47f aec5 	bne.w	80087d4 <__aeabi_dmul+0x19c>
 8008a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a4e:	f47f af0d 	bne.w	800886c <__aeabi_dmul+0x234>
 8008a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a56:	f47f aeeb 	bne.w	8008830 <__aeabi_dmul+0x1f8>
 8008a5a:	e712      	b.n	8008882 <__aeabi_dmul+0x24a>

08008a5c <__gedf2>:
 8008a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a60:	e006      	b.n	8008a70 <__cmpdf2+0x4>
 8008a62:	bf00      	nop

08008a64 <__ledf2>:
 8008a64:	f04f 0c01 	mov.w	ip, #1
 8008a68:	e002      	b.n	8008a70 <__cmpdf2+0x4>
 8008a6a:	bf00      	nop

08008a6c <__cmpdf2>:
 8008a6c:	f04f 0c01 	mov.w	ip, #1
 8008a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a80:	bf18      	it	ne
 8008a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008a86:	d01b      	beq.n	8008ac0 <__cmpdf2+0x54>
 8008a88:	b001      	add	sp, #4
 8008a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a8e:	bf0c      	ite	eq
 8008a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a94:	ea91 0f03 	teqne	r1, r3
 8008a98:	bf02      	ittt	eq
 8008a9a:	ea90 0f02 	teqeq	r0, r2
 8008a9e:	2000      	moveq	r0, #0
 8008aa0:	4770      	bxeq	lr
 8008aa2:	f110 0f00 	cmn.w	r0, #0
 8008aa6:	ea91 0f03 	teq	r1, r3
 8008aaa:	bf58      	it	pl
 8008aac:	4299      	cmppl	r1, r3
 8008aae:	bf08      	it	eq
 8008ab0:	4290      	cmpeq	r0, r2
 8008ab2:	bf2c      	ite	cs
 8008ab4:	17d8      	asrcs	r0, r3, #31
 8008ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008aba:	f040 0001 	orr.w	r0, r0, #1
 8008abe:	4770      	bx	lr
 8008ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ac8:	d102      	bne.n	8008ad0 <__cmpdf2+0x64>
 8008aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008ace:	d107      	bne.n	8008ae0 <__cmpdf2+0x74>
 8008ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ad8:	d1d6      	bne.n	8008a88 <__cmpdf2+0x1c>
 8008ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008ade:	d0d3      	beq.n	8008a88 <__cmpdf2+0x1c>
 8008ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop

08008ae8 <__aeabi_cdrcmple>:
 8008ae8:	4684      	mov	ip, r0
 8008aea:	4610      	mov	r0, r2
 8008aec:	4662      	mov	r2, ip
 8008aee:	468c      	mov	ip, r1
 8008af0:	4619      	mov	r1, r3
 8008af2:	4663      	mov	r3, ip
 8008af4:	e000      	b.n	8008af8 <__aeabi_cdcmpeq>
 8008af6:	bf00      	nop

08008af8 <__aeabi_cdcmpeq>:
 8008af8:	b501      	push	{r0, lr}
 8008afa:	f7ff ffb7 	bl	8008a6c <__cmpdf2>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	bf48      	it	mi
 8008b02:	f110 0f00 	cmnmi.w	r0, #0
 8008b06:	bd01      	pop	{r0, pc}

08008b08 <__aeabi_dcmpeq>:
 8008b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b0c:	f7ff fff4 	bl	8008af8 <__aeabi_cdcmpeq>
 8008b10:	bf0c      	ite	eq
 8008b12:	2001      	moveq	r0, #1
 8008b14:	2000      	movne	r0, #0
 8008b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b1a:	bf00      	nop

08008b1c <__aeabi_dcmplt>:
 8008b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b20:	f7ff ffea 	bl	8008af8 <__aeabi_cdcmpeq>
 8008b24:	bf34      	ite	cc
 8008b26:	2001      	movcc	r0, #1
 8008b28:	2000      	movcs	r0, #0
 8008b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b2e:	bf00      	nop

08008b30 <__aeabi_dcmple>:
 8008b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b34:	f7ff ffe0 	bl	8008af8 <__aeabi_cdcmpeq>
 8008b38:	bf94      	ite	ls
 8008b3a:	2001      	movls	r0, #1
 8008b3c:	2000      	movhi	r0, #0
 8008b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b42:	bf00      	nop

08008b44 <__aeabi_dcmpge>:
 8008b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b48:	f7ff ffce 	bl	8008ae8 <__aeabi_cdrcmple>
 8008b4c:	bf94      	ite	ls
 8008b4e:	2001      	movls	r0, #1
 8008b50:	2000      	movhi	r0, #0
 8008b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b56:	bf00      	nop

08008b58 <__aeabi_dcmpgt>:
 8008b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b5c:	f7ff ffc4 	bl	8008ae8 <__aeabi_cdrcmple>
 8008b60:	bf34      	ite	cc
 8008b62:	2001      	movcc	r0, #1
 8008b64:	2000      	movcs	r0, #0
 8008b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b6a:	bf00      	nop

08008b6c <__aeabi_d2uiz>:
 8008b6c:	004a      	lsls	r2, r1, #1
 8008b6e:	d211      	bcs.n	8008b94 <__aeabi_d2uiz+0x28>
 8008b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008b74:	d211      	bcs.n	8008b9a <__aeabi_d2uiz+0x2e>
 8008b76:	d50d      	bpl.n	8008b94 <__aeabi_d2uiz+0x28>
 8008b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b80:	d40e      	bmi.n	8008ba0 <__aeabi_d2uiz+0x34>
 8008b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8008b92:	4770      	bx	lr
 8008b94:	f04f 0000 	mov.w	r0, #0
 8008b98:	4770      	bx	lr
 8008b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008b9e:	d102      	bne.n	8008ba6 <__aeabi_d2uiz+0x3a>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	4770      	bx	lr
 8008ba6:	f04f 0000 	mov.w	r0, #0
 8008baa:	4770      	bx	lr

08008bac <__aeabi_d2f>:
 8008bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008bb4:	bf24      	itt	cs
 8008bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008bbe:	d90d      	bls.n	8008bdc <__aeabi_d2f+0x30>
 8008bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008bd4:	bf08      	it	eq
 8008bd6:	f020 0001 	biceq.w	r0, r0, #1
 8008bda:	4770      	bx	lr
 8008bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008be0:	d121      	bne.n	8008c26 <__aeabi_d2f+0x7a>
 8008be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008be6:	bfbc      	itt	lt
 8008be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008bec:	4770      	bxlt	lr
 8008bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008bf6:	f1c2 0218 	rsb	r2, r2, #24
 8008bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8008bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c02:	fa20 f002 	lsr.w	r0, r0, r2
 8008c06:	bf18      	it	ne
 8008c08:	f040 0001 	orrne.w	r0, r0, #1
 8008c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c18:	ea40 000c 	orr.w	r0, r0, ip
 8008c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8008c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c24:	e7cc      	b.n	8008bc0 <__aeabi_d2f+0x14>
 8008c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c2a:	d107      	bne.n	8008c3c <__aeabi_d2f+0x90>
 8008c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c30:	bf1e      	ittt	ne
 8008c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008c3a:	4770      	bxne	lr
 8008c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop

08008c4c <__aeabi_uldivmod>:
 8008c4c:	b953      	cbnz	r3, 8008c64 <__aeabi_uldivmod+0x18>
 8008c4e:	b94a      	cbnz	r2, 8008c64 <__aeabi_uldivmod+0x18>
 8008c50:	2900      	cmp	r1, #0
 8008c52:	bf08      	it	eq
 8008c54:	2800      	cmpeq	r0, #0
 8008c56:	bf1c      	itt	ne
 8008c58:	f04f 31ff 	movne.w	r1, #4294967295
 8008c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8008c60:	f000 b9aa 	b.w	8008fb8 <__aeabi_idiv0>
 8008c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c6c:	f000 f83c 	bl	8008ce8 <__udivmoddi4>
 8008c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c78:	b004      	add	sp, #16
 8008c7a:	4770      	bx	lr

08008c7c <__aeabi_d2lz>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	460d      	mov	r5, r1
 8008c86:	f7ff ff49 	bl	8008b1c <__aeabi_dcmplt>
 8008c8a:	b928      	cbnz	r0, 8008c98 <__aeabi_d2lz+0x1c>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c94:	f000 b80a 	b.w	8008cac <__aeabi_d2ulz>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8008c9e:	f000 f805 	bl	8008cac <__aeabi_d2ulz>
 8008ca2:	4240      	negs	r0, r0
 8008ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop

08008cac <__aeabi_d2ulz>:
 8008cac:	b5d0      	push	{r4, r6, r7, lr}
 8008cae:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <__aeabi_d2ulz+0x34>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	f7ff fcbf 	bl	8008638 <__aeabi_dmul>
 8008cba:	f7ff ff57 	bl	8008b6c <__aeabi_d2uiz>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7ff fc40 	bl	8008544 <__aeabi_ui2d>
 8008cc4:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <__aeabi_d2ulz+0x38>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f7ff fcb6 	bl	8008638 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7ff faf8 	bl	80082c8 <__aeabi_dsub>
 8008cd8:	f7ff ff48 	bl	8008b6c <__aeabi_d2uiz>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	bdd0      	pop	{r4, r6, r7, pc}
 8008ce0:	3df00000 	.word	0x3df00000
 8008ce4:	41f00000 	.word	0x41f00000

08008ce8 <__udivmoddi4>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	9d08      	ldr	r5, [sp, #32]
 8008cee:	4604      	mov	r4, r0
 8008cf0:	468e      	mov	lr, r1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d14d      	bne.n	8008d92 <__udivmoddi4+0xaa>
 8008cf6:	428a      	cmp	r2, r1
 8008cf8:	4694      	mov	ip, r2
 8008cfa:	d969      	bls.n	8008dd0 <__udivmoddi4+0xe8>
 8008cfc:	fab2 f282 	clz	r2, r2
 8008d00:	b152      	cbz	r2, 8008d18 <__udivmoddi4+0x30>
 8008d02:	fa01 f302 	lsl.w	r3, r1, r2
 8008d06:	f1c2 0120 	rsb	r1, r2, #32
 8008d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8008d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008d12:	ea41 0e03 	orr.w	lr, r1, r3
 8008d16:	4094      	lsls	r4, r2
 8008d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008d1c:	0c21      	lsrs	r1, r4, #16
 8008d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8008d22:	fa1f f78c 	uxth.w	r7, ip
 8008d26:	fb08 e316 	mls	r3, r8, r6, lr
 8008d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d2e:	fb06 f107 	mul.w	r1, r6, r7
 8008d32:	4299      	cmp	r1, r3
 8008d34:	d90a      	bls.n	8008d4c <__udivmoddi4+0x64>
 8008d36:	eb1c 0303 	adds.w	r3, ip, r3
 8008d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8008d3e:	f080 811f 	bcs.w	8008f80 <__udivmoddi4+0x298>
 8008d42:	4299      	cmp	r1, r3
 8008d44:	f240 811c 	bls.w	8008f80 <__udivmoddi4+0x298>
 8008d48:	3e02      	subs	r6, #2
 8008d4a:	4463      	add	r3, ip
 8008d4c:	1a5b      	subs	r3, r3, r1
 8008d4e:	b2a4      	uxth	r4, r4
 8008d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8008d54:	fb08 3310 	mls	r3, r8, r0, r3
 8008d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008d5c:	fb00 f707 	mul.w	r7, r0, r7
 8008d60:	42a7      	cmp	r7, r4
 8008d62:	d90a      	bls.n	8008d7a <__udivmoddi4+0x92>
 8008d64:	eb1c 0404 	adds.w	r4, ip, r4
 8008d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d6c:	f080 810a 	bcs.w	8008f84 <__udivmoddi4+0x29c>
 8008d70:	42a7      	cmp	r7, r4
 8008d72:	f240 8107 	bls.w	8008f84 <__udivmoddi4+0x29c>
 8008d76:	4464      	add	r4, ip
 8008d78:	3802      	subs	r0, #2
 8008d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d7e:	1be4      	subs	r4, r4, r7
 8008d80:	2600      	movs	r6, #0
 8008d82:	b11d      	cbz	r5, 8008d8c <__udivmoddi4+0xa4>
 8008d84:	40d4      	lsrs	r4, r2
 8008d86:	2300      	movs	r3, #0
 8008d88:	e9c5 4300 	strd	r4, r3, [r5]
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d909      	bls.n	8008daa <__udivmoddi4+0xc2>
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	f000 80ef 	beq.w	8008f7a <__udivmoddi4+0x292>
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8008da2:	4630      	mov	r0, r6
 8008da4:	4631      	mov	r1, r6
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	fab3 f683 	clz	r6, r3
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d14a      	bne.n	8008e48 <__udivmoddi4+0x160>
 8008db2:	428b      	cmp	r3, r1
 8008db4:	d302      	bcc.n	8008dbc <__udivmoddi4+0xd4>
 8008db6:	4282      	cmp	r2, r0
 8008db8:	f200 80f9 	bhi.w	8008fae <__udivmoddi4+0x2c6>
 8008dbc:	1a84      	subs	r4, r0, r2
 8008dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	d0e0      	beq.n	8008d8c <__udivmoddi4+0xa4>
 8008dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8008dce:	e7dd      	b.n	8008d8c <__udivmoddi4+0xa4>
 8008dd0:	b902      	cbnz	r2, 8008dd4 <__udivmoddi4+0xec>
 8008dd2:	deff      	udf	#255	; 0xff
 8008dd4:	fab2 f282 	clz	r2, r2
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	f040 8092 	bne.w	8008f02 <__udivmoddi4+0x21a>
 8008dde:	eba1 010c 	sub.w	r1, r1, ip
 8008de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008de6:	fa1f fe8c 	uxth.w	lr, ip
 8008dea:	2601      	movs	r6, #1
 8008dec:	0c20      	lsrs	r0, r4, #16
 8008dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8008df2:	fb07 1113 	mls	r1, r7, r3, r1
 8008df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008dfa:	fb0e f003 	mul.w	r0, lr, r3
 8008dfe:	4288      	cmp	r0, r1
 8008e00:	d908      	bls.n	8008e14 <__udivmoddi4+0x12c>
 8008e02:	eb1c 0101 	adds.w	r1, ip, r1
 8008e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8008e0a:	d202      	bcs.n	8008e12 <__udivmoddi4+0x12a>
 8008e0c:	4288      	cmp	r0, r1
 8008e0e:	f200 80cb 	bhi.w	8008fa8 <__udivmoddi4+0x2c0>
 8008e12:	4643      	mov	r3, r8
 8008e14:	1a09      	subs	r1, r1, r0
 8008e16:	b2a4      	uxth	r4, r4
 8008e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8008e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8008e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008e24:	fb0e fe00 	mul.w	lr, lr, r0
 8008e28:	45a6      	cmp	lr, r4
 8008e2a:	d908      	bls.n	8008e3e <__udivmoddi4+0x156>
 8008e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8008e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8008e34:	d202      	bcs.n	8008e3c <__udivmoddi4+0x154>
 8008e36:	45a6      	cmp	lr, r4
 8008e38:	f200 80bb 	bhi.w	8008fb2 <__udivmoddi4+0x2ca>
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	eba4 040e 	sub.w	r4, r4, lr
 8008e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008e46:	e79c      	b.n	8008d82 <__udivmoddi4+0x9a>
 8008e48:	f1c6 0720 	rsb	r7, r6, #32
 8008e4c:	40b3      	lsls	r3, r6
 8008e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8008e56:	fa20 f407 	lsr.w	r4, r0, r7
 8008e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8008e5e:	431c      	orrs	r4, r3
 8008e60:	40f9      	lsrs	r1, r7
 8008e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008e66:	fa00 f306 	lsl.w	r3, r0, r6
 8008e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8008e6e:	0c20      	lsrs	r0, r4, #16
 8008e70:	fa1f fe8c 	uxth.w	lr, ip
 8008e74:	fb09 1118 	mls	r1, r9, r8, r1
 8008e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8008e80:	4288      	cmp	r0, r1
 8008e82:	fa02 f206 	lsl.w	r2, r2, r6
 8008e86:	d90b      	bls.n	8008ea0 <__udivmoddi4+0x1b8>
 8008e88:	eb1c 0101 	adds.w	r1, ip, r1
 8008e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8008e90:	f080 8088 	bcs.w	8008fa4 <__udivmoddi4+0x2bc>
 8008e94:	4288      	cmp	r0, r1
 8008e96:	f240 8085 	bls.w	8008fa4 <__udivmoddi4+0x2bc>
 8008e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8008e9e:	4461      	add	r1, ip
 8008ea0:	1a09      	subs	r1, r1, r0
 8008ea2:	b2a4      	uxth	r4, r4
 8008ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8008ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8008eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8008eb4:	458e      	cmp	lr, r1
 8008eb6:	d908      	bls.n	8008eca <__udivmoddi4+0x1e2>
 8008eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8008ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8008ec0:	d26c      	bcs.n	8008f9c <__udivmoddi4+0x2b4>
 8008ec2:	458e      	cmp	lr, r1
 8008ec4:	d96a      	bls.n	8008f9c <__udivmoddi4+0x2b4>
 8008ec6:	3802      	subs	r0, #2
 8008ec8:	4461      	add	r1, ip
 8008eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008ece:	fba0 9402 	umull	r9, r4, r0, r2
 8008ed2:	eba1 010e 	sub.w	r1, r1, lr
 8008ed6:	42a1      	cmp	r1, r4
 8008ed8:	46c8      	mov	r8, r9
 8008eda:	46a6      	mov	lr, r4
 8008edc:	d356      	bcc.n	8008f8c <__udivmoddi4+0x2a4>
 8008ede:	d053      	beq.n	8008f88 <__udivmoddi4+0x2a0>
 8008ee0:	b15d      	cbz	r5, 8008efa <__udivmoddi4+0x212>
 8008ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8008ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8008eea:	fa01 f707 	lsl.w	r7, r1, r7
 8008eee:	fa22 f306 	lsr.w	r3, r2, r6
 8008ef2:	40f1      	lsrs	r1, r6
 8008ef4:	431f      	orrs	r7, r3
 8008ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8008efa:	2600      	movs	r6, #0
 8008efc:	4631      	mov	r1, r6
 8008efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f02:	f1c2 0320 	rsb	r3, r2, #32
 8008f06:	40d8      	lsrs	r0, r3
 8008f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8008f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8008f10:	4091      	lsls	r1, r2
 8008f12:	4301      	orrs	r1, r0
 8008f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008f18:	fa1f fe8c 	uxth.w	lr, ip
 8008f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8008f20:	fb07 3610 	mls	r6, r7, r0, r3
 8008f24:	0c0b      	lsrs	r3, r1, #16
 8008f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8008f2e:	429e      	cmp	r6, r3
 8008f30:	fa04 f402 	lsl.w	r4, r4, r2
 8008f34:	d908      	bls.n	8008f48 <__udivmoddi4+0x260>
 8008f36:	eb1c 0303 	adds.w	r3, ip, r3
 8008f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8008f3e:	d22f      	bcs.n	8008fa0 <__udivmoddi4+0x2b8>
 8008f40:	429e      	cmp	r6, r3
 8008f42:	d92d      	bls.n	8008fa0 <__udivmoddi4+0x2b8>
 8008f44:	3802      	subs	r0, #2
 8008f46:	4463      	add	r3, ip
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	b289      	uxth	r1, r1
 8008f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008f50:	fb07 3316 	mls	r3, r7, r6, r3
 8008f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f58:	fb06 f30e 	mul.w	r3, r6, lr
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	d908      	bls.n	8008f72 <__udivmoddi4+0x28a>
 8008f60:	eb1c 0101 	adds.w	r1, ip, r1
 8008f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8008f68:	d216      	bcs.n	8008f98 <__udivmoddi4+0x2b0>
 8008f6a:	428b      	cmp	r3, r1
 8008f6c:	d914      	bls.n	8008f98 <__udivmoddi4+0x2b0>
 8008f6e:	3e02      	subs	r6, #2
 8008f70:	4461      	add	r1, ip
 8008f72:	1ac9      	subs	r1, r1, r3
 8008f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008f78:	e738      	b.n	8008dec <__udivmoddi4+0x104>
 8008f7a:	462e      	mov	r6, r5
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	e705      	b.n	8008d8c <__udivmoddi4+0xa4>
 8008f80:	4606      	mov	r6, r0
 8008f82:	e6e3      	b.n	8008d4c <__udivmoddi4+0x64>
 8008f84:	4618      	mov	r0, r3
 8008f86:	e6f8      	b.n	8008d7a <__udivmoddi4+0x92>
 8008f88:	454b      	cmp	r3, r9
 8008f8a:	d2a9      	bcs.n	8008ee0 <__udivmoddi4+0x1f8>
 8008f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8008f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8008f94:	3801      	subs	r0, #1
 8008f96:	e7a3      	b.n	8008ee0 <__udivmoddi4+0x1f8>
 8008f98:	4646      	mov	r6, r8
 8008f9a:	e7ea      	b.n	8008f72 <__udivmoddi4+0x28a>
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	e794      	b.n	8008eca <__udivmoddi4+0x1e2>
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	e7d1      	b.n	8008f48 <__udivmoddi4+0x260>
 8008fa4:	46d0      	mov	r8, sl
 8008fa6:	e77b      	b.n	8008ea0 <__udivmoddi4+0x1b8>
 8008fa8:	3b02      	subs	r3, #2
 8008faa:	4461      	add	r1, ip
 8008fac:	e732      	b.n	8008e14 <__udivmoddi4+0x12c>
 8008fae:	4630      	mov	r0, r6
 8008fb0:	e709      	b.n	8008dc6 <__udivmoddi4+0xde>
 8008fb2:	4464      	add	r4, ip
 8008fb4:	3802      	subs	r0, #2
 8008fb6:	e742      	b.n	8008e3e <__udivmoddi4+0x156>

08008fb8 <__aeabi_idiv0>:
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop

08008fbc <cb_init>:
#include "cbuffer.h"

void cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
    cb->data = buf;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	601a      	str	r2, [r3, #0]
    cb->reader = 0;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60da      	str	r2, [r3, #12]
    cb->writer = 0;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	609a      	str	r2, [r3, #8]
    cb->size = size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
    cb->overflow = 0;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	611a      	str	r2, [r3, #16]
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <LVQ_Flash_Unlock>:
			Address = 0x08060000;
	return Address;
}

void LVQ_Flash_Unlock(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
		FLASH->KEYR = KEY1;
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <LVQ_Flash_Unlock+0x1c>)
 8008ffa:	4a06      	ldr	r2, [pc, #24]	; (8009014 <LVQ_Flash_Unlock+0x20>)
 8008ffc:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = KEY2;
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <LVQ_Flash_Unlock+0x1c>)
 8009000:	4a05      	ldr	r2, [pc, #20]	; (8009018 <LVQ_Flash_Unlock+0x24>)
 8009002:	605a      	str	r2, [r3, #4]
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40023c00 	.word	0x40023c00
 8009014:	45670123 	.word	0x45670123
 8009018:	cdef89ab 	.word	0xcdef89ab

0800901c <LVQ_Flash_Write>:

	return LVQ_Flash_Status_Ok;
}

LVQ_Flash_Status_t LVQ_Flash_Write(volatile uint32_t u32StartAddr, uint32_t* u32BufferWrite, uint32_t u32Length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
	uint32_t u32Count = 0u;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 800902c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009030:	613b      	str	r3, [r7, #16]
	/* Check input parameters */
	if( (u32BufferWrite == 0u) || (u32Length == 0u) )
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <LVQ_Flash_Write+0x22>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <LVQ_Flash_Write+0x36>
	{
		 return LVQ_Flash_Status_Errors;
 800903e:	2300      	movs	r3, #0
 8009040:	e05d      	b.n	80090fe <LVQ_Flash_Write+0xe2>

	/* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3b01      	subs	r3, #1
 8009046:	613b      	str	r3, [r7, #16]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <LVQ_Flash_Write+0x36>
		{
			return LVQ_Flash_Status_Errors;
 800904e:	2300      	movs	r3, #0
 8009050:	e055      	b.n	80090fe <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8009052:	4b2d      	ldr	r3, [pc, #180]	; (8009108 <LVQ_Flash_Write+0xec>)
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800905a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905e:	d102      	bne.n	8009066 <LVQ_Flash_Write+0x4a>
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1ed      	bne.n	8009042 <LVQ_Flash_Write+0x26>
		}
	}
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 8009066:	4b28      	ldr	r3, [pc, #160]	; (8009108 <LVQ_Flash_Write+0xec>)
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009072:	d101      	bne.n	8009078 <LVQ_Flash_Write+0x5c>
	{
		LVQ_Flash_Unlock();
 8009074:	f7ff ffbe 	bl	8008ff4 <LVQ_Flash_Unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 8009078:	4b23      	ldr	r3, [pc, #140]	; (8009108 <LVQ_Flash_Write+0xec>)
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	4a22      	ldr	r2, [pc, #136]	; (8009108 <LVQ_Flash_Write+0xec>)
 800907e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009082:	6113      	str	r3, [r2, #16]
	/* Write FLASH CR_PG to 1 */
	FLASH->CR |= FLASH_CR_PG;
 8009084:	4b20      	ldr	r3, [pc, #128]	; (8009108 <LVQ_Flash_Write+0xec>)
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	4a1f      	ldr	r2, [pc, #124]	; (8009108 <LVQ_Flash_Write+0xec>)
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6113      	str	r3, [r2, #16]
	/* Perform word write at the desired address */
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	e00c      	b.n	80090b0 <LVQ_Flash_Write+0x94>
	{
		*(__IO uint32_t*) (u32StartAddr + u32Count*4u) = *(uint32_t*) (u32BufferWrite + u32Count);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	0091      	lsls	r1, r2, #2
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	440a      	add	r2, r1
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6013      	str	r3, [r2, #0]
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	3301      	adds	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3ee      	bcc.n	8009096 <LVQ_Flash_Write+0x7a>
	}
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 80090b8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80090bc:	613b      	str	r3, [r7, #16]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 80090be:	e007      	b.n	80090d0 <LVQ_Flash_Write+0xb4>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <LVQ_Flash_Write+0xb4>
		{
			return LVQ_Flash_Status_Errors;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e016      	b.n	80090fe <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 80090d0:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <LVQ_Flash_Write+0xec>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090dc:	d102      	bne.n	80090e4 <LVQ_Flash_Write+0xc8>
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ed      	bne.n	80090c0 <LVQ_Flash_Write+0xa4>
		}
	}
	/* Clear PG bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_PG;
 80090e4:	4b08      	ldr	r3, [pc, #32]	; (8009108 <LVQ_Flash_Write+0xec>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	4a07      	ldr	r2, [pc, #28]	; (8009108 <LVQ_Flash_Write+0xec>)
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <LVQ_Flash_Write+0xec>)
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	4a04      	ldr	r2, [pc, #16]	; (8009108 <LVQ_Flash_Write+0xec>)
 80090f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090fa:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 80090fc:	2301      	movs	r3, #1
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40023c00 	.word	0x40023c00

0800910c <get_high_address>:
volatile uint32_t u32SizeDataFirmware = 0;
volatile uint16_t u32DataWriteFlash[50] = {0};   /* Array to store the data of line to pass it to Flash Writer */
volatile uint32_t u32AddressWriteFlash;           /* Pointer to store the address in to write */

void get_high_address(void)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
	uint32_t address = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
	address |= hex_data.u8Data[0] << 8 | hex_data.u8Data[1];
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <get_high_address+0x38>)
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	4a09      	ldr	r2, [pc, #36]	; (8009144 <get_high_address+0x38>)
 800911e:	7952      	ldrb	r2, [r2, #5]
 8009120:	4313      	orrs	r3, r2
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4313      	orrs	r3, r2
 8009128:	607b      	str	r3, [r7, #4]
	u32AddressWriteFlash = 0x08000000 | ( address << 16); /* Address Save Firmware Update */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	041b      	lsls	r3, r3, #16
 800912e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009132:	4a05      	ldr	r2, [pc, #20]	; (8009148 <get_high_address+0x3c>)
 8009134:	6013      	str	r3, [r2, #0]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20013a8c 	.word	0x20013a8c
 8009148:	20013d64 	.word	0x20013d64

0800914c <write_flash_memory>:

void write_flash_memory(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
	uint8_t CC, i;
	uint8_t u8data_rawCounter = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	71bb      	strb	r3, [r7, #6]

	switch (hex_data.u8RecordType)
 8009156:	4b40      	ldr	r3, [pc, #256]	; (8009258 <write_flash_memory+0x10c>)
 8009158:	78db      	ldrb	r3, [r3, #3]
 800915a:	2b05      	cmp	r3, #5
 800915c:	d075      	beq.n	800924a <write_flash_memory+0xfe>
 800915e:	2b05      	cmp	r3, #5
 8009160:	dc75      	bgt.n	800924e <write_flash_memory+0x102>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <write_flash_memory+0x24>
 8009166:	2b04      	cmp	r3, #4
 8009168:	d171      	bne.n	800924e <write_flash_memory+0x102>
	{
		case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
		{	get_high_address();
 800916a:	f7ff ffcf 	bl	800910c <get_high_address>
			break;
 800916e:	e06f      	b.n	8009250 <write_flash_memory+0x104>
			break;
		}
		case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
		{
			/* Get Character Count */
			CC = hex_data.u8ByteCount;
 8009170:	4b39      	ldr	r3, [pc, #228]	; (8009258 <write_flash_memory+0x10c>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	717b      	strb	r3, [r7, #5]
			u32SizeDataFirmware += CC;
 8009176:	797a      	ldrb	r2, [r7, #5]
 8009178:	4b38      	ldr	r3, [pc, #224]	; (800925c <write_flash_memory+0x110>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4413      	add	r3, r2
 800917e:	4a37      	ldr	r2, [pc, #220]	; (800925c <write_flash_memory+0x110>)
 8009180:	6013      	str	r3, [r2, #0]

			/* Set full address */
			u32AddressWriteFlash = u32AddressWriteFlash & 0xFFFF0000;
 8009182:	4b37      	ldr	r3, [pc, #220]	; (8009260 <write_flash_memory+0x114>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	0c1b      	lsrs	r3, r3, #16
 8009188:	041b      	lsls	r3, r3, #16
 800918a:	4a35      	ldr	r2, [pc, #212]	; (8009260 <write_flash_memory+0x114>)
 800918c:	6013      	str	r3, [r2, #0]
			u32AddressWriteFlash = u32AddressWriteFlash 	|
								 ( hex_data.u8Addr[0] << 8) |
 800918e:	4b32      	ldr	r3, [pc, #200]	; (8009258 <write_flash_memory+0x10c>)
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	461a      	mov	r2, r3
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 8009196:	4b32      	ldr	r3, [pc, #200]	; (8009260 <write_flash_memory+0x114>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4313      	orrs	r3, r2
								 ( hex_data.u8Addr[1] );
 800919c:	4a2e      	ldr	r2, [pc, #184]	; (8009258 <write_flash_memory+0x10c>)
 800919e:	7892      	ldrb	r2, [r2, #2]
								 ( hex_data.u8Addr[0] << 8) |
 80091a0:	4313      	orrs	r3, r2
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 80091a2:	4a2f      	ldr	r2, [pc, #188]	; (8009260 <write_flash_memory+0x114>)
 80091a4:	6013      	str	r3, [r2, #0]

			/* Check address wite flash data */
			if( u32AddressWriteFlash < 0x08004000 )
 80091a6:	4b2e      	ldr	r3, [pc, #184]	; (8009260 <write_flash_memory+0x114>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a2e      	ldr	r2, [pc, #184]	; (8009264 <write_flash_memory+0x118>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d203      	bcs.n	80091b8 <write_flash_memory+0x6c>
			{
				u32AddressWriteFlash = 0;
 80091b0:	4b2b      	ldr	r3, [pc, #172]	; (8009260 <write_flash_memory+0x114>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
				return;
 80091b6:	e04b      	b.n	8009250 <write_flash_memory+0x104>
			}

			/* Get the data of the record */
			for (i = 0; i < CC; i += 2)
 80091b8:	2300      	movs	r3, #0
 80091ba:	71fb      	strb	r3, [r7, #7]
 80091bc:	e018      	b.n	80091f0 <write_flash_memory+0xa4>
			{
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	3301      	adds	r3, #1
 80091c2:	4a25      	ldr	r2, [pc, #148]	; (8009258 <write_flash_memory+0x10c>)
 80091c4:	4413      	add	r3, r2
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	b21a      	sxth	r2, r3
													   ( hex_data.u8Data[i] );
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	4922      	ldr	r1, [pc, #136]	; (8009258 <write_flash_memory+0x10c>)
 80091d0:	440b      	add	r3, r1
 80091d2:	791b      	ldrb	r3, [r3, #4]
 80091d4:	b21b      	sxth	r3, r3
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 80091d6:	4313      	orrs	r3, r2
 80091d8:	b21a      	sxth	r2, r3
 80091da:	79bb      	ldrb	r3, [r7, #6]
 80091dc:	b291      	uxth	r1, r2
 80091de:	4a22      	ldr	r2, [pc, #136]	; (8009268 <write_flash_memory+0x11c>)
 80091e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	     		u8data_rawCounter++;
 80091e4:	79bb      	ldrb	r3, [r7, #6]
 80091e6:	3301      	adds	r3, #1
 80091e8:	71bb      	strb	r3, [r7, #6]
			for (i = 0; i < CC; i += 2)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	3302      	adds	r3, #2
 80091ee:	71fb      	strb	r3, [r7, #7]
 80091f0:	79fa      	ldrb	r2, [r7, #7]
 80091f2:	797b      	ldrb	r3, [r7, #5]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d3e2      	bcc.n	80091be <write_flash_memory+0x72>
			}

			if (CC % 2 != 0)
 80091f8:	797b      	ldrb	r3, [r7, #5]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d018      	beq.n	8009236 <write_flash_memory+0xea>
			{
				u32DataWriteFlash[u8data_rawCounter] = 0xFF00 | ( hex_data.u8Data[CC-1] );
 8009204:	797b      	ldrb	r3, [r7, #5]
 8009206:	3b01      	subs	r3, #1
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <write_flash_memory+0x10c>)
 800920a:	4413      	add	r3, r2
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	b21b      	sxth	r3, r3
 8009210:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8009214:	b21a      	sxth	r2, r3
 8009216:	79bb      	ldrb	r3, [r7, #6]
 8009218:	b291      	uxth	r1, r2
 800921a:	4a13      	ldr	r2, [pc, #76]	; (8009268 <write_flash_memory+0x11c>)
 800921c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4 + 1);
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <write_flash_memory+0x114>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	797b      	ldrb	r3, [r7, #5]
 8009226:	089b      	lsrs	r3, r3, #2
 8009228:	b2db      	uxtb	r3, r3
 800922a:	3301      	adds	r3, #1
 800922c:	461a      	mov	r2, r3
 800922e:	490e      	ldr	r1, [pc, #56]	; (8009268 <write_flash_memory+0x11c>)
 8009230:	f7ff fef4 	bl	800901c <LVQ_Flash_Write>
			}
			else
			{
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
			}
			break;
 8009234:	e00c      	b.n	8009250 <write_flash_memory+0x104>
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
 8009236:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <write_flash_memory+0x114>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	797b      	ldrb	r3, [r7, #5]
 800923c:	089b      	lsrs	r3, r3, #2
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <write_flash_memory+0x11c>)
 8009244:	f7ff feea 	bl	800901c <LVQ_Flash_Write>
			break;
 8009248:	e002      	b.n	8009250 <write_flash_memory+0x104>
			break;
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <write_flash_memory+0x104>
		}
		default:
				break;
 800924e:	bf00      	nop
	}
}
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20013a8c 	.word	0x20013a8c
 800925c:	20013cfc 	.word	0x20013cfc
 8009260:	20013d64 	.word	0x20013d64
 8009264:	08004000 	.word	0x08004000
 8009268:	20013d00 	.word	0x20013d00

0800926c <Parse_Element>:
  void (*reset_handler) (void) = (void *) u32JumpAddress;
  reset_handler();
}

void Parse_Element(uint8_t *buff, uint8_t u8length)
{
 800926c:	b480      	push	{r7}
 800926e:	b08d      	sub	sp, #52	; 0x34
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
	uint8_t u8count_array = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t u8temp_buffer[32];

    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 800927e:	2300      	movs	r3, #0
 8009280:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009284:	e05e      	b.n	8009344 <Parse_Element+0xd8>
    {
        if(buff[u8Count] >= '0' && buff[u8Count] <= '9')
 8009286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b2f      	cmp	r3, #47	; 0x2f
 8009292:	d914      	bls.n	80092be <Parse_Element+0x52>
 8009294:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b39      	cmp	r3, #57	; 0x39
 80092a0:	d80d      	bhi.n	80092be <Parse_Element+0x52>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 48;
 80092a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092b0:	3a30      	subs	r2, #48	; 0x30
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	3330      	adds	r3, #48	; 0x30
 80092b6:	443b      	add	r3, r7
 80092b8:	f803 2c24 	strb.w	r2, [r3, #-36]
 80092bc:	e01a      	b.n	80092f4 <Parse_Element+0x88>
        }
        else if(buff[u8Count] >= 'A' && buff[u8Count] <= 'F')
 80092be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	4413      	add	r3, r2
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d941      	bls.n	8009350 <Parse_Element+0xe4>
 80092cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b46      	cmp	r3, #70	; 0x46
 80092d8:	d83a      	bhi.n	8009350 <Parse_Element+0xe4>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 65 + 10;
 80092da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	781a      	ldrb	r2, [r3, #0]
 80092e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092e8:	3a37      	subs	r2, #55	; 0x37
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	3330      	adds	r3, #48	; 0x30
 80092ee:	443b      	add	r3, r7
 80092f0:	f803 2c24 	strb.w	r2, [r3, #-36]
        else
        {
           return;
        }

        if(u8Count % 2 != 0)
 80092f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01b      	beq.n	800933a <Parse_Element+0xce>
        {
            cInternalBufferData[u8count_array] = ((u8temp_buffer[u8Count - 1] << 4) | (u8temp_buffer[u8Count]));
 8009302:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009306:	3b01      	subs	r3, #1
 8009308:	3330      	adds	r3, #48	; 0x30
 800930a:	443b      	add	r3, r7
 800930c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	b25a      	sxtb	r2, r3
 8009314:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	443b      	add	r3, r7
 800931c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009320:	b25b      	sxtb	r3, r3
 8009322:	4313      	orrs	r3, r2
 8009324:	b25a      	sxtb	r2, r3
 8009326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800932a:	b2d1      	uxtb	r1, r2
 800932c:	4a0b      	ldr	r2, [pc, #44]	; (800935c <Parse_Element+0xf0>)
 800932e:	54d1      	strb	r1, [r2, r3]
            u8count_array++;
 8009330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009334:	3301      	adds	r3, #1
 8009336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 800933a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800933e:	3301      	adds	r3, #1
 8009340:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009344:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	429a      	cmp	r2, r3
 800934c:	d39b      	bcc.n	8009286 <Parse_Element+0x1a>
 800934e:	e000      	b.n	8009352 <Parse_Element+0xe6>
           return;
 8009350:	bf00      	nop
        }
    }
}
 8009352:	3734      	adds	r7, #52	; 0x34
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20013aa4 	.word	0x20013aa4

08009360 <handle_data_hex>:

uint8_t handle_data_hex(uint8_t* pData, uint16_t Size)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]
	uint8_t u8CaculChecksum = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]

	State = START_CODE;
 8009370:	4b68      	ldr	r3, [pc, #416]	; (8009514 <handle_data_hex+0x1b4>)
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 8009376:	2300      	movs	r3, #0
 8009378:	73bb      	strb	r3, [r7, #14]
 800937a:	e0c0      	b.n	80094fe <handle_data_hex+0x19e>
	{
		switch(State)
 800937c:	4b65      	ldr	r3, [pc, #404]	; (8009514 <handle_data_hex+0x1b4>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b06      	cmp	r3, #6
 8009382:	f200 80b7 	bhi.w	80094f4 <handle_data_hex+0x194>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <handle_data_hex+0x2c>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093a9 	.word	0x080093a9
 8009390:	080093c1 	.word	0x080093c1
 8009394:	080093e3 	.word	0x080093e3
 8009398:	0800940d 	.word	0x0800940d
 800939c:	0800942f 	.word	0x0800942f
 80093a0:	0800947f 	.word	0x0800947f
 80093a4:	0800949d 	.word	0x0800949d
		{
			case START_CODE:
			{
				if(pData[u8Count] != ':')
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b3a      	cmp	r3, #58	; 0x3a
 80093b2:	d001      	beq.n	80093b8 <handle_data_hex+0x58>
				{
					return STATE_ERRORS;
 80093b4:	2300      	movs	r3, #0
 80093b6:	e0a9      	b.n	800950c <handle_data_hex+0x1ac>
				}
				else
				{
				   State = BYTE_COUNT;
 80093b8:	4b56      	ldr	r3, [pc, #344]	; (8009514 <handle_data_hex+0x1b4>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80093be:	e09b      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case BYTE_COUNT:
			{
				Parse_Element(&pData[u8Count], 2U);
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4413      	add	r3, r2
 80093c6:	2102      	movs	r1, #2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff ff4f 	bl	800926c <Parse_Element>
				hex_data.u8ByteCount = cInternalBufferData[0];
 80093ce:	4b52      	ldr	r3, [pc, #328]	; (8009518 <handle_data_hex+0x1b8>)
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	4b52      	ldr	r3, [pc, #328]	; (800951c <handle_data_hex+0x1bc>)
 80093d4:	701a      	strb	r2, [r3, #0]
				u8Count = 2U;
 80093d6:	2302      	movs	r3, #2
 80093d8:	73bb      	strb	r3, [r7, #14]
				State = ADDRESS;
 80093da:	4b4e      	ldr	r3, [pc, #312]	; (8009514 <handle_data_hex+0x1b4>)
 80093dc:	2202      	movs	r2, #2
 80093de:	701a      	strb	r2, [r3, #0]
				break;
 80093e0:	e08a      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case ADDRESS:
			{
				Parse_Element(&pData[u8Count], 4U);
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	4413      	add	r3, r2
 80093e8:	2104      	movs	r1, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff ff3e 	bl	800926c <Parse_Element>
				hex_data.u8Addr[0] = cInternalBufferData[0];
 80093f0:	4b49      	ldr	r3, [pc, #292]	; (8009518 <handle_data_hex+0x1b8>)
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	4b49      	ldr	r3, [pc, #292]	; (800951c <handle_data_hex+0x1bc>)
 80093f6:	705a      	strb	r2, [r3, #1]
				hex_data.u8Addr[1] = cInternalBufferData[1];
 80093f8:	4b47      	ldr	r3, [pc, #284]	; (8009518 <handle_data_hex+0x1b8>)
 80093fa:	785a      	ldrb	r2, [r3, #1]
 80093fc:	4b47      	ldr	r3, [pc, #284]	; (800951c <handle_data_hex+0x1bc>)
 80093fe:	709a      	strb	r2, [r3, #2]
				u8Count = 6U;
 8009400:	2306      	movs	r3, #6
 8009402:	73bb      	strb	r3, [r7, #14]
				State = RECORD_TYPE;
 8009404:	4b43      	ldr	r3, [pc, #268]	; (8009514 <handle_data_hex+0x1b4>)
 8009406:	2203      	movs	r2, #3
 8009408:	701a      	strb	r2, [r3, #0]
				break;
 800940a:	e075      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case RECORD_TYPE:
			{
				Parse_Element(&pData[u8Count], 2U);
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	4413      	add	r3, r2
 8009412:	2102      	movs	r1, #2
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff ff29 	bl	800926c <Parse_Element>
				hex_data.u8RecordType = cInternalBufferData[0];
 800941a:	4b3f      	ldr	r3, [pc, #252]	; (8009518 <handle_data_hex+0x1b8>)
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	4b3f      	ldr	r3, [pc, #252]	; (800951c <handle_data_hex+0x1bc>)
 8009420:	70da      	strb	r2, [r3, #3]
				u8Count = 8U;
 8009422:	2308      	movs	r3, #8
 8009424:	73bb      	strb	r3, [r7, #14]
				State = DATA;
 8009426:	4b3b      	ldr	r3, [pc, #236]	; (8009514 <handle_data_hex+0x1b4>)
 8009428:	2204      	movs	r2, #4
 800942a:	701a      	strb	r2, [r3, #0]
				break;
 800942c:	e064      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case DATA:
			{
				Parse_Element(&pData[u8Count], (hex_data.u8ByteCount*2U));
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	441a      	add	r2, r3
 8009434:	4b39      	ldr	r3, [pc, #228]	; (800951c <handle_data_hex+0x1bc>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	b2db      	uxtb	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7ff ff14 	bl	800926c <Parse_Element>
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8009444:	2300      	movs	r3, #0
 8009446:	73bb      	strb	r3, [r7, #14]
 8009448:	e00a      	b.n	8009460 <handle_data_hex+0x100>
				{
					hex_data.u8Data[u8Count] = cInternalBufferData[u8Count];
 800944a:	7bba      	ldrb	r2, [r7, #14]
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	4932      	ldr	r1, [pc, #200]	; (8009518 <handle_data_hex+0x1b8>)
 8009450:	5c89      	ldrb	r1, [r1, r2]
 8009452:	4a32      	ldr	r2, [pc, #200]	; (800951c <handle_data_hex+0x1bc>)
 8009454:	4413      	add	r3, r2
 8009456:	460a      	mov	r2, r1
 8009458:	711a      	strb	r2, [r3, #4]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	3301      	adds	r3, #1
 800945e:	73bb      	strb	r3, [r7, #14]
 8009460:	4b2e      	ldr	r3, [pc, #184]	; (800951c <handle_data_hex+0x1bc>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	7bba      	ldrb	r2, [r7, #14]
 8009466:	429a      	cmp	r2, r3
 8009468:	d3ef      	bcc.n	800944a <handle_data_hex+0xea>
				}
				u8Count = 8U + (hex_data.u8ByteCount*2U);
 800946a:	4b2c      	ldr	r3, [pc, #176]	; (800951c <handle_data_hex+0x1bc>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	3304      	adds	r3, #4
 8009470:	b2db      	uxtb	r3, r3
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	73bb      	strb	r3, [r7, #14]
				State = CHECKSUM;
 8009476:	4b27      	ldr	r3, [pc, #156]	; (8009514 <handle_data_hex+0x1b4>)
 8009478:	2205      	movs	r2, #5
 800947a:	701a      	strb	r2, [r3, #0]
				break;
 800947c:	e03c      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case CHECKSUM:
			{
				Parse_Element(&pData[u8Count], 2U);
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	4413      	add	r3, r2
 8009484:	2102      	movs	r1, #2
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fef0 	bl	800926c <Parse_Element>
				hex_data.u8CheckSum = cInternalBufferData[0];
 800948c:	4b22      	ldr	r3, [pc, #136]	; (8009518 <handle_data_hex+0x1b8>)
 800948e:	781a      	ldrb	r2, [r3, #0]
 8009490:	4b22      	ldr	r3, [pc, #136]	; (800951c <handle_data_hex+0x1bc>)
 8009492:	751a      	strb	r2, [r3, #20]
				State = DONE;
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <handle_data_hex+0x1b4>)
 8009496:	2206      	movs	r2, #6
 8009498:	701a      	strb	r2, [r3, #0]
				break;
 800949a:	e02d      	b.n	80094f8 <handle_data_hex+0x198>
			}
			case DONE:
			{
				u8CaculChecksum = hex_data.u8ByteCount + hex_data.u8Addr[0] + hex_data.u8Addr[1] + hex_data.u8RecordType;
 800949c:	4b1f      	ldr	r3, [pc, #124]	; (800951c <handle_data_hex+0x1bc>)
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <handle_data_hex+0x1bc>)
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	4413      	add	r3, r2
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	4b1c      	ldr	r3, [pc, #112]	; (800951c <handle_data_hex+0x1bc>)
 80094aa:	789b      	ldrb	r3, [r3, #2]
 80094ac:	4413      	add	r3, r2
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	4b1a      	ldr	r3, [pc, #104]	; (800951c <handle_data_hex+0x1bc>)
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	4413      	add	r3, r2
 80094b6:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 80094b8:	2300      	movs	r3, #0
 80094ba:	73bb      	strb	r3, [r7, #14]
 80094bc:	e009      	b.n	80094d2 <handle_data_hex+0x172>
				{
					u8CaculChecksum += hex_data.u8Data[u8Count];
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	4a16      	ldr	r2, [pc, #88]	; (800951c <handle_data_hex+0x1bc>)
 80094c2:	4413      	add	r3, r2
 80094c4:	791a      	ldrb	r2, [r3, #4]
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4413      	add	r3, r2
 80094ca:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	3301      	adds	r3, #1
 80094d0:	73bb      	strb	r3, [r7, #14]
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <handle_data_hex+0x1bc>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	7bba      	ldrb	r2, [r7, #14]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3f0      	bcc.n	80094be <handle_data_hex+0x15e>
				}
				u8CaculChecksum = ~u8CaculChecksum + 1U;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	425b      	negs	r3, r3
 80094e0:	73fb      	strb	r3, [r7, #15]
				if (u8CaculChecksum == hex_data.u8CheckSum )
 80094e2:	4b0e      	ldr	r3, [pc, #56]	; (800951c <handle_data_hex+0x1bc>)
 80094e4:	7d1b      	ldrb	r3, [r3, #20]
 80094e6:	7bfa      	ldrb	r2, [r7, #15]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d101      	bne.n	80094f0 <handle_data_hex+0x190>
				{
					return STATE_NO_ERRORS;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e00d      	b.n	800950c <handle_data_hex+0x1ac>
				}
				else
				{
					return STATE_ERRORS;
 80094f0:	2300      	movs	r3, #0
 80094f2:	e00b      	b.n	800950c <handle_data_hex+0x1ac>
				}
			}
			default:
			{
				return STATE_ERRORS;
 80094f4:	2300      	movs	r3, #0
 80094f6:	e009      	b.n	800950c <handle_data_hex+0x1ac>
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	3301      	adds	r3, #1
 80094fc:	73bb      	strb	r3, [r7, #14]
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	b29b      	uxth	r3, r3
 8009502:	887a      	ldrh	r2, [r7, #2]
 8009504:	429a      	cmp	r2, r3
 8009506:	f63f af39 	bhi.w	800937c <handle_data_hex+0x1c>
			}
	   }
	}
	return STATE_ERRORS;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20013cb8 	.word	0x20013cb8
 8009518:	20013aa4 	.word	0x20013aa4
 800951c:	20013a8c 	.word	0x20013a8c

08009520 <handle_data_receive>:

uint8_t handle_data_receive(uint8_t* pData, uint16_t Size)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  return handle_data_hex(pData, Size);
 800952c:	887b      	ldrh	r3, [r7, #2]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ff15 	bl	8009360 <handle_data_hex>
 8009536:	4603      	mov	r3, r0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <handle_data_receive_dma>:

void handle_data_receive_dma(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  uint8_t* pBuff = pData;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	617b      	str	r3, [r7, #20]
  switch( pBuff[0] )
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	3b3a      	subs	r3, #58	; 0x3a
 8009558:	2b20      	cmp	r3, #32
 800955a:	f200 80d0 	bhi.w	80096fe <handle_data_receive_dma+0x1be>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <handle_data_receive_dma+0x24>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	08009693 	.word	0x08009693
 8009568:	080096ff 	.word	0x080096ff
 800956c:	080096ff 	.word	0x080096ff
 8009570:	080096ff 	.word	0x080096ff
 8009574:	080096ff 	.word	0x080096ff
 8009578:	080096ff 	.word	0x080096ff
 800957c:	080096ff 	.word	0x080096ff
 8009580:	080096ff 	.word	0x080096ff
 8009584:	080096ff 	.word	0x080096ff
 8009588:	080096ff 	.word	0x080096ff
 800958c:	080096ff 	.word	0x080096ff
 8009590:	080096ff 	.word	0x080096ff
 8009594:	080096ff 	.word	0x080096ff
 8009598:	080096ff 	.word	0x080096ff
 800959c:	080096ff 	.word	0x080096ff
 80095a0:	080096ff 	.word	0x080096ff
 80095a4:	080096ff 	.word	0x080096ff
 80095a8:	080096ff 	.word	0x080096ff
 80095ac:	080096ff 	.word	0x080096ff
 80095b0:	080096ff 	.word	0x080096ff
 80095b4:	080096ff 	.word	0x080096ff
 80095b8:	080096ff 	.word	0x080096ff
 80095bc:	080096ff 	.word	0x080096ff
 80095c0:	080096ff 	.word	0x080096ff
 80095c4:	080096ff 	.word	0x080096ff
 80095c8:	080095fd 	.word	0x080095fd
 80095cc:	080096ff 	.word	0x080096ff
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080096ff 	.word	0x080096ff
 80095d8:	080096ff 	.word	0x080096ff
 80095dc:	08009677 	.word	0x08009677
 80095e0:	080096ff 	.word	0x080096ff
 80095e4:	080096eb 	.word	0x080096eb
  {
	  case OTA_UPDATE_FW:
	  {
		flag_ota_update = TRUE;
 80095e8:	4b4a      	ldr	r3, [pc, #296]	; (8009714 <handle_data_receive_dma+0x1d4>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 80095ee:	230a      	movs	r3, #10
 80095f0:	2201      	movs	r2, #1
 80095f2:	4949      	ldr	r1, [pc, #292]	; (8009718 <handle_data_receive_dma+0x1d8>)
 80095f4:	4849      	ldr	r0, [pc, #292]	; (800971c <handle_data_receive_dma+0x1dc>)
 80095f6:	f004 fc30 	bl	800de5a <HAL_UART_Transmit>
		break;
 80095fa:	e083      	b.n	8009704 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_CHECK_SIZE_FLASH:
	  {
        Index = 1;
 80095fc:	4b48      	ldr	r3, [pc, #288]	; (8009720 <handle_data_receive_dma+0x1e0>)
 80095fe:	2201      	movs	r2, #1
 8009600:	701a      	strb	r2, [r3, #0]
        SizeCurrent = 0;
 8009602:	4b48      	ldr	r3, [pc, #288]	; (8009724 <handle_data_receive_dma+0x1e4>)
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
		while( pBuff[Index] != '\n' )
 8009608:	e016      	b.n	8009638 <handle_data_receive_dma+0xf8>
		{
			SizeCurrent = SizeCurrent * 10 + ( pBuff[Index] - 48 );
 800960a:	4b46      	ldr	r3, [pc, #280]	; (8009724 <handle_data_receive_dma+0x1e4>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	461a      	mov	r2, r3
 8009618:	4b41      	ldr	r3, [pc, #260]	; (8009720 <handle_data_receive_dma+0x1e0>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	4619      	mov	r1, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	440b      	add	r3, r1
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4413      	add	r3, r2
 8009626:	3b30      	subs	r3, #48	; 0x30
 8009628:	4a3e      	ldr	r2, [pc, #248]	; (8009724 <handle_data_receive_dma+0x1e4>)
 800962a:	6013      	str	r3, [r2, #0]
			Index++;
 800962c:	4b3c      	ldr	r3, [pc, #240]	; (8009720 <handle_data_receive_dma+0x1e0>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	4b3a      	ldr	r3, [pc, #232]	; (8009720 <handle_data_receive_dma+0x1e0>)
 8009636:	701a      	strb	r2, [r3, #0]
		while( pBuff[Index] != '\n' )
 8009638:	4b39      	ldr	r3, [pc, #228]	; (8009720 <handle_data_receive_dma+0x1e0>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b0a      	cmp	r3, #10
 8009646:	d1e0      	bne.n	800960a <handle_data_receive_dma+0xca>
		}
		if( SizeCurrent > MaxSizeFlash )
 8009648:	4b36      	ldr	r3, [pc, #216]	; (8009724 <handle_data_receive_dma+0x1e4>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b36      	ldr	r3, [pc, #216]	; (8009728 <handle_data_receive_dma+0x1e8>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d906      	bls.n	8009662 <handle_data_receive_dma+0x122>
			HAL_UART_Transmit(USART_UD, OTA_CANCEL_UPDATE, 1, 10);
 8009654:	230a      	movs	r3, #10
 8009656:	2201      	movs	r2, #1
 8009658:	4934      	ldr	r1, [pc, #208]	; (800972c <handle_data_receive_dma+0x1ec>)
 800965a:	4830      	ldr	r0, [pc, #192]	; (800971c <handle_data_receive_dma+0x1dc>)
 800965c:	f004 fbfd 	bl	800de5a <HAL_UART_Transmit>
		else
		{
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
			flag_size_flash = TRUE;
		}
		break;
 8009660:	e050      	b.n	8009704 <handle_data_receive_dma+0x1c4>
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8009662:	230a      	movs	r3, #10
 8009664:	2201      	movs	r2, #1
 8009666:	492c      	ldr	r1, [pc, #176]	; (8009718 <handle_data_receive_dma+0x1d8>)
 8009668:	482c      	ldr	r0, [pc, #176]	; (800971c <handle_data_receive_dma+0x1dc>)
 800966a:	f004 fbf6 	bl	800de5a <HAL_UART_Transmit>
			flag_size_flash = TRUE;
 800966e:	4b30      	ldr	r3, [pc, #192]	; (8009730 <handle_data_receive_dma+0x1f0>)
 8009670:	2201      	movs	r2, #1
 8009672:	701a      	strb	r2, [r3, #0]
		break;
 8009674:	e046      	b.n	8009704 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_UPDATE_START:
	  {
	    if( flag_earse_ok == TRUE )
 8009676:	4b2f      	ldr	r3, [pc, #188]	; (8009734 <handle_data_receive_dma+0x1f4>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d141      	bne.n	8009702 <handle_data_receive_dma+0x1c2>
	    {
	    	flag_earse_ok = FALSE;
 800967e:	4b2d      	ldr	r3, [pc, #180]	; (8009734 <handle_data_receive_dma+0x1f4>)
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
		    HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8009684:	230a      	movs	r3, #10
 8009686:	2201      	movs	r2, #1
 8009688:	4923      	ldr	r1, [pc, #140]	; (8009718 <handle_data_receive_dma+0x1d8>)
 800968a:	4824      	ldr	r0, [pc, #144]	; (800971c <handle_data_receive_dma+0x1dc>)
 800968c:	f004 fbe5 	bl	800de5a <HAL_UART_Transmit>
	    }
		break;
 8009690:	e037      	b.n	8009702 <handle_data_receive_dma+0x1c2>
	  }
	  case ':':
	  {
		if( ( handle_data_receive(pBuff, Size) == STATE_NO_ERRORS ) && flag_ota_update && flag_size_flash )
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	4619      	mov	r1, r3
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f7ff ff42 	bl	8009520 <handle_data_receive>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d11b      	bne.n	80096da <handle_data_receive_dma+0x19a>
 80096a2:	4b1c      	ldr	r3, [pc, #112]	; (8009714 <handle_data_receive_dma+0x1d4>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d017      	beq.n	80096da <handle_data_receive_dma+0x19a>
 80096aa:	4b21      	ldr	r3, [pc, #132]	; (8009730 <handle_data_receive_dma+0x1f0>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d013      	beq.n	80096da <handle_data_receive_dma+0x19a>
		{
	      write_flash_memory();
 80096b2:	f7ff fd4b 	bl	800914c <write_flash_memory>
	      if( !u32AddressWriteFlash )
 80096b6:	4b20      	ldr	r3, [pc, #128]	; (8009738 <handle_data_receive_dma+0x1f8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <handle_data_receive_dma+0x18c>
	    	  HAL_UART_Transmit(USART_UD, OTA_RESEND_DATA, 1, 10);
 80096be:	230a      	movs	r3, #10
 80096c0:	2201      	movs	r2, #1
 80096c2:	491e      	ldr	r1, [pc, #120]	; (800973c <handle_data_receive_dma+0x1fc>)
 80096c4:	4815      	ldr	r0, [pc, #84]	; (800971c <handle_data_receive_dma+0x1dc>)
 80096c6:	f004 fbc8 	bl	800de5a <HAL_UART_Transmit>
	      if( !u32AddressWriteFlash )
 80096ca:	e00d      	b.n	80096e8 <handle_data_receive_dma+0x1a8>
	      else
	    	  HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 80096cc:	230a      	movs	r3, #10
 80096ce:	2201      	movs	r2, #1
 80096d0:	4911      	ldr	r1, [pc, #68]	; (8009718 <handle_data_receive_dma+0x1d8>)
 80096d2:	4812      	ldr	r0, [pc, #72]	; (800971c <handle_data_receive_dma+0x1dc>)
 80096d4:	f004 fbc1 	bl	800de5a <HAL_UART_Transmit>
	      if( !u32AddressWriteFlash )
 80096d8:	e006      	b.n	80096e8 <handle_data_receive_dma+0x1a8>
		}
	    else
		  HAL_UART_Transmit(USART_UD, OTA_RESEND_DATA, 1, 10);
 80096da:	230a      	movs	r3, #10
 80096dc:	2201      	movs	r2, #1
 80096de:	4917      	ldr	r1, [pc, #92]	; (800973c <handle_data_receive_dma+0x1fc>)
 80096e0:	480e      	ldr	r0, [pc, #56]	; (800971c <handle_data_receive_dma+0x1dc>)
 80096e2:	f004 fbba 	bl	800de5a <HAL_UART_Transmit>
		break;
 80096e6:	e00d      	b.n	8009704 <handle_data_receive_dma+0x1c4>
 80096e8:	e00c      	b.n	8009704 <handle_data_receive_dma+0x1c4>
	  }
	  case OTA_UPDATE_FW_COMPLETE:
	  {
		flag_ota_complete = TRUE;
 80096ea:	4b15      	ldr	r3, [pc, #84]	; (8009740 <handle_data_receive_dma+0x200>)
 80096ec:	2201      	movs	r2, #1
 80096ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 80096f0:	230a      	movs	r3, #10
 80096f2:	2201      	movs	r2, #1
 80096f4:	4908      	ldr	r1, [pc, #32]	; (8009718 <handle_data_receive_dma+0x1d8>)
 80096f6:	4809      	ldr	r0, [pc, #36]	; (800971c <handle_data_receive_dma+0x1dc>)
 80096f8:	f004 fbaf 	bl	800de5a <HAL_UART_Transmit>
		break;
 80096fc:	e002      	b.n	8009704 <handle_data_receive_dma+0x1c4>
	  }
	  default:
		break;
 80096fe:	bf00      	nop
 8009700:	e000      	b.n	8009704 <handle_data_receive_dma+0x1c4>
		break;
 8009702:	bf00      	nop
  }
  free(pBuff);
 8009704:	6978      	ldr	r0, [r7, #20]
 8009706:	f005 fbfd 	bl	800ef04 <free>
}
 800970a:	bf00      	nop
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20013a80 	.word	0x20013a80
 8009718:	08011cb8 	.word	0x08011cb8
 800971c:	20013f80 	.word	0x20013f80
 8009720:	20013a88 	.word	0x20013a88
 8009724:	20013a84 	.word	0x20013a84
 8009728:	20000000 	.word	0x20000000
 800972c:	08011cbc 	.word	0x08011cbc
 8009730:	20013a81 	.word	0x20013a81
 8009734:	20013a83 	.word	0x20013a83
 8009738:	20013d64 	.word	0x20013d64
 800973c:	08011cc0 	.word	0x08011cc0
 8009740:	20013a82 	.word	0x20013a82

08009744 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	807b      	strh	r3, [r7, #2]
  if( (huart->Instance == USART1) )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a57      	ldr	r2, [pc, #348]	; (80098b4 <HAL_UARTEx_RxEventCallback+0x170>)
 8009756:	4293      	cmp	r3, r2
 8009758:	f040 80a9 	bne.w	80098ae <HAL_UARTEx_RxEventCallback+0x16a>
  {
	static uint16_t old_pos = 0;
	static uint8_t *ptemp;
	uint16_t i;

	if( g_flag_cplt_dma )
 800975c:	4b56      	ldr	r3, [pc, #344]	; (80098b8 <HAL_UARTEx_RxEventCallback+0x174>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d025      	beq.n	80097b0 <HAL_UARTEx_RxEventCallback+0x6c>
	{
	  g_flag_cplt_dma = FALSE;
 8009764:	4b54      	ldr	r3, [pc, #336]	; (80098b8 <HAL_UARTEx_RxEventCallback+0x174>)
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
	  for (i = 0; i < Size - old_pos; i++)
 800976a:	2300      	movs	r3, #0
 800976c:	81fb      	strh	r3, [r7, #14]
 800976e:	e00c      	b.n	800978a <HAL_UARTEx_RxEventCallback+0x46>
	  {
		  checkamount[i] = u8data_receive_dma[old_pos + i];
 8009770:	4b52      	ldr	r3, [pc, #328]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	89fb      	ldrh	r3, [r7, #14]
 8009778:	441a      	add	r2, r3
 800977a:	89fb      	ldrh	r3, [r7, #14]
 800977c:	4950      	ldr	r1, [pc, #320]	; (80098c0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800977e:	5c89      	ldrb	r1, [r1, r2]
 8009780:	4a50      	ldr	r2, [pc, #320]	; (80098c4 <HAL_UARTEx_RxEventCallback+0x180>)
 8009782:	54d1      	strb	r1, [r2, r3]
	  for (i = 0; i < Size - old_pos; i++)
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	3301      	adds	r3, #1
 8009788:	81fb      	strh	r3, [r7, #14]
 800978a:	89fa      	ldrh	r2, [r7, #14]
 800978c:	887b      	ldrh	r3, [r7, #2]
 800978e:	494b      	ldr	r1, [pc, #300]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 8009790:	8809      	ldrh	r1, [r1, #0]
 8009792:	1a5b      	subs	r3, r3, r1
 8009794:	429a      	cmp	r2, r3
 8009796:	dbeb      	blt.n	8009770 <HAL_UARTEx_RxEventCallback+0x2c>
	  }
	  if( handle_data_hex(checkamount, Size - old_pos) == STATE_ERRORS )
 8009798:	4b48      	ldr	r3, [pc, #288]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	887a      	ldrh	r2, [r7, #2]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	4619      	mov	r1, r3
 80097a4:	4847      	ldr	r0, [pc, #284]	; (80098c4 <HAL_UARTEx_RxEventCallback+0x180>)
 80097a6:	f7ff fddb 	bl	8009360 <handle_data_hex>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d07d      	beq.n	80098ac <HAL_UARTEx_RxEventCallback+0x168>
	    return;
	}

	if (Size != old_pos)
 80097b0:	4b42      	ldr	r3, [pc, #264]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	887a      	ldrh	r2, [r7, #2]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d074      	beq.n	80098a4 <HAL_UARTEx_RxEventCallback+0x160>
	{
	  if (Size > old_pos)
 80097ba:	4b40      	ldr	r3, [pc, #256]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	887a      	ldrh	r2, [r7, #2]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d91e      	bls.n	8009802 <HAL_UARTEx_RxEventCallback+0xbe>
	  {
	    uwNbReceivedChars = Size - old_pos;
 80097c4:	887b      	ldrh	r3, [r7, #2]
 80097c6:	4a3d      	ldr	r2, [pc, #244]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 80097c8:	8812      	ldrh	r2, [r2, #0]
 80097ca:	1a9b      	subs	r3, r3, r2
 80097cc:	461a      	mov	r2, r3
 80097ce:	4b3e      	ldr	r3, [pc, #248]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 80097d0:	601a      	str	r2, [r3, #0]
	    for (i = 0; i < uwNbReceivedChars; i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	81fb      	strh	r3, [r7, #14]
 80097d6:	e00e      	b.n	80097f6 <HAL_UARTEx_RxEventCallback+0xb2>
		{
			pBufferReadyForUser[i] = u8data_receive_dma[old_pos + i];
 80097d8:	4b38      	ldr	r3, [pc, #224]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	89fb      	ldrh	r3, [r7, #14]
 80097e0:	441a      	add	r2, r3
 80097e2:	4b3a      	ldr	r3, [pc, #232]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 80097e4:	6819      	ldr	r1, [r3, #0]
 80097e6:	89fb      	ldrh	r3, [r7, #14]
 80097e8:	440b      	add	r3, r1
 80097ea:	4935      	ldr	r1, [pc, #212]	; (80098c0 <HAL_UARTEx_RxEventCallback+0x17c>)
 80097ec:	5c8a      	ldrb	r2, [r1, r2]
 80097ee:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < uwNbReceivedChars; i++)
 80097f0:	89fb      	ldrh	r3, [r7, #14]
 80097f2:	3301      	adds	r3, #1
 80097f4:	81fb      	strh	r3, [r7, #14]
 80097f6:	89fa      	ldrh	r2, [r7, #14]
 80097f8:	4b33      	ldr	r3, [pc, #204]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d3eb      	bcc.n	80097d8 <HAL_UARTEx_RxEventCallback+0x94>
 8009800:	e03b      	b.n	800987a <HAL_UARTEx_RxEventCallback+0x136>
		}
	  }
	  else
	  {
	    uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 8009802:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800980a:	461a      	mov	r2, r3
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 800980e:	601a      	str	r2, [r3, #0]
		for (i = 0; i < uwNbReceivedChars; i++)
 8009810:	2300      	movs	r3, #0
 8009812:	81fb      	strh	r3, [r7, #14]
 8009814:	e00e      	b.n	8009834 <HAL_UARTEx_RxEventCallback+0xf0>
		{
			pBufferReadyForUser[i] = u8data_receive_dma[old_pos + i];
 8009816:	4b29      	ldr	r3, [pc, #164]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	89fb      	ldrh	r3, [r7, #14]
 800981e:	441a      	add	r2, r3
 8009820:	4b2a      	ldr	r3, [pc, #168]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	440b      	add	r3, r1
 8009828:	4925      	ldr	r1, [pc, #148]	; (80098c0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800982a:	5c8a      	ldrb	r2, [r1, r2]
 800982c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < uwNbReceivedChars; i++)
 800982e:	89fb      	ldrh	r3, [r7, #14]
 8009830:	3301      	adds	r3, #1
 8009832:	81fb      	strh	r3, [r7, #14]
 8009834:	89fa      	ldrh	r2, [r7, #14]
 8009836:	4b24      	ldr	r3, [pc, #144]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d3eb      	bcc.n	8009816 <HAL_UARTEx_RxEventCallback+0xd2>
		}
	   if (Size > 0)
 800983e:	887b      	ldrh	r3, [r7, #2]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01a      	beq.n	800987a <HAL_UARTEx_RxEventCallback+0x136>
	   {
	     for (i = 0; i < Size; i++)
 8009844:	2300      	movs	r3, #0
 8009846:	81fb      	strh	r3, [r7, #14]
 8009848:	e00d      	b.n	8009866 <HAL_UARTEx_RxEventCallback+0x122>
		 {
		   pBufferReadyForUser[uwNbReceivedChars + i] = u8data_receive_dma[i];
 800984a:	89fa      	ldrh	r2, [r7, #14]
 800984c:	4b1f      	ldr	r3, [pc, #124]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 800984e:	6819      	ldr	r1, [r3, #0]
 8009850:	89f8      	ldrh	r0, [r7, #14]
 8009852:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4403      	add	r3, r0
 8009858:	440b      	add	r3, r1
 800985a:	4919      	ldr	r1, [pc, #100]	; (80098c0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800985c:	5c8a      	ldrb	r2, [r1, r2]
 800985e:	701a      	strb	r2, [r3, #0]
	     for (i = 0; i < Size; i++)
 8009860:	89fb      	ldrh	r3, [r7, #14]
 8009862:	3301      	adds	r3, #1
 8009864:	81fb      	strh	r3, [r7, #14]
 8009866:	89fa      	ldrh	r2, [r7, #14]
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	429a      	cmp	r2, r3
 800986c:	d3ed      	bcc.n	800984a <HAL_UARTEx_RxEventCallback+0x106>
		 }
		 uwNbReceivedChars += Size;
 800986e:	887a      	ldrh	r2, [r7, #2]
 8009870:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4413      	add	r3, r2
 8009876:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8009878:	6013      	str	r3, [r2, #0]
	   }
	  }

	  handle_data_receive_dma(huart, pBufferReadyForUser, uwNbReceivedChars);
 800987a:	4b14      	ldr	r3, [pc, #80]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a12      	ldr	r2, [pc, #72]	; (80098c8 <HAL_UARTEx_RxEventCallback+0x184>)
 8009880:	6812      	ldr	r2, [r2, #0]
 8009882:	b292      	uxth	r2, r2
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff fe5a 	bl	8009540 <handle_data_receive_dma>

	  ptemp = pBufferReadyForUser;
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <HAL_UARTEx_RxEventCallback+0x18c>)
 8009892:	6013      	str	r3, [r2, #0]
	  pBufferReadyForUser = pBufferReadyForReception;
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <HAL_UARTEx_RxEventCallback+0x190>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <HAL_UARTEx_RxEventCallback+0x188>)
 800989a:	6013      	str	r3, [r2, #0]
	  pBufferReadyForReception = ptemp;
 800989c:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <HAL_UARTEx_RxEventCallback+0x18c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a0c      	ldr	r2, [pc, #48]	; (80098d4 <HAL_UARTEx_RxEventCallback+0x190>)
 80098a2:	6013      	str	r3, [r2, #0]
   }
   old_pos = Size;
 80098a4:	4a05      	ldr	r2, [pc, #20]	; (80098bc <HAL_UARTEx_RxEventCallback+0x178>)
 80098a6:	887b      	ldrh	r3, [r7, #2]
 80098a8:	8013      	strh	r3, [r2, #0]
 80098aa:	e000      	b.n	80098ae <HAL_UARTEx_RxEventCallback+0x16a>
	    return;
 80098ac:	bf00      	nop
  }
}
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40011000 	.word	0x40011000
 80098b8:	20013aa1 	.word	0x20013aa1
 80098bc:	20013d68 	.word	0x20013d68
 80098c0:	20013ac4 	.word	0x20013ac4
 80098c4:	20013cbc 	.word	0x20013cbc
 80098c8:	20013cf0 	.word	0x20013cf0
 80098cc:	20013cf4 	.word	0x20013cf4
 80098d0:	20013d6c 	.word	0x20013d6c
 80098d4:	20013cf8 	.word	0x20013cf8

080098d8 <HAL_UART_RxCpltCallback>:
volatile float fadc_volts = 0;
volatile float volts_check = 0;
uint32_t u32dutycurrent = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	if(rx_data == '\n')
 80098e0:	4b39      	ldr	r3, [pc, #228]	; (80099c8 <HAL_UART_RxCpltCallback+0xf0>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b0a      	cmp	r3, #10
 80098e6:	d153      	bne.n	8009990 <HAL_UART_RxCpltCallback+0xb8>
	{
		data_buffer[count++]='\n';
 80098e8:	4b38      	ldr	r3, [pc, #224]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	b2d1      	uxtb	r1, r2
 80098f0:	4a36      	ldr	r2, [pc, #216]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 80098f2:	7011      	strb	r1, [r2, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b36      	ldr	r3, [pc, #216]	; (80099d0 <HAL_UART_RxCpltCallback+0xf8>)
 80098f8:	210a      	movs	r1, #10
 80098fa:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(huart,(uint8_t *) data_buffer,count,HAL_MAX_DELAY);
 80098fc:	4b33      	ldr	r3, [pc, #204]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b29a      	uxth	r2, r3
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	4932      	ldr	r1, [pc, #200]	; (80099d0 <HAL_UART_RxCpltCallback+0xf8>)
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f004 faa6 	bl	800de5a <HAL_UART_Transmit>
		strcpy(volts, data_buffer);
 800990e:	4930      	ldr	r1, [pc, #192]	; (80099d0 <HAL_UART_RxCpltCallback+0xf8>)
 8009910:	4830      	ldr	r0, [pc, #192]	; (80099d4 <HAL_UART_RxCpltCallback+0xfc>)
 8009912:	f005 fbf7 	bl	800f104 <strcpy>
		memset(data_buffer, 0, count);
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	2100      	movs	r1, #0
 800991e:	482c      	ldr	r0, [pc, #176]	; (80099d0 <HAL_UART_RxCpltCallback+0xf8>)
 8009920:	f005 faf8 	bl	800ef14 <memset>
		count = 0;
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
		fvolts = atof(volts);
 800992a:	482a      	ldr	r0, [pc, #168]	; (80099d4 <HAL_UART_RxCpltCallback+0xfc>)
 800992c:	f005 fab4 	bl	800ee98 <atof>
 8009930:	ec53 2b10 	vmov	r2, r3, d0
 8009934:	4610      	mov	r0, r2
 8009936:	4619      	mov	r1, r3
 8009938:	f7ff f938 	bl	8008bac <__aeabi_d2f>
 800993c:	4603      	mov	r3, r0
 800993e:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <HAL_UART_RxCpltCallback+0x100>)
 8009940:	6013      	str	r3, [r2, #0]
		fvolts = (fvolts/3.3)*RANGE_PWM;
 8009942:	4b25      	ldr	r3, [pc, #148]	; (80099d8 <HAL_UART_RxCpltCallback+0x100>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fe1e 	bl	8008588 <__aeabi_f2d>
 800994c:	a31a      	add	r3, pc, #104	; (adr r3, 80099b8 <HAL_UART_RxCpltCallback+0xe0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7fe ff9b 	bl	800888c <__aeabi_ddiv>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4610      	mov	r0, r2
 800995c:	4619      	mov	r1, r3
 800995e:	a318      	add	r3, pc, #96	; (adr r3, 80099c0 <HAL_UART_RxCpltCallback+0xe8>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7fe fe68 	bl	8008638 <__aeabi_dmul>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	f7ff f91c 	bl	8008bac <__aeabi_d2f>
 8009974:	4603      	mov	r3, r0
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <HAL_UART_RxCpltCallback+0x100>)
 8009978:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 800997a:	4b17      	ldr	r3, [pc, #92]	; (80099d8 <HAL_UART_RxCpltCallback+0x100>)
 800997c:	edd3 7a00 	vldr	s15, [r3]
 8009980:	4b16      	ldr	r3, [pc, #88]	; (80099dc <HAL_UART_RxCpltCallback+0x104>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009988:	ee17 2a90 	vmov	r2, s15
 800998c:	635a      	str	r2, [r3, #52]	; 0x34
 800998e:	e00a      	b.n	80099a6 <HAL_UART_RxCpltCallback+0xce>
	}
	else
	{
		data_buffer[count++] = rx_data;
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	b2d1      	uxtb	r1, r2
 8009998:	4a0c      	ldr	r2, [pc, #48]	; (80099cc <HAL_UART_RxCpltCallback+0xf4>)
 800999a:	7011      	strb	r1, [r2, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <HAL_UART_RxCpltCallback+0xf0>)
 80099a0:	7819      	ldrb	r1, [r3, #0]
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <HAL_UART_RxCpltCallback+0xf8>)
 80099a4:	5499      	strb	r1, [r3, r2]
	}
	HAL_UART_Receive_IT(&huart2,&rx_data,1);
 80099a6:	2201      	movs	r2, #1
 80099a8:	4907      	ldr	r1, [pc, #28]	; (80099c8 <HAL_UART_RxCpltCallback+0xf0>)
 80099aa:	480d      	ldr	r0, [pc, #52]	; (80099e0 <HAL_UART_RxCpltCallback+0x108>)
 80099ac:	f004 fae7 	bl	800df7e <HAL_UART_Receive_IT>
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	66666666 	.word	0x66666666
 80099bc:	400a6666 	.word	0x400a6666
 80099c0:	00000000 	.word	0x00000000
 80099c4:	40d193c0 	.word	0x40d193c0
 80099c8:	20014018 	.word	0x20014018
 80099cc:	20014019 	.word	0x20014019
 80099d0:	20014008 	.word	0x20014008
 80099d4:	20014010 	.word	0x20014010
 80099d8:	20014020 	.word	0x20014020
 80099dc:	20013f38 	.word	0x20013f38
 80099e0:	20013fc4 	.word	0x20013fc4
 80099e4:	00000000 	.word	0x00000000

080099e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //16Khz timer
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
   if( htim->Instance == TIM3 )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1a      	ldr	r2, [pc, #104]	; (8009a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d103      	bne.n	8009a02 <HAL_TIM_PeriodElapsedCallback+0x1a>
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80099fa:	2101      	movs	r1, #1
 80099fc:	4819      	ldr	r0, [pc, #100]	; (8009a64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80099fe:	f002 fafe 	bl	800bffe <HAL_GPIO_TogglePin>
   if( htim->Instance == TIM6 )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d11c      	bne.n	8009a46 <HAL_TIM_PeriodElapsedCallback+0x5e>
   {
	   volts_check = adc_buf[0]*1.0/4095.0 * 3.3;
 8009a0c:	4b17      	ldr	r3, [pc, #92]	; (8009a6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fda6 	bl	8008564 <__aeabi_i2d>
 8009a18:	a30d      	add	r3, pc, #52	; (adr r3, 8009a50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	f7fe ff35 	bl	800888c <__aeabi_ddiv>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4610      	mov	r0, r2
 8009a28:	4619      	mov	r1, r3
 8009a2a:	a30b      	add	r3, pc, #44	; (adr r3, 8009a58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7fe fe02 	bl	8008638 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	f7ff f8b6 	bl	8008bac <__aeabi_d2f>
 8009a40:	4603      	mov	r3, r0
 8009a42:	4a0b      	ldr	r2, [pc, #44]	; (8009a70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8009a44:	6013      	str	r3, [r2, #0]
   }
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	00000000 	.word	0x00000000
 8009a54:	40affe00 	.word	0x40affe00
 8009a58:	66666666 	.word	0x66666666
 8009a5c:	400a6666 	.word	0x400a6666
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40020800 	.word	0x40020800
 8009a68:	40001000 	.word	0x40001000
 8009a6c:	2001401c 	.word	0x2001401c
 8009a70:	20014024 	.word	0x20014024

08009a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	; 0x28
 8009a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a7a:	f000 ff6b 	bl	800a954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a7e:	f000 f86f 	bl	8009b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009a82:	f000 fb9b 	bl	800a1bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8009a86:	f000 f93d 	bl	8009d04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009a8a:	f000 f9b3 	bl	8009df4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009a8e:	f000 f9ff 	bl	8009e90 <MX_TIM4_Init>
  MX_DMA_Init();
 8009a92:	f000 fb73 	bl	800a17c <MX_DMA_Init>
  MX_TIM8_Init();
 8009a96:	f000 faa7 	bl	8009fe8 <MX_TIM8_Init>
  MX_ADC1_Init();
 8009a9a:	f000 f8d3 	bl	8009c44 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8009a9e:	f000 fb43 	bl	800a128 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8009aa2:	f000 fa6b 	bl	8009f7c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8009aa6:	4822      	ldr	r0, [pc, #136]	; (8009b30 <main+0xbc>)
 8009aa8:	f003 f94c 	bl	800cd44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8009aac:	4821      	ldr	r0, [pc, #132]	; (8009b34 <main+0xc0>)
 8009aae:	f003 f949 	bl	800cd44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4820      	ldr	r0, [pc, #128]	; (8009b38 <main+0xc4>)
 8009ab6:	f003 fa0f 	bl	800ced8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8009aba:	2100      	movs	r1, #0
 8009abc:	481f      	ldr	r0, [pc, #124]	; (8009b3c <main+0xc8>)
 8009abe:	f003 fa0b 	bl	800ced8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	481e      	ldr	r0, [pc, #120]	; (8009b40 <main+0xcc>)
 8009ac6:	f003 fa07 	bl	800ced8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8009aca:	2201      	movs	r2, #1
 8009acc:	491d      	ldr	r1, [pc, #116]	; (8009b44 <main+0xd0>)
 8009ace:	481e      	ldr	r0, [pc, #120]	; (8009b48 <main+0xd4>)
 8009ad0:	f004 fa55 	bl	800df7e <HAL_UART_Receive_IT>
  fvolts = (1.0/3.3)*RANGE_PWM;
 8009ad4:	4b1d      	ldr	r3, [pc, #116]	; (8009b4c <main+0xd8>)
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	; (8009b50 <main+0xdc>)
 8009ad8:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <main+0xc4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 8009ae2:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <main+0xd8>)
 8009ae4:	edd3 7a00 	vldr	s15, [r3]
 8009ae8:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <main+0xcc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af0:	ee17 2a90 	vmov	r2, s15
 8009af4:	635a      	str	r2, [r3, #52]	; 0x34

  #if defined TEST_ADC && ( TEST_ADC_DMA == 1U )
  	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);
 8009af6:	2202      	movs	r2, #2
 8009af8:	4916      	ldr	r1, [pc, #88]	; (8009b54 <main+0xe0>)
 8009afa:	4817      	ldr	r0, [pc, #92]	; (8009b58 <main+0xe4>)
 8009afc:	f000 ffe0 	bl	800aac0 <HAL_ADC_Start_DMA>
  	HAL_ADC_Start_IT(&hadc1);
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  #endif


  uint8_t buffer[10] = { 0 };
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]
 8009b04:	f107 0320 	add.w	r3, r7, #32
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	809a      	strh	r2, [r3, #4]
  memset(buffer, 0, 10);
 8009b0e:	f107 031c 	add.w	r3, r7, #28
 8009b12:	220a      	movs	r2, #10
 8009b14:	2100      	movs	r1, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f005 f9fc 	bl	800ef14 <memset>
  cbuffer_t cb;
  cb_init(&cb, buffer, 10);
 8009b1c:	f107 011c 	add.w	r1, r7, #28
 8009b20:	1d3b      	adds	r3, r7, #4
 8009b22:	220a      	movs	r2, #10
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fa49 	bl	8008fbc <cb_init>

  checkupdate[0];
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <main+0xe8>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009b2e:	e7fe      	b.n	8009b2e <main+0xba>
 8009b30:	20013e60 	.word	0x20013e60
 8009b34:	20013ef0 	.word	0x20013ef0
 8009b38:	20013ea8 	.word	0x20013ea8
 8009b3c:	20013e18 	.word	0x20013e18
 8009b40:	20013f38 	.word	0x20013f38
 8009b44:	20014018 	.word	0x20014018
 8009b48:	20013fc4 	.word	0x20013fc4
 8009b4c:	20014020 	.word	0x20014020
 8009b50:	45aa71f0 	.word	0x45aa71f0
 8009b54:	2001401c 	.word	0x2001401c
 8009b58:	20013d70 	.word	0x20013d70
 8009b5c:	20000004 	.word	0x20000004

08009b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b094      	sub	sp, #80	; 0x50
 8009b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b66:	f107 031c 	add.w	r3, r7, #28
 8009b6a:	2234      	movs	r2, #52	; 0x34
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f005 f9d0 	bl	800ef14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b84:	2300      	movs	r3, #0
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	4b2c      	ldr	r3, [pc, #176]	; (8009c3c <SystemClock_Config+0xdc>)
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8c:	4a2b      	ldr	r2, [pc, #172]	; (8009c3c <SystemClock_Config+0xdc>)
 8009b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b92:	6413      	str	r3, [r2, #64]	; 0x40
 8009b94:	4b29      	ldr	r3, [pc, #164]	; (8009c3c <SystemClock_Config+0xdc>)
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9c:	607b      	str	r3, [r7, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4b26      	ldr	r3, [pc, #152]	; (8009c40 <SystemClock_Config+0xe0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a25      	ldr	r2, [pc, #148]	; (8009c40 <SystemClock_Config+0xe0>)
 8009baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	4b23      	ldr	r3, [pc, #140]	; (8009c40 <SystemClock_Config+0xe0>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8009bd4:	23b4      	movs	r3, #180	; 0xb4
 8009bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009bdc:	2302      	movs	r3, #2
 8009bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009be0:	2302      	movs	r3, #2
 8009be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009be4:	f107 031c 	add.w	r3, r7, #28
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 fdbd 	bl	800c768 <HAL_RCC_OscConfig>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009bf4:	f000 fb40 	bl	800a278 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009bf8:	f002 fa1c 	bl	800c034 <HAL_PWREx_EnableOverDrive>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009c02:	f000 fb39 	bl	800a278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c06:	230f      	movs	r3, #15
 8009c08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c1e:	f107 0308 	add.w	r3, r7, #8
 8009c22:	2105      	movs	r1, #5
 8009c24:	4618      	mov	r0, r3
 8009c26:	f002 fa55 	bl	800c0d4 <HAL_RCC_ClockConfig>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8009c30:	f000 fb22 	bl	800a278 <Error_Handler>
  }
}
 8009c34:	bf00      	nop
 8009c36:	3750      	adds	r7, #80	; 0x50
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	40007000 	.word	0x40007000

08009c44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009c56:	4b28      	ldr	r3, [pc, #160]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c58:	4a28      	ldr	r2, [pc, #160]	; (8009cfc <MX_ADC1_Init+0xb8>)
 8009c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009c5c:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009c6a:	4b23      	ldr	r3, [pc, #140]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009c70:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009c76:	4b20      	ldr	r3, [pc, #128]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009c7e:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009c84:	4b1c      	ldr	r3, [pc, #112]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c86:	4a1e      	ldr	r2, [pc, #120]	; (8009d00 <MX_ADC1_Init+0xbc>)
 8009c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009c8a:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8009c90:	4b19      	ldr	r3, [pc, #100]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c92:	2202      	movs	r2, #2
 8009c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009c96:	4b18      	ldr	r3, [pc, #96]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009c9e:	4b16      	ldr	r3, [pc, #88]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009ca4:	4814      	ldr	r0, [pc, #80]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009ca6:	f000 fec7 	bl	800aa38 <HAL_ADC_Init>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009cb0:	f000 fae2 	bl	800a278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8009cbc:	2306      	movs	r3, #6
 8009cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	480c      	ldr	r0, [pc, #48]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009cc6:	f001 f829 	bl	800ad1c <HAL_ADC_ConfigChannel>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009cd0:	f000 fad2 	bl	800a278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009cd8:	2302      	movs	r3, #2
 8009cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cdc:	463b      	mov	r3, r7
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4805      	ldr	r0, [pc, #20]	; (8009cf8 <MX_ADC1_Init+0xb4>)
 8009ce2:	f001 f81b 	bl	800ad1c <HAL_ADC_ConfigChannel>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009cec:	f000 fac4 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20013d70 	.word	0x20013d70
 8009cfc:	40012000 	.word	0x40012000
 8009d00:	0f000001 	.word	0x0f000001

08009d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	605a      	str	r2, [r3, #4]
 8009d14:	609a      	str	r2, [r3, #8]
 8009d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d18:	f107 0320 	add.w	r3, r7, #32
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d22:	1d3b      	adds	r3, r7, #4
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	605a      	str	r2, [r3, #4]
 8009d2a:	609a      	str	r2, [r3, #8]
 8009d2c:	60da      	str	r2, [r3, #12]
 8009d2e:	611a      	str	r2, [r3, #16]
 8009d30:	615a      	str	r2, [r3, #20]
 8009d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009d34:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8009d3c:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d3e:	f242 3227 	movw	r2, #8999	; 0x2327
 8009d42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d44:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8009d4a:	4b29      	ldr	r3, [pc, #164]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d4c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009d50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d52:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009d58:	4b25      	ldr	r3, [pc, #148]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d5a:	2280      	movs	r2, #128	; 0x80
 8009d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009d5e:	4824      	ldr	r0, [pc, #144]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d60:	f002 ffa0 	bl	800cca4 <HAL_TIM_Base_Init>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8009d6a:	f000 fa85 	bl	800a278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d78:	4619      	mov	r1, r3
 8009d7a:	481d      	ldr	r0, [pc, #116]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d7c:	f003 fb3e 	bl	800d3fc <HAL_TIM_ConfigClockSource>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8009d86:	f000 fa77 	bl	800a278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009d8a:	4819      	ldr	r0, [pc, #100]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009d8c:	f003 f84a 	bl	800ce24 <HAL_TIM_PWM_Init>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8009d96:	f000 fa6f 	bl	800a278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009da2:	f107 0320 	add.w	r3, r7, #32
 8009da6:	4619      	mov	r1, r3
 8009da8:	4811      	ldr	r0, [pc, #68]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009daa:	f003 ff27 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8009db4:	f000 fa60 	bl	800a278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009db8:	2360      	movs	r3, #96	; 0x60
 8009dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000-1;
 8009dbc:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009dca:	1d3b      	adds	r3, r7, #4
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4807      	ldr	r0, [pc, #28]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009dd2:	f003 fa51 	bl	800d278 <HAL_TIM_PWM_ConfigChannel>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009ddc:	f000 fa4c 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009de0:	4803      	ldr	r0, [pc, #12]	; (8009df0 <MX_TIM2_Init+0xec>)
 8009de2:	f000 fb7d 	bl	800a4e0 <HAL_TIM_MspPostInit>

}
 8009de6:	bf00      	nop
 8009de8:	3738      	adds	r7, #56	; 0x38
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20013e18 	.word	0x20013e18

08009df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	609a      	str	r2, [r3, #8]
 8009e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e08:	463b      	mov	r3, r7
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009e10:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e12:	4a1e      	ldr	r2, [pc, #120]	; (8009e8c <MX_TIM3_Init+0x98>)
 8009e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 8009e16:	4b1c      	ldr	r3, [pc, #112]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e18:	f242 3227 	movw	r2, #8999	; 0x2327
 8009e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8009e24:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e26:	f242 720f 	movw	r2, #9999	; 0x270f
 8009e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e2c:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009e38:	4813      	ldr	r0, [pc, #76]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e3a:	f002 ff33 	bl	800cca4 <HAL_TIM_Base_Init>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8009e44:	f000 fa18 	bl	800a278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009e4e:	f107 0308 	add.w	r3, r7, #8
 8009e52:	4619      	mov	r1, r3
 8009e54:	480c      	ldr	r0, [pc, #48]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e56:	f003 fad1 	bl	800d3fc <HAL_TIM_ConfigClockSource>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8009e60:	f000 fa0a 	bl	800a278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4805      	ldr	r0, [pc, #20]	; (8009e88 <MX_TIM3_Init+0x94>)
 8009e72:	f003 fec3 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8009e7c:	f000 f9fc 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009e80:	bf00      	nop
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	20013e60 	.word	0x20013e60
 8009e8c:	40000400 	.word	0x40000400

08009e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08e      	sub	sp, #56	; 0x38
 8009e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
 8009ea0:	609a      	str	r2, [r3, #8]
 8009ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ea4:	f107 0320 	add.w	r3, r7, #32
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009eae:	1d3b      	adds	r3, r7, #4
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	605a      	str	r2, [r3, #4]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	611a      	str	r2, [r3, #16]
 8009ebc:	615a      	str	r2, [r3, #20]
 8009ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009ec0:	4b2c      	ldr	r3, [pc, #176]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ec2:	4a2d      	ldr	r2, [pc, #180]	; (8009f78 <MX_TIM4_Init+0xe8>)
 8009ec4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8009ec6:	4b2b      	ldr	r3, [pc, #172]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ec8:	2208      	movs	r2, #8
 8009eca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ecc:	4b29      	ldr	r3, [pc, #164]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8009ed2:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ed4:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ed8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009eda:	4b26      	ldr	r3, [pc, #152]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009ee0:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ee2:	2280      	movs	r2, #128	; 0x80
 8009ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009ee6:	4823      	ldr	r0, [pc, #140]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009ee8:	f002 fedc 	bl	800cca4 <HAL_TIM_Base_Init>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8009ef2:	f000 f9c1 	bl	800a278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f00:	4619      	mov	r1, r3
 8009f02:	481c      	ldr	r0, [pc, #112]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009f04:	f003 fa7a 	bl	800d3fc <HAL_TIM_ConfigClockSource>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8009f0e:	f000 f9b3 	bl	800a278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009f12:	4818      	ldr	r0, [pc, #96]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009f14:	f002 ff86 	bl	800ce24 <HAL_TIM_PWM_Init>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8009f1e:	f000 f9ab 	bl	800a278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f22:	2300      	movs	r3, #0
 8009f24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009f2a:	f107 0320 	add.w	r3, r7, #32
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4810      	ldr	r0, [pc, #64]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009f32:	f003 fe63 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8009f3c:	f000 f99c 	bl	800a278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f40:	2360      	movs	r3, #96	; 0x60
 8009f42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	2200      	movs	r2, #0
 8009f54:	4619      	mov	r1, r3
 8009f56:	4807      	ldr	r0, [pc, #28]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009f58:	f003 f98e 	bl	800d278 <HAL_TIM_PWM_ConfigChannel>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8009f62:	f000 f989 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009f66:	4803      	ldr	r0, [pc, #12]	; (8009f74 <MX_TIM4_Init+0xe4>)
 8009f68:	f000 faba 	bl	800a4e0 <HAL_TIM_MspPostInit>

}
 8009f6c:	bf00      	nop
 8009f6e:	3738      	adds	r7, #56	; 0x38
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20013ea8 	.word	0x20013ea8
 8009f78:	40000800 	.word	0x40000800

08009f7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f82:	463b      	mov	r3, r7
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009f8a:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009f8c:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <MX_TIM6_Init+0x68>)
 8009f8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8009f90:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009f92:	f242 3227 	movw	r2, #8999	; 0x2327
 8009f96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8009f9e:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009fa4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009fa6:	4b0e      	ldr	r3, [pc, #56]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009fa8:	2280      	movs	r2, #128	; 0x80
 8009faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009fac:	480c      	ldr	r0, [pc, #48]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009fae:	f002 fe79 	bl	800cca4 <HAL_TIM_Base_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8009fb8:	f000 f95e 	bl	800a278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4805      	ldr	r0, [pc, #20]	; (8009fe0 <MX_TIM6_Init+0x64>)
 8009fca:	f003 fe17 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009fd4:	f000 f950 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20013ef0 	.word	0x20013ef0
 8009fe4:	40001000 	.word	0x40001000

08009fe8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b096      	sub	sp, #88	; 0x58
 8009fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ffc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	605a      	str	r2, [r3, #4]
 800a010:	609a      	str	r2, [r3, #8]
 800a012:	60da      	str	r2, [r3, #12]
 800a014:	611a      	str	r2, [r3, #16]
 800a016:	615a      	str	r2, [r3, #20]
 800a018:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a01a:	1d3b      	adds	r3, r7, #4
 800a01c:	2220      	movs	r2, #32
 800a01e:	2100      	movs	r1, #0
 800a020:	4618      	mov	r0, r3
 800a022:	f004 ff77 	bl	800ef14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a026:	4b3e      	ldr	r3, [pc, #248]	; (800a120 <MX_TIM8_Init+0x138>)
 800a028:	4a3e      	ldr	r2, [pc, #248]	; (800a124 <MX_TIM8_Init+0x13c>)
 800a02a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a02c:	4b3c      	ldr	r3, [pc, #240]	; (800a120 <MX_TIM8_Init+0x138>)
 800a02e:	2200      	movs	r2, #0
 800a030:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a032:	4b3b      	ldr	r3, [pc, #236]	; (800a120 <MX_TIM8_Init+0x138>)
 800a034:	2200      	movs	r2, #0
 800a036:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 18000-1;
 800a038:	4b39      	ldr	r3, [pc, #228]	; (800a120 <MX_TIM8_Init+0x138>)
 800a03a:	f244 624f 	movw	r2, #17999	; 0x464f
 800a03e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a040:	4b37      	ldr	r3, [pc, #220]	; (800a120 <MX_TIM8_Init+0x138>)
 800a042:	2200      	movs	r2, #0
 800a044:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a046:	4b36      	ldr	r3, [pc, #216]	; (800a120 <MX_TIM8_Init+0x138>)
 800a048:	2200      	movs	r2, #0
 800a04a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a04c:	4b34      	ldr	r3, [pc, #208]	; (800a120 <MX_TIM8_Init+0x138>)
 800a04e:	2280      	movs	r2, #128	; 0x80
 800a050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a052:	4833      	ldr	r0, [pc, #204]	; (800a120 <MX_TIM8_Init+0x138>)
 800a054:	f002 fe26 	bl	800cca4 <HAL_TIM_Base_Init>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800a05e:	f000 f90b 	bl	800a278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a066:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a068:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a06c:	4619      	mov	r1, r3
 800a06e:	482c      	ldr	r0, [pc, #176]	; (800a120 <MX_TIM8_Init+0x138>)
 800a070:	f003 f9c4 	bl	800d3fc <HAL_TIM_ConfigClockSource>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800a07a:	f000 f8fd 	bl	800a278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a07e:	4828      	ldr	r0, [pc, #160]	; (800a120 <MX_TIM8_Init+0x138>)
 800a080:	f002 fed0 	bl	800ce24 <HAL_TIM_PWM_Init>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800a08a:	f000 f8f5 	bl	800a278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a08e:	2300      	movs	r3, #0
 800a090:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a092:	2300      	movs	r3, #0
 800a094:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a096:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a09a:	4619      	mov	r1, r3
 800a09c:	4820      	ldr	r0, [pc, #128]	; (800a120 <MX_TIM8_Init+0x138>)
 800a09e:	f003 fdad 	bl	800dbfc <HAL_TIMEx_MasterConfigSynchronization>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800a0a8:	f000 f8e6 	bl	800a278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a0ac:	2360      	movs	r3, #96	; 0x60
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a0c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4813      	ldr	r0, [pc, #76]	; (800a120 <MX_TIM8_Init+0x138>)
 800a0d2:	f003 f8d1 	bl	800d278 <HAL_TIM_PWM_ConfigChannel>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800a0dc:	f000 f8cc 	bl	800a278 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a0f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a0fe:	1d3b      	adds	r3, r7, #4
 800a100:	4619      	mov	r1, r3
 800a102:	4807      	ldr	r0, [pc, #28]	; (800a120 <MX_TIM8_Init+0x138>)
 800a104:	f003 fdf6 	bl	800dcf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800a10e:	f000 f8b3 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a112:	4803      	ldr	r0, [pc, #12]	; (800a120 <MX_TIM8_Init+0x138>)
 800a114:	f000 f9e4 	bl	800a4e0 <HAL_TIM_MspPostInit>

}
 800a118:	bf00      	nop
 800a11a:	3758      	adds	r7, #88	; 0x58
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20013f38 	.word	0x20013f38
 800a124:	40010400 	.word	0x40010400

0800a128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a12c:	4b11      	ldr	r3, [pc, #68]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a12e:	4a12      	ldr	r2, [pc, #72]	; (800a178 <MX_USART2_UART_Init+0x50>)
 800a130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a132:	4b10      	ldr	r3, [pc, #64]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a142:	2200      	movs	r2, #0
 800a144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a146:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a148:	2200      	movs	r2, #0
 800a14a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a14e:	220c      	movs	r2, #12
 800a150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a154:	2200      	movs	r2, #0
 800a156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a15e:	4805      	ldr	r0, [pc, #20]	; (800a174 <MX_USART2_UART_Init+0x4c>)
 800a160:	f003 fe2e 	bl	800ddc0 <HAL_UART_Init>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a16a:	f000 f885 	bl	800a278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20013fc4 	.word	0x20013fc4
 800a178:	40004400 	.word	0x40004400

0800a17c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <MX_DMA_Init+0x3c>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	4a0b      	ldr	r2, [pc, #44]	; (800a1b8 <MX_DMA_Init+0x3c>)
 800a18c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a190:	6313      	str	r3, [r2, #48]	; 0x30
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <MX_DMA_Init+0x3c>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 14, 0);
 800a19e:	2200      	movs	r2, #0
 800a1a0:	210e      	movs	r1, #14
 800a1a2:	2038      	movs	r0, #56	; 0x38
 800a1a4:	f001 f945 	bl	800b432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a1a8:	2038      	movs	r0, #56	; 0x38
 800a1aa:	f001 f95e 	bl	800b46a <HAL_NVIC_EnableIRQ>

}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40023800 	.word	0x40023800

0800a1bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c2:	f107 0314 	add.w	r3, r7, #20
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	605a      	str	r2, [r3, #4]
 800a1cc:	609a      	str	r2, [r3, #8]
 800a1ce:	60da      	str	r2, [r3, #12]
 800a1d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	4b26      	ldr	r3, [pc, #152]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	4a25      	ldr	r2, [pc, #148]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1e2:	4b23      	ldr	r3, [pc, #140]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	4b1f      	ldr	r3, [pc, #124]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f6:	4a1e      	ldr	r2, [pc, #120]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a1f8:	f043 0304 	orr.w	r3, r3, #4
 800a1fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a1fe:	4b1c      	ldr	r3, [pc, #112]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
 800a20e:	4b18      	ldr	r3, [pc, #96]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a212:	4a17      	ldr	r2, [pc, #92]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a214:	f043 0301 	orr.w	r3, r3, #1
 800a218:	6313      	str	r3, [r2, #48]	; 0x30
 800a21a:	4b15      	ldr	r3, [pc, #84]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	60bb      	str	r3, [r7, #8]
 800a224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a226:	2300      	movs	r3, #0
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	4b11      	ldr	r3, [pc, #68]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22e:	4a10      	ldr	r2, [pc, #64]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a230:	f043 0302 	orr.w	r3, r3, #2
 800a234:	6313      	str	r3, [r2, #48]	; 0x30
 800a236:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <MX_GPIO_Init+0xb4>)
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	607b      	str	r3, [r7, #4]
 800a240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800a242:	2200      	movs	r2, #0
 800a244:	2101      	movs	r1, #1
 800a246:	480b      	ldr	r0, [pc, #44]	; (800a274 <MX_GPIO_Init+0xb8>)
 800a248:	f001 fec0 	bl	800bfcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800a24c:	2301      	movs	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a250:	2301      	movs	r3, #1
 800a252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a258:	2302      	movs	r3, #2
 800a25a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4619      	mov	r1, r3
 800a262:	4804      	ldr	r0, [pc, #16]	; (800a274 <MX_GPIO_Init+0xb8>)
 800a264:	f001 fd1e 	bl	800bca4 <HAL_GPIO_Init>

}
 800a268:	bf00      	nop
 800a26a:	3728      	adds	r7, #40	; 0x28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	40023800 	.word	0x40023800
 800a274:	40020800 	.word	0x40020800

0800a278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a27c:	b672      	cpsid	i
}
 800a27e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a280:	e7fe      	b.n	800a280 <Error_Handler+0x8>
	...

0800a284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a28a:	2300      	movs	r3, #0
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a292:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a298:	6453      	str	r3, [r2, #68]	; 0x44
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a2:	607b      	str	r3, [r7, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	603b      	str	r3, [r7, #0]
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	4a08      	ldr	r2, [pc, #32]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2b6:	4b06      	ldr	r3, [pc, #24]	; (800a2d0 <HAL_MspInit+0x4c>)
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	40023800 	.word	0x40023800

0800a2d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a2f      	ldr	r2, [pc, #188]	; (800a3b0 <HAL_ADC_MspInit+0xdc>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d157      	bne.n	800a3a6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	4b2e      	ldr	r3, [pc, #184]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	4a2d      	ldr	r2, [pc, #180]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a304:	6453      	str	r3, [r2, #68]	; 0x44
 800a306:	4b2b      	ldr	r3, [pc, #172]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	4b27      	ldr	r3, [pc, #156]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31a:	4a26      	ldr	r2, [pc, #152]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	6313      	str	r3, [r2, #48]	; 0x30
 800a322:	4b24      	ldr	r3, [pc, #144]	; (800a3b4 <HAL_ADC_MspInit+0xe0>)
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a32e:	2303      	movs	r3, #3
 800a330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a332:	2303      	movs	r3, #3
 800a334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a33a:	f107 0314 	add.w	r3, r7, #20
 800a33e:	4619      	mov	r1, r3
 800a340:	481d      	ldr	r0, [pc, #116]	; (800a3b8 <HAL_ADC_MspInit+0xe4>)
 800a342:	f001 fcaf 	bl	800bca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a346:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a348:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <HAL_ADC_MspInit+0xec>)
 800a34a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a34c:	4b1b      	ldr	r3, [pc, #108]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a352:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a354:	2200      	movs	r2, #0
 800a356:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a358:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a35e:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a364:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a36c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a36e:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a374:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a376:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a37c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a380:	2200      	movs	r2, #0
 800a382:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a384:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a386:	2200      	movs	r2, #0
 800a388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a38a:	480c      	ldr	r0, [pc, #48]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a38c:	f001 f888 	bl	800b4a0 <HAL_DMA_Init>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800a396:	f7ff ff6f 	bl	800a278 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a07      	ldr	r2, [pc, #28]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
 800a3a0:	4a06      	ldr	r2, [pc, #24]	; (800a3bc <HAL_ADC_MspInit+0xe8>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a3a6:	bf00      	nop
 800a3a8:	3728      	adds	r7, #40	; 0x28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	40012000 	.word	0x40012000
 800a3b4:	40023800 	.word	0x40023800
 800a3b8:	40020000 	.word	0x40020000
 800a3bc:	20013db8 	.word	0x20013db8
 800a3c0:	40026410 	.word	0x40026410

0800a3c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d4:	d116      	bne.n	800a404 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	4b3c      	ldr	r3, [pc, #240]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	4a3b      	ldr	r2, [pc, #236]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a3e6:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	201c      	movs	r0, #28
 800a3f8:	f001 f81b 	bl	800b432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a3fc:	201c      	movs	r0, #28
 800a3fe:	f001 f834 	bl	800b46a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a402:	e05e      	b.n	800a4c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a31      	ldr	r2, [pc, #196]	; (800a4d0 <HAL_TIM_Base_MspInit+0x10c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d116      	bne.n	800a43c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	4a2d      	ldr	r2, [pc, #180]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	6413      	str	r3, [r2, #64]	; 0x40
 800a41e:	4b2b      	ldr	r3, [pc, #172]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	61bb      	str	r3, [r7, #24]
 800a428:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	201d      	movs	r0, #29
 800a430:	f000 ffff 	bl	800b432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a434:	201d      	movs	r0, #29
 800a436:	f001 f818 	bl	800b46a <HAL_NVIC_EnableIRQ>
}
 800a43a:	e042      	b.n	800a4c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a24      	ldr	r2, [pc, #144]	; (800a4d4 <HAL_TIM_Base_MspInit+0x110>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d10e      	bne.n	800a464 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	4b20      	ldr	r3, [pc, #128]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	4a1f      	ldr	r2, [pc, #124]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a450:	f043 0304 	orr.w	r3, r3, #4
 800a454:	6413      	str	r3, [r2, #64]	; 0x40
 800a456:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	697b      	ldr	r3, [r7, #20]
}
 800a462:	e02e      	b.n	800a4c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM6)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a1b      	ldr	r2, [pc, #108]	; (800a4d8 <HAL_TIM_Base_MspInit+0x114>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d116      	bne.n	800a49c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a46e:	2300      	movs	r3, #0
 800a470:	613b      	str	r3, [r7, #16]
 800a472:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	4a15      	ldr	r2, [pc, #84]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a478:	f043 0310 	orr.w	r3, r3, #16
 800a47c:	6413      	str	r3, [r2, #64]	; 0x40
 800a47e:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f003 0310 	and.w	r3, r3, #16
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a48a:	2200      	movs	r2, #0
 800a48c:	2100      	movs	r1, #0
 800a48e:	2036      	movs	r0, #54	; 0x36
 800a490:	f000 ffcf 	bl	800b432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a494:	2036      	movs	r0, #54	; 0x36
 800a496:	f000 ffe8 	bl	800b46a <HAL_NVIC_EnableIRQ>
}
 800a49a:	e012      	b.n	800a4c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM8)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0e      	ldr	r2, [pc, #56]	; (800a4dc <HAL_TIM_Base_MspInit+0x118>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10d      	bne.n	800a4c2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ae:	4a07      	ldr	r2, [pc, #28]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a4b0:	f043 0302 	orr.w	r3, r3, #2
 800a4b4:	6453      	str	r3, [r2, #68]	; 0x44
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_TIM_Base_MspInit+0x108>)
 800a4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40000400 	.word	0x40000400
 800a4d4:	40000800 	.word	0x40000800
 800a4d8:	40001000 	.word	0x40001000
 800a4dc:	40010400 	.word	0x40010400

0800a4e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	609a      	str	r2, [r3, #8]
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a500:	d11e      	bne.n	800a540 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	4b34      	ldr	r3, [pc, #208]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	4a33      	ldr	r2, [pc, #204]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a50c:	f043 0301 	orr.w	r3, r3, #1
 800a510:	6313      	str	r3, [r2, #48]	; 0x30
 800a512:	4b31      	ldr	r3, [pc, #196]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a51e:	2320      	movs	r3, #32
 800a520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a522:	2302      	movs	r3, #2
 800a524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a526:	2300      	movs	r3, #0
 800a528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52a:	2300      	movs	r3, #0
 800a52c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a52e:	2301      	movs	r3, #1
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a532:	f107 0314 	add.w	r3, r7, #20
 800a536:	4619      	mov	r1, r3
 800a538:	4828      	ldr	r0, [pc, #160]	; (800a5dc <HAL_TIM_MspPostInit+0xfc>)
 800a53a:	f001 fbb3 	bl	800bca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a53e:	e046      	b.n	800a5ce <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a26      	ldr	r2, [pc, #152]	; (800a5e0 <HAL_TIM_MspPostInit+0x100>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d11e      	bne.n	800a588 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	4b22      	ldr	r3, [pc, #136]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	4a21      	ldr	r2, [pc, #132]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a554:	f043 0302 	orr.w	r3, r3, #2
 800a558:	6313      	str	r3, [r2, #48]	; 0x30
 800a55a:	4b1f      	ldr	r3, [pc, #124]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a566:	2340      	movs	r3, #64	; 0x40
 800a568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56a:	2302      	movs	r3, #2
 800a56c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a572:	2300      	movs	r3, #0
 800a574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a576:	2302      	movs	r3, #2
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a57a:	f107 0314 	add.w	r3, r7, #20
 800a57e:	4619      	mov	r1, r3
 800a580:	4818      	ldr	r0, [pc, #96]	; (800a5e4 <HAL_TIM_MspPostInit+0x104>)
 800a582:	f001 fb8f 	bl	800bca4 <HAL_GPIO_Init>
}
 800a586:	e022      	b.n	800a5ce <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM8)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a16      	ldr	r2, [pc, #88]	; (800a5e8 <HAL_TIM_MspPostInit+0x108>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d11d      	bne.n	800a5ce <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a592:	2300      	movs	r3, #0
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	4a0f      	ldr	r2, [pc, #60]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a59c:	f043 0304 	orr.w	r3, r3, #4
 800a5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <HAL_TIM_MspPostInit+0xf8>)
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	f003 0304 	and.w	r3, r3, #4
 800a5aa:	60bb      	str	r3, [r7, #8]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a5ae:	2340      	movs	r3, #64	; 0x40
 800a5b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4808      	ldr	r0, [pc, #32]	; (800a5ec <HAL_TIM_MspPostInit+0x10c>)
 800a5ca:	f001 fb6b 	bl	800bca4 <HAL_GPIO_Init>
}
 800a5ce:	bf00      	nop
 800a5d0:	3728      	adds	r7, #40	; 0x28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	40023800 	.word	0x40023800
 800a5dc:	40020000 	.word	0x40020000
 800a5e0:	40000800 	.word	0x40000800
 800a5e4:	40020400 	.word	0x40020400
 800a5e8:	40010400 	.word	0x40010400
 800a5ec:	40020800 	.word	0x40020800

0800a5f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08a      	sub	sp, #40	; 0x28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5f8:	f107 0314 	add.w	r3, r7, #20
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	605a      	str	r2, [r3, #4]
 800a602:	609a      	str	r2, [r3, #8]
 800a604:	60da      	str	r2, [r3, #12]
 800a606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1d      	ldr	r2, [pc, #116]	; (800a684 <HAL_UART_MspInit+0x94>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d133      	bne.n	800a67a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a612:	2300      	movs	r3, #0
 800a614:	613b      	str	r3, [r7, #16]
 800a616:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	4a1b      	ldr	r2, [pc, #108]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a61c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a620:	6413      	str	r3, [r2, #64]	; 0x40
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	4b15      	ldr	r3, [pc, #84]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	4a14      	ldr	r2, [pc, #80]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a638:	f043 0301 	orr.w	r3, r3, #1
 800a63c:	6313      	str	r3, [r2, #48]	; 0x30
 800a63e:	4b12      	ldr	r3, [pc, #72]	; (800a688 <HAL_UART_MspInit+0x98>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a64a:	230c      	movs	r3, #12
 800a64c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64e:	2302      	movs	r3, #2
 800a650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a656:	2303      	movs	r3, #3
 800a658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a65a:	2307      	movs	r3, #7
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a65e:	f107 0314 	add.w	r3, r7, #20
 800a662:	4619      	mov	r1, r3
 800a664:	4809      	ldr	r0, [pc, #36]	; (800a68c <HAL_UART_MspInit+0x9c>)
 800a666:	f001 fb1d 	bl	800bca4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a66a:	2200      	movs	r2, #0
 800a66c:	2100      	movs	r1, #0
 800a66e:	2026      	movs	r0, #38	; 0x26
 800a670:	f000 fedf 	bl	800b432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a674:	2026      	movs	r0, #38	; 0x26
 800a676:	f000 fef8 	bl	800b46a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a67a:	bf00      	nop
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40004400 	.word	0x40004400
 800a688:	40023800 	.word	0x40023800
 800a68c:	40020000 	.word	0x40020000

0800a690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a694:	e7fe      	b.n	800a694 <NMI_Handler+0x4>

0800a696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a696:	b480      	push	{r7}
 800a698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a69a:	e7fe      	b.n	800a69a <HardFault_Handler+0x4>

0800a69c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a6a0:	e7fe      	b.n	800a6a0 <MemManage_Handler+0x4>

0800a6a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a6a6:	e7fe      	b.n	800a6a6 <BusFault_Handler+0x4>

0800a6a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a6ac:	e7fe      	b.n	800a6ac <UsageFault_Handler+0x4>

0800a6ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a6b2:	bf00      	nop
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a6c0:	bf00      	nop
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6dc:	f000 f98c 	bl	800a9f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6e0:	bf00      	nop
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a6e8:	4802      	ldr	r0, [pc, #8]	; (800a6f4 <TIM2_IRQHandler+0x10>)
 800a6ea:	f002 fcbd 	bl	800d068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a6ee:	bf00      	nop
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20013e18 	.word	0x20013e18

0800a6f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a6fc:	4802      	ldr	r0, [pc, #8]	; (800a708 <TIM3_IRQHandler+0x10>)
 800a6fe:	f002 fcb3 	bl	800d068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20013e60 	.word	0x20013e60

0800a70c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a710:	4802      	ldr	r0, [pc, #8]	; (800a71c <USART2_IRQHandler+0x10>)
 800a712:	f003 fc65 	bl	800dfe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20013fc4 	.word	0x20013fc4

0800a720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a724:	4802      	ldr	r0, [pc, #8]	; (800a730 <TIM6_DAC_IRQHandler+0x10>)
 800a726:	f002 fc9f 	bl	800d068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a72a:	bf00      	nop
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20013ef0 	.word	0x20013ef0

0800a734 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a738:	4802      	ldr	r0, [pc, #8]	; (800a744 <DMA2_Stream0_IRQHandler+0x10>)
 800a73a:	f001 f849 	bl	800b7d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20013db8 	.word	0x20013db8

0800a748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
	return 1;
 800a74c:	2301      	movs	r3, #1
}
 800a74e:	4618      	mov	r0, r3
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <_kill>:

int _kill(int pid, int sig)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a762:	f004 fb9d 	bl	800eea0 <__errno>
 800a766:	4603      	mov	r3, r0
 800a768:	2216      	movs	r2, #22
 800a76a:	601a      	str	r2, [r3, #0]
	return -1;
 800a76c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <_exit>:

void _exit (int status)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a780:	f04f 31ff 	mov.w	r1, #4294967295
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff ffe7 	bl	800a758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a78a:	e7fe      	b.n	800a78a <_exit+0x12>

0800a78c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e00a      	b.n	800a7b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a79e:	f3af 8000 	nop.w
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	60ba      	str	r2, [r7, #8]
 800a7aa:	b2ca      	uxtb	r2, r1
 800a7ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	dbf0      	blt.n	800a79e <_read+0x12>
	}

return len;
 800a7bc:	687b      	ldr	r3, [r7, #4]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	e009      	b.n	800a7ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	60ba      	str	r2, [r7, #8]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	dbf1      	blt.n	800a7d8 <_write+0x12>
	}
	return len;
 800a7f4:	687b      	ldr	r3, [r7, #4]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <_close>:

int _close(int file)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
	return -1;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a826:	605a      	str	r2, [r3, #4]
	return 0;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <_isatty>:

int _isatty(int file)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
	return 1;
 800a83e:	2301      	movs	r3, #1
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
	return 0;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a870:	4a14      	ldr	r2, [pc, #80]	; (800a8c4 <_sbrk+0x5c>)
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <_sbrk+0x60>)
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a87c:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <_sbrk+0x64>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a884:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <_sbrk+0x64>)
 800a886:	4a12      	ldr	r2, [pc, #72]	; (800a8d0 <_sbrk+0x68>)
 800a888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <_sbrk+0x64>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4413      	add	r3, r2
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	429a      	cmp	r2, r3
 800a896:	d207      	bcs.n	800a8a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a898:	f004 fb02 	bl	800eea0 <__errno>
 800a89c:	4603      	mov	r3, r0
 800a89e:	220c      	movs	r2, #12
 800a8a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a6:	e009      	b.n	800a8bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a8a8:	4b08      	ldr	r3, [pc, #32]	; (800a8cc <_sbrk+0x64>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a8ae:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <_sbrk+0x64>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4a05      	ldr	r2, [pc, #20]	; (800a8cc <_sbrk+0x64>)
 800a8b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20020000 	.word	0x20020000
 800a8c8:	00000400 	.word	0x00000400
 800a8cc:	20014028 	.word	0x20014028
 800a8d0:	20014040 	.word	0x20014040

0800a8d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <SystemInit+0x24>)
 800a8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8de:	4a06      	ldr	r2, [pc, #24]	; (800a8f8 <SystemInit+0x24>)
 800a8e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800a8e8:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <SystemInit+0x24>)
 800a8ea:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <SystemInit+0x28>)
 800a8ec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a8ee:	bf00      	nop
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	e000ed00 	.word	0xe000ed00
 800a8fc:	08008000 	.word	0x08008000

0800a900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a900:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a904:	480d      	ldr	r0, [pc, #52]	; (800a93c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a906:	490e      	ldr	r1, [pc, #56]	; (800a940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a908:	4a0e      	ldr	r2, [pc, #56]	; (800a944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a90a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a90c:	e002      	b.n	800a914 <LoopCopyDataInit>

0800a90e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a90e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a912:	3304      	adds	r3, #4

0800a914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a918:	d3f9      	bcc.n	800a90e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a91a:	4a0b      	ldr	r2, [pc, #44]	; (800a948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a91c:	4c0b      	ldr	r4, [pc, #44]	; (800a94c <LoopFillZerobss+0x26>)
  movs r3, #0
 800a91e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a920:	e001      	b.n	800a926 <LoopFillZerobss>

0800a922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a924:	3204      	adds	r2, #4

0800a926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a928:	d3fb      	bcc.n	800a922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a92a:	f7ff ffd3 	bl	800a8d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a92e:	f004 fabd 	bl	800eeac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a932:	f7ff f89f 	bl	8009a74 <main>
  bx  lr    
 800a936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a93c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a940:	20013a64 	.word	0x20013a64
  ldr r2, =_sidata
 800a944:	08012124 	.word	0x08012124
  ldr r2, =_sbss
 800a948:	20013a64 	.word	0x20013a64
  ldr r4, =_ebss
 800a94c:	20014040 	.word	0x20014040

0800a950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a950:	e7fe      	b.n	800a950 <ADC_IRQHandler>
	...

0800a954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a958:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <HAL_Init+0x40>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a0d      	ldr	r2, [pc, #52]	; (800a994 <HAL_Init+0x40>)
 800a95e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a964:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <HAL_Init+0x40>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <HAL_Init+0x40>)
 800a96a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a96e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a970:	4b08      	ldr	r3, [pc, #32]	; (800a994 <HAL_Init+0x40>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a07      	ldr	r2, [pc, #28]	; (800a994 <HAL_Init+0x40>)
 800a976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a97a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a97c:	2003      	movs	r0, #3
 800a97e:	f000 fd4d 	bl	800b41c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a982:	200f      	movs	r0, #15
 800a984:	f000 f808 	bl	800a998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a988:	f7ff fc7c 	bl	800a284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	40023c00 	.word	0x40023c00

0800a998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a9a0:	4b12      	ldr	r3, [pc, #72]	; (800a9ec <HAL_InitTick+0x54>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	4b12      	ldr	r3, [pc, #72]	; (800a9f0 <HAL_InitTick+0x58>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fd65 	bl	800b486 <HAL_SYSTICK_Config>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e00e      	b.n	800a9e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b0f      	cmp	r3, #15
 800a9ca:	d80a      	bhi.n	800a9e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	f000 fd2d 	bl	800b432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a9d8:	4a06      	ldr	r2, [pc, #24]	; (800a9f4 <HAL_InitTick+0x5c>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e000      	b.n	800a9e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20013884 	.word	0x20013884
 800a9f0:	2001388c 	.word	0x2001388c
 800a9f4:	20013888 	.word	0x20013888

0800a9f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a9fc:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <HAL_IncTick+0x20>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <HAL_IncTick+0x24>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4413      	add	r3, r2
 800aa08:	4a04      	ldr	r2, [pc, #16]	; (800aa1c <HAL_IncTick+0x24>)
 800aa0a:	6013      	str	r3, [r2, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	2001388c 	.word	0x2001388c
 800aa1c:	2001402c 	.word	0x2001402c

0800aa20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  return uwTick;
 800aa24:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <HAL_GetTick+0x14>)
 800aa26:	681b      	ldr	r3, [r3, #0]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	2001402c 	.word	0x2001402c

0800aa38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e033      	b.n	800aab6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fc3c 	bl	800a2d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f003 0310 	and.w	r3, r3, #16
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d118      	bne.n	800aaa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800aa7e:	f023 0302 	bic.w	r3, r3, #2
 800aa82:	f043 0202 	orr.w	r2, r3, #2
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa78 	bl	800af80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	f023 0303 	bic.w	r3, r3, #3
 800aa9e:	f043 0201 	orr.w	r2, r3, #1
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	641a      	str	r2, [r3, #64]	; 0x40
 800aaa6:	e001      	b.n	800aaac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <HAL_ADC_Start_DMA+0x1e>
 800aada:	2302      	movs	r3, #2
 800aadc:	e0e9      	b.n	800acb2 <HAL_ADC_Start_DMA+0x1f2>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d018      	beq.n	800ab26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689a      	ldr	r2, [r3, #8]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ab04:	4b6d      	ldr	r3, [pc, #436]	; (800acbc <HAL_ADC_Start_DMA+0x1fc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a6d      	ldr	r2, [pc, #436]	; (800acc0 <HAL_ADC_Start_DMA+0x200>)
 800ab0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0e:	0c9a      	lsrs	r2, r3, #18
 800ab10:	4613      	mov	r3, r2
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	4413      	add	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800ab18:	e002      	b.n	800ab20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f9      	bne.n	800ab1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab34:	d107      	bne.n	800ab46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	f040 80a1 	bne.w	800ac98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ab80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab94:	d106      	bne.n	800aba4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9a:	f023 0206 	bic.w	r2, r3, #6
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	645a      	str	r2, [r3, #68]	; 0x44
 800aba2:	e002      	b.n	800abaa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800abb2:	4b44      	ldr	r3, [pc, #272]	; (800acc4 <HAL_ADC_Start_DMA+0x204>)
 800abb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abba:	4a43      	ldr	r2, [pc, #268]	; (800acc8 <HAL_ADC_Start_DMA+0x208>)
 800abbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	4a42      	ldr	r2, [pc, #264]	; (800accc <HAL_ADC_Start_DMA+0x20c>)
 800abc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	4a41      	ldr	r2, [pc, #260]	; (800acd0 <HAL_ADC_Start_DMA+0x210>)
 800abcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800abd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800abe6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689a      	ldr	r2, [r3, #8]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abf6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	334c      	adds	r3, #76	; 0x4c
 800ac02:	4619      	mov	r1, r3
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f000 fcf8 	bl	800b5fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f003 031f 	and.w	r3, r3, #31
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d12a      	bne.n	800ac6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a2d      	ldr	r2, [pc, #180]	; (800acd4 <HAL_ADC_Start_DMA+0x214>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d015      	beq.n	800ac4e <HAL_ADC_Start_DMA+0x18e>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a2c      	ldr	r2, [pc, #176]	; (800acd8 <HAL_ADC_Start_DMA+0x218>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d105      	bne.n	800ac38 <HAL_ADC_Start_DMA+0x178>
 800ac2c:	4b25      	ldr	r3, [pc, #148]	; (800acc4 <HAL_ADC_Start_DMA+0x204>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f003 031f 	and.w	r3, r3, #31
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a27      	ldr	r2, [pc, #156]	; (800acdc <HAL_ADC_Start_DMA+0x21c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d136      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
 800ac42:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <HAL_ADC_Start_DMA+0x204>)
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f003 0310 	and.w	r3, r3, #16
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d130      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d129      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	e020      	b.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a18      	ldr	r2, [pc, #96]	; (800acd4 <HAL_ADC_Start_DMA+0x214>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d11b      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d114      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ac94:	609a      	str	r2, [r3, #8]
 800ac96:	e00b      	b.n	800acb0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9c:	f043 0210 	orr.w	r2, r3, #16
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca8:	f043 0201 	orr.w	r2, r3, #1
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20013884 	.word	0x20013884
 800acc0:	431bde83 	.word	0x431bde83
 800acc4:	40012300 	.word	0x40012300
 800acc8:	0800b179 	.word	0x0800b179
 800accc:	0800b233 	.word	0x0800b233
 800acd0:	0800b24f 	.word	0x0800b24f
 800acd4:	40012000 	.word	0x40012000
 800acd8:	40012100 	.word	0x40012100
 800acdc:	40012200 	.word	0x40012200

0800ace0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d101      	bne.n	800ad38 <HAL_ADC_ConfigChannel+0x1c>
 800ad34:	2302      	movs	r3, #2
 800ad36:	e113      	b.n	800af60 <HAL_ADC_ConfigChannel+0x244>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d925      	bls.n	800ad94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68d9      	ldr	r1, [r3, #12]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	4613      	mov	r3, r2
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4413      	add	r3, r2
 800ad5c:	3b1e      	subs	r3, #30
 800ad5e:	2207      	movs	r2, #7
 800ad60:	fa02 f303 	lsl.w	r3, r2, r3
 800ad64:	43da      	mvns	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	400a      	ands	r2, r1
 800ad6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68d9      	ldr	r1, [r3, #12]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	4618      	mov	r0, r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	4403      	add	r3, r0
 800ad86:	3b1e      	subs	r3, #30
 800ad88:	409a      	lsls	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	60da      	str	r2, [r3, #12]
 800ad92:	e022      	b.n	800adda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6919      	ldr	r1, [r3, #16]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	461a      	mov	r2, r3
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	2207      	movs	r2, #7
 800adaa:	fa02 f303 	lsl.w	r3, r2, r3
 800adae:	43da      	mvns	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	400a      	ands	r2, r1
 800adb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6919      	ldr	r1, [r3, #16]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	4618      	mov	r0, r3
 800adca:	4603      	mov	r3, r0
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4403      	add	r3, r0
 800add0:	409a      	lsls	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b06      	cmp	r3, #6
 800ade0:	d824      	bhi.n	800ae2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	3b05      	subs	r3, #5
 800adf4:	221f      	movs	r2, #31
 800adf6:	fa02 f303 	lsl.w	r3, r2, r3
 800adfa:	43da      	mvns	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	400a      	ands	r2, r1
 800ae02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	4618      	mov	r0, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	3b05      	subs	r3, #5
 800ae1e:	fa00 f203 	lsl.w	r2, r0, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	635a      	str	r2, [r3, #52]	; 0x34
 800ae2a:	e04c      	b.n	800aec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2b0c      	cmp	r3, #12
 800ae32:	d824      	bhi.n	800ae7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	3b23      	subs	r3, #35	; 0x23
 800ae46:	221f      	movs	r2, #31
 800ae48:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4c:	43da      	mvns	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	400a      	ands	r2, r1
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4618      	mov	r0, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3b23      	subs	r3, #35	; 0x23
 800ae70:	fa00 f203 	lsl.w	r2, r0, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae7c:	e023      	b.n	800aec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	3b41      	subs	r3, #65	; 0x41
 800ae90:	221f      	movs	r2, #31
 800ae92:	fa02 f303 	lsl.w	r3, r2, r3
 800ae96:	43da      	mvns	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	400a      	ands	r2, r1
 800ae9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	4618      	mov	r0, r3
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	3b41      	subs	r3, #65	; 0x41
 800aeba:	fa00 f203 	lsl.w	r2, r0, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aec6:	4b29      	ldr	r3, [pc, #164]	; (800af6c <HAL_ADC_ConfigChannel+0x250>)
 800aec8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a28      	ldr	r2, [pc, #160]	; (800af70 <HAL_ADC_ConfigChannel+0x254>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d10f      	bne.n	800aef4 <HAL_ADC_ConfigChannel+0x1d8>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b12      	cmp	r3, #18
 800aeda:	d10b      	bne.n	800aef4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a1d      	ldr	r2, [pc, #116]	; (800af70 <HAL_ADC_ConfigChannel+0x254>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d12b      	bne.n	800af56 <HAL_ADC_ConfigChannel+0x23a>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a1c      	ldr	r2, [pc, #112]	; (800af74 <HAL_ADC_ConfigChannel+0x258>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d003      	beq.n	800af10 <HAL_ADC_ConfigChannel+0x1f4>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b11      	cmp	r3, #17
 800af0e:	d122      	bne.n	800af56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a11      	ldr	r2, [pc, #68]	; (800af74 <HAL_ADC_ConfigChannel+0x258>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d111      	bne.n	800af56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800af32:	4b11      	ldr	r3, [pc, #68]	; (800af78 <HAL_ADC_ConfigChannel+0x25c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a11      	ldr	r2, [pc, #68]	; (800af7c <HAL_ADC_ConfigChannel+0x260>)
 800af38:	fba2 2303 	umull	r2, r3, r2, r3
 800af3c:	0c9a      	lsrs	r2, r3, #18
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800af48:	e002      	b.n	800af50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1f9      	bne.n	800af4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	40012300 	.word	0x40012300
 800af70:	40012000 	.word	0x40012000
 800af74:	10000012 	.word	0x10000012
 800af78:	20013884 	.word	0x20013884
 800af7c:	431bde83 	.word	0x431bde83

0800af80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800af88:	4b79      	ldr	r3, [pc, #484]	; (800b170 <ADC_Init+0x1f0>)
 800af8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	431a      	orrs	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6859      	ldr	r1, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	021a      	lsls	r2, r3, #8
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800afd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6859      	ldr	r1, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800affa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6899      	ldr	r1, [r3, #8]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b012:	4a58      	ldr	r2, [pc, #352]	; (800b174 <ADC_Init+0x1f4>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d022      	beq.n	800b05e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6899      	ldr	r1, [r3, #8]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	430a      	orrs	r2, r1
 800b038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6899      	ldr	r1, [r3, #8]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	609a      	str	r2, [r3, #8]
 800b05c:	e00f      	b.n	800b07e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b06c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b07c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 0202 	bic.w	r2, r2, #2
 800b08c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6899      	ldr	r1, [r3, #8]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7e1b      	ldrb	r3, [r3, #24]
 800b098:	005a      	lsls	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01b      	beq.n	800b0e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b0ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6859      	ldr	r1, [r3, #4]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	035a      	lsls	r2, r3, #13
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
 800b0e2:	e007      	b.n	800b0f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	3b01      	subs	r3, #1
 800b110:	051a      	lsls	r2, r3, #20
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6899      	ldr	r1, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b136:	025a      	lsls	r2, r3, #9
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b14e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6899      	ldr	r1, [r3, #8]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	029a      	lsls	r2, r3, #10
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	609a      	str	r2, [r3, #8]
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	40012300 	.word	0x40012300
 800b174:	0f000001 	.word	0x0f000001

0800b178 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d13c      	bne.n	800b20c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d12b      	bne.n	800b204 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d127      	bne.n	800b204 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d006      	beq.n	800b1d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d119      	bne.n	800b204 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0220 	bic.w	r2, r2, #32
 800b1de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d105      	bne.n	800b204 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	f043 0201 	orr.w	r2, r3, #1
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f7ff fd6b 	bl	800ace0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b20a:	e00e      	b.n	800b22a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7ff fd75 	bl	800ad08 <HAL_ADC_ErrorCallback>
}
 800b21e:	e004      	b.n	800b22a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	4798      	blx	r3
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff fd57 	bl	800acf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2240      	movs	r2, #64	; 0x40
 800b260:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	f043 0204 	orr.w	r2, r3, #4
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fd4a 	bl	800ad08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b274:	bf00      	nop
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b28c:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b298:	4013      	ands	r3, r2
 800b29a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b2a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b2ae:	4a04      	ldr	r2, [pc, #16]	; (800b2c0 <__NVIC_SetPriorityGrouping+0x44>)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	60d3      	str	r3, [r2, #12]
}
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	e000ed00 	.word	0xe000ed00

0800b2c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b2c8:	4b04      	ldr	r3, [pc, #16]	; (800b2dc <__NVIC_GetPriorityGrouping+0x18>)
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	f003 0307 	and.w	r3, r3, #7
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	e000ed00 	.word	0xe000ed00

0800b2e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	db0b      	blt.n	800b30a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	f003 021f 	and.w	r2, r3, #31
 800b2f8:	4907      	ldr	r1, [pc, #28]	; (800b318 <__NVIC_EnableIRQ+0x38>)
 800b2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	2001      	movs	r0, #1
 800b302:	fa00 f202 	lsl.w	r2, r0, r2
 800b306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	e000e100 	.word	0xe000e100

0800b31c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	db0a      	blt.n	800b346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	b2da      	uxtb	r2, r3
 800b334:	490c      	ldr	r1, [pc, #48]	; (800b368 <__NVIC_SetPriority+0x4c>)
 800b336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b33a:	0112      	lsls	r2, r2, #4
 800b33c:	b2d2      	uxtb	r2, r2
 800b33e:	440b      	add	r3, r1
 800b340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b344:	e00a      	b.n	800b35c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	4908      	ldr	r1, [pc, #32]	; (800b36c <__NVIC_SetPriority+0x50>)
 800b34c:	79fb      	ldrb	r3, [r7, #7]
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	3b04      	subs	r3, #4
 800b354:	0112      	lsls	r2, r2, #4
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	440b      	add	r3, r1
 800b35a:	761a      	strb	r2, [r3, #24]
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	e000e100 	.word	0xe000e100
 800b36c:	e000ed00 	.word	0xe000ed00

0800b370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b370:	b480      	push	{r7}
 800b372:	b089      	sub	sp, #36	; 0x24
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	f1c3 0307 	rsb	r3, r3, #7
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	bf28      	it	cs
 800b38e:	2304      	movcs	r3, #4
 800b390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	3304      	adds	r3, #4
 800b396:	2b06      	cmp	r3, #6
 800b398:	d902      	bls.n	800b3a0 <NVIC_EncodePriority+0x30>
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	3b03      	subs	r3, #3
 800b39e:	e000      	b.n	800b3a2 <NVIC_EncodePriority+0x32>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ae:	43da      	mvns	r2, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	401a      	ands	r2, r3
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b3b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c2:	43d9      	mvns	r1, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3c8:	4313      	orrs	r3, r2
         );
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3724      	adds	r7, #36	; 0x24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3e8:	d301      	bcc.n	800b3ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e00f      	b.n	800b40e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b3ee:	4a0a      	ldr	r2, [pc, #40]	; (800b418 <SysTick_Config+0x40>)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b3f6:	210f      	movs	r1, #15
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	f7ff ff8e 	bl	800b31c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b400:	4b05      	ldr	r3, [pc, #20]	; (800b418 <SysTick_Config+0x40>)
 800b402:	2200      	movs	r2, #0
 800b404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b406:	4b04      	ldr	r3, [pc, #16]	; (800b418 <SysTick_Config+0x40>)
 800b408:	2207      	movs	r2, #7
 800b40a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	e000e010 	.word	0xe000e010

0800b41c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff ff29 	bl	800b27c <__NVIC_SetPriorityGrouping>
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	4603      	mov	r3, r0
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
 800b43e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b444:	f7ff ff3e 	bl	800b2c4 <__NVIC_GetPriorityGrouping>
 800b448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff ff8e 	bl	800b370 <NVIC_EncodePriority>
 800b454:	4602      	mov	r2, r0
 800b456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b45a:	4611      	mov	r1, r2
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff ff5d 	bl	800b31c <__NVIC_SetPriority>
}
 800b462:	bf00      	nop
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	4603      	mov	r3, r0
 800b472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7ff ff31 	bl	800b2e0 <__NVIC_EnableIRQ>
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff ffa2 	bl	800b3d8 <SysTick_Config>
 800b494:	4603      	mov	r3, r0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4ac:	f7ff fab8 	bl	800aa20 <HAL_GetTick>
 800b4b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e099      	b.n	800b5f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b4dc:	e00f      	b.n	800b4fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b4de:	f7ff fa9f 	bl	800aa20 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b05      	cmp	r3, #5
 800b4ea:	d908      	bls.n	800b4fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e078      	b.n	800b5f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e8      	bne.n	800b4de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4b38      	ldr	r3, [pc, #224]	; (800b5f8 <HAL_DMA_Init+0x158>)
 800b518:	4013      	ands	r3, r2
 800b51a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b52a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	2b04      	cmp	r3, #4
 800b556:	d107      	bne.n	800b568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b560:	4313      	orrs	r3, r2
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	4313      	orrs	r3, r2
 800b566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f023 0307 	bic.w	r3, r3, #7
 800b57e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4313      	orrs	r3, r2
 800b588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d117      	bne.n	800b5c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	4313      	orrs	r3, r2
 800b59a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00e      	beq.n	800b5c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fb01 	bl	800bbac <DMA_CheckFifoParam>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d008      	beq.n	800b5c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2240      	movs	r2, #64	; 0x40
 800b5b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e016      	b.n	800b5f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fab8 	bl	800bb40 <DMA_CalcBaseAndBitshift>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d8:	223f      	movs	r2, #63	; 0x3f
 800b5da:	409a      	lsls	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	f010803f 	.word	0xf010803f

0800b5fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d101      	bne.n	800b622 <HAL_DMA_Start_IT+0x26>
 800b61e:	2302      	movs	r3, #2
 800b620:	e040      	b.n	800b6a4 <HAL_DMA_Start_IT+0xa8>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b01      	cmp	r3, #1
 800b634:	d12f      	bne.n	800b696 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2202      	movs	r2, #2
 800b63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 fa4a 	bl	800bae4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b654:	223f      	movs	r2, #63	; 0x3f
 800b656:	409a      	lsls	r2, r3
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0216 	orr.w	r2, r2, #22
 800b66a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0208 	orr.w	r2, r2, #8
 800b682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	e005      	b.n	800b6a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b6ba:	f7ff f9b1 	bl	800aa20 <HAL_GetTick>
 800b6be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d008      	beq.n	800b6de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2280      	movs	r2, #128	; 0x80
 800b6d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e052      	b.n	800b784 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f022 0216 	bic.w	r2, r2, #22
 800b6ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695a      	ldr	r2, [r3, #20]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	2b00      	cmp	r3, #0
 800b704:	d103      	bne.n	800b70e <HAL_DMA_Abort+0x62>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d007      	beq.n	800b71e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f022 0208 	bic.w	r2, r2, #8
 800b71c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f022 0201 	bic.w	r2, r2, #1
 800b72c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b72e:	e013      	b.n	800b758 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b730:	f7ff f976 	bl	800aa20 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d90c      	bls.n	800b758 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2203      	movs	r2, #3
 800b748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e015      	b.n	800b784 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e4      	bne.n	800b730 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b76a:	223f      	movs	r2, #63	; 0x3f
 800b76c:	409a      	lsls	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d004      	beq.n	800b7aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2280      	movs	r2, #128	; 0x80
 800b7a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e00c      	b.n	800b7c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2205      	movs	r2, #5
 800b7ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7dc:	4b8e      	ldr	r3, [pc, #568]	; (800ba18 <HAL_DMA_IRQHandler+0x248>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a8e      	ldr	r2, [pc, #568]	; (800ba1c <HAL_DMA_IRQHandler+0x24c>)
 800b7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e6:	0a9b      	lsrs	r3, r3, #10
 800b7e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fa:	2208      	movs	r2, #8
 800b7fc:	409a      	lsls	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	4013      	ands	r3, r2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d01a      	beq.n	800b83c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	d013      	beq.n	800b83c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0204 	bic.w	r2, r2, #4
 800b822:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b828:	2208      	movs	r2, #8
 800b82a:	409a      	lsls	r2, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b834:	f043 0201 	orr.w	r2, r3, #1
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b840:	2201      	movs	r2, #1
 800b842:	409a      	lsls	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4013      	ands	r3, r2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d012      	beq.n	800b872 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85e:	2201      	movs	r2, #1
 800b860:	409a      	lsls	r2, r3
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86a:	f043 0202 	orr.w	r2, r3, #2
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b876:	2204      	movs	r2, #4
 800b878:	409a      	lsls	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d012      	beq.n	800b8a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b894:	2204      	movs	r2, #4
 800b896:	409a      	lsls	r2, r3
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a0:	f043 0204 	orr.w	r2, r3, #4
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	409a      	lsls	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d043      	beq.n	800b940 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0308 	and.w	r3, r3, #8
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d03c      	beq.n	800b940 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ca:	2210      	movs	r2, #16
 800b8cc:	409a      	lsls	r2, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d018      	beq.n	800b912 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d108      	bne.n	800b900 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d024      	beq.n	800b940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	e01f      	b.n	800b940 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b904:	2b00      	cmp	r3, #0
 800b906:	d01b      	beq.n	800b940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	4798      	blx	r3
 800b910:	e016      	b.n	800b940 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d107      	bne.n	800b930 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0208 	bic.w	r2, r2, #8
 800b92e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b944:	2220      	movs	r2, #32
 800b946:	409a      	lsls	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 808f 	beq.w	800ba70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 0310 	and.w	r3, r3, #16
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8087 	beq.w	800ba70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b966:	2220      	movs	r2, #32
 800b968:	409a      	lsls	r2, r3
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b05      	cmp	r3, #5
 800b978:	d136      	bne.n	800b9e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0216 	bic.w	r2, r2, #22
 800b988:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695a      	ldr	r2, [r3, #20]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b998:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d103      	bne.n	800b9aa <HAL_DMA_IRQHandler+0x1da>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 0208 	bic.w	r2, r2, #8
 800b9b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9be:	223f      	movs	r2, #63	; 0x3f
 800b9c0:	409a      	lsls	r2, r3
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d07e      	beq.n	800badc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4798      	blx	r3
        }
        return;
 800b9e6:	e079      	b.n	800badc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01d      	beq.n	800ba32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10d      	bne.n	800ba20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d031      	beq.n	800ba70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	4798      	blx	r3
 800ba14:	e02c      	b.n	800ba70 <HAL_DMA_IRQHandler+0x2a0>
 800ba16:	bf00      	nop
 800ba18:	20013884 	.word	0x20013884
 800ba1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d023      	beq.n	800ba70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	4798      	blx	r3
 800ba30:	e01e      	b.n	800ba70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10f      	bne.n	800ba60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0210 	bic.w	r2, r2, #16
 800ba4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d032      	beq.n	800bade <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d022      	beq.n	800baca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2205      	movs	r2, #5
 800ba88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f022 0201 	bic.w	r2, r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d307      	bcc.n	800bab8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1f2      	bne.n	800ba9c <HAL_DMA_IRQHandler+0x2cc>
 800bab6:	e000      	b.n	800baba <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bab8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
 800bada:	e000      	b.n	800bade <HAL_DMA_IRQHandler+0x30e>
        return;
 800badc:	bf00      	nop
    }
  }
}
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	2b40      	cmp	r3, #64	; 0x40
 800bb10:	d108      	bne.n	800bb24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb22:	e007      	b.n	800bb34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	60da      	str	r2, [r3, #12]
}
 800bb34:	bf00      	nop
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	3b10      	subs	r3, #16
 800bb50:	4a14      	ldr	r2, [pc, #80]	; (800bba4 <DMA_CalcBaseAndBitshift+0x64>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	091b      	lsrs	r3, r3, #4
 800bb58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bb5a:	4a13      	ldr	r2, [pc, #76]	; (800bba8 <DMA_CalcBaseAndBitshift+0x68>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d909      	bls.n	800bb82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb76:	f023 0303 	bic.w	r3, r3, #3
 800bb7a:	1d1a      	adds	r2, r3, #4
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	659a      	str	r2, [r3, #88]	; 0x58
 800bb80:	e007      	b.n	800bb92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb8a:	f023 0303 	bic.w	r3, r3, #3
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	aaaaaaab 	.word	0xaaaaaaab
 800bba8:	08011cdc 	.word	0x08011cdc

0800bbac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d11f      	bne.n	800bc06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d856      	bhi.n	800bc7a <DMA_CheckFifoParam+0xce>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <DMA_CheckFifoParam+0x28>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbe5 	.word	0x0800bbe5
 800bbd8:	0800bbf7 	.word	0x0800bbf7
 800bbdc:	0800bbe5 	.word	0x0800bbe5
 800bbe0:	0800bc7b 	.word	0x0800bc7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d046      	beq.n	800bc7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bbf4:	e043      	b.n	800bc7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bbfe:	d140      	bne.n	800bc82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc04:	e03d      	b.n	800bc82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc0e:	d121      	bne.n	800bc54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d837      	bhi.n	800bc86 <DMA_CheckFifoParam+0xda>
 800bc16:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <DMA_CheckFifoParam+0x70>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bc2d 	.word	0x0800bc2d
 800bc20:	0800bc33 	.word	0x0800bc33
 800bc24:	0800bc2d 	.word	0x0800bc2d
 800bc28:	0800bc45 	.word	0x0800bc45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc30:	e030      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d025      	beq.n	800bc8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc42:	e022      	b.n	800bc8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc4c:	d11f      	bne.n	800bc8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bc52:	e01c      	b.n	800bc8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d903      	bls.n	800bc62 <DMA_CheckFifoParam+0xb6>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d003      	beq.n	800bc68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bc60:	e018      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	73fb      	strb	r3, [r7, #15]
      break;
 800bc66:	e015      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00e      	beq.n	800bc92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
      break;
 800bc78:	e00b      	b.n	800bc92 <DMA_CheckFifoParam+0xe6>
      break;
 800bc7a:	bf00      	nop
 800bc7c:	e00a      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;
 800bc7e:	bf00      	nop
 800bc80:	e008      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;
 800bc82:	bf00      	nop
 800bc84:	e006      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;
 800bc86:	bf00      	nop
 800bc88:	e004      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e002      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;   
 800bc8e:	bf00      	nop
 800bc90:	e000      	b.n	800bc94 <DMA_CheckFifoParam+0xe8>
      break;
 800bc92:	bf00      	nop
    }
  } 
  
  return status; 
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop

0800bca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b089      	sub	sp, #36	; 0x24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bcba:	2300      	movs	r3, #0
 800bcbc:	61fb      	str	r3, [r7, #28]
 800bcbe:	e165      	b.n	800bf8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	f040 8154 	bne.w	800bf86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d005      	beq.n	800bcf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d130      	bne.n	800bd58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	2203      	movs	r2, #3
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	43db      	mvns	r3, r3
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1a:	69ba      	ldr	r2, [r7, #24]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	fa02 f303 	lsl.w	r3, r2, r3
 800bd34:	43db      	mvns	r3, r3
 800bd36:	69ba      	ldr	r2, [r7, #24]
 800bd38:	4013      	ands	r3, r2
 800bd3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	091b      	lsrs	r3, r3, #4
 800bd42:	f003 0201 	and.w	r2, r3, #1
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	f003 0303 	and.w	r3, r3, #3
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d017      	beq.n	800bd94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	2203      	movs	r2, #3
 800bd70:	fa02 f303 	lsl.w	r3, r2, r3
 800bd74:	43db      	mvns	r3, r3
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	fa02 f303 	lsl.w	r3, r2, r3
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f003 0303 	and.w	r3, r3, #3
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d123      	bne.n	800bde8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	08da      	lsrs	r2, r3, #3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3208      	adds	r2, #8
 800bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	220f      	movs	r2, #15
 800bdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbc:	43db      	mvns	r3, r3
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	691a      	ldr	r2, [r3, #16]
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	08da      	lsrs	r2, r3, #3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3208      	adds	r2, #8
 800bde2:	69b9      	ldr	r1, [r7, #24]
 800bde4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf8:	43db      	mvns	r3, r3
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f003 0203 	and.w	r2, r3, #3
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	fa02 f303 	lsl.w	r3, r2, r3
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	4313      	orrs	r3, r2
 800be14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 80ae 	beq.w	800bf86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	4b5d      	ldr	r3, [pc, #372]	; (800bfa4 <HAL_GPIO_Init+0x300>)
 800be30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be32:	4a5c      	ldr	r2, [pc, #368]	; (800bfa4 <HAL_GPIO_Init+0x300>)
 800be34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be38:	6453      	str	r3, [r2, #68]	; 0x44
 800be3a:	4b5a      	ldr	r3, [pc, #360]	; (800bfa4 <HAL_GPIO_Init+0x300>)
 800be3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be46:	4a58      	ldr	r2, [pc, #352]	; (800bfa8 <HAL_GPIO_Init+0x304>)
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	089b      	lsrs	r3, r3, #2
 800be4c:	3302      	adds	r3, #2
 800be4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	f003 0303 	and.w	r3, r3, #3
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	220f      	movs	r2, #15
 800be5e:	fa02 f303 	lsl.w	r3, r2, r3
 800be62:	43db      	mvns	r3, r3
 800be64:	69ba      	ldr	r2, [r7, #24]
 800be66:	4013      	ands	r3, r2
 800be68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a4f      	ldr	r2, [pc, #316]	; (800bfac <HAL_GPIO_Init+0x308>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d025      	beq.n	800bebe <HAL_GPIO_Init+0x21a>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a4e      	ldr	r2, [pc, #312]	; (800bfb0 <HAL_GPIO_Init+0x30c>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d01f      	beq.n	800beba <HAL_GPIO_Init+0x216>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a4d      	ldr	r2, [pc, #308]	; (800bfb4 <HAL_GPIO_Init+0x310>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d019      	beq.n	800beb6 <HAL_GPIO_Init+0x212>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a4c      	ldr	r2, [pc, #304]	; (800bfb8 <HAL_GPIO_Init+0x314>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d013      	beq.n	800beb2 <HAL_GPIO_Init+0x20e>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a4b      	ldr	r2, [pc, #300]	; (800bfbc <HAL_GPIO_Init+0x318>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00d      	beq.n	800beae <HAL_GPIO_Init+0x20a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a4a      	ldr	r2, [pc, #296]	; (800bfc0 <HAL_GPIO_Init+0x31c>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d007      	beq.n	800beaa <HAL_GPIO_Init+0x206>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a49      	ldr	r2, [pc, #292]	; (800bfc4 <HAL_GPIO_Init+0x320>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d101      	bne.n	800bea6 <HAL_GPIO_Init+0x202>
 800bea2:	2306      	movs	r3, #6
 800bea4:	e00c      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800bea6:	2307      	movs	r3, #7
 800bea8:	e00a      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800beaa:	2305      	movs	r3, #5
 800beac:	e008      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800beae:	2304      	movs	r3, #4
 800beb0:	e006      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800beb2:	2303      	movs	r3, #3
 800beb4:	e004      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e002      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <HAL_GPIO_Init+0x21c>
 800bebe:	2300      	movs	r3, #0
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	f002 0203 	and.w	r2, r2, #3
 800bec6:	0092      	lsls	r2, r2, #2
 800bec8:	4093      	lsls	r3, r2
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	4313      	orrs	r3, r2
 800bece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bed0:	4935      	ldr	r1, [pc, #212]	; (800bfa8 <HAL_GPIO_Init+0x304>)
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	089b      	lsrs	r3, r3, #2
 800bed6:	3302      	adds	r3, #2
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bede:	4b3a      	ldr	r3, [pc, #232]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	43db      	mvns	r3, r3
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	4013      	ands	r3, r2
 800beec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf02:	4a31      	ldr	r2, [pc, #196]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf08:	4b2f      	ldr	r3, [pc, #188]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	43db      	mvns	r3, r3
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	4013      	ands	r3, r2
 800bf16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d003      	beq.n	800bf2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf2c:	4a26      	ldr	r2, [pc, #152]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bf32:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	43db      	mvns	r3, r3
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	4013      	ands	r3, r2
 800bf40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf56:	4a1c      	ldr	r2, [pc, #112]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	43db      	mvns	r3, r3
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bf78:	69ba      	ldr	r2, [r7, #24]
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf80:	4a11      	ldr	r2, [pc, #68]	; (800bfc8 <HAL_GPIO_Init+0x324>)
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	61fb      	str	r3, [r7, #28]
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2b0f      	cmp	r3, #15
 800bf90:	f67f ae96 	bls.w	800bcc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	3724      	adds	r7, #36	; 0x24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40023800 	.word	0x40023800
 800bfa8:	40013800 	.word	0x40013800
 800bfac:	40020000 	.word	0x40020000
 800bfb0:	40020400 	.word	0x40020400
 800bfb4:	40020800 	.word	0x40020800
 800bfb8:	40020c00 	.word	0x40020c00
 800bfbc:	40021000 	.word	0x40021000
 800bfc0:	40021400 	.word	0x40021400
 800bfc4:	40021800 	.word	0x40021800
 800bfc8:	40013c00 	.word	0x40013c00

0800bfcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	807b      	strh	r3, [r7, #2]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bfdc:	787b      	ldrb	r3, [r7, #1]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bfe2:	887a      	ldrh	r2, [r7, #2]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bfe8:	e003      	b.n	800bff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bfea:	887b      	ldrh	r3, [r7, #2]
 800bfec:	041a      	lsls	r2, r3, #16
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	619a      	str	r2, [r3, #24]
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bffe:	b480      	push	{r7}
 800c000:	b085      	sub	sp, #20
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c010:	887a      	ldrh	r2, [r7, #2]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4013      	ands	r3, r2
 800c016:	041a      	lsls	r2, r3, #16
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	43d9      	mvns	r1, r3
 800c01c:	887b      	ldrh	r3, [r7, #2]
 800c01e:	400b      	ands	r3, r1
 800c020:	431a      	orrs	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	619a      	str	r2, [r3, #24]
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
	...

0800c034 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c03e:	2300      	movs	r3, #0
 800c040:	603b      	str	r3, [r7, #0]
 800c042:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	4a1f      	ldr	r2, [pc, #124]	; (800c0c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c04c:	6413      	str	r3, [r2, #64]	; 0x40
 800c04e:	4b1d      	ldr	r3, [pc, #116]	; (800c0c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c05a:	4b1b      	ldr	r3, [pc, #108]	; (800c0c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c05c:	2201      	movs	r2, #1
 800c05e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c060:	f7fe fcde 	bl	800aa20 <HAL_GetTick>
 800c064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c066:	e009      	b.n	800c07c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c068:	f7fe fcda 	bl	800aa20 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c076:	d901      	bls.n	800c07c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c078:	2303      	movs	r3, #3
 800c07a:	e01f      	b.n	800c0bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c07c:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <HAL_PWREx_EnableOverDrive+0x98>)
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c088:	d1ee      	bne.n	800c068 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c08c:	2201      	movs	r2, #1
 800c08e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c090:	f7fe fcc6 	bl	800aa20 <HAL_GetTick>
 800c094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c096:	e009      	b.n	800c0ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c098:	f7fe fcc2 	bl	800aa20 <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0a6:	d901      	bls.n	800c0ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e007      	b.n	800c0bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c0ac:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <HAL_PWREx_EnableOverDrive+0x98>)
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0b8:	d1ee      	bne.n	800c098 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	40023800 	.word	0x40023800
 800c0c8:	420e0040 	.word	0x420e0040
 800c0cc:	40007000 	.word	0x40007000
 800c0d0:	420e0044 	.word	0x420e0044

0800c0d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e0cc      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c0e8:	4b68      	ldr	r3, [pc, #416]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d90c      	bls.n	800c110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0f6:	4b65      	ldr	r3, [pc, #404]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0fe:	4b63      	ldr	r3, [pc, #396]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 030f 	and.w	r3, r3, #15
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d001      	beq.n	800c110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e0b8      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d020      	beq.n	800c15e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0304 	and.w	r3, r3, #4
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c128:	4b59      	ldr	r3, [pc, #356]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	4a58      	ldr	r2, [pc, #352]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c12e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d005      	beq.n	800c14c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c140:	4b53      	ldr	r3, [pc, #332]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	4a52      	ldr	r2, [pc, #328]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c14a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c14c:	4b50      	ldr	r3, [pc, #320]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	494d      	ldr	r1, [pc, #308]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d044      	beq.n	800c1f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d107      	bne.n	800c182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c172:	4b47      	ldr	r3, [pc, #284]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d119      	bne.n	800c1b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e07f      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d003      	beq.n	800c192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c18e:	2b03      	cmp	r3, #3
 800c190:	d107      	bne.n	800c1a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c192:	4b3f      	ldr	r3, [pc, #252]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d109      	bne.n	800c1b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e06f      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1a2:	4b3b      	ldr	r3, [pc, #236]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0302 	and.w	r3, r3, #2
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e067      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1b2:	4b37      	ldr	r3, [pc, #220]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f023 0203 	bic.w	r2, r3, #3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	4934      	ldr	r1, [pc, #208]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c1c4:	f7fe fc2c 	bl	800aa20 <HAL_GetTick>
 800c1c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1ca:	e00a      	b.n	800c1e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1cc:	f7fe fc28 	bl	800aa20 <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d901      	bls.n	800c1e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e04f      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1e2:	4b2b      	ldr	r3, [pc, #172]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f003 020c 	and.w	r2, r3, #12
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d1eb      	bne.n	800c1cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c1f4:	4b25      	ldr	r3, [pc, #148]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 030f 	and.w	r3, r3, #15
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d20c      	bcs.n	800c21c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c202:	4b22      	ldr	r3, [pc, #136]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	b2d2      	uxtb	r2, r2
 800c208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c20a:	4b20      	ldr	r3, [pc, #128]	; (800c28c <HAL_RCC_ClockConfig+0x1b8>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 030f 	and.w	r3, r3, #15
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d001      	beq.n	800c21c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	e032      	b.n	800c282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c228:	4b19      	ldr	r3, [pc, #100]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	4916      	ldr	r1, [pc, #88]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c236:	4313      	orrs	r3, r2
 800c238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d009      	beq.n	800c25a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c246:	4b12      	ldr	r3, [pc, #72]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	490e      	ldr	r1, [pc, #56]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c256:	4313      	orrs	r3, r2
 800c258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c25a:	f000 f855 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800c25e:	4602      	mov	r2, r0
 800c260:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <HAL_RCC_ClockConfig+0x1bc>)
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	091b      	lsrs	r3, r3, #4
 800c266:	f003 030f 	and.w	r3, r3, #15
 800c26a:	490a      	ldr	r1, [pc, #40]	; (800c294 <HAL_RCC_ClockConfig+0x1c0>)
 800c26c:	5ccb      	ldrb	r3, [r1, r3]
 800c26e:	fa22 f303 	lsr.w	r3, r2, r3
 800c272:	4a09      	ldr	r2, [pc, #36]	; (800c298 <HAL_RCC_ClockConfig+0x1c4>)
 800c274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c276:	4b09      	ldr	r3, [pc, #36]	; (800c29c <HAL_RCC_ClockConfig+0x1c8>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fb8c 	bl	800a998 <HAL_InitTick>

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	40023c00 	.word	0x40023c00
 800c290:	40023800 	.word	0x40023800
 800c294:	08011cc4 	.word	0x08011cc4
 800c298:	20013884 	.word	0x20013884
 800c29c:	20013888 	.word	0x20013888

0800c2a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20013884 	.word	0x20013884

0800c2b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c2bc:	f7ff fff0 	bl	800c2a0 <HAL_RCC_GetHCLKFreq>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	0a9b      	lsrs	r3, r3, #10
 800c2c8:	f003 0307 	and.w	r3, r3, #7
 800c2cc:	4903      	ldr	r1, [pc, #12]	; (800c2dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2ce:	5ccb      	ldrb	r3, [r1, r3]
 800c2d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	40023800 	.word	0x40023800
 800c2dc:	08011cd4 	.word	0x08011cd4

0800c2e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c2e4:	f7ff ffdc 	bl	800c2a0 <HAL_RCC_GetHCLKFreq>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	0b5b      	lsrs	r3, r3, #13
 800c2f0:	f003 0307 	and.w	r3, r3, #7
 800c2f4:	4903      	ldr	r1, [pc, #12]	; (800c304 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2f6:	5ccb      	ldrb	r3, [r1, r3]
 800c2f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	40023800 	.word	0x40023800
 800c304:	08011cd4 	.word	0x08011cd4

0800c308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c30c:	b0ae      	sub	sp, #184	; 0xb8
 800c30e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c310:	2300      	movs	r3, #0
 800c312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c316:	2300      	movs	r3, #0
 800c318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c32e:	4bcb      	ldr	r3, [pc, #812]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f003 030c 	and.w	r3, r3, #12
 800c336:	2b0c      	cmp	r3, #12
 800c338:	f200 8206 	bhi.w	800c748 <HAL_RCC_GetSysClockFreq+0x440>
 800c33c:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c342:	bf00      	nop
 800c344:	0800c379 	.word	0x0800c379
 800c348:	0800c749 	.word	0x0800c749
 800c34c:	0800c749 	.word	0x0800c749
 800c350:	0800c749 	.word	0x0800c749
 800c354:	0800c381 	.word	0x0800c381
 800c358:	0800c749 	.word	0x0800c749
 800c35c:	0800c749 	.word	0x0800c749
 800c360:	0800c749 	.word	0x0800c749
 800c364:	0800c389 	.word	0x0800c389
 800c368:	0800c749 	.word	0x0800c749
 800c36c:	0800c749 	.word	0x0800c749
 800c370:	0800c749 	.word	0x0800c749
 800c374:	0800c579 	.word	0x0800c579
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c378:	4bb9      	ldr	r3, [pc, #740]	; (800c660 <HAL_RCC_GetSysClockFreq+0x358>)
 800c37a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c37e:	e1e7      	b.n	800c750 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c380:	4bb8      	ldr	r3, [pc, #736]	; (800c664 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c386:	e1e3      	b.n	800c750 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c388:	4bb4      	ldr	r3, [pc, #720]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c394:	4bb1      	ldr	r3, [pc, #708]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d071      	beq.n	800c484 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3a0:	4bae      	ldr	r3, [pc, #696]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	099b      	lsrs	r3, r3, #6
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	f04f 0000 	mov.w	r0, #0
 800c3ce:	f04f 0100 	mov.w	r1, #0
 800c3d2:	0159      	lsls	r1, r3, #5
 800c3d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c3d8:	0150      	lsls	r0, r2, #5
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4621      	mov	r1, r4
 800c3e0:	1a51      	subs	r1, r2, r1
 800c3e2:	6439      	str	r1, [r7, #64]	; 0x40
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	eb63 0301 	sbc.w	r3, r3, r1
 800c3ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ec:	f04f 0200 	mov.w	r2, #0
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	018b      	lsls	r3, r1, #6
 800c3fc:	4641      	mov	r1, r8
 800c3fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c402:	4641      	mov	r1, r8
 800c404:	018a      	lsls	r2, r1, #6
 800c406:	4641      	mov	r1, r8
 800c408:	1a51      	subs	r1, r2, r1
 800c40a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c40c:	4649      	mov	r1, r9
 800c40e:	eb63 0301 	sbc.w	r3, r3, r1
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c414:	f04f 0200 	mov.w	r2, #0
 800c418:	f04f 0300 	mov.w	r3, #0
 800c41c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c420:	4649      	mov	r1, r9
 800c422:	00cb      	lsls	r3, r1, #3
 800c424:	4641      	mov	r1, r8
 800c426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c42a:	4641      	mov	r1, r8
 800c42c:	00ca      	lsls	r2, r1, #3
 800c42e:	4610      	mov	r0, r2
 800c430:	4619      	mov	r1, r3
 800c432:	4603      	mov	r3, r0
 800c434:	4622      	mov	r2, r4
 800c436:	189b      	adds	r3, r3, r2
 800c438:	633b      	str	r3, [r7, #48]	; 0x30
 800c43a:	462b      	mov	r3, r5
 800c43c:	460a      	mov	r2, r1
 800c43e:	eb42 0303 	adc.w	r3, r2, r3
 800c442:	637b      	str	r3, [r7, #52]	; 0x34
 800c444:	f04f 0200 	mov.w	r2, #0
 800c448:	f04f 0300 	mov.w	r3, #0
 800c44c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c450:	4629      	mov	r1, r5
 800c452:	024b      	lsls	r3, r1, #9
 800c454:	4621      	mov	r1, r4
 800c456:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c45a:	4621      	mov	r1, r4
 800c45c:	024a      	lsls	r2, r1, #9
 800c45e:	4610      	mov	r0, r2
 800c460:	4619      	mov	r1, r3
 800c462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c466:	2200      	movs	r2, #0
 800c468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c46c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c470:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c474:	f7fc fbea 	bl	8008c4c <__aeabi_uldivmod>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4613      	mov	r3, r2
 800c47e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c482:	e067      	b.n	800c554 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c484:	4b75      	ldr	r3, [pc, #468]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	099b      	lsrs	r3, r3, #6
 800c48a:	2200      	movs	r2, #0
 800c48c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c490:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c49e:	2300      	movs	r3, #0
 800c4a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c4a6:	4622      	mov	r2, r4
 800c4a8:	462b      	mov	r3, r5
 800c4aa:	f04f 0000 	mov.w	r0, #0
 800c4ae:	f04f 0100 	mov.w	r1, #0
 800c4b2:	0159      	lsls	r1, r3, #5
 800c4b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c4b8:	0150      	lsls	r0, r2, #5
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4621      	mov	r1, r4
 800c4c0:	1a51      	subs	r1, r2, r1
 800c4c2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	eb63 0301 	sbc.w	r3, r3, r1
 800c4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4cc:	f04f 0200 	mov.w	r2, #0
 800c4d0:	f04f 0300 	mov.w	r3, #0
 800c4d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c4d8:	4649      	mov	r1, r9
 800c4da:	018b      	lsls	r3, r1, #6
 800c4dc:	4641      	mov	r1, r8
 800c4de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c4e2:	4641      	mov	r1, r8
 800c4e4:	018a      	lsls	r2, r1, #6
 800c4e6:	4641      	mov	r1, r8
 800c4e8:	ebb2 0a01 	subs.w	sl, r2, r1
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	eb63 0b01 	sbc.w	fp, r3, r1
 800c4f2:	f04f 0200 	mov.w	r2, #0
 800c4f6:	f04f 0300 	mov.w	r3, #0
 800c4fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c4fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c502:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c506:	4692      	mov	sl, r2
 800c508:	469b      	mov	fp, r3
 800c50a:	4623      	mov	r3, r4
 800c50c:	eb1a 0303 	adds.w	r3, sl, r3
 800c510:	623b      	str	r3, [r7, #32]
 800c512:	462b      	mov	r3, r5
 800c514:	eb4b 0303 	adc.w	r3, fp, r3
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
 800c51a:	f04f 0200 	mov.w	r2, #0
 800c51e:	f04f 0300 	mov.w	r3, #0
 800c522:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c526:	4629      	mov	r1, r5
 800c528:	028b      	lsls	r3, r1, #10
 800c52a:	4621      	mov	r1, r4
 800c52c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c530:	4621      	mov	r1, r4
 800c532:	028a      	lsls	r2, r1, #10
 800c534:	4610      	mov	r0, r2
 800c536:	4619      	mov	r1, r3
 800c538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c53c:	2200      	movs	r2, #0
 800c53e:	673b      	str	r3, [r7, #112]	; 0x70
 800c540:	677a      	str	r2, [r7, #116]	; 0x74
 800c542:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c546:	f7fc fb81 	bl	8008c4c <__aeabi_uldivmod>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	4613      	mov	r3, r2
 800c550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c554:	4b41      	ldr	r3, [pc, #260]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	0c1b      	lsrs	r3, r3, #16
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	3301      	adds	r3, #1
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c56a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c576:	e0eb      	b.n	800c750 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c578:	4b38      	ldr	r3, [pc, #224]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c584:	4b35      	ldr	r3, [pc, #212]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d06b      	beq.n	800c668 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c590:	4b32      	ldr	r3, [pc, #200]	; (800c65c <HAL_RCC_GetSysClockFreq+0x354>)
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	099b      	lsrs	r3, r3, #6
 800c596:	2200      	movs	r2, #0
 800c598:	66bb      	str	r3, [r7, #104]	; 0x68
 800c59a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c59c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a2:	663b      	str	r3, [r7, #96]	; 0x60
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	667b      	str	r3, [r7, #100]	; 0x64
 800c5a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f04f 0000 	mov.w	r0, #0
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	0159      	lsls	r1, r3, #5
 800c5ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c5be:	0150      	lsls	r0, r2, #5
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	1a51      	subs	r1, r2, r1
 800c5c8:	61b9      	str	r1, [r7, #24]
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	eb63 0301 	sbc.w	r3, r3, r1
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c5de:	4659      	mov	r1, fp
 800c5e0:	018b      	lsls	r3, r1, #6
 800c5e2:	4651      	mov	r1, sl
 800c5e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c5e8:	4651      	mov	r1, sl
 800c5ea:	018a      	lsls	r2, r1, #6
 800c5ec:	4651      	mov	r1, sl
 800c5ee:	ebb2 0801 	subs.w	r8, r2, r1
 800c5f2:	4659      	mov	r1, fp
 800c5f4:	eb63 0901 	sbc.w	r9, r3, r1
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	f04f 0300 	mov.w	r3, #0
 800c600:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c604:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c608:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c60c:	4690      	mov	r8, r2
 800c60e:	4699      	mov	r9, r3
 800c610:	4623      	mov	r3, r4
 800c612:	eb18 0303 	adds.w	r3, r8, r3
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	462b      	mov	r3, r5
 800c61a:	eb49 0303 	adc.w	r3, r9, r3
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c62c:	4629      	mov	r1, r5
 800c62e:	024b      	lsls	r3, r1, #9
 800c630:	4621      	mov	r1, r4
 800c632:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c636:	4621      	mov	r1, r4
 800c638:	024a      	lsls	r2, r1, #9
 800c63a:	4610      	mov	r0, r2
 800c63c:	4619      	mov	r1, r3
 800c63e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c642:	2200      	movs	r2, #0
 800c644:	65bb      	str	r3, [r7, #88]	; 0x58
 800c646:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c648:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c64c:	f7fc fafe 	bl	8008c4c <__aeabi_uldivmod>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4613      	mov	r3, r2
 800c656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c65a:	e065      	b.n	800c728 <HAL_RCC_GetSysClockFreq+0x420>
 800c65c:	40023800 	.word	0x40023800
 800c660:	00f42400 	.word	0x00f42400
 800c664:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c668:	4b3d      	ldr	r3, [pc, #244]	; (800c760 <HAL_RCC_GetSysClockFreq+0x458>)
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	099b      	lsrs	r3, r3, #6
 800c66e:	2200      	movs	r2, #0
 800c670:	4618      	mov	r0, r3
 800c672:	4611      	mov	r1, r2
 800c674:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c678:	653b      	str	r3, [r7, #80]	; 0x50
 800c67a:	2300      	movs	r3, #0
 800c67c:	657b      	str	r3, [r7, #84]	; 0x54
 800c67e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c682:	4642      	mov	r2, r8
 800c684:	464b      	mov	r3, r9
 800c686:	f04f 0000 	mov.w	r0, #0
 800c68a:	f04f 0100 	mov.w	r1, #0
 800c68e:	0159      	lsls	r1, r3, #5
 800c690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c694:	0150      	lsls	r0, r2, #5
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4641      	mov	r1, r8
 800c69c:	1a51      	subs	r1, r2, r1
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	eb63 0301 	sbc.w	r3, r3, r1
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	f04f 0300 	mov.w	r3, #0
 800c6b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	018b      	lsls	r3, r1, #6
 800c6b8:	4651      	mov	r1, sl
 800c6ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c6be:	4651      	mov	r1, sl
 800c6c0:	018a      	lsls	r2, r1, #6
 800c6c2:	4651      	mov	r1, sl
 800c6c4:	1a54      	subs	r4, r2, r1
 800c6c6:	4659      	mov	r1, fp
 800c6c8:	eb63 0501 	sbc.w	r5, r3, r1
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	f04f 0300 	mov.w	r3, #0
 800c6d4:	00eb      	lsls	r3, r5, #3
 800c6d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6da:	00e2      	lsls	r2, r4, #3
 800c6dc:	4614      	mov	r4, r2
 800c6de:	461d      	mov	r5, r3
 800c6e0:	4643      	mov	r3, r8
 800c6e2:	18e3      	adds	r3, r4, r3
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	464b      	mov	r3, r9
 800c6e8:	eb45 0303 	adc.w	r3, r5, r3
 800c6ec:	607b      	str	r3, [r7, #4]
 800c6ee:	f04f 0200 	mov.w	r2, #0
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	028b      	lsls	r3, r1, #10
 800c6fe:	4621      	mov	r1, r4
 800c700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c704:	4621      	mov	r1, r4
 800c706:	028a      	lsls	r2, r1, #10
 800c708:	4610      	mov	r0, r2
 800c70a:	4619      	mov	r1, r3
 800c70c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c710:	2200      	movs	r2, #0
 800c712:	64bb      	str	r3, [r7, #72]	; 0x48
 800c714:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c716:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c71a:	f7fc fa97 	bl	8008c4c <__aeabi_uldivmod>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4613      	mov	r3, r2
 800c724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c728:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <HAL_RCC_GetSysClockFreq+0x458>)
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	0f1b      	lsrs	r3, r3, #28
 800c72e:	f003 0307 	and.w	r3, r3, #7
 800c732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c73a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c746:	e003      	b.n	800c750 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c748:	4b06      	ldr	r3, [pc, #24]	; (800c764 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c74a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c74e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c754:	4618      	mov	r0, r3
 800c756:	37b8      	adds	r7, #184	; 0xb8
 800c758:	46bd      	mov	sp, r7
 800c75a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c75e:	bf00      	nop
 800c760:	40023800 	.word	0x40023800
 800c764:	00f42400 	.word	0x00f42400

0800c768 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e28d      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8083 	beq.w	800c88e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c788:	4b94      	ldr	r3, [pc, #592]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f003 030c 	and.w	r3, r3, #12
 800c790:	2b04      	cmp	r3, #4
 800c792:	d019      	beq.n	800c7c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c794:	4b91      	ldr	r3, [pc, #580]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c79c:	2b08      	cmp	r3, #8
 800c79e:	d106      	bne.n	800c7ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c7a0:	4b8e      	ldr	r3, [pc, #568]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ac:	d00c      	beq.n	800c7c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7ae:	4b8b      	ldr	r3, [pc, #556]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c7b6:	2b0c      	cmp	r3, #12
 800c7b8:	d112      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7ba:	4b88      	ldr	r3, [pc, #544]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c6:	d10b      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7c8:	4b84      	ldr	r3, [pc, #528]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d05b      	beq.n	800c88c <HAL_RCC_OscConfig+0x124>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d157      	bne.n	800c88c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e25a      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e8:	d106      	bne.n	800c7f8 <HAL_RCC_OscConfig+0x90>
 800c7ea:	4b7c      	ldr	r3, [pc, #496]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a7b      	ldr	r2, [pc, #492]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c7f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	e01d      	b.n	800c834 <HAL_RCC_OscConfig+0xcc>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c800:	d10c      	bne.n	800c81c <HAL_RCC_OscConfig+0xb4>
 800c802:	4b76      	ldr	r3, [pc, #472]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a75      	ldr	r2, [pc, #468]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	4b73      	ldr	r3, [pc, #460]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a72      	ldr	r2, [pc, #456]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	e00b      	b.n	800c834 <HAL_RCC_OscConfig+0xcc>
 800c81c:	4b6f      	ldr	r3, [pc, #444]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a6e      	ldr	r2, [pc, #440]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	4b6c      	ldr	r3, [pc, #432]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a6b      	ldr	r2, [pc, #428]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c82e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d013      	beq.n	800c864 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c83c:	f7fe f8f0 	bl	800aa20 <HAL_GetTick>
 800c840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c842:	e008      	b.n	800c856 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c844:	f7fe f8ec 	bl	800aa20 <HAL_GetTick>
 800c848:	4602      	mov	r2, r0
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b64      	cmp	r3, #100	; 0x64
 800c850:	d901      	bls.n	800c856 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e21f      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c856:	4b61      	ldr	r3, [pc, #388]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f0      	beq.n	800c844 <HAL_RCC_OscConfig+0xdc>
 800c862:	e014      	b.n	800c88e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c864:	f7fe f8dc 	bl	800aa20 <HAL_GetTick>
 800c868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c86a:	e008      	b.n	800c87e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c86c:	f7fe f8d8 	bl	800aa20 <HAL_GetTick>
 800c870:	4602      	mov	r2, r0
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	2b64      	cmp	r3, #100	; 0x64
 800c878:	d901      	bls.n	800c87e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e20b      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c87e:	4b57      	ldr	r3, [pc, #348]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f0      	bne.n	800c86c <HAL_RCC_OscConfig+0x104>
 800c88a:	e000      	b.n	800c88e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c88c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d06f      	beq.n	800c97a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c89a:	4b50      	ldr	r3, [pc, #320]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f003 030c 	and.w	r3, r3, #12
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d017      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c8a6:	4b4d      	ldr	r3, [pc, #308]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c8ae:	2b08      	cmp	r3, #8
 800c8b0:	d105      	bne.n	800c8be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c8b2:	4b4a      	ldr	r3, [pc, #296]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00b      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8be:	4b47      	ldr	r3, [pc, #284]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c8c6:	2b0c      	cmp	r3, #12
 800c8c8:	d11c      	bne.n	800c904 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8ca:	4b44      	ldr	r3, [pc, #272]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d116      	bne.n	800c904 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8d6:	4b41      	ldr	r3, [pc, #260]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 0302 	and.w	r3, r3, #2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d005      	beq.n	800c8ee <HAL_RCC_OscConfig+0x186>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d001      	beq.n	800c8ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e1d3      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8ee:	4b3b      	ldr	r3, [pc, #236]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	4937      	ldr	r1, [pc, #220]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c902:	e03a      	b.n	800c97a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d020      	beq.n	800c94e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c90c:	4b34      	ldr	r3, [pc, #208]	; (800c9e0 <HAL_RCC_OscConfig+0x278>)
 800c90e:	2201      	movs	r2, #1
 800c910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c912:	f7fe f885 	bl	800aa20 <HAL_GetTick>
 800c916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c918:	e008      	b.n	800c92c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c91a:	f7fe f881 	bl	800aa20 <HAL_GetTick>
 800c91e:	4602      	mov	r2, r0
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	2b02      	cmp	r3, #2
 800c926:	d901      	bls.n	800c92c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c928:	2303      	movs	r3, #3
 800c92a:	e1b4      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c92c:	4b2b      	ldr	r3, [pc, #172]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0f0      	beq.n	800c91a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c938:	4b28      	ldr	r3, [pc, #160]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	4925      	ldr	r1, [pc, #148]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	600b      	str	r3, [r1, #0]
 800c94c:	e015      	b.n	800c97a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c94e:	4b24      	ldr	r3, [pc, #144]	; (800c9e0 <HAL_RCC_OscConfig+0x278>)
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c954:	f7fe f864 	bl	800aa20 <HAL_GetTick>
 800c958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c95a:	e008      	b.n	800c96e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c95c:	f7fe f860 	bl	800aa20 <HAL_GetTick>
 800c960:	4602      	mov	r2, r0
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	2b02      	cmp	r3, #2
 800c968:	d901      	bls.n	800c96e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c96a:	2303      	movs	r3, #3
 800c96c:	e193      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c96e:	4b1b      	ldr	r3, [pc, #108]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1f0      	bne.n	800c95c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	2b00      	cmp	r3, #0
 800c984:	d036      	beq.n	800c9f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d016      	beq.n	800c9bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c98e:	4b15      	ldr	r3, [pc, #84]	; (800c9e4 <HAL_RCC_OscConfig+0x27c>)
 800c990:	2201      	movs	r2, #1
 800c992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c994:	f7fe f844 	bl	800aa20 <HAL_GetTick>
 800c998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c99a:	e008      	b.n	800c9ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c99c:	f7fe f840 	bl	800aa20 <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d901      	bls.n	800c9ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e173      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9ae:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <HAL_RCC_OscConfig+0x274>)
 800c9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b2:	f003 0302 	and.w	r3, r3, #2
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0f0      	beq.n	800c99c <HAL_RCC_OscConfig+0x234>
 800c9ba:	e01b      	b.n	800c9f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c9bc:	4b09      	ldr	r3, [pc, #36]	; (800c9e4 <HAL_RCC_OscConfig+0x27c>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9c2:	f7fe f82d 	bl	800aa20 <HAL_GetTick>
 800c9c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9c8:	e00e      	b.n	800c9e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c9ca:	f7fe f829 	bl	800aa20 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d907      	bls.n	800c9e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e15c      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
 800c9dc:	40023800 	.word	0x40023800
 800c9e0:	42470000 	.word	0x42470000
 800c9e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9e8:	4b8a      	ldr	r3, [pc, #552]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800c9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1ea      	bne.n	800c9ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8097 	beq.w	800cb30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca02:	2300      	movs	r3, #0
 800ca04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca06:	4b83      	ldr	r3, [pc, #524]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10f      	bne.n	800ca32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca12:	2300      	movs	r3, #0
 800ca14:	60bb      	str	r3, [r7, #8]
 800ca16:	4b7f      	ldr	r3, [pc, #508]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	4a7e      	ldr	r2, [pc, #504]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca20:	6413      	str	r3, [r2, #64]	; 0x40
 800ca22:	4b7c      	ldr	r3, [pc, #496]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca2a:	60bb      	str	r3, [r7, #8]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca32:	4b79      	ldr	r3, [pc, #484]	; (800cc18 <HAL_RCC_OscConfig+0x4b0>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d118      	bne.n	800ca70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca3e:	4b76      	ldr	r3, [pc, #472]	; (800cc18 <HAL_RCC_OscConfig+0x4b0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a75      	ldr	r2, [pc, #468]	; (800cc18 <HAL_RCC_OscConfig+0x4b0>)
 800ca44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca4a:	f7fd ffe9 	bl	800aa20 <HAL_GetTick>
 800ca4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca50:	e008      	b.n	800ca64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca52:	f7fd ffe5 	bl	800aa20 <HAL_GetTick>
 800ca56:	4602      	mov	r2, r0
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d901      	bls.n	800ca64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e118      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca64:	4b6c      	ldr	r3, [pc, #432]	; (800cc18 <HAL_RCC_OscConfig+0x4b0>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d0f0      	beq.n	800ca52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d106      	bne.n	800ca86 <HAL_RCC_OscConfig+0x31e>
 800ca78:	4b66      	ldr	r3, [pc, #408]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca7c:	4a65      	ldr	r2, [pc, #404]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	6713      	str	r3, [r2, #112]	; 0x70
 800ca84:	e01c      	b.n	800cac0 <HAL_RCC_OscConfig+0x358>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	2b05      	cmp	r3, #5
 800ca8c:	d10c      	bne.n	800caa8 <HAL_RCC_OscConfig+0x340>
 800ca8e:	4b61      	ldr	r3, [pc, #388]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	4a60      	ldr	r2, [pc, #384]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca94:	f043 0304 	orr.w	r3, r3, #4
 800ca98:	6713      	str	r3, [r2, #112]	; 0x70
 800ca9a:	4b5e      	ldr	r3, [pc, #376]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800ca9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9e:	4a5d      	ldr	r2, [pc, #372]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800caa0:	f043 0301 	orr.w	r3, r3, #1
 800caa4:	6713      	str	r3, [r2, #112]	; 0x70
 800caa6:	e00b      	b.n	800cac0 <HAL_RCC_OscConfig+0x358>
 800caa8:	4b5a      	ldr	r3, [pc, #360]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800caaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caac:	4a59      	ldr	r2, [pc, #356]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800caae:	f023 0301 	bic.w	r3, r3, #1
 800cab2:	6713      	str	r3, [r2, #112]	; 0x70
 800cab4:	4b57      	ldr	r3, [pc, #348]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab8:	4a56      	ldr	r2, [pc, #344]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800caba:	f023 0304 	bic.w	r3, r3, #4
 800cabe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d015      	beq.n	800caf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cac8:	f7fd ffaa 	bl	800aa20 <HAL_GetTick>
 800cacc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cace:	e00a      	b.n	800cae6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cad0:	f7fd ffa6 	bl	800aa20 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	f241 3288 	movw	r2, #5000	; 0x1388
 800cade:	4293      	cmp	r3, r2
 800cae0:	d901      	bls.n	800cae6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e0d7      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cae6:	4b4b      	ldr	r3, [pc, #300]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caea:	f003 0302 	and.w	r3, r3, #2
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0ee      	beq.n	800cad0 <HAL_RCC_OscConfig+0x368>
 800caf2:	e014      	b.n	800cb1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caf4:	f7fd ff94 	bl	800aa20 <HAL_GetTick>
 800caf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cafa:	e00a      	b.n	800cb12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cafc:	f7fd ff90 	bl	800aa20 <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d901      	bls.n	800cb12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e0c1      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb12:	4b40      	ldr	r3, [pc, #256]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1ee      	bne.n	800cafc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d105      	bne.n	800cb30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb24:	4b3b      	ldr	r3, [pc, #236]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb28:	4a3a      	ldr	r2, [pc, #232]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cb2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 80ad 	beq.w	800cc94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb3a:	4b36      	ldr	r3, [pc, #216]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f003 030c 	and.w	r3, r3, #12
 800cb42:	2b08      	cmp	r3, #8
 800cb44:	d060      	beq.n	800cc08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d145      	bne.n	800cbda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb4e:	4b33      	ldr	r3, [pc, #204]	; (800cc1c <HAL_RCC_OscConfig+0x4b4>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb54:	f7fd ff64 	bl	800aa20 <HAL_GetTick>
 800cb58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb5a:	e008      	b.n	800cb6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb5c:	f7fd ff60 	bl	800aa20 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d901      	bls.n	800cb6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e093      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb6e:	4b29      	ldr	r3, [pc, #164]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1f0      	bne.n	800cb5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	69da      	ldr	r2, [r3, #28]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	019b      	lsls	r3, r3, #6
 800cb8a:	431a      	orrs	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb90:	085b      	lsrs	r3, r3, #1
 800cb92:	3b01      	subs	r3, #1
 800cb94:	041b      	lsls	r3, r3, #16
 800cb96:	431a      	orrs	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9c:	061b      	lsls	r3, r3, #24
 800cb9e:	431a      	orrs	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	071b      	lsls	r3, r3, #28
 800cba6:	491b      	ldr	r1, [pc, #108]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cbac:	4b1b      	ldr	r3, [pc, #108]	; (800cc1c <HAL_RCC_OscConfig+0x4b4>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbb2:	f7fd ff35 	bl	800aa20 <HAL_GetTick>
 800cbb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbb8:	e008      	b.n	800cbcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbba:	f7fd ff31 	bl	800aa20 <HAL_GetTick>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d901      	bls.n	800cbcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e064      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbcc:	4b11      	ldr	r3, [pc, #68]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0f0      	beq.n	800cbba <HAL_RCC_OscConfig+0x452>
 800cbd8:	e05c      	b.n	800cc94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbda:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <HAL_RCC_OscConfig+0x4b4>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbe0:	f7fd ff1e 	bl	800aa20 <HAL_GetTick>
 800cbe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbe6:	e008      	b.n	800cbfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbe8:	f7fd ff1a 	bl	800aa20 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d901      	bls.n	800cbfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	e04d      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbfa:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <HAL_RCC_OscConfig+0x4ac>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1f0      	bne.n	800cbe8 <HAL_RCC_OscConfig+0x480>
 800cc06:	e045      	b.n	800cc94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d107      	bne.n	800cc20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e040      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
 800cc14:	40023800 	.word	0x40023800
 800cc18:	40007000 	.word	0x40007000
 800cc1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cc20:	4b1f      	ldr	r3, [pc, #124]	; (800cca0 <HAL_RCC_OscConfig+0x538>)
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d030      	beq.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d129      	bne.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d122      	bne.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc50:	4013      	ands	r3, r2
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d119      	bne.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc66:	085b      	lsrs	r3, r3, #1
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d10f      	bne.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d107      	bne.n	800cc90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d001      	beq.n	800cc94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e000      	b.n	800cc96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	40023800 	.word	0x40023800

0800cca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e041      	b.n	800cd3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d106      	bne.n	800ccd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7fd fb7a 	bl	800a3c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4619      	mov	r1, r3
 800cce2:	4610      	mov	r0, r2
 800cce4:	f000 fc7a 	bl	800d5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
	...

0800cd44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d001      	beq.n	800cd5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e04e      	b.n	800cdfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 0201 	orr.w	r2, r2, #1
 800cd72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a23      	ldr	r2, [pc, #140]	; (800ce08 <HAL_TIM_Base_Start_IT+0xc4>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d022      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd86:	d01d      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a1f      	ldr	r2, [pc, #124]	; (800ce0c <HAL_TIM_Base_Start_IT+0xc8>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d018      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a1e      	ldr	r2, [pc, #120]	; (800ce10 <HAL_TIM_Base_Start_IT+0xcc>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d013      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a1c      	ldr	r2, [pc, #112]	; (800ce14 <HAL_TIM_Base_Start_IT+0xd0>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d00e      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a1b      	ldr	r2, [pc, #108]	; (800ce18 <HAL_TIM_Base_Start_IT+0xd4>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d009      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a19      	ldr	r2, [pc, #100]	; (800ce1c <HAL_TIM_Base_Start_IT+0xd8>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d004      	beq.n	800cdc4 <HAL_TIM_Base_Start_IT+0x80>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a18      	ldr	r2, [pc, #96]	; (800ce20 <HAL_TIM_Base_Start_IT+0xdc>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d111      	bne.n	800cde8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f003 0307 	and.w	r3, r3, #7
 800cdce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b06      	cmp	r3, #6
 800cdd4:	d010      	beq.n	800cdf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f042 0201 	orr.w	r2, r2, #1
 800cde4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cde6:	e007      	b.n	800cdf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f042 0201 	orr.w	r2, r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	40010000 	.word	0x40010000
 800ce0c:	40000400 	.word	0x40000400
 800ce10:	40000800 	.word	0x40000800
 800ce14:	40000c00 	.word	0x40000c00
 800ce18:	40010400 	.word	0x40010400
 800ce1c:	40014000 	.word	0x40014000
 800ce20:	40001800 	.word	0x40001800

0800ce24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e041      	b.n	800ceba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f839 	bl	800cec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2202      	movs	r2, #2
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	4619      	mov	r1, r3
 800ce62:	4610      	mov	r0, r2
 800ce64:	f000 fbba 	bl	800d5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
	...

0800ced8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d109      	bne.n	800cefc <HAL_TIM_PWM_Start+0x24>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	bf14      	ite	ne
 800cef4:	2301      	movne	r3, #1
 800cef6:	2300      	moveq	r3, #0
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	e022      	b.n	800cf42 <HAL_TIM_PWM_Start+0x6a>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b04      	cmp	r3, #4
 800cf00:	d109      	bne.n	800cf16 <HAL_TIM_PWM_Start+0x3e>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	bf14      	ite	ne
 800cf0e:	2301      	movne	r3, #1
 800cf10:	2300      	moveq	r3, #0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	e015      	b.n	800cf42 <HAL_TIM_PWM_Start+0x6a>
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b08      	cmp	r3, #8
 800cf1a:	d109      	bne.n	800cf30 <HAL_TIM_PWM_Start+0x58>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	bf14      	ite	ne
 800cf28:	2301      	movne	r3, #1
 800cf2a:	2300      	moveq	r3, #0
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	e008      	b.n	800cf42 <HAL_TIM_PWM_Start+0x6a>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	bf14      	ite	ne
 800cf3c:	2301      	movne	r3, #1
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e07c      	b.n	800d044 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d104      	bne.n	800cf5a <HAL_TIM_PWM_Start+0x82>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf58:	e013      	b.n	800cf82 <HAL_TIM_PWM_Start+0xaa>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d104      	bne.n	800cf6a <HAL_TIM_PWM_Start+0x92>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2202      	movs	r2, #2
 800cf64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf68:	e00b      	b.n	800cf82 <HAL_TIM_PWM_Start+0xaa>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d104      	bne.n	800cf7a <HAL_TIM_PWM_Start+0xa2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2202      	movs	r2, #2
 800cf74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf78:	e003      	b.n	800cf82 <HAL_TIM_PWM_Start+0xaa>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2201      	movs	r2, #1
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 fe10 	bl	800dbb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a2d      	ldr	r2, [pc, #180]	; (800d04c <HAL_TIM_PWM_Start+0x174>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d004      	beq.n	800cfa4 <HAL_TIM_PWM_Start+0xcc>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a2c      	ldr	r2, [pc, #176]	; (800d050 <HAL_TIM_PWM_Start+0x178>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d101      	bne.n	800cfa8 <HAL_TIM_PWM_Start+0xd0>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e000      	b.n	800cfaa <HAL_TIM_PWM_Start+0xd2>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d007      	beq.n	800cfbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a22      	ldr	r2, [pc, #136]	; (800d04c <HAL_TIM_PWM_Start+0x174>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d022      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfd0:	d01d      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a1f      	ldr	r2, [pc, #124]	; (800d054 <HAL_TIM_PWM_Start+0x17c>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d018      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a1d      	ldr	r2, [pc, #116]	; (800d058 <HAL_TIM_PWM_Start+0x180>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d013      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1c      	ldr	r2, [pc, #112]	; (800d05c <HAL_TIM_PWM_Start+0x184>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d00e      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a16      	ldr	r2, [pc, #88]	; (800d050 <HAL_TIM_PWM_Start+0x178>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d009      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a18      	ldr	r2, [pc, #96]	; (800d060 <HAL_TIM_PWM_Start+0x188>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d004      	beq.n	800d00e <HAL_TIM_PWM_Start+0x136>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a16      	ldr	r2, [pc, #88]	; (800d064 <HAL_TIM_PWM_Start+0x18c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d111      	bne.n	800d032 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	f003 0307 	and.w	r3, r3, #7
 800d018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b06      	cmp	r3, #6
 800d01e:	d010      	beq.n	800d042 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f042 0201 	orr.w	r2, r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d030:	e007      	b.n	800d042 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f042 0201 	orr.w	r2, r2, #1
 800d040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	40010000 	.word	0x40010000
 800d050:	40010400 	.word	0x40010400
 800d054:	40000400 	.word	0x40000400
 800d058:	40000800 	.word	0x40000800
 800d05c:	40000c00 	.word	0x40000c00
 800d060:	40014000 	.word	0x40014000
 800d064:	40001800 	.word	0x40001800

0800d068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	f003 0302 	and.w	r3, r3, #2
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d122      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d11b      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f06f 0202 	mvn.w	r2, #2
 800d094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fa77 	bl	800d59e <HAL_TIM_IC_CaptureCallback>
 800d0b0:	e005      	b.n	800d0be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fa69 	bl	800d58a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fa7a 	bl	800d5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f003 0304 	and.w	r3, r3, #4
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d122      	bne.n	800d118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f003 0304 	and.w	r3, r3, #4
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d11b      	bne.n	800d118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f06f 0204 	mvn.w	r2, #4
 800d0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa4d 	bl	800d59e <HAL_TIM_IC_CaptureCallback>
 800d104:	e005      	b.n	800d112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fa3f 	bl	800d58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fa50 	bl	800d5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b08      	cmp	r3, #8
 800d124:	d122      	bne.n	800d16c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	f003 0308 	and.w	r3, r3, #8
 800d130:	2b08      	cmp	r3, #8
 800d132:	d11b      	bne.n	800d16c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0208 	mvn.w	r2, #8
 800d13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2204      	movs	r2, #4
 800d142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	69db      	ldr	r3, [r3, #28]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d003      	beq.n	800d15a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fa23 	bl	800d59e <HAL_TIM_IC_CaptureCallback>
 800d158:	e005      	b.n	800d166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fa15 	bl	800d58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fa26 	bl	800d5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	f003 0310 	and.w	r3, r3, #16
 800d176:	2b10      	cmp	r3, #16
 800d178:	d122      	bne.n	800d1c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f003 0310 	and.w	r3, r3, #16
 800d184:	2b10      	cmp	r3, #16
 800d186:	d11b      	bne.n	800d1c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f06f 0210 	mvn.w	r2, #16
 800d190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2208      	movs	r2, #8
 800d196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	69db      	ldr	r3, [r3, #28]
 800d19e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d003      	beq.n	800d1ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f9f9 	bl	800d59e <HAL_TIM_IC_CaptureCallback>
 800d1ac:	e005      	b.n	800d1ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f9eb 	bl	800d58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f9fc 	bl	800d5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d10e      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d107      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f06f 0201 	mvn.w	r2, #1
 800d1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7fc fbfe 	bl	80099e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f6:	2b80      	cmp	r3, #128	; 0x80
 800d1f8:	d10e      	bne.n	800d218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d204:	2b80      	cmp	r3, #128	; 0x80
 800d206:	d107      	bne.n	800d218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fdca 	bl	800ddac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d222:	2b40      	cmp	r3, #64	; 0x40
 800d224:	d10e      	bne.n	800d244 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d230:	2b40      	cmp	r3, #64	; 0x40
 800d232:	d107      	bne.n	800d244 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f9c1 	bl	800d5c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b20      	cmp	r3, #32
 800d250:	d10e      	bne.n	800d270 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	f003 0320 	and.w	r3, r3, #32
 800d25c:	2b20      	cmp	r3, #32
 800d25e:	d107      	bne.n	800d270 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f06f 0220 	mvn.w	r2, #32
 800d268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fd94 	bl	800dd98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d292:	2302      	movs	r3, #2
 800d294:	e0ae      	b.n	800d3f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b0c      	cmp	r3, #12
 800d2a2:	f200 809f 	bhi.w	800d3e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d2a6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ac:	0800d2e1 	.word	0x0800d2e1
 800d2b0:	0800d3e5 	.word	0x0800d3e5
 800d2b4:	0800d3e5 	.word	0x0800d3e5
 800d2b8:	0800d3e5 	.word	0x0800d3e5
 800d2bc:	0800d321 	.word	0x0800d321
 800d2c0:	0800d3e5 	.word	0x0800d3e5
 800d2c4:	0800d3e5 	.word	0x0800d3e5
 800d2c8:	0800d3e5 	.word	0x0800d3e5
 800d2cc:	0800d363 	.word	0x0800d363
 800d2d0:	0800d3e5 	.word	0x0800d3e5
 800d2d4:	0800d3e5 	.word	0x0800d3e5
 800d2d8:	0800d3e5 	.word	0x0800d3e5
 800d2dc:	0800d3a3 	.word	0x0800d3a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68b9      	ldr	r1, [r7, #8]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 fa18 	bl	800d71c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f042 0208 	orr.w	r2, r2, #8
 800d2fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 0204 	bic.w	r2, r2, #4
 800d30a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6999      	ldr	r1, [r3, #24]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	691a      	ldr	r2, [r3, #16]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	430a      	orrs	r2, r1
 800d31c:	619a      	str	r2, [r3, #24]
      break;
 800d31e:	e064      	b.n	800d3ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fa68 	bl	800d7fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	699a      	ldr	r2, [r3, #24]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6999      	ldr	r1, [r3, #24]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	021a      	lsls	r2, r3, #8
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	430a      	orrs	r2, r1
 800d35e:	619a      	str	r2, [r3, #24]
      break;
 800d360:	e043      	b.n	800d3ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 fabd 	bl	800d8e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	69da      	ldr	r2, [r3, #28]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f042 0208 	orr.w	r2, r2, #8
 800d37c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	69da      	ldr	r2, [r3, #28]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 0204 	bic.w	r2, r2, #4
 800d38c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	69d9      	ldr	r1, [r3, #28]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	61da      	str	r2, [r3, #28]
      break;
 800d3a0:	e023      	b.n	800d3ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fb11 	bl	800d9d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	69da      	ldr	r2, [r3, #28]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	69da      	ldr	r2, [r3, #28]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69d9      	ldr	r1, [r3, #28]
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	021a      	lsls	r2, r3, #8
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	61da      	str	r2, [r3, #28]
      break;
 800d3e2:	e002      	b.n	800d3ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800d3e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d410:	2b01      	cmp	r3, #1
 800d412:	d101      	bne.n	800d418 <HAL_TIM_ConfigClockSource+0x1c>
 800d414:	2302      	movs	r3, #2
 800d416:	e0b4      	b.n	800d582 <HAL_TIM_ConfigClockSource+0x186>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2202      	movs	r2, #2
 800d424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d43e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d450:	d03e      	beq.n	800d4d0 <HAL_TIM_ConfigClockSource+0xd4>
 800d452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d456:	f200 8087 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d45e:	f000 8086 	beq.w	800d56e <HAL_TIM_ConfigClockSource+0x172>
 800d462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d466:	d87f      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d468:	2b70      	cmp	r3, #112	; 0x70
 800d46a:	d01a      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0xa6>
 800d46c:	2b70      	cmp	r3, #112	; 0x70
 800d46e:	d87b      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d470:	2b60      	cmp	r3, #96	; 0x60
 800d472:	d050      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x11a>
 800d474:	2b60      	cmp	r3, #96	; 0x60
 800d476:	d877      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d478:	2b50      	cmp	r3, #80	; 0x50
 800d47a:	d03c      	beq.n	800d4f6 <HAL_TIM_ConfigClockSource+0xfa>
 800d47c:	2b50      	cmp	r3, #80	; 0x50
 800d47e:	d873      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d480:	2b40      	cmp	r3, #64	; 0x40
 800d482:	d058      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x13a>
 800d484:	2b40      	cmp	r3, #64	; 0x40
 800d486:	d86f      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d488:	2b30      	cmp	r3, #48	; 0x30
 800d48a:	d064      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x15a>
 800d48c:	2b30      	cmp	r3, #48	; 0x30
 800d48e:	d86b      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d490:	2b20      	cmp	r3, #32
 800d492:	d060      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x15a>
 800d494:	2b20      	cmp	r3, #32
 800d496:	d867      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d05c      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x15a>
 800d49c:	2b10      	cmp	r3, #16
 800d49e:	d05a      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x15a>
 800d4a0:	e062      	b.n	800d568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6818      	ldr	r0, [r3, #0]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	6899      	ldr	r1, [r3, #8]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f000 fb5d 	bl	800db70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d4c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	609a      	str	r2, [r3, #8]
      break;
 800d4ce:	e04f      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	6899      	ldr	r1, [r3, #8]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f000 fb46 	bl	800db70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689a      	ldr	r2, [r3, #8]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4f2:	609a      	str	r2, [r3, #8]
      break;
 800d4f4:	e03c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	6859      	ldr	r1, [r3, #4]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	461a      	mov	r2, r3
 800d504:	f000 faba 	bl	800da7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2150      	movs	r1, #80	; 0x50
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fb13 	bl	800db3a <TIM_ITRx_SetConfig>
      break;
 800d514:	e02c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6818      	ldr	r0, [r3, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6859      	ldr	r1, [r3, #4]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	461a      	mov	r2, r3
 800d524:	f000 fad9 	bl	800dada <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2160      	movs	r1, #96	; 0x60
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fb03 	bl	800db3a <TIM_ITRx_SetConfig>
      break;
 800d534:	e01c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	6859      	ldr	r1, [r3, #4]
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	461a      	mov	r2, r3
 800d544:	f000 fa9a 	bl	800da7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2140      	movs	r1, #64	; 0x40
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 faf3 	bl	800db3a <TIM_ITRx_SetConfig>
      break;
 800d554:	e00c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f000 faea 	bl	800db3a <TIM_ITRx_SetConfig>
      break;
 800d566:	e003      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	73fb      	strb	r3, [r7, #15]
      break;
 800d56c:	e000      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d56e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b083      	sub	sp, #12
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d592:	bf00      	nop
 800d594:	370c      	adds	r7, #12
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5a6:	bf00      	nop
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5ba:	bf00      	nop
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5ce:	bf00      	nop
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
	...

0800d5dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a40      	ldr	r2, [pc, #256]	; (800d6f0 <TIM_Base_SetConfig+0x114>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d013      	beq.n	800d61c <TIM_Base_SetConfig+0x40>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5fa:	d00f      	beq.n	800d61c <TIM_Base_SetConfig+0x40>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a3d      	ldr	r2, [pc, #244]	; (800d6f4 <TIM_Base_SetConfig+0x118>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d00b      	beq.n	800d61c <TIM_Base_SetConfig+0x40>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a3c      	ldr	r2, [pc, #240]	; (800d6f8 <TIM_Base_SetConfig+0x11c>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d007      	beq.n	800d61c <TIM_Base_SetConfig+0x40>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a3b      	ldr	r2, [pc, #236]	; (800d6fc <TIM_Base_SetConfig+0x120>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d003      	beq.n	800d61c <TIM_Base_SetConfig+0x40>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a3a      	ldr	r2, [pc, #232]	; (800d700 <TIM_Base_SetConfig+0x124>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d108      	bne.n	800d62e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a2f      	ldr	r2, [pc, #188]	; (800d6f0 <TIM_Base_SetConfig+0x114>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d02b      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d63c:	d027      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a2c      	ldr	r2, [pc, #176]	; (800d6f4 <TIM_Base_SetConfig+0x118>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d023      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a2b      	ldr	r2, [pc, #172]	; (800d6f8 <TIM_Base_SetConfig+0x11c>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d01f      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a2a      	ldr	r2, [pc, #168]	; (800d6fc <TIM_Base_SetConfig+0x120>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d01b      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a29      	ldr	r2, [pc, #164]	; (800d700 <TIM_Base_SetConfig+0x124>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d017      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a28      	ldr	r2, [pc, #160]	; (800d704 <TIM_Base_SetConfig+0x128>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d013      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a27      	ldr	r2, [pc, #156]	; (800d708 <TIM_Base_SetConfig+0x12c>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d00f      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a26      	ldr	r2, [pc, #152]	; (800d70c <TIM_Base_SetConfig+0x130>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d00b      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a25      	ldr	r2, [pc, #148]	; (800d710 <TIM_Base_SetConfig+0x134>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d007      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a24      	ldr	r2, [pc, #144]	; (800d714 <TIM_Base_SetConfig+0x138>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d003      	beq.n	800d68e <TIM_Base_SetConfig+0xb2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a23      	ldr	r2, [pc, #140]	; (800d718 <TIM_Base_SetConfig+0x13c>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d108      	bne.n	800d6a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a0a      	ldr	r2, [pc, #40]	; (800d6f0 <TIM_Base_SetConfig+0x114>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d003      	beq.n	800d6d4 <TIM_Base_SetConfig+0xf8>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a0c      	ldr	r2, [pc, #48]	; (800d700 <TIM_Base_SetConfig+0x124>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d103      	bne.n	800d6dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	615a      	str	r2, [r3, #20]
}
 800d6e2:	bf00      	nop
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	40010000 	.word	0x40010000
 800d6f4:	40000400 	.word	0x40000400
 800d6f8:	40000800 	.word	0x40000800
 800d6fc:	40000c00 	.word	0x40000c00
 800d700:	40010400 	.word	0x40010400
 800d704:	40014000 	.word	0x40014000
 800d708:	40014400 	.word	0x40014400
 800d70c:	40014800 	.word	0x40014800
 800d710:	40001800 	.word	0x40001800
 800d714:	40001c00 	.word	0x40001c00
 800d718:	40002000 	.word	0x40002000

0800d71c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	f023 0201 	bic.w	r2, r3, #1
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f023 0303 	bic.w	r3, r3, #3
 800d752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	4313      	orrs	r3, r2
 800d75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f023 0302 	bic.w	r3, r3, #2
 800d764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a20      	ldr	r2, [pc, #128]	; (800d7f4 <TIM_OC1_SetConfig+0xd8>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d003      	beq.n	800d780 <TIM_OC1_SetConfig+0x64>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a1f      	ldr	r2, [pc, #124]	; (800d7f8 <TIM_OC1_SetConfig+0xdc>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d10c      	bne.n	800d79a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	f023 0308 	bic.w	r3, r3, #8
 800d786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	4313      	orrs	r3, r2
 800d790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f023 0304 	bic.w	r3, r3, #4
 800d798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a15      	ldr	r2, [pc, #84]	; (800d7f4 <TIM_OC1_SetConfig+0xd8>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d003      	beq.n	800d7aa <TIM_OC1_SetConfig+0x8e>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a14      	ldr	r2, [pc, #80]	; (800d7f8 <TIM_OC1_SetConfig+0xdc>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d111      	bne.n	800d7ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	693a      	ldr	r2, [r7, #16]
 800d7d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	621a      	str	r2, [r3, #32]
}
 800d7e8:	bf00      	nop
 800d7ea:	371c      	adds	r7, #28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	40010000 	.word	0x40010000
 800d7f8:	40010400 	.word	0x40010400

0800d7fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	f023 0210 	bic.w	r2, r3, #16
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f023 0320 	bic.w	r3, r3, #32
 800d846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	4313      	orrs	r3, r2
 800d852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a22      	ldr	r2, [pc, #136]	; (800d8e0 <TIM_OC2_SetConfig+0xe4>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d003      	beq.n	800d864 <TIM_OC2_SetConfig+0x68>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a21      	ldr	r2, [pc, #132]	; (800d8e4 <TIM_OC2_SetConfig+0xe8>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d10d      	bne.n	800d880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	011b      	lsls	r3, r3, #4
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	4313      	orrs	r3, r2
 800d876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d87e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a17      	ldr	r2, [pc, #92]	; (800d8e0 <TIM_OC2_SetConfig+0xe4>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d003      	beq.n	800d890 <TIM_OC2_SetConfig+0x94>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a16      	ldr	r2, [pc, #88]	; (800d8e4 <TIM_OC2_SetConfig+0xe8>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d113      	bne.n	800d8b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d89e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	685a      	ldr	r2, [r3, #4]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	621a      	str	r2, [r3, #32]
}
 800d8d2:	bf00      	nop
 800d8d4:	371c      	adds	r7, #28
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop
 800d8e0:	40010000 	.word	0x40010000
 800d8e4:	40010400 	.word	0x40010400

0800d8e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f023 0303 	bic.w	r3, r3, #3
 800d91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	021b      	lsls	r3, r3, #8
 800d938:	697a      	ldr	r2, [r7, #20]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a21      	ldr	r2, [pc, #132]	; (800d9c8 <TIM_OC3_SetConfig+0xe0>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d003      	beq.n	800d94e <TIM_OC3_SetConfig+0x66>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a20      	ldr	r2, [pc, #128]	; (800d9cc <TIM_OC3_SetConfig+0xe4>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d10d      	bne.n	800d96a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	4313      	orrs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <TIM_OC3_SetConfig+0xe0>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d003      	beq.n	800d97a <TIM_OC3_SetConfig+0x92>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <TIM_OC3_SetConfig+0xe4>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d113      	bne.n	800d9a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	4313      	orrs	r3, r2
 800d994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	621a      	str	r2, [r3, #32]
}
 800d9bc:	bf00      	nop
 800d9be:	371c      	adds	r7, #28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	40010000 	.word	0x40010000
 800d9cc:	40010400 	.word	0x40010400

0800d9d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	021b      	lsls	r3, r3, #8
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	4313      	orrs	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	031b      	lsls	r3, r3, #12
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	4313      	orrs	r3, r2
 800da26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a12      	ldr	r2, [pc, #72]	; (800da74 <TIM_OC4_SetConfig+0xa4>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d003      	beq.n	800da38 <TIM_OC4_SetConfig+0x68>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a11      	ldr	r2, [pc, #68]	; (800da78 <TIM_OC4_SetConfig+0xa8>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d109      	bne.n	800da4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	019b      	lsls	r3, r3, #6
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	4313      	orrs	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	621a      	str	r2, [r3, #32]
}
 800da66:	bf00      	nop
 800da68:	371c      	adds	r7, #28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	40010000 	.word	0x40010000
 800da78:	40010400 	.word	0x40010400

0800da7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b087      	sub	sp, #28
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	f023 0201 	bic.w	r2, r3, #1
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800daa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	011b      	lsls	r3, r3, #4
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	4313      	orrs	r3, r2
 800dab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f023 030a 	bic.w	r3, r3, #10
 800dab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	693a      	ldr	r2, [r7, #16]
 800dac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	621a      	str	r2, [r3, #32]
}
 800dace:	bf00      	nop
 800dad0:	371c      	adds	r7, #28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dada:	b480      	push	{r7}
 800dadc:	b087      	sub	sp, #28
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	f023 0210 	bic.w	r2, r3, #16
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	699b      	ldr	r3, [r3, #24]
 800daf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	031b      	lsls	r3, r3, #12
 800db0a:	697a      	ldr	r2, [r7, #20]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	4313      	orrs	r3, r2
 800db20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	621a      	str	r2, [r3, #32]
}
 800db2e:	bf00      	nop
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b085      	sub	sp, #20
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	4313      	orrs	r3, r2
 800db58:	f043 0307 	orr.w	r3, r3, #7
 800db5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	609a      	str	r2, [r3, #8]
}
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db70:	b480      	push	{r7}
 800db72:	b087      	sub	sp, #28
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	021a      	lsls	r2, r3, #8
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	431a      	orrs	r2, r3
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	4313      	orrs	r3, r2
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	609a      	str	r2, [r3, #8]
}
 800dba4:	bf00      	nop
 800dba6:	371c      	adds	r7, #28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f003 031f 	and.w	r3, r3, #31
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a1a      	ldr	r2, [r3, #32]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	43db      	mvns	r3, r3
 800dbd2:	401a      	ands	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6a1a      	ldr	r2, [r3, #32]
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f003 031f 	and.w	r3, r3, #31
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	621a      	str	r2, [r3, #32]
}
 800dbee:	bf00      	nop
 800dbf0:	371c      	adds	r7, #28
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
	...

0800dbfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d101      	bne.n	800dc14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc10:	2302      	movs	r3, #2
 800dc12:	e05a      	b.n	800dcca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2202      	movs	r2, #2
 800dc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a21      	ldr	r2, [pc, #132]	; (800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d022      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc60:	d01d      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a1d      	ldr	r2, [pc, #116]	; (800dcdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d018      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a1b      	ldr	r2, [pc, #108]	; (800dce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d013      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a1a      	ldr	r2, [pc, #104]	; (800dce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d00e      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a18      	ldr	r2, [pc, #96]	; (800dce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d009      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a17      	ldr	r2, [pc, #92]	; (800dcec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d004      	beq.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d10c      	bne.n	800dcb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	40010000 	.word	0x40010000
 800dcdc:	40000400 	.word	0x40000400
 800dce0:	40000800 	.word	0x40000800
 800dce4:	40000c00 	.word	0x40000c00
 800dce8:	40010400 	.word	0x40010400
 800dcec:	40014000 	.word	0x40014000
 800dcf0:	40001800 	.word	0x40001800

0800dcf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d101      	bne.n	800dd10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	e03d      	b.n	800dd8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d101      	bne.n	800ddd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e03f      	b.n	800de52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7fc fc02 	bl	800a5f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2224      	movs	r2, #36	; 0x24
 800ddf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fdd3 	bl	800e9b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	691a      	ldr	r2, [r3, #16]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	695a      	ldr	r2, [r3, #20]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68da      	ldr	r2, [r3, #12]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2220      	movs	r2, #32
 800de44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2220      	movs	r2, #32
 800de4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b08a      	sub	sp, #40	; 0x28
 800de5e:	af02      	add	r7, sp, #8
 800de60:	60f8      	str	r0, [r7, #12]
 800de62:	60b9      	str	r1, [r7, #8]
 800de64:	603b      	str	r3, [r7, #0]
 800de66:	4613      	mov	r3, r2
 800de68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b20      	cmp	r3, #32
 800de78:	d17c      	bne.n	800df74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <HAL_UART_Transmit+0x2c>
 800de80:	88fb      	ldrh	r3, [r7, #6]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e075      	b.n	800df76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de90:	2b01      	cmp	r3, #1
 800de92:	d101      	bne.n	800de98 <HAL_UART_Transmit+0x3e>
 800de94:	2302      	movs	r3, #2
 800de96:	e06e      	b.n	800df76 <HAL_UART_Transmit+0x11c>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2221      	movs	r2, #33	; 0x21
 800deaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deae:	f7fc fdb7 	bl	800aa20 <HAL_GetTick>
 800deb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	88fa      	ldrh	r2, [r7, #6]
 800deb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	88fa      	ldrh	r2, [r7, #6]
 800debe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dec8:	d108      	bne.n	800dedc <HAL_UART_Transmit+0x82>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d104      	bne.n	800dedc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	e003      	b.n	800dee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dee0:	2300      	movs	r3, #0
 800dee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800deec:	e02a      	b.n	800df44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2200      	movs	r2, #0
 800def6:	2180      	movs	r1, #128	; 0x80
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 fb13 	bl	800e524 <UART_WaitOnFlagUntilTimeout>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e036      	b.n	800df76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10b      	bne.n	800df26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	3302      	adds	r3, #2
 800df22:	61bb      	str	r3, [r7, #24]
 800df24:	e007      	b.n	800df36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	3301      	adds	r3, #1
 800df34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	b29a      	uxth	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df48:	b29b      	uxth	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1cf      	bne.n	800deee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2200      	movs	r2, #0
 800df56:	2140      	movs	r1, #64	; 0x40
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 fae3 	bl	800e524 <UART_WaitOnFlagUntilTimeout>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e006      	b.n	800df76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2220      	movs	r2, #32
 800df6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	e000      	b.n	800df76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800df74:	2302      	movs	r3, #2
  }
}
 800df76:	4618      	mov	r0, r3
 800df78:	3720      	adds	r7, #32
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b084      	sub	sp, #16
 800df82:	af00      	add	r7, sp, #0
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	4613      	mov	r3, r2
 800df8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b20      	cmp	r3, #32
 800df96:	d11d      	bne.n	800dfd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <HAL_UART_Receive_IT+0x26>
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e016      	b.n	800dfd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d101      	bne.n	800dfb6 <HAL_UART_Receive_IT+0x38>
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	e00f      	b.n	800dfd6 <HAL_UART_Receive_IT+0x58>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dfc4:	88fb      	ldrh	r3, [r7, #6]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 fb18 	bl	800e600 <UART_Start_Receive_IT>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	e000      	b.n	800dfd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800dfd4:	2302      	movs	r3, #2
  }
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b0ba      	sub	sp, #232	; 0xe8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e006:	2300      	movs	r3, #0
 800e008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e00c:	2300      	movs	r3, #0
 800e00e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e016:	f003 030f 	and.w	r3, r3, #15
 800e01a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e01e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10f      	bne.n	800e046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e02a:	f003 0320 	and.w	r3, r3, #32
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d009      	beq.n	800e046 <HAL_UART_IRQHandler+0x66>
 800e032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e036:	f003 0320 	and.w	r3, r3, #32
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fbfb 	bl	800e83a <UART_Receive_IT>
      return;
 800e044:	e256      	b.n	800e4f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 80de 	beq.w	800e20c <HAL_UART_IRQHandler+0x22c>
 800e050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e060:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 80d1 	beq.w	800e20c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00b      	beq.n	800e08e <HAL_UART_IRQHandler+0xae>
 800e076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d005      	beq.n	800e08e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e086:	f043 0201 	orr.w	r2, r3, #1
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e092:	f003 0304 	and.w	r3, r3, #4
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00b      	beq.n	800e0b2 <HAL_UART_IRQHandler+0xd2>
 800e09a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d005      	beq.n	800e0b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	f043 0202 	orr.w	r2, r3, #2
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b6:	f003 0302 	and.w	r3, r3, #2
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <HAL_UART_IRQHandler+0xf6>
 800e0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d005      	beq.n	800e0d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ce:	f043 0204 	orr.w	r2, r3, #4
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d011      	beq.n	800e106 <HAL_UART_IRQHandler+0x126>
 800e0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0e6:	f003 0320 	and.w	r3, r3, #32
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0f2:	f003 0301 	and.w	r3, r3, #1
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d005      	beq.n	800e106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fe:	f043 0208 	orr.w	r2, r3, #8
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 81ed 	beq.w	800e4ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d008      	beq.n	800e12e <HAL_UART_IRQHandler+0x14e>
 800e11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e120:	f003 0320 	and.w	r3, r3, #32
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fb86 	bl	800e83a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e138:	2b40      	cmp	r3, #64	; 0x40
 800e13a:	bf0c      	ite	eq
 800e13c:	2301      	moveq	r3, #1
 800e13e:	2300      	movne	r3, #0
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	f003 0308 	and.w	r3, r3, #8
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d103      	bne.n	800e15a <HAL_UART_IRQHandler+0x17a>
 800e152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e156:	2b00      	cmp	r3, #0
 800e158:	d04f      	beq.n	800e1fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 fa8e 	bl	800e67c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	695b      	ldr	r3, [r3, #20]
 800e166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e16a:	2b40      	cmp	r3, #64	; 0x40
 800e16c:	d141      	bne.n	800e1f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3314      	adds	r3, #20
 800e174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e17c:	e853 3f00 	ldrex	r3, [r3]
 800e180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e18c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3314      	adds	r3, #20
 800e196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e19a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e19e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e1a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e1aa:	e841 2300 	strex	r3, r2, [r1]
 800e1ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e1b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1d9      	bne.n	800e16e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d013      	beq.n	800e1ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c6:	4a7d      	ldr	r2, [pc, #500]	; (800e3bc <HAL_UART_IRQHandler+0x3dc>)
 800e1c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fd fadc 	bl	800b78c <HAL_DMA_Abort_IT>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d016      	beq.n	800e208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1e8:	e00e      	b.n	800e208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 f990 	bl	800e510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f0:	e00a      	b.n	800e208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f98c 	bl	800e510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f8:	e006      	b.n	800e208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f988 	bl	800e510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e206:	e170      	b.n	800e4ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e208:	bf00      	nop
    return;
 800e20a:	e16e      	b.n	800e4ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e210:	2b01      	cmp	r3, #1
 800e212:	f040 814a 	bne.w	800e4aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e21a:	f003 0310 	and.w	r3, r3, #16
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f000 8143 	beq.w	800e4aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e228:	f003 0310 	and.w	r3, r3, #16
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 813c 	beq.w	800e4aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e232:	2300      	movs	r3, #0
 800e234:	60bb      	str	r3, [r7, #8]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	60bb      	str	r3, [r7, #8]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	60bb      	str	r3, [r7, #8]
 800e246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e252:	2b40      	cmp	r3, #64	; 0x40
 800e254:	f040 80b4 	bne.w	800e3c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 8140 	beq.w	800e4ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e276:	429a      	cmp	r2, r3
 800e278:	f080 8139 	bcs.w	800e4ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e282:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e28e:	f000 8088 	beq.w	800e3a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	330c      	adds	r3, #12
 800e298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2a0:	e853 3f00 	ldrex	r3, [r3]
 800e2a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e2a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e2ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	330c      	adds	r3, #12
 800e2ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e2be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e2c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e2ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2ce:	e841 2300 	strex	r3, r2, [r1]
 800e2d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e2d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1d9      	bne.n	800e292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3314      	adds	r3, #20
 800e2e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2e8:	e853 3f00 	ldrex	r3, [r3]
 800e2ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e2ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2f0:	f023 0301 	bic.w	r3, r3, #1
 800e2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3314      	adds	r3, #20
 800e2fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e30a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e30e:	e841 2300 	strex	r3, r2, [r1]
 800e312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e1      	bne.n	800e2de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3314      	adds	r3, #20
 800e320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e324:	e853 3f00 	ldrex	r3, [r3]
 800e328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	3314      	adds	r3, #20
 800e33a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e33e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e346:	e841 2300 	strex	r3, r2, [r1]
 800e34a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1e3      	bne.n	800e31a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2220      	movs	r2, #32
 800e356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	330c      	adds	r3, #12
 800e366:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36a:	e853 3f00 	ldrex	r3, [r3]
 800e36e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e372:	f023 0310 	bic.w	r3, r3, #16
 800e376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	330c      	adds	r3, #12
 800e380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e384:	65ba      	str	r2, [r7, #88]	; 0x58
 800e386:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e38a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e38c:	e841 2300 	strex	r3, r2, [r1]
 800e390:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1e3      	bne.n	800e360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fd f985 	bl	800b6ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7fb f9c6 	bl	8009744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e3b8:	e099      	b.n	800e4ee <HAL_UART_IRQHandler+0x50e>
 800e3ba:	bf00      	nop
 800e3bc:	0800e743 	.word	0x0800e743
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 808b 	beq.w	800e4f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e3dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 8086 	beq.w	800e4f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	330c      	adds	r3, #12
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	e853 3f00 	ldrex	r3, [r3]
 800e3f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	330c      	adds	r3, #12
 800e406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e40a:	647a      	str	r2, [r7, #68]	; 0x44
 800e40c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e412:	e841 2300 	strex	r3, r2, [r1]
 800e416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1e3      	bne.n	800e3e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3314      	adds	r3, #20
 800e424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	623b      	str	r3, [r7, #32]
   return(result);
 800e42e:	6a3b      	ldr	r3, [r7, #32]
 800e430:	f023 0301 	bic.w	r3, r3, #1
 800e434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3314      	adds	r3, #20
 800e43e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e442:	633a      	str	r2, [r7, #48]	; 0x30
 800e444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e3      	bne.n	800e41e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2220      	movs	r2, #32
 800e45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	330c      	adds	r3, #12
 800e46a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	e853 3f00 	ldrex	r3, [r3]
 800e472:	60fb      	str	r3, [r7, #12]
   return(result);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f023 0310 	bic.w	r3, r3, #16
 800e47a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	330c      	adds	r3, #12
 800e484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e488:	61fa      	str	r2, [r7, #28]
 800e48a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48c:	69b9      	ldr	r1, [r7, #24]
 800e48e:	69fa      	ldr	r2, [r7, #28]
 800e490:	e841 2300 	strex	r3, r2, [r1]
 800e494:	617b      	str	r3, [r7, #20]
   return(result);
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1e3      	bne.n	800e464 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e49c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7fb f94e 	bl	8009744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e4a8:	e023      	b.n	800e4f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d009      	beq.n	800e4ca <HAL_UART_IRQHandler+0x4ea>
 800e4b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d003      	beq.n	800e4ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f951 	bl	800e76a <UART_Transmit_IT>
    return;
 800e4c8:	e014      	b.n	800e4f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00e      	beq.n	800e4f4 <HAL_UART_IRQHandler+0x514>
 800e4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d008      	beq.n	800e4f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f991 	bl	800e80a <UART_EndTransmit_IT>
    return;
 800e4e8:	e004      	b.n	800e4f4 <HAL_UART_IRQHandler+0x514>
    return;
 800e4ea:	bf00      	nop
 800e4ec:	e002      	b.n	800e4f4 <HAL_UART_IRQHandler+0x514>
      return;
 800e4ee:	bf00      	nop
 800e4f0:	e000      	b.n	800e4f4 <HAL_UART_IRQHandler+0x514>
      return;
 800e4f2:	bf00      	nop
  }
}
 800e4f4:	37e8      	adds	r7, #232	; 0xe8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop

0800e4fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b090      	sub	sp, #64	; 0x40
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	4613      	mov	r3, r2
 800e532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e534:	e050      	b.n	800e5d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e53c:	d04c      	beq.n	800e5d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e53e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e540:	2b00      	cmp	r3, #0
 800e542:	d007      	beq.n	800e554 <UART_WaitOnFlagUntilTimeout+0x30>
 800e544:	f7fc fa6c 	bl	800aa20 <HAL_GetTick>
 800e548:	4602      	mov	r2, r0
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	1ad3      	subs	r3, r2, r3
 800e54e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e550:	429a      	cmp	r2, r3
 800e552:	d241      	bcs.n	800e5d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	330c      	adds	r3, #12
 800e55a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	e853 3f00 	ldrex	r3, [r3]
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	330c      	adds	r3, #12
 800e572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e574:	637a      	str	r2, [r7, #52]	; 0x34
 800e576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e57c:	e841 2300 	strex	r3, r2, [r1]
 800e580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1e5      	bne.n	800e554 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3314      	adds	r3, #20
 800e58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	613b      	str	r3, [r7, #16]
   return(result);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f023 0301 	bic.w	r3, r3, #1
 800e59e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3314      	adds	r3, #20
 800e5a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5a8:	623a      	str	r2, [r7, #32]
 800e5aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	69f9      	ldr	r1, [r7, #28]
 800e5ae:	6a3a      	ldr	r2, [r7, #32]
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e5      	bne.n	800e588 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2220      	movs	r2, #32
 800e5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e00f      	b.n	800e5f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	bf0c      	ite	eq
 800e5e8:	2301      	moveq	r3, #1
 800e5ea:	2300      	movne	r3, #0
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d09f      	beq.n	800e536 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3740      	adds	r7, #64	; 0x40
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	4613      	mov	r3, r2
 800e60c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	88fa      	ldrh	r2, [r7, #6]
 800e618:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	88fa      	ldrh	r2, [r7, #6]
 800e61e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2222      	movs	r2, #34	; 0x22
 800e62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d007      	beq.n	800e64e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68da      	ldr	r2, [r3, #12]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e64c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	695a      	ldr	r2, [r3, #20]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f042 0201 	orr.w	r2, r2, #1
 800e65c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68da      	ldr	r2, [r3, #12]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f042 0220 	orr.w	r2, r2, #32
 800e66c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b095      	sub	sp, #84	; 0x54
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	330c      	adds	r3, #12
 800e68a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68e:	e853 3f00 	ldrex	r3, [r3]
 800e692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e69a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	330c      	adds	r3, #12
 800e6a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6a4:	643a      	str	r2, [r7, #64]	; 0x40
 800e6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6ac:	e841 2300 	strex	r3, r2, [r1]
 800e6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d1e5      	bne.n	800e684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3314      	adds	r3, #20
 800e6be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	6a3b      	ldr	r3, [r7, #32]
 800e6c2:	e853 3f00 	ldrex	r3, [r3]
 800e6c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f023 0301 	bic.w	r3, r3, #1
 800e6ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3314      	adds	r3, #20
 800e6d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e0:	e841 2300 	strex	r3, r2, [r1]
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1e5      	bne.n	800e6b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d119      	bne.n	800e728 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	330c      	adds	r3, #12
 800e6fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	e853 3f00 	ldrex	r3, [r3]
 800e702:	60bb      	str	r3, [r7, #8]
   return(result);
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	f023 0310 	bic.w	r3, r3, #16
 800e70a:	647b      	str	r3, [r7, #68]	; 0x44
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	330c      	adds	r3, #12
 800e712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e714:	61ba      	str	r2, [r7, #24]
 800e716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e718:	6979      	ldr	r1, [r7, #20]
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	e841 2300 	strex	r3, r2, [r1]
 800e720:	613b      	str	r3, [r7, #16]
   return(result);
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e5      	bne.n	800e6f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2220      	movs	r2, #32
 800e72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e736:	bf00      	nop
 800e738:	3754      	adds	r7, #84	; 0x54
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b084      	sub	sp, #16
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff fed7 	bl	800e510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b085      	sub	sp, #20
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b21      	cmp	r3, #33	; 0x21
 800e77c:	d13e      	bne.n	800e7fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e786:	d114      	bne.n	800e7b2 <UART_Transmit_IT+0x48>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d110      	bne.n	800e7b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	1c9a      	adds	r2, r3, #2
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	621a      	str	r2, [r3, #32]
 800e7b0:	e008      	b.n	800e7c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a1b      	ldr	r3, [r3, #32]
 800e7b6:	1c59      	adds	r1, r3, #1
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	6211      	str	r1, [r2, #32]
 800e7bc:	781a      	ldrb	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10f      	bne.n	800e7f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e7e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68da      	ldr	r2, [r3, #12]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e000      	b.n	800e7fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e7fc:	2302      	movs	r3, #2
  }
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2220      	movs	r2, #32
 800e826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff fe66 	bl	800e4fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e830:	2300      	movs	r3, #0
}
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b08c      	sub	sp, #48	; 0x30
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b22      	cmp	r3, #34	; 0x22
 800e84c:	f040 80ab 	bne.w	800e9a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e858:	d117      	bne.n	800e88a <UART_Receive_IT+0x50>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d113      	bne.n	800e88a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	b29b      	uxth	r3, r3
 800e874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e878:	b29a      	uxth	r2, r3
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e882:	1c9a      	adds	r2, r3, #2
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	629a      	str	r2, [r3, #40]	; 0x28
 800e888:	e026      	b.n	800e8d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e890:	2300      	movs	r3, #0
 800e892:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e89c:	d007      	beq.n	800e8ae <UART_Receive_IT+0x74>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10a      	bne.n	800e8bc <UART_Receive_IT+0x82>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d106      	bne.n	800e8bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	701a      	strb	r2, [r3, #0]
 800e8ba:	e008      	b.n	800e8ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d15a      	bne.n	800e9a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68da      	ldr	r2, [r3, #12]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f022 0220 	bic.w	r2, r2, #32
 800e8fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68da      	ldr	r2, [r3, #12]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e90a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f022 0201 	bic.w	r2, r2, #1
 800e91a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2220      	movs	r2, #32
 800e920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d135      	bne.n	800e998 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	330c      	adds	r3, #12
 800e938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	e853 3f00 	ldrex	r3, [r3]
 800e940:	613b      	str	r3, [r7, #16]
   return(result);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f023 0310 	bic.w	r3, r3, #16
 800e948:	627b      	str	r3, [r7, #36]	; 0x24
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	330c      	adds	r3, #12
 800e950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e952:	623a      	str	r2, [r7, #32]
 800e954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e956:	69f9      	ldr	r1, [r7, #28]
 800e958:	6a3a      	ldr	r2, [r7, #32]
 800e95a:	e841 2300 	strex	r3, r2, [r1]
 800e95e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1e5      	bne.n	800e932 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0310 	and.w	r3, r3, #16
 800e970:	2b10      	cmp	r3, #16
 800e972:	d10a      	bne.n	800e98a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e974:	2300      	movs	r3, #0
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60fb      	str	r3, [r7, #12]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e98e:	4619      	mov	r1, r3
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7fa fed7 	bl	8009744 <HAL_UARTEx_RxEventCallback>
 800e996:	e002      	b.n	800e99e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7fa ff9d 	bl	80098d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	e002      	b.n	800e9a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e000      	b.n	800e9a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e9a6:	2302      	movs	r3, #2
  }
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3730      	adds	r7, #48	; 0x30
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9b4:	b0c0      	sub	sp, #256	; 0x100
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9cc:	68d9      	ldr	r1, [r3, #12]
 800e9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	ea40 0301 	orr.w	r3, r0, r1
 800e9d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9de:	689a      	ldr	r2, [r3, #8]
 800e9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	431a      	orrs	r2, r3
 800e9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	431a      	orrs	r2, r3
 800e9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9f4:	69db      	ldr	r3, [r3, #28]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ea08:	f021 010c 	bic.w	r1, r1, #12
 800ea0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea16:	430b      	orrs	r3, r1
 800ea18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ea1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ea26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea2a:	6999      	ldr	r1, [r3, #24]
 800ea2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	ea40 0301 	orr.w	r3, r0, r1
 800ea36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ea38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b8f      	ldr	r3, [pc, #572]	; (800ec7c <UART_SetConfig+0x2cc>)
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d005      	beq.n	800ea50 <UART_SetConfig+0xa0>
 800ea44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	4b8d      	ldr	r3, [pc, #564]	; (800ec80 <UART_SetConfig+0x2d0>)
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d104      	bne.n	800ea5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ea50:	f7fd fc46 	bl	800c2e0 <HAL_RCC_GetPCLK2Freq>
 800ea54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ea58:	e003      	b.n	800ea62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ea5a:	f7fd fc2d 	bl	800c2b8 <HAL_RCC_GetPCLK1Freq>
 800ea5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea66:	69db      	ldr	r3, [r3, #28]
 800ea68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea6c:	f040 810c 	bne.w	800ec88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ea70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ea74:	2200      	movs	r2, #0
 800ea76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ea7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ea7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ea82:	4622      	mov	r2, r4
 800ea84:	462b      	mov	r3, r5
 800ea86:	1891      	adds	r1, r2, r2
 800ea88:	65b9      	str	r1, [r7, #88]	; 0x58
 800ea8a:	415b      	adcs	r3, r3
 800ea8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ea92:	4621      	mov	r1, r4
 800ea94:	eb12 0801 	adds.w	r8, r2, r1
 800ea98:	4629      	mov	r1, r5
 800ea9a:	eb43 0901 	adc.w	r9, r3, r1
 800ea9e:	f04f 0200 	mov.w	r2, #0
 800eaa2:	f04f 0300 	mov.w	r3, #0
 800eaa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eaaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eaae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eab2:	4690      	mov	r8, r2
 800eab4:	4699      	mov	r9, r3
 800eab6:	4623      	mov	r3, r4
 800eab8:	eb18 0303 	adds.w	r3, r8, r3
 800eabc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eac0:	462b      	mov	r3, r5
 800eac2:	eb49 0303 	adc.w	r3, r9, r3
 800eac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ead6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800eada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800eade:	460b      	mov	r3, r1
 800eae0:	18db      	adds	r3, r3, r3
 800eae2:	653b      	str	r3, [r7, #80]	; 0x50
 800eae4:	4613      	mov	r3, r2
 800eae6:	eb42 0303 	adc.w	r3, r2, r3
 800eaea:	657b      	str	r3, [r7, #84]	; 0x54
 800eaec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eaf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800eaf4:	f7fa f8aa 	bl	8008c4c <__aeabi_uldivmod>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4b61      	ldr	r3, [pc, #388]	; (800ec84 <UART_SetConfig+0x2d4>)
 800eafe:	fba3 2302 	umull	r2, r3, r3, r2
 800eb02:	095b      	lsrs	r3, r3, #5
 800eb04:	011c      	lsls	r4, r3, #4
 800eb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eb10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800eb14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800eb18:	4642      	mov	r2, r8
 800eb1a:	464b      	mov	r3, r9
 800eb1c:	1891      	adds	r1, r2, r2
 800eb1e:	64b9      	str	r1, [r7, #72]	; 0x48
 800eb20:	415b      	adcs	r3, r3
 800eb22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eb28:	4641      	mov	r1, r8
 800eb2a:	eb12 0a01 	adds.w	sl, r2, r1
 800eb2e:	4649      	mov	r1, r9
 800eb30:	eb43 0b01 	adc.w	fp, r3, r1
 800eb34:	f04f 0200 	mov.w	r2, #0
 800eb38:	f04f 0300 	mov.w	r3, #0
 800eb3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eb40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eb44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb48:	4692      	mov	sl, r2
 800eb4a:	469b      	mov	fp, r3
 800eb4c:	4643      	mov	r3, r8
 800eb4e:	eb1a 0303 	adds.w	r3, sl, r3
 800eb52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb56:	464b      	mov	r3, r9
 800eb58:	eb4b 0303 	adc.w	r3, fp, r3
 800eb5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eb60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800eb70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800eb74:	460b      	mov	r3, r1
 800eb76:	18db      	adds	r3, r3, r3
 800eb78:	643b      	str	r3, [r7, #64]	; 0x40
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	eb42 0303 	adc.w	r3, r2, r3
 800eb80:	647b      	str	r3, [r7, #68]	; 0x44
 800eb82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eb86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800eb8a:	f7fa f85f 	bl	8008c4c <__aeabi_uldivmod>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4611      	mov	r1, r2
 800eb94:	4b3b      	ldr	r3, [pc, #236]	; (800ec84 <UART_SetConfig+0x2d4>)
 800eb96:	fba3 2301 	umull	r2, r3, r3, r1
 800eb9a:	095b      	lsrs	r3, r3, #5
 800eb9c:	2264      	movs	r2, #100	; 0x64
 800eb9e:	fb02 f303 	mul.w	r3, r2, r3
 800eba2:	1acb      	subs	r3, r1, r3
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ebaa:	4b36      	ldr	r3, [pc, #216]	; (800ec84 <UART_SetConfig+0x2d4>)
 800ebac:	fba3 2302 	umull	r2, r3, r3, r2
 800ebb0:	095b      	lsrs	r3, r3, #5
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ebb8:	441c      	add	r4, r3
 800ebba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ebc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ebc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ebcc:	4642      	mov	r2, r8
 800ebce:	464b      	mov	r3, r9
 800ebd0:	1891      	adds	r1, r2, r2
 800ebd2:	63b9      	str	r1, [r7, #56]	; 0x38
 800ebd4:	415b      	adcs	r3, r3
 800ebd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ebdc:	4641      	mov	r1, r8
 800ebde:	1851      	adds	r1, r2, r1
 800ebe0:	6339      	str	r1, [r7, #48]	; 0x30
 800ebe2:	4649      	mov	r1, r9
 800ebe4:	414b      	adcs	r3, r1
 800ebe6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebe8:	f04f 0200 	mov.w	r2, #0
 800ebec:	f04f 0300 	mov.w	r3, #0
 800ebf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ebf4:	4659      	mov	r1, fp
 800ebf6:	00cb      	lsls	r3, r1, #3
 800ebf8:	4651      	mov	r1, sl
 800ebfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ebfe:	4651      	mov	r1, sl
 800ec00:	00ca      	lsls	r2, r1, #3
 800ec02:	4610      	mov	r0, r2
 800ec04:	4619      	mov	r1, r3
 800ec06:	4603      	mov	r3, r0
 800ec08:	4642      	mov	r2, r8
 800ec0a:	189b      	adds	r3, r3, r2
 800ec0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ec10:	464b      	mov	r3, r9
 800ec12:	460a      	mov	r2, r1
 800ec14:	eb42 0303 	adc.w	r3, r2, r3
 800ec18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ec1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ec28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ec2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ec30:	460b      	mov	r3, r1
 800ec32:	18db      	adds	r3, r3, r3
 800ec34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec36:	4613      	mov	r3, r2
 800ec38:	eb42 0303 	adc.w	r3, r2, r3
 800ec3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ec42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ec46:	f7fa f801 	bl	8008c4c <__aeabi_uldivmod>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	4b0d      	ldr	r3, [pc, #52]	; (800ec84 <UART_SetConfig+0x2d4>)
 800ec50:	fba3 1302 	umull	r1, r3, r3, r2
 800ec54:	095b      	lsrs	r3, r3, #5
 800ec56:	2164      	movs	r1, #100	; 0x64
 800ec58:	fb01 f303 	mul.w	r3, r1, r3
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	00db      	lsls	r3, r3, #3
 800ec60:	3332      	adds	r3, #50	; 0x32
 800ec62:	4a08      	ldr	r2, [pc, #32]	; (800ec84 <UART_SetConfig+0x2d4>)
 800ec64:	fba2 2303 	umull	r2, r3, r2, r3
 800ec68:	095b      	lsrs	r3, r3, #5
 800ec6a:	f003 0207 	and.w	r2, r3, #7
 800ec6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4422      	add	r2, r4
 800ec76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ec78:	e105      	b.n	800ee86 <UART_SetConfig+0x4d6>
 800ec7a:	bf00      	nop
 800ec7c:	40011000 	.word	0x40011000
 800ec80:	40011400 	.word	0x40011400
 800ec84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ec88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ec92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ec96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ec9a:	4642      	mov	r2, r8
 800ec9c:	464b      	mov	r3, r9
 800ec9e:	1891      	adds	r1, r2, r2
 800eca0:	6239      	str	r1, [r7, #32]
 800eca2:	415b      	adcs	r3, r3
 800eca4:	627b      	str	r3, [r7, #36]	; 0x24
 800eca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ecaa:	4641      	mov	r1, r8
 800ecac:	1854      	adds	r4, r2, r1
 800ecae:	4649      	mov	r1, r9
 800ecb0:	eb43 0501 	adc.w	r5, r3, r1
 800ecb4:	f04f 0200 	mov.w	r2, #0
 800ecb8:	f04f 0300 	mov.w	r3, #0
 800ecbc:	00eb      	lsls	r3, r5, #3
 800ecbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ecc2:	00e2      	lsls	r2, r4, #3
 800ecc4:	4614      	mov	r4, r2
 800ecc6:	461d      	mov	r5, r3
 800ecc8:	4643      	mov	r3, r8
 800ecca:	18e3      	adds	r3, r4, r3
 800eccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	eb45 0303 	adc.w	r3, r5, r3
 800ecd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ecda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ece6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ecea:	f04f 0200 	mov.w	r2, #0
 800ecee:	f04f 0300 	mov.w	r3, #0
 800ecf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	008b      	lsls	r3, r1, #2
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ed00:	4621      	mov	r1, r4
 800ed02:	008a      	lsls	r2, r1, #2
 800ed04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ed08:	f7f9 ffa0 	bl	8008c4c <__aeabi_uldivmod>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4b60      	ldr	r3, [pc, #384]	; (800ee94 <UART_SetConfig+0x4e4>)
 800ed12:	fba3 2302 	umull	r2, r3, r3, r2
 800ed16:	095b      	lsrs	r3, r3, #5
 800ed18:	011c      	lsls	r4, r3, #4
 800ed1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ed24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ed28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ed2c:	4642      	mov	r2, r8
 800ed2e:	464b      	mov	r3, r9
 800ed30:	1891      	adds	r1, r2, r2
 800ed32:	61b9      	str	r1, [r7, #24]
 800ed34:	415b      	adcs	r3, r3
 800ed36:	61fb      	str	r3, [r7, #28]
 800ed38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed3c:	4641      	mov	r1, r8
 800ed3e:	1851      	adds	r1, r2, r1
 800ed40:	6139      	str	r1, [r7, #16]
 800ed42:	4649      	mov	r1, r9
 800ed44:	414b      	adcs	r3, r1
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	f04f 0200 	mov.w	r2, #0
 800ed4c:	f04f 0300 	mov.w	r3, #0
 800ed50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ed54:	4659      	mov	r1, fp
 800ed56:	00cb      	lsls	r3, r1, #3
 800ed58:	4651      	mov	r1, sl
 800ed5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ed5e:	4651      	mov	r1, sl
 800ed60:	00ca      	lsls	r2, r1, #3
 800ed62:	4610      	mov	r0, r2
 800ed64:	4619      	mov	r1, r3
 800ed66:	4603      	mov	r3, r0
 800ed68:	4642      	mov	r2, r8
 800ed6a:	189b      	adds	r3, r3, r2
 800ed6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed70:	464b      	mov	r3, r9
 800ed72:	460a      	mov	r2, r1
 800ed74:	eb42 0303 	adc.w	r3, r2, r3
 800ed78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ed88:	f04f 0200 	mov.w	r2, #0
 800ed8c:	f04f 0300 	mov.w	r3, #0
 800ed90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ed94:	4649      	mov	r1, r9
 800ed96:	008b      	lsls	r3, r1, #2
 800ed98:	4641      	mov	r1, r8
 800ed9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ed9e:	4641      	mov	r1, r8
 800eda0:	008a      	lsls	r2, r1, #2
 800eda2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800eda6:	f7f9 ff51 	bl	8008c4c <__aeabi_uldivmod>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4b39      	ldr	r3, [pc, #228]	; (800ee94 <UART_SetConfig+0x4e4>)
 800edb0:	fba3 1302 	umull	r1, r3, r3, r2
 800edb4:	095b      	lsrs	r3, r3, #5
 800edb6:	2164      	movs	r1, #100	; 0x64
 800edb8:	fb01 f303 	mul.w	r3, r1, r3
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	011b      	lsls	r3, r3, #4
 800edc0:	3332      	adds	r3, #50	; 0x32
 800edc2:	4a34      	ldr	r2, [pc, #208]	; (800ee94 <UART_SetConfig+0x4e4>)
 800edc4:	fba2 2303 	umull	r2, r3, r2, r3
 800edc8:	095b      	lsrs	r3, r3, #5
 800edca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800edce:	441c      	add	r4, r3
 800edd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800edd4:	2200      	movs	r2, #0
 800edd6:	673b      	str	r3, [r7, #112]	; 0x70
 800edd8:	677a      	str	r2, [r7, #116]	; 0x74
 800edda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800edde:	4642      	mov	r2, r8
 800ede0:	464b      	mov	r3, r9
 800ede2:	1891      	adds	r1, r2, r2
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	415b      	adcs	r3, r3
 800ede8:	60fb      	str	r3, [r7, #12]
 800edea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edee:	4641      	mov	r1, r8
 800edf0:	1851      	adds	r1, r2, r1
 800edf2:	6039      	str	r1, [r7, #0]
 800edf4:	4649      	mov	r1, r9
 800edf6:	414b      	adcs	r3, r1
 800edf8:	607b      	str	r3, [r7, #4]
 800edfa:	f04f 0200 	mov.w	r2, #0
 800edfe:	f04f 0300 	mov.w	r3, #0
 800ee02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ee06:	4659      	mov	r1, fp
 800ee08:	00cb      	lsls	r3, r1, #3
 800ee0a:	4651      	mov	r1, sl
 800ee0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee10:	4651      	mov	r1, sl
 800ee12:	00ca      	lsls	r2, r1, #3
 800ee14:	4610      	mov	r0, r2
 800ee16:	4619      	mov	r1, r3
 800ee18:	4603      	mov	r3, r0
 800ee1a:	4642      	mov	r2, r8
 800ee1c:	189b      	adds	r3, r3, r2
 800ee1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee20:	464b      	mov	r3, r9
 800ee22:	460a      	mov	r2, r1
 800ee24:	eb42 0303 	adc.w	r3, r2, r3
 800ee28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	663b      	str	r3, [r7, #96]	; 0x60
 800ee34:	667a      	str	r2, [r7, #100]	; 0x64
 800ee36:	f04f 0200 	mov.w	r2, #0
 800ee3a:	f04f 0300 	mov.w	r3, #0
 800ee3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ee42:	4649      	mov	r1, r9
 800ee44:	008b      	lsls	r3, r1, #2
 800ee46:	4641      	mov	r1, r8
 800ee48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ee4c:	4641      	mov	r1, r8
 800ee4e:	008a      	lsls	r2, r1, #2
 800ee50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ee54:	f7f9 fefa 	bl	8008c4c <__aeabi_uldivmod>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <UART_SetConfig+0x4e4>)
 800ee5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ee62:	095b      	lsrs	r3, r3, #5
 800ee64:	2164      	movs	r1, #100	; 0x64
 800ee66:	fb01 f303 	mul.w	r3, r1, r3
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	011b      	lsls	r3, r3, #4
 800ee6e:	3332      	adds	r3, #50	; 0x32
 800ee70:	4a08      	ldr	r2, [pc, #32]	; (800ee94 <UART_SetConfig+0x4e4>)
 800ee72:	fba2 2303 	umull	r2, r3, r2, r3
 800ee76:	095b      	lsrs	r3, r3, #5
 800ee78:	f003 020f 	and.w	r2, r3, #15
 800ee7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4422      	add	r2, r4
 800ee84:	609a      	str	r2, [r3, #8]
}
 800ee86:	bf00      	nop
 800ee88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee92:	bf00      	nop
 800ee94:	51eb851f 	.word	0x51eb851f

0800ee98 <atof>:
 800ee98:	2100      	movs	r1, #0
 800ee9a:	f000 bf5f 	b.w	800fd5c <strtod>
	...

0800eea0 <__errno>:
 800eea0:	4b01      	ldr	r3, [pc, #4]	; (800eea8 <__errno+0x8>)
 800eea2:	6818      	ldr	r0, [r3, #0]
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	20013890 	.word	0x20013890

0800eeac <__libc_init_array>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	4d0d      	ldr	r5, [pc, #52]	; (800eee4 <__libc_init_array+0x38>)
 800eeb0:	4c0d      	ldr	r4, [pc, #52]	; (800eee8 <__libc_init_array+0x3c>)
 800eeb2:	1b64      	subs	r4, r4, r5
 800eeb4:	10a4      	asrs	r4, r4, #2
 800eeb6:	2600      	movs	r6, #0
 800eeb8:	42a6      	cmp	r6, r4
 800eeba:	d109      	bne.n	800eed0 <__libc_init_array+0x24>
 800eebc:	4d0b      	ldr	r5, [pc, #44]	; (800eeec <__libc_init_array+0x40>)
 800eebe:	4c0c      	ldr	r4, [pc, #48]	; (800eef0 <__libc_init_array+0x44>)
 800eec0:	f002 feec 	bl	8011c9c <_init>
 800eec4:	1b64      	subs	r4, r4, r5
 800eec6:	10a4      	asrs	r4, r4, #2
 800eec8:	2600      	movs	r6, #0
 800eeca:	42a6      	cmp	r6, r4
 800eecc:	d105      	bne.n	800eeda <__libc_init_array+0x2e>
 800eece:	bd70      	pop	{r4, r5, r6, pc}
 800eed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed4:	4798      	blx	r3
 800eed6:	3601      	adds	r6, #1
 800eed8:	e7ee      	b.n	800eeb8 <__libc_init_array+0xc>
 800eeda:	f855 3b04 	ldr.w	r3, [r5], #4
 800eede:	4798      	blx	r3
 800eee0:	3601      	adds	r6, #1
 800eee2:	e7f2      	b.n	800eeca <__libc_init_array+0x1e>
 800eee4:	0801211c 	.word	0x0801211c
 800eee8:	0801211c 	.word	0x0801211c
 800eeec:	0801211c 	.word	0x0801211c
 800eef0:	08012120 	.word	0x08012120

0800eef4 <malloc>:
 800eef4:	4b02      	ldr	r3, [pc, #8]	; (800ef00 <malloc+0xc>)
 800eef6:	4601      	mov	r1, r0
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	f000 b87f 	b.w	800effc <_malloc_r>
 800eefe:	bf00      	nop
 800ef00:	20013890 	.word	0x20013890

0800ef04 <free>:
 800ef04:	4b02      	ldr	r3, [pc, #8]	; (800ef10 <free+0xc>)
 800ef06:	4601      	mov	r1, r0
 800ef08:	6818      	ldr	r0, [r3, #0]
 800ef0a:	f000 b80b 	b.w	800ef24 <_free_r>
 800ef0e:	bf00      	nop
 800ef10:	20013890 	.word	0x20013890

0800ef14 <memset>:
 800ef14:	4402      	add	r2, r0
 800ef16:	4603      	mov	r3, r0
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d100      	bne.n	800ef1e <memset+0xa>
 800ef1c:	4770      	bx	lr
 800ef1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef22:	e7f9      	b.n	800ef18 <memset+0x4>

0800ef24 <_free_r>:
 800ef24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef26:	2900      	cmp	r1, #0
 800ef28:	d044      	beq.n	800efb4 <_free_r+0x90>
 800ef2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef2e:	9001      	str	r0, [sp, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f1a1 0404 	sub.w	r4, r1, #4
 800ef36:	bfb8      	it	lt
 800ef38:	18e4      	addlt	r4, r4, r3
 800ef3a:	f001 faab 	bl	8010494 <__malloc_lock>
 800ef3e:	4a1e      	ldr	r2, [pc, #120]	; (800efb8 <_free_r+0x94>)
 800ef40:	9801      	ldr	r0, [sp, #4]
 800ef42:	6813      	ldr	r3, [r2, #0]
 800ef44:	b933      	cbnz	r3, 800ef54 <_free_r+0x30>
 800ef46:	6063      	str	r3, [r4, #4]
 800ef48:	6014      	str	r4, [r2, #0]
 800ef4a:	b003      	add	sp, #12
 800ef4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef50:	f001 baa6 	b.w	80104a0 <__malloc_unlock>
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	d908      	bls.n	800ef6a <_free_r+0x46>
 800ef58:	6825      	ldr	r5, [r4, #0]
 800ef5a:	1961      	adds	r1, r4, r5
 800ef5c:	428b      	cmp	r3, r1
 800ef5e:	bf01      	itttt	eq
 800ef60:	6819      	ldreq	r1, [r3, #0]
 800ef62:	685b      	ldreq	r3, [r3, #4]
 800ef64:	1949      	addeq	r1, r1, r5
 800ef66:	6021      	streq	r1, [r4, #0]
 800ef68:	e7ed      	b.n	800ef46 <_free_r+0x22>
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	b10b      	cbz	r3, 800ef74 <_free_r+0x50>
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	d9fa      	bls.n	800ef6a <_free_r+0x46>
 800ef74:	6811      	ldr	r1, [r2, #0]
 800ef76:	1855      	adds	r5, r2, r1
 800ef78:	42a5      	cmp	r5, r4
 800ef7a:	d10b      	bne.n	800ef94 <_free_r+0x70>
 800ef7c:	6824      	ldr	r4, [r4, #0]
 800ef7e:	4421      	add	r1, r4
 800ef80:	1854      	adds	r4, r2, r1
 800ef82:	42a3      	cmp	r3, r4
 800ef84:	6011      	str	r1, [r2, #0]
 800ef86:	d1e0      	bne.n	800ef4a <_free_r+0x26>
 800ef88:	681c      	ldr	r4, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	6053      	str	r3, [r2, #4]
 800ef8e:	4421      	add	r1, r4
 800ef90:	6011      	str	r1, [r2, #0]
 800ef92:	e7da      	b.n	800ef4a <_free_r+0x26>
 800ef94:	d902      	bls.n	800ef9c <_free_r+0x78>
 800ef96:	230c      	movs	r3, #12
 800ef98:	6003      	str	r3, [r0, #0]
 800ef9a:	e7d6      	b.n	800ef4a <_free_r+0x26>
 800ef9c:	6825      	ldr	r5, [r4, #0]
 800ef9e:	1961      	adds	r1, r4, r5
 800efa0:	428b      	cmp	r3, r1
 800efa2:	bf04      	itt	eq
 800efa4:	6819      	ldreq	r1, [r3, #0]
 800efa6:	685b      	ldreq	r3, [r3, #4]
 800efa8:	6063      	str	r3, [r4, #4]
 800efaa:	bf04      	itt	eq
 800efac:	1949      	addeq	r1, r1, r5
 800efae:	6021      	streq	r1, [r4, #0]
 800efb0:	6054      	str	r4, [r2, #4]
 800efb2:	e7ca      	b.n	800ef4a <_free_r+0x26>
 800efb4:	b003      	add	sp, #12
 800efb6:	bd30      	pop	{r4, r5, pc}
 800efb8:	20014030 	.word	0x20014030

0800efbc <sbrk_aligned>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	4e0e      	ldr	r6, [pc, #56]	; (800eff8 <sbrk_aligned+0x3c>)
 800efc0:	460c      	mov	r4, r1
 800efc2:	6831      	ldr	r1, [r6, #0]
 800efc4:	4605      	mov	r5, r0
 800efc6:	b911      	cbnz	r1, 800efce <sbrk_aligned+0x12>
 800efc8:	f000 f88c 	bl	800f0e4 <_sbrk_r>
 800efcc:	6030      	str	r0, [r6, #0]
 800efce:	4621      	mov	r1, r4
 800efd0:	4628      	mov	r0, r5
 800efd2:	f000 f887 	bl	800f0e4 <_sbrk_r>
 800efd6:	1c43      	adds	r3, r0, #1
 800efd8:	d00a      	beq.n	800eff0 <sbrk_aligned+0x34>
 800efda:	1cc4      	adds	r4, r0, #3
 800efdc:	f024 0403 	bic.w	r4, r4, #3
 800efe0:	42a0      	cmp	r0, r4
 800efe2:	d007      	beq.n	800eff4 <sbrk_aligned+0x38>
 800efe4:	1a21      	subs	r1, r4, r0
 800efe6:	4628      	mov	r0, r5
 800efe8:	f000 f87c 	bl	800f0e4 <_sbrk_r>
 800efec:	3001      	adds	r0, #1
 800efee:	d101      	bne.n	800eff4 <sbrk_aligned+0x38>
 800eff0:	f04f 34ff 	mov.w	r4, #4294967295
 800eff4:	4620      	mov	r0, r4
 800eff6:	bd70      	pop	{r4, r5, r6, pc}
 800eff8:	20014034 	.word	0x20014034

0800effc <_malloc_r>:
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	1ccd      	adds	r5, r1, #3
 800f002:	f025 0503 	bic.w	r5, r5, #3
 800f006:	3508      	adds	r5, #8
 800f008:	2d0c      	cmp	r5, #12
 800f00a:	bf38      	it	cc
 800f00c:	250c      	movcc	r5, #12
 800f00e:	2d00      	cmp	r5, #0
 800f010:	4607      	mov	r7, r0
 800f012:	db01      	blt.n	800f018 <_malloc_r+0x1c>
 800f014:	42a9      	cmp	r1, r5
 800f016:	d905      	bls.n	800f024 <_malloc_r+0x28>
 800f018:	230c      	movs	r3, #12
 800f01a:	603b      	str	r3, [r7, #0]
 800f01c:	2600      	movs	r6, #0
 800f01e:	4630      	mov	r0, r6
 800f020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f024:	4e2e      	ldr	r6, [pc, #184]	; (800f0e0 <_malloc_r+0xe4>)
 800f026:	f001 fa35 	bl	8010494 <__malloc_lock>
 800f02a:	6833      	ldr	r3, [r6, #0]
 800f02c:	461c      	mov	r4, r3
 800f02e:	bb34      	cbnz	r4, 800f07e <_malloc_r+0x82>
 800f030:	4629      	mov	r1, r5
 800f032:	4638      	mov	r0, r7
 800f034:	f7ff ffc2 	bl	800efbc <sbrk_aligned>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	4604      	mov	r4, r0
 800f03c:	d14d      	bne.n	800f0da <_malloc_r+0xde>
 800f03e:	6834      	ldr	r4, [r6, #0]
 800f040:	4626      	mov	r6, r4
 800f042:	2e00      	cmp	r6, #0
 800f044:	d140      	bne.n	800f0c8 <_malloc_r+0xcc>
 800f046:	6823      	ldr	r3, [r4, #0]
 800f048:	4631      	mov	r1, r6
 800f04a:	4638      	mov	r0, r7
 800f04c:	eb04 0803 	add.w	r8, r4, r3
 800f050:	f000 f848 	bl	800f0e4 <_sbrk_r>
 800f054:	4580      	cmp	r8, r0
 800f056:	d13a      	bne.n	800f0ce <_malloc_r+0xd2>
 800f058:	6821      	ldr	r1, [r4, #0]
 800f05a:	3503      	adds	r5, #3
 800f05c:	1a6d      	subs	r5, r5, r1
 800f05e:	f025 0503 	bic.w	r5, r5, #3
 800f062:	3508      	adds	r5, #8
 800f064:	2d0c      	cmp	r5, #12
 800f066:	bf38      	it	cc
 800f068:	250c      	movcc	r5, #12
 800f06a:	4629      	mov	r1, r5
 800f06c:	4638      	mov	r0, r7
 800f06e:	f7ff ffa5 	bl	800efbc <sbrk_aligned>
 800f072:	3001      	adds	r0, #1
 800f074:	d02b      	beq.n	800f0ce <_malloc_r+0xd2>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	442b      	add	r3, r5
 800f07a:	6023      	str	r3, [r4, #0]
 800f07c:	e00e      	b.n	800f09c <_malloc_r+0xa0>
 800f07e:	6822      	ldr	r2, [r4, #0]
 800f080:	1b52      	subs	r2, r2, r5
 800f082:	d41e      	bmi.n	800f0c2 <_malloc_r+0xc6>
 800f084:	2a0b      	cmp	r2, #11
 800f086:	d916      	bls.n	800f0b6 <_malloc_r+0xba>
 800f088:	1961      	adds	r1, r4, r5
 800f08a:	42a3      	cmp	r3, r4
 800f08c:	6025      	str	r5, [r4, #0]
 800f08e:	bf18      	it	ne
 800f090:	6059      	strne	r1, [r3, #4]
 800f092:	6863      	ldr	r3, [r4, #4]
 800f094:	bf08      	it	eq
 800f096:	6031      	streq	r1, [r6, #0]
 800f098:	5162      	str	r2, [r4, r5]
 800f09a:	604b      	str	r3, [r1, #4]
 800f09c:	4638      	mov	r0, r7
 800f09e:	f104 060b 	add.w	r6, r4, #11
 800f0a2:	f001 f9fd 	bl	80104a0 <__malloc_unlock>
 800f0a6:	f026 0607 	bic.w	r6, r6, #7
 800f0aa:	1d23      	adds	r3, r4, #4
 800f0ac:	1af2      	subs	r2, r6, r3
 800f0ae:	d0b6      	beq.n	800f01e <_malloc_r+0x22>
 800f0b0:	1b9b      	subs	r3, r3, r6
 800f0b2:	50a3      	str	r3, [r4, r2]
 800f0b4:	e7b3      	b.n	800f01e <_malloc_r+0x22>
 800f0b6:	6862      	ldr	r2, [r4, #4]
 800f0b8:	42a3      	cmp	r3, r4
 800f0ba:	bf0c      	ite	eq
 800f0bc:	6032      	streq	r2, [r6, #0]
 800f0be:	605a      	strne	r2, [r3, #4]
 800f0c0:	e7ec      	b.n	800f09c <_malloc_r+0xa0>
 800f0c2:	4623      	mov	r3, r4
 800f0c4:	6864      	ldr	r4, [r4, #4]
 800f0c6:	e7b2      	b.n	800f02e <_malloc_r+0x32>
 800f0c8:	4634      	mov	r4, r6
 800f0ca:	6876      	ldr	r6, [r6, #4]
 800f0cc:	e7b9      	b.n	800f042 <_malloc_r+0x46>
 800f0ce:	230c      	movs	r3, #12
 800f0d0:	603b      	str	r3, [r7, #0]
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	f001 f9e4 	bl	80104a0 <__malloc_unlock>
 800f0d8:	e7a1      	b.n	800f01e <_malloc_r+0x22>
 800f0da:	6025      	str	r5, [r4, #0]
 800f0dc:	e7de      	b.n	800f09c <_malloc_r+0xa0>
 800f0de:	bf00      	nop
 800f0e0:	20014030 	.word	0x20014030

0800f0e4 <_sbrk_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4d06      	ldr	r5, [pc, #24]	; (800f100 <_sbrk_r+0x1c>)
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4608      	mov	r0, r1
 800f0ee:	602b      	str	r3, [r5, #0]
 800f0f0:	f7fb fbba 	bl	800a868 <_sbrk>
 800f0f4:	1c43      	adds	r3, r0, #1
 800f0f6:	d102      	bne.n	800f0fe <_sbrk_r+0x1a>
 800f0f8:	682b      	ldr	r3, [r5, #0]
 800f0fa:	b103      	cbz	r3, 800f0fe <_sbrk_r+0x1a>
 800f0fc:	6023      	str	r3, [r4, #0]
 800f0fe:	bd38      	pop	{r3, r4, r5, pc}
 800f100:	20014038 	.word	0x20014038

0800f104 <strcpy>:
 800f104:	4603      	mov	r3, r0
 800f106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f10a:	f803 2b01 	strb.w	r2, [r3], #1
 800f10e:	2a00      	cmp	r2, #0
 800f110:	d1f9      	bne.n	800f106 <strcpy+0x2>
 800f112:	4770      	bx	lr

0800f114 <sulp>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	4604      	mov	r4, r0
 800f118:	460d      	mov	r5, r1
 800f11a:	ec45 4b10 	vmov	d0, r4, r5
 800f11e:	4616      	mov	r6, r2
 800f120:	f001 fd36 	bl	8010b90 <__ulp>
 800f124:	ec51 0b10 	vmov	r0, r1, d0
 800f128:	b17e      	cbz	r6, 800f14a <sulp+0x36>
 800f12a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f12e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f132:	2b00      	cmp	r3, #0
 800f134:	dd09      	ble.n	800f14a <sulp+0x36>
 800f136:	051b      	lsls	r3, r3, #20
 800f138:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f13c:	2400      	movs	r4, #0
 800f13e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f142:	4622      	mov	r2, r4
 800f144:	462b      	mov	r3, r5
 800f146:	f7f9 fa77 	bl	8008638 <__aeabi_dmul>
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	0000      	movs	r0, r0
	...

0800f150 <_strtod_l>:
 800f150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f154:	ed2d 8b02 	vpush	{d8}
 800f158:	b09d      	sub	sp, #116	; 0x74
 800f15a:	461f      	mov	r7, r3
 800f15c:	2300      	movs	r3, #0
 800f15e:	9318      	str	r3, [sp, #96]	; 0x60
 800f160:	4ba2      	ldr	r3, [pc, #648]	; (800f3ec <_strtod_l+0x29c>)
 800f162:	9213      	str	r2, [sp, #76]	; 0x4c
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	9305      	str	r3, [sp, #20]
 800f168:	4604      	mov	r4, r0
 800f16a:	4618      	mov	r0, r3
 800f16c:	4688      	mov	r8, r1
 800f16e:	f7f9 f84f 	bl	8008210 <strlen>
 800f172:	f04f 0a00 	mov.w	sl, #0
 800f176:	4605      	mov	r5, r0
 800f178:	f04f 0b00 	mov.w	fp, #0
 800f17c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f182:	781a      	ldrb	r2, [r3, #0]
 800f184:	2a2b      	cmp	r2, #43	; 0x2b
 800f186:	d04e      	beq.n	800f226 <_strtod_l+0xd6>
 800f188:	d83b      	bhi.n	800f202 <_strtod_l+0xb2>
 800f18a:	2a0d      	cmp	r2, #13
 800f18c:	d834      	bhi.n	800f1f8 <_strtod_l+0xa8>
 800f18e:	2a08      	cmp	r2, #8
 800f190:	d834      	bhi.n	800f1fc <_strtod_l+0xac>
 800f192:	2a00      	cmp	r2, #0
 800f194:	d03e      	beq.n	800f214 <_strtod_l+0xc4>
 800f196:	2300      	movs	r3, #0
 800f198:	930a      	str	r3, [sp, #40]	; 0x28
 800f19a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f19c:	7833      	ldrb	r3, [r6, #0]
 800f19e:	2b30      	cmp	r3, #48	; 0x30
 800f1a0:	f040 80b0 	bne.w	800f304 <_strtod_l+0x1b4>
 800f1a4:	7873      	ldrb	r3, [r6, #1]
 800f1a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1aa:	2b58      	cmp	r3, #88	; 0x58
 800f1ac:	d168      	bne.n	800f280 <_strtod_l+0x130>
 800f1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	ab18      	add	r3, sp, #96	; 0x60
 800f1b4:	9702      	str	r7, [sp, #8]
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	4a8d      	ldr	r2, [pc, #564]	; (800f3f0 <_strtod_l+0x2a0>)
 800f1ba:	ab19      	add	r3, sp, #100	; 0x64
 800f1bc:	a917      	add	r1, sp, #92	; 0x5c
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f000 fe40 	bl	800fe44 <__gethex>
 800f1c4:	f010 0707 	ands.w	r7, r0, #7
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	d005      	beq.n	800f1d8 <_strtod_l+0x88>
 800f1cc:	2f06      	cmp	r7, #6
 800f1ce:	d12c      	bne.n	800f22a <_strtod_l+0xda>
 800f1d0:	3601      	adds	r6, #1
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800f1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f040 8590 	bne.w	800fd00 <_strtod_l+0xbb0>
 800f1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e2:	b1eb      	cbz	r3, 800f220 <_strtod_l+0xd0>
 800f1e4:	4652      	mov	r2, sl
 800f1e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f1ea:	ec43 2b10 	vmov	d0, r2, r3
 800f1ee:	b01d      	add	sp, #116	; 0x74
 800f1f0:	ecbd 8b02 	vpop	{d8}
 800f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f8:	2a20      	cmp	r2, #32
 800f1fa:	d1cc      	bne.n	800f196 <_strtod_l+0x46>
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800f200:	e7be      	b.n	800f180 <_strtod_l+0x30>
 800f202:	2a2d      	cmp	r2, #45	; 0x2d
 800f204:	d1c7      	bne.n	800f196 <_strtod_l+0x46>
 800f206:	2201      	movs	r2, #1
 800f208:	920a      	str	r2, [sp, #40]	; 0x28
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f20e:	785b      	ldrb	r3, [r3, #1]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1c2      	bne.n	800f19a <_strtod_l+0x4a>
 800f214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f216:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f040 856e 	bne.w	800fcfc <_strtod_l+0xbac>
 800f220:	4652      	mov	r2, sl
 800f222:	465b      	mov	r3, fp
 800f224:	e7e1      	b.n	800f1ea <_strtod_l+0x9a>
 800f226:	2200      	movs	r2, #0
 800f228:	e7ee      	b.n	800f208 <_strtod_l+0xb8>
 800f22a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f22c:	b13a      	cbz	r2, 800f23e <_strtod_l+0xee>
 800f22e:	2135      	movs	r1, #53	; 0x35
 800f230:	a81a      	add	r0, sp, #104	; 0x68
 800f232:	f001 fdb8 	bl	8010da6 <__copybits>
 800f236:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f238:	4620      	mov	r0, r4
 800f23a:	f001 f977 	bl	801052c <_Bfree>
 800f23e:	3f01      	subs	r7, #1
 800f240:	2f04      	cmp	r7, #4
 800f242:	d806      	bhi.n	800f252 <_strtod_l+0x102>
 800f244:	e8df f007 	tbb	[pc, r7]
 800f248:	1714030a 	.word	0x1714030a
 800f24c:	0a          	.byte	0x0a
 800f24d:	00          	.byte	0x00
 800f24e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f252:	0728      	lsls	r0, r5, #28
 800f254:	d5c0      	bpl.n	800f1d8 <_strtod_l+0x88>
 800f256:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f25a:	e7bd      	b.n	800f1d8 <_strtod_l+0x88>
 800f25c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f260:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f262:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f266:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f26a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f26e:	e7f0      	b.n	800f252 <_strtod_l+0x102>
 800f270:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f3f4 <_strtod_l+0x2a4>
 800f274:	e7ed      	b.n	800f252 <_strtod_l+0x102>
 800f276:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f27a:	f04f 3aff 	mov.w	sl, #4294967295
 800f27e:	e7e8      	b.n	800f252 <_strtod_l+0x102>
 800f280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f282:	1c5a      	adds	r2, r3, #1
 800f284:	9217      	str	r2, [sp, #92]	; 0x5c
 800f286:	785b      	ldrb	r3, [r3, #1]
 800f288:	2b30      	cmp	r3, #48	; 0x30
 800f28a:	d0f9      	beq.n	800f280 <_strtod_l+0x130>
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d0a3      	beq.n	800f1d8 <_strtod_l+0x88>
 800f290:	2301      	movs	r3, #1
 800f292:	f04f 0900 	mov.w	r9, #0
 800f296:	9304      	str	r3, [sp, #16]
 800f298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f29a:	9308      	str	r3, [sp, #32]
 800f29c:	f8cd 901c 	str.w	r9, [sp, #28]
 800f2a0:	464f      	mov	r7, r9
 800f2a2:	220a      	movs	r2, #10
 800f2a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f2a6:	7806      	ldrb	r6, [r0, #0]
 800f2a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f2ac:	b2d9      	uxtb	r1, r3
 800f2ae:	2909      	cmp	r1, #9
 800f2b0:	d92a      	bls.n	800f308 <_strtod_l+0x1b8>
 800f2b2:	9905      	ldr	r1, [sp, #20]
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	f001 fddb 	bl	8010e70 <strncmp>
 800f2ba:	b398      	cbz	r0, 800f324 <_strtod_l+0x1d4>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	4632      	mov	r2, r6
 800f2c0:	463d      	mov	r5, r7
 800f2c2:	9005      	str	r0, [sp, #20]
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2a65      	cmp	r2, #101	; 0x65
 800f2c8:	d001      	beq.n	800f2ce <_strtod_l+0x17e>
 800f2ca:	2a45      	cmp	r2, #69	; 0x45
 800f2cc:	d118      	bne.n	800f300 <_strtod_l+0x1b0>
 800f2ce:	b91d      	cbnz	r5, 800f2d8 <_strtod_l+0x188>
 800f2d0:	9a04      	ldr	r2, [sp, #16]
 800f2d2:	4302      	orrs	r2, r0
 800f2d4:	d09e      	beq.n	800f214 <_strtod_l+0xc4>
 800f2d6:	2500      	movs	r5, #0
 800f2d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f2dc:	f108 0201 	add.w	r2, r8, #1
 800f2e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f2e6:	2a2b      	cmp	r2, #43	; 0x2b
 800f2e8:	d075      	beq.n	800f3d6 <_strtod_l+0x286>
 800f2ea:	2a2d      	cmp	r2, #45	; 0x2d
 800f2ec:	d07b      	beq.n	800f3e6 <_strtod_l+0x296>
 800f2ee:	f04f 0c00 	mov.w	ip, #0
 800f2f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f2f6:	2909      	cmp	r1, #9
 800f2f8:	f240 8082 	bls.w	800f400 <_strtod_l+0x2b0>
 800f2fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f300:	2600      	movs	r6, #0
 800f302:	e09d      	b.n	800f440 <_strtod_l+0x2f0>
 800f304:	2300      	movs	r3, #0
 800f306:	e7c4      	b.n	800f292 <_strtod_l+0x142>
 800f308:	2f08      	cmp	r7, #8
 800f30a:	bfd8      	it	le
 800f30c:	9907      	ldrle	r1, [sp, #28]
 800f30e:	f100 0001 	add.w	r0, r0, #1
 800f312:	bfda      	itte	le
 800f314:	fb02 3301 	mlale	r3, r2, r1, r3
 800f318:	9307      	strle	r3, [sp, #28]
 800f31a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f31e:	3701      	adds	r7, #1
 800f320:	9017      	str	r0, [sp, #92]	; 0x5c
 800f322:	e7bf      	b.n	800f2a4 <_strtod_l+0x154>
 800f324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f326:	195a      	adds	r2, r3, r5
 800f328:	9217      	str	r2, [sp, #92]	; 0x5c
 800f32a:	5d5a      	ldrb	r2, [r3, r5]
 800f32c:	2f00      	cmp	r7, #0
 800f32e:	d037      	beq.n	800f3a0 <_strtod_l+0x250>
 800f330:	9005      	str	r0, [sp, #20]
 800f332:	463d      	mov	r5, r7
 800f334:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f338:	2b09      	cmp	r3, #9
 800f33a:	d912      	bls.n	800f362 <_strtod_l+0x212>
 800f33c:	2301      	movs	r3, #1
 800f33e:	e7c2      	b.n	800f2c6 <_strtod_l+0x176>
 800f340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	9217      	str	r2, [sp, #92]	; 0x5c
 800f346:	785a      	ldrb	r2, [r3, #1]
 800f348:	3001      	adds	r0, #1
 800f34a:	2a30      	cmp	r2, #48	; 0x30
 800f34c:	d0f8      	beq.n	800f340 <_strtod_l+0x1f0>
 800f34e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f352:	2b08      	cmp	r3, #8
 800f354:	f200 84d9 	bhi.w	800fd0a <_strtod_l+0xbba>
 800f358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f35a:	9005      	str	r0, [sp, #20]
 800f35c:	2000      	movs	r0, #0
 800f35e:	9308      	str	r3, [sp, #32]
 800f360:	4605      	mov	r5, r0
 800f362:	3a30      	subs	r2, #48	; 0x30
 800f364:	f100 0301 	add.w	r3, r0, #1
 800f368:	d014      	beq.n	800f394 <_strtod_l+0x244>
 800f36a:	9905      	ldr	r1, [sp, #20]
 800f36c:	4419      	add	r1, r3
 800f36e:	9105      	str	r1, [sp, #20]
 800f370:	462b      	mov	r3, r5
 800f372:	eb00 0e05 	add.w	lr, r0, r5
 800f376:	210a      	movs	r1, #10
 800f378:	4573      	cmp	r3, lr
 800f37a:	d113      	bne.n	800f3a4 <_strtod_l+0x254>
 800f37c:	182b      	adds	r3, r5, r0
 800f37e:	2b08      	cmp	r3, #8
 800f380:	f105 0501 	add.w	r5, r5, #1
 800f384:	4405      	add	r5, r0
 800f386:	dc1c      	bgt.n	800f3c2 <_strtod_l+0x272>
 800f388:	9907      	ldr	r1, [sp, #28]
 800f38a:	230a      	movs	r3, #10
 800f38c:	fb03 2301 	mla	r3, r3, r1, r2
 800f390:	9307      	str	r3, [sp, #28]
 800f392:	2300      	movs	r3, #0
 800f394:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f396:	1c51      	adds	r1, r2, #1
 800f398:	9117      	str	r1, [sp, #92]	; 0x5c
 800f39a:	7852      	ldrb	r2, [r2, #1]
 800f39c:	4618      	mov	r0, r3
 800f39e:	e7c9      	b.n	800f334 <_strtod_l+0x1e4>
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	e7d2      	b.n	800f34a <_strtod_l+0x1fa>
 800f3a4:	2b08      	cmp	r3, #8
 800f3a6:	dc04      	bgt.n	800f3b2 <_strtod_l+0x262>
 800f3a8:	9e07      	ldr	r6, [sp, #28]
 800f3aa:	434e      	muls	r6, r1
 800f3ac:	9607      	str	r6, [sp, #28]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	e7e2      	b.n	800f378 <_strtod_l+0x228>
 800f3b2:	f103 0c01 	add.w	ip, r3, #1
 800f3b6:	f1bc 0f10 	cmp.w	ip, #16
 800f3ba:	bfd8      	it	le
 800f3bc:	fb01 f909 	mulle.w	r9, r1, r9
 800f3c0:	e7f5      	b.n	800f3ae <_strtod_l+0x25e>
 800f3c2:	2d10      	cmp	r5, #16
 800f3c4:	bfdc      	itt	le
 800f3c6:	230a      	movle	r3, #10
 800f3c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800f3cc:	e7e1      	b.n	800f392 <_strtod_l+0x242>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	9305      	str	r3, [sp, #20]
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e77c      	b.n	800f2d0 <_strtod_l+0x180>
 800f3d6:	f04f 0c00 	mov.w	ip, #0
 800f3da:	f108 0202 	add.w	r2, r8, #2
 800f3de:	9217      	str	r2, [sp, #92]	; 0x5c
 800f3e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f3e4:	e785      	b.n	800f2f2 <_strtod_l+0x1a2>
 800f3e6:	f04f 0c01 	mov.w	ip, #1
 800f3ea:	e7f6      	b.n	800f3da <_strtod_l+0x28a>
 800f3ec:	08011dc0 	.word	0x08011dc0
 800f3f0:	08011cf4 	.word	0x08011cf4
 800f3f4:	7ff00000 	.word	0x7ff00000
 800f3f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f3fa:	1c51      	adds	r1, r2, #1
 800f3fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800f3fe:	7852      	ldrb	r2, [r2, #1]
 800f400:	2a30      	cmp	r2, #48	; 0x30
 800f402:	d0f9      	beq.n	800f3f8 <_strtod_l+0x2a8>
 800f404:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f408:	2908      	cmp	r1, #8
 800f40a:	f63f af79 	bhi.w	800f300 <_strtod_l+0x1b0>
 800f40e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f414:	9206      	str	r2, [sp, #24]
 800f416:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f418:	1c51      	adds	r1, r2, #1
 800f41a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f41c:	7852      	ldrb	r2, [r2, #1]
 800f41e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f422:	2e09      	cmp	r6, #9
 800f424:	d937      	bls.n	800f496 <_strtod_l+0x346>
 800f426:	9e06      	ldr	r6, [sp, #24]
 800f428:	1b89      	subs	r1, r1, r6
 800f42a:	2908      	cmp	r1, #8
 800f42c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f430:	dc02      	bgt.n	800f438 <_strtod_l+0x2e8>
 800f432:	4576      	cmp	r6, lr
 800f434:	bfa8      	it	ge
 800f436:	4676      	movge	r6, lr
 800f438:	f1bc 0f00 	cmp.w	ip, #0
 800f43c:	d000      	beq.n	800f440 <_strtod_l+0x2f0>
 800f43e:	4276      	negs	r6, r6
 800f440:	2d00      	cmp	r5, #0
 800f442:	d14d      	bne.n	800f4e0 <_strtod_l+0x390>
 800f444:	9904      	ldr	r1, [sp, #16]
 800f446:	4301      	orrs	r1, r0
 800f448:	f47f aec6 	bne.w	800f1d8 <_strtod_l+0x88>
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f47f aee1 	bne.w	800f214 <_strtod_l+0xc4>
 800f452:	2a69      	cmp	r2, #105	; 0x69
 800f454:	d027      	beq.n	800f4a6 <_strtod_l+0x356>
 800f456:	dc24      	bgt.n	800f4a2 <_strtod_l+0x352>
 800f458:	2a49      	cmp	r2, #73	; 0x49
 800f45a:	d024      	beq.n	800f4a6 <_strtod_l+0x356>
 800f45c:	2a4e      	cmp	r2, #78	; 0x4e
 800f45e:	f47f aed9 	bne.w	800f214 <_strtod_l+0xc4>
 800f462:	499f      	ldr	r1, [pc, #636]	; (800f6e0 <_strtod_l+0x590>)
 800f464:	a817      	add	r0, sp, #92	; 0x5c
 800f466:	f000 ff45 	bl	80102f4 <__match>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f43f aed2 	beq.w	800f214 <_strtod_l+0xc4>
 800f470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	2b28      	cmp	r3, #40	; 0x28
 800f476:	d12d      	bne.n	800f4d4 <_strtod_l+0x384>
 800f478:	499a      	ldr	r1, [pc, #616]	; (800f6e4 <_strtod_l+0x594>)
 800f47a:	aa1a      	add	r2, sp, #104	; 0x68
 800f47c:	a817      	add	r0, sp, #92	; 0x5c
 800f47e:	f000 ff4d 	bl	801031c <__hexnan>
 800f482:	2805      	cmp	r0, #5
 800f484:	d126      	bne.n	800f4d4 <_strtod_l+0x384>
 800f486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f488:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f48c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f490:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f494:	e6a0      	b.n	800f1d8 <_strtod_l+0x88>
 800f496:	210a      	movs	r1, #10
 800f498:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f49c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f4a0:	e7b9      	b.n	800f416 <_strtod_l+0x2c6>
 800f4a2:	2a6e      	cmp	r2, #110	; 0x6e
 800f4a4:	e7db      	b.n	800f45e <_strtod_l+0x30e>
 800f4a6:	4990      	ldr	r1, [pc, #576]	; (800f6e8 <_strtod_l+0x598>)
 800f4a8:	a817      	add	r0, sp, #92	; 0x5c
 800f4aa:	f000 ff23 	bl	80102f4 <__match>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	f43f aeb0 	beq.w	800f214 <_strtod_l+0xc4>
 800f4b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4b6:	498d      	ldr	r1, [pc, #564]	; (800f6ec <_strtod_l+0x59c>)
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	a817      	add	r0, sp, #92	; 0x5c
 800f4bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800f4be:	f000 ff19 	bl	80102f4 <__match>
 800f4c2:	b910      	cbnz	r0, 800f4ca <_strtod_l+0x37a>
 800f4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f4ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f6fc <_strtod_l+0x5ac>
 800f4ce:	f04f 0a00 	mov.w	sl, #0
 800f4d2:	e681      	b.n	800f1d8 <_strtod_l+0x88>
 800f4d4:	4886      	ldr	r0, [pc, #536]	; (800f6f0 <_strtod_l+0x5a0>)
 800f4d6:	f001 fcc3 	bl	8010e60 <nan>
 800f4da:	ec5b ab10 	vmov	sl, fp, d0
 800f4de:	e67b      	b.n	800f1d8 <_strtod_l+0x88>
 800f4e0:	9b05      	ldr	r3, [sp, #20]
 800f4e2:	9807      	ldr	r0, [sp, #28]
 800f4e4:	1af3      	subs	r3, r6, r3
 800f4e6:	2f00      	cmp	r7, #0
 800f4e8:	bf08      	it	eq
 800f4ea:	462f      	moveq	r7, r5
 800f4ec:	2d10      	cmp	r5, #16
 800f4ee:	9306      	str	r3, [sp, #24]
 800f4f0:	46a8      	mov	r8, r5
 800f4f2:	bfa8      	it	ge
 800f4f4:	f04f 0810 	movge.w	r8, #16
 800f4f8:	f7f9 f824 	bl	8008544 <__aeabi_ui2d>
 800f4fc:	2d09      	cmp	r5, #9
 800f4fe:	4682      	mov	sl, r0
 800f500:	468b      	mov	fp, r1
 800f502:	dd13      	ble.n	800f52c <_strtod_l+0x3dc>
 800f504:	4b7b      	ldr	r3, [pc, #492]	; (800f6f4 <_strtod_l+0x5a4>)
 800f506:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f50a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f50e:	f7f9 f893 	bl	8008638 <__aeabi_dmul>
 800f512:	4682      	mov	sl, r0
 800f514:	4648      	mov	r0, r9
 800f516:	468b      	mov	fp, r1
 800f518:	f7f9 f814 	bl	8008544 <__aeabi_ui2d>
 800f51c:	4602      	mov	r2, r0
 800f51e:	460b      	mov	r3, r1
 800f520:	4650      	mov	r0, sl
 800f522:	4659      	mov	r1, fp
 800f524:	f7f8 fed2 	bl	80082cc <__adddf3>
 800f528:	4682      	mov	sl, r0
 800f52a:	468b      	mov	fp, r1
 800f52c:	2d0f      	cmp	r5, #15
 800f52e:	dc38      	bgt.n	800f5a2 <_strtod_l+0x452>
 800f530:	9b06      	ldr	r3, [sp, #24]
 800f532:	2b00      	cmp	r3, #0
 800f534:	f43f ae50 	beq.w	800f1d8 <_strtod_l+0x88>
 800f538:	dd24      	ble.n	800f584 <_strtod_l+0x434>
 800f53a:	2b16      	cmp	r3, #22
 800f53c:	dc0b      	bgt.n	800f556 <_strtod_l+0x406>
 800f53e:	496d      	ldr	r1, [pc, #436]	; (800f6f4 <_strtod_l+0x5a4>)
 800f540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f548:	4652      	mov	r2, sl
 800f54a:	465b      	mov	r3, fp
 800f54c:	f7f9 f874 	bl	8008638 <__aeabi_dmul>
 800f550:	4682      	mov	sl, r0
 800f552:	468b      	mov	fp, r1
 800f554:	e640      	b.n	800f1d8 <_strtod_l+0x88>
 800f556:	9a06      	ldr	r2, [sp, #24]
 800f558:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f55c:	4293      	cmp	r3, r2
 800f55e:	db20      	blt.n	800f5a2 <_strtod_l+0x452>
 800f560:	4c64      	ldr	r4, [pc, #400]	; (800f6f4 <_strtod_l+0x5a4>)
 800f562:	f1c5 050f 	rsb	r5, r5, #15
 800f566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f56a:	4652      	mov	r2, sl
 800f56c:	465b      	mov	r3, fp
 800f56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f572:	f7f9 f861 	bl	8008638 <__aeabi_dmul>
 800f576:	9b06      	ldr	r3, [sp, #24]
 800f578:	1b5d      	subs	r5, r3, r5
 800f57a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f57e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f582:	e7e3      	b.n	800f54c <_strtod_l+0x3fc>
 800f584:	9b06      	ldr	r3, [sp, #24]
 800f586:	3316      	adds	r3, #22
 800f588:	db0b      	blt.n	800f5a2 <_strtod_l+0x452>
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	1b9e      	subs	r6, r3, r6
 800f58e:	4b59      	ldr	r3, [pc, #356]	; (800f6f4 <_strtod_l+0x5a4>)
 800f590:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f594:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f598:	4650      	mov	r0, sl
 800f59a:	4659      	mov	r1, fp
 800f59c:	f7f9 f976 	bl	800888c <__aeabi_ddiv>
 800f5a0:	e7d6      	b.n	800f550 <_strtod_l+0x400>
 800f5a2:	9b06      	ldr	r3, [sp, #24]
 800f5a4:	eba5 0808 	sub.w	r8, r5, r8
 800f5a8:	4498      	add	r8, r3
 800f5aa:	f1b8 0f00 	cmp.w	r8, #0
 800f5ae:	dd74      	ble.n	800f69a <_strtod_l+0x54a>
 800f5b0:	f018 030f 	ands.w	r3, r8, #15
 800f5b4:	d00a      	beq.n	800f5cc <_strtod_l+0x47c>
 800f5b6:	494f      	ldr	r1, [pc, #316]	; (800f6f4 <_strtod_l+0x5a4>)
 800f5b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5bc:	4652      	mov	r2, sl
 800f5be:	465b      	mov	r3, fp
 800f5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5c4:	f7f9 f838 	bl	8008638 <__aeabi_dmul>
 800f5c8:	4682      	mov	sl, r0
 800f5ca:	468b      	mov	fp, r1
 800f5cc:	f038 080f 	bics.w	r8, r8, #15
 800f5d0:	d04f      	beq.n	800f672 <_strtod_l+0x522>
 800f5d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f5d6:	dd22      	ble.n	800f61e <_strtod_l+0x4ce>
 800f5d8:	2500      	movs	r5, #0
 800f5da:	462e      	mov	r6, r5
 800f5dc:	9507      	str	r5, [sp, #28]
 800f5de:	9505      	str	r5, [sp, #20]
 800f5e0:	2322      	movs	r3, #34	; 0x22
 800f5e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f6fc <_strtod_l+0x5ac>
 800f5e6:	6023      	str	r3, [r4, #0]
 800f5e8:	f04f 0a00 	mov.w	sl, #0
 800f5ec:	9b07      	ldr	r3, [sp, #28]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f43f adf2 	beq.w	800f1d8 <_strtod_l+0x88>
 800f5f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 ff98 	bl	801052c <_Bfree>
 800f5fc:	9905      	ldr	r1, [sp, #20]
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 ff94 	bl	801052c <_Bfree>
 800f604:	4631      	mov	r1, r6
 800f606:	4620      	mov	r0, r4
 800f608:	f000 ff90 	bl	801052c <_Bfree>
 800f60c:	9907      	ldr	r1, [sp, #28]
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 ff8c 	bl	801052c <_Bfree>
 800f614:	4629      	mov	r1, r5
 800f616:	4620      	mov	r0, r4
 800f618:	f000 ff88 	bl	801052c <_Bfree>
 800f61c:	e5dc      	b.n	800f1d8 <_strtod_l+0x88>
 800f61e:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <_strtod_l+0x5a8>)
 800f620:	9304      	str	r3, [sp, #16]
 800f622:	2300      	movs	r3, #0
 800f624:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f628:	4650      	mov	r0, sl
 800f62a:	4659      	mov	r1, fp
 800f62c:	4699      	mov	r9, r3
 800f62e:	f1b8 0f01 	cmp.w	r8, #1
 800f632:	dc21      	bgt.n	800f678 <_strtod_l+0x528>
 800f634:	b10b      	cbz	r3, 800f63a <_strtod_l+0x4ea>
 800f636:	4682      	mov	sl, r0
 800f638:	468b      	mov	fp, r1
 800f63a:	4b2f      	ldr	r3, [pc, #188]	; (800f6f8 <_strtod_l+0x5a8>)
 800f63c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f640:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f644:	4652      	mov	r2, sl
 800f646:	465b      	mov	r3, fp
 800f648:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f64c:	f7f8 fff4 	bl	8008638 <__aeabi_dmul>
 800f650:	4b2a      	ldr	r3, [pc, #168]	; (800f6fc <_strtod_l+0x5ac>)
 800f652:	460a      	mov	r2, r1
 800f654:	400b      	ands	r3, r1
 800f656:	492a      	ldr	r1, [pc, #168]	; (800f700 <_strtod_l+0x5b0>)
 800f658:	428b      	cmp	r3, r1
 800f65a:	4682      	mov	sl, r0
 800f65c:	d8bc      	bhi.n	800f5d8 <_strtod_l+0x488>
 800f65e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f662:	428b      	cmp	r3, r1
 800f664:	bf86      	itte	hi
 800f666:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f704 <_strtod_l+0x5b4>
 800f66a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f66e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f672:	2300      	movs	r3, #0
 800f674:	9304      	str	r3, [sp, #16]
 800f676:	e084      	b.n	800f782 <_strtod_l+0x632>
 800f678:	f018 0f01 	tst.w	r8, #1
 800f67c:	d005      	beq.n	800f68a <_strtod_l+0x53a>
 800f67e:	9b04      	ldr	r3, [sp, #16]
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	f7f8 ffd8 	bl	8008638 <__aeabi_dmul>
 800f688:	2301      	movs	r3, #1
 800f68a:	9a04      	ldr	r2, [sp, #16]
 800f68c:	3208      	adds	r2, #8
 800f68e:	f109 0901 	add.w	r9, r9, #1
 800f692:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f696:	9204      	str	r2, [sp, #16]
 800f698:	e7c9      	b.n	800f62e <_strtod_l+0x4de>
 800f69a:	d0ea      	beq.n	800f672 <_strtod_l+0x522>
 800f69c:	f1c8 0800 	rsb	r8, r8, #0
 800f6a0:	f018 020f 	ands.w	r2, r8, #15
 800f6a4:	d00a      	beq.n	800f6bc <_strtod_l+0x56c>
 800f6a6:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <_strtod_l+0x5a4>)
 800f6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6ac:	4650      	mov	r0, sl
 800f6ae:	4659      	mov	r1, fp
 800f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b4:	f7f9 f8ea 	bl	800888c <__aeabi_ddiv>
 800f6b8:	4682      	mov	sl, r0
 800f6ba:	468b      	mov	fp, r1
 800f6bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f6c0:	d0d7      	beq.n	800f672 <_strtod_l+0x522>
 800f6c2:	f1b8 0f1f 	cmp.w	r8, #31
 800f6c6:	dd1f      	ble.n	800f708 <_strtod_l+0x5b8>
 800f6c8:	2500      	movs	r5, #0
 800f6ca:	462e      	mov	r6, r5
 800f6cc:	9507      	str	r5, [sp, #28]
 800f6ce:	9505      	str	r5, [sp, #20]
 800f6d0:	2322      	movs	r3, #34	; 0x22
 800f6d2:	f04f 0a00 	mov.w	sl, #0
 800f6d6:	f04f 0b00 	mov.w	fp, #0
 800f6da:	6023      	str	r3, [r4, #0]
 800f6dc:	e786      	b.n	800f5ec <_strtod_l+0x49c>
 800f6de:	bf00      	nop
 800f6e0:	08011cf1 	.word	0x08011cf1
 800f6e4:	08011d08 	.word	0x08011d08
 800f6e8:	08011ce8 	.word	0x08011ce8
 800f6ec:	08011ceb 	.word	0x08011ceb
 800f6f0:	08011f7f 	.word	0x08011f7f
 800f6f4:	08011e70 	.word	0x08011e70
 800f6f8:	08011e48 	.word	0x08011e48
 800f6fc:	7ff00000 	.word	0x7ff00000
 800f700:	7ca00000 	.word	0x7ca00000
 800f704:	7fefffff 	.word	0x7fefffff
 800f708:	f018 0310 	ands.w	r3, r8, #16
 800f70c:	bf18      	it	ne
 800f70e:	236a      	movne	r3, #106	; 0x6a
 800f710:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fac0 <_strtod_l+0x970>
 800f714:	9304      	str	r3, [sp, #16]
 800f716:	4650      	mov	r0, sl
 800f718:	4659      	mov	r1, fp
 800f71a:	2300      	movs	r3, #0
 800f71c:	f018 0f01 	tst.w	r8, #1
 800f720:	d004      	beq.n	800f72c <_strtod_l+0x5dc>
 800f722:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f726:	f7f8 ff87 	bl	8008638 <__aeabi_dmul>
 800f72a:	2301      	movs	r3, #1
 800f72c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f730:	f109 0908 	add.w	r9, r9, #8
 800f734:	d1f2      	bne.n	800f71c <_strtod_l+0x5cc>
 800f736:	b10b      	cbz	r3, 800f73c <_strtod_l+0x5ec>
 800f738:	4682      	mov	sl, r0
 800f73a:	468b      	mov	fp, r1
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	b1c3      	cbz	r3, 800f772 <_strtod_l+0x622>
 800f740:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f744:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f748:	2b00      	cmp	r3, #0
 800f74a:	4659      	mov	r1, fp
 800f74c:	dd11      	ble.n	800f772 <_strtod_l+0x622>
 800f74e:	2b1f      	cmp	r3, #31
 800f750:	f340 8124 	ble.w	800f99c <_strtod_l+0x84c>
 800f754:	2b34      	cmp	r3, #52	; 0x34
 800f756:	bfde      	ittt	le
 800f758:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f75c:	f04f 33ff 	movle.w	r3, #4294967295
 800f760:	fa03 f202 	lslle.w	r2, r3, r2
 800f764:	f04f 0a00 	mov.w	sl, #0
 800f768:	bfcc      	ite	gt
 800f76a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f76e:	ea02 0b01 	andle.w	fp, r2, r1
 800f772:	2200      	movs	r2, #0
 800f774:	2300      	movs	r3, #0
 800f776:	4650      	mov	r0, sl
 800f778:	4659      	mov	r1, fp
 800f77a:	f7f9 f9c5 	bl	8008b08 <__aeabi_dcmpeq>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1a2      	bne.n	800f6c8 <_strtod_l+0x578>
 800f782:	9b07      	ldr	r3, [sp, #28]
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	9908      	ldr	r1, [sp, #32]
 800f788:	462b      	mov	r3, r5
 800f78a:	463a      	mov	r2, r7
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 ff35 	bl	80105fc <__s2b>
 800f792:	9007      	str	r0, [sp, #28]
 800f794:	2800      	cmp	r0, #0
 800f796:	f43f af1f 	beq.w	800f5d8 <_strtod_l+0x488>
 800f79a:	9b05      	ldr	r3, [sp, #20]
 800f79c:	1b9e      	subs	r6, r3, r6
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bfb4      	ite	lt
 800f7a4:	4633      	movlt	r3, r6
 800f7a6:	2300      	movge	r3, #0
 800f7a8:	930c      	str	r3, [sp, #48]	; 0x30
 800f7aa:	9b06      	ldr	r3, [sp, #24]
 800f7ac:	2500      	movs	r5, #0
 800f7ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f7b2:	9312      	str	r3, [sp, #72]	; 0x48
 800f7b4:	462e      	mov	r6, r5
 800f7b6:	9b07      	ldr	r3, [sp, #28]
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	6859      	ldr	r1, [r3, #4]
 800f7bc:	f000 fe76 	bl	80104ac <_Balloc>
 800f7c0:	9005      	str	r0, [sp, #20]
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	f43f af0c 	beq.w	800f5e0 <_strtod_l+0x490>
 800f7c8:	9b07      	ldr	r3, [sp, #28]
 800f7ca:	691a      	ldr	r2, [r3, #16]
 800f7cc:	3202      	adds	r2, #2
 800f7ce:	f103 010c 	add.w	r1, r3, #12
 800f7d2:	0092      	lsls	r2, r2, #2
 800f7d4:	300c      	adds	r0, #12
 800f7d6:	f000 fe4f 	bl	8010478 <memcpy>
 800f7da:	ec4b ab10 	vmov	d0, sl, fp
 800f7de:	aa1a      	add	r2, sp, #104	; 0x68
 800f7e0:	a919      	add	r1, sp, #100	; 0x64
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f001 fa50 	bl	8010c88 <__d2b>
 800f7e8:	ec4b ab18 	vmov	d8, sl, fp
 800f7ec:	9018      	str	r0, [sp, #96]	; 0x60
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f43f aef6 	beq.w	800f5e0 <_strtod_l+0x490>
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f000 ff9a 	bl	8010730 <__i2b>
 800f7fc:	4606      	mov	r6, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f43f aeee 	beq.w	800f5e0 <_strtod_l+0x490>
 800f804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f806:	9904      	ldr	r1, [sp, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	bfab      	itete	ge
 800f80c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f80e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f812:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f816:	bfac      	ite	ge
 800f818:	eb03 0902 	addge.w	r9, r3, r2
 800f81c:	1ad7      	sublt	r7, r2, r3
 800f81e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f820:	eba3 0801 	sub.w	r8, r3, r1
 800f824:	4490      	add	r8, r2
 800f826:	4ba1      	ldr	r3, [pc, #644]	; (800faac <_strtod_l+0x95c>)
 800f828:	f108 38ff 	add.w	r8, r8, #4294967295
 800f82c:	4598      	cmp	r8, r3
 800f82e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f832:	f280 80c7 	bge.w	800f9c4 <_strtod_l+0x874>
 800f836:	eba3 0308 	sub.w	r3, r3, r8
 800f83a:	2b1f      	cmp	r3, #31
 800f83c:	eba2 0203 	sub.w	r2, r2, r3
 800f840:	f04f 0101 	mov.w	r1, #1
 800f844:	f300 80b1 	bgt.w	800f9aa <_strtod_l+0x85a>
 800f848:	fa01 f303 	lsl.w	r3, r1, r3
 800f84c:	930d      	str	r3, [sp, #52]	; 0x34
 800f84e:	2300      	movs	r3, #0
 800f850:	9308      	str	r3, [sp, #32]
 800f852:	eb09 0802 	add.w	r8, r9, r2
 800f856:	9b04      	ldr	r3, [sp, #16]
 800f858:	45c1      	cmp	r9, r8
 800f85a:	4417      	add	r7, r2
 800f85c:	441f      	add	r7, r3
 800f85e:	464b      	mov	r3, r9
 800f860:	bfa8      	it	ge
 800f862:	4643      	movge	r3, r8
 800f864:	42bb      	cmp	r3, r7
 800f866:	bfa8      	it	ge
 800f868:	463b      	movge	r3, r7
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	bfc2      	ittt	gt
 800f86e:	eba8 0803 	subgt.w	r8, r8, r3
 800f872:	1aff      	subgt	r7, r7, r3
 800f874:	eba9 0903 	subgt.w	r9, r9, r3
 800f878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	dd17      	ble.n	800f8ae <_strtod_l+0x75e>
 800f87e:	4631      	mov	r1, r6
 800f880:	461a      	mov	r2, r3
 800f882:	4620      	mov	r0, r4
 800f884:	f001 f814 	bl	80108b0 <__pow5mult>
 800f888:	4606      	mov	r6, r0
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f43f aea8 	beq.w	800f5e0 <_strtod_l+0x490>
 800f890:	4601      	mov	r1, r0
 800f892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f894:	4620      	mov	r0, r4
 800f896:	f000 ff61 	bl	801075c <__multiply>
 800f89a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f43f ae9f 	beq.w	800f5e0 <_strtod_l+0x490>
 800f8a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 fe41 	bl	801052c <_Bfree>
 800f8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ac:	9318      	str	r3, [sp, #96]	; 0x60
 800f8ae:	f1b8 0f00 	cmp.w	r8, #0
 800f8b2:	f300 808c 	bgt.w	800f9ce <_strtod_l+0x87e>
 800f8b6:	9b06      	ldr	r3, [sp, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dd08      	ble.n	800f8ce <_strtod_l+0x77e>
 800f8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f8be:	9905      	ldr	r1, [sp, #20]
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f000 fff5 	bl	80108b0 <__pow5mult>
 800f8c6:	9005      	str	r0, [sp, #20]
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f43f ae89 	beq.w	800f5e0 <_strtod_l+0x490>
 800f8ce:	2f00      	cmp	r7, #0
 800f8d0:	dd08      	ble.n	800f8e4 <_strtod_l+0x794>
 800f8d2:	9905      	ldr	r1, [sp, #20]
 800f8d4:	463a      	mov	r2, r7
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f001 f844 	bl	8010964 <__lshift>
 800f8dc:	9005      	str	r0, [sp, #20]
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f43f ae7e 	beq.w	800f5e0 <_strtod_l+0x490>
 800f8e4:	f1b9 0f00 	cmp.w	r9, #0
 800f8e8:	dd08      	ble.n	800f8fc <_strtod_l+0x7ac>
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	464a      	mov	r2, r9
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f001 f838 	bl	8010964 <__lshift>
 800f8f4:	4606      	mov	r6, r0
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f43f ae72 	beq.w	800f5e0 <_strtod_l+0x490>
 800f8fc:	9a05      	ldr	r2, [sp, #20]
 800f8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f900:	4620      	mov	r0, r4
 800f902:	f001 f8bb 	bl	8010a7c <__mdiff>
 800f906:	4605      	mov	r5, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	f43f ae69 	beq.w	800f5e0 <_strtod_l+0x490>
 800f90e:	68c3      	ldr	r3, [r0, #12]
 800f910:	930b      	str	r3, [sp, #44]	; 0x2c
 800f912:	2300      	movs	r3, #0
 800f914:	60c3      	str	r3, [r0, #12]
 800f916:	4631      	mov	r1, r6
 800f918:	f001 f894 	bl	8010a44 <__mcmp>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	da60      	bge.n	800f9e2 <_strtod_l+0x892>
 800f920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f922:	ea53 030a 	orrs.w	r3, r3, sl
 800f926:	f040 8082 	bne.w	800fa2e <_strtod_l+0x8de>
 800f92a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d17d      	bne.n	800fa2e <_strtod_l+0x8de>
 800f932:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f936:	0d1b      	lsrs	r3, r3, #20
 800f938:	051b      	lsls	r3, r3, #20
 800f93a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f93e:	d976      	bls.n	800fa2e <_strtod_l+0x8de>
 800f940:	696b      	ldr	r3, [r5, #20]
 800f942:	b913      	cbnz	r3, 800f94a <_strtod_l+0x7fa>
 800f944:	692b      	ldr	r3, [r5, #16]
 800f946:	2b01      	cmp	r3, #1
 800f948:	dd71      	ble.n	800fa2e <_strtod_l+0x8de>
 800f94a:	4629      	mov	r1, r5
 800f94c:	2201      	movs	r2, #1
 800f94e:	4620      	mov	r0, r4
 800f950:	f001 f808 	bl	8010964 <__lshift>
 800f954:	4631      	mov	r1, r6
 800f956:	4605      	mov	r5, r0
 800f958:	f001 f874 	bl	8010a44 <__mcmp>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	dd66      	ble.n	800fa2e <_strtod_l+0x8de>
 800f960:	9904      	ldr	r1, [sp, #16]
 800f962:	4a53      	ldr	r2, [pc, #332]	; (800fab0 <_strtod_l+0x960>)
 800f964:	465b      	mov	r3, fp
 800f966:	2900      	cmp	r1, #0
 800f968:	f000 8081 	beq.w	800fa6e <_strtod_l+0x91e>
 800f96c:	ea02 010b 	and.w	r1, r2, fp
 800f970:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f974:	dc7b      	bgt.n	800fa6e <_strtod_l+0x91e>
 800f976:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f97a:	f77f aea9 	ble.w	800f6d0 <_strtod_l+0x580>
 800f97e:	4b4d      	ldr	r3, [pc, #308]	; (800fab4 <_strtod_l+0x964>)
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	2200      	movs	r2, #0
 800f986:	f7f8 fe57 	bl	8008638 <__aeabi_dmul>
 800f98a:	460b      	mov	r3, r1
 800f98c:	4303      	orrs	r3, r0
 800f98e:	bf08      	it	eq
 800f990:	2322      	moveq	r3, #34	; 0x22
 800f992:	4682      	mov	sl, r0
 800f994:	468b      	mov	fp, r1
 800f996:	bf08      	it	eq
 800f998:	6023      	streq	r3, [r4, #0]
 800f99a:	e62b      	b.n	800f5f4 <_strtod_l+0x4a4>
 800f99c:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f9a4:	ea03 0a0a 	and.w	sl, r3, sl
 800f9a8:	e6e3      	b.n	800f772 <_strtod_l+0x622>
 800f9aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f9ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f9b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f9b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f9ba:	fa01 f308 	lsl.w	r3, r1, r8
 800f9be:	9308      	str	r3, [sp, #32]
 800f9c0:	910d      	str	r1, [sp, #52]	; 0x34
 800f9c2:	e746      	b.n	800f852 <_strtod_l+0x702>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	9308      	str	r3, [sp, #32]
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	930d      	str	r3, [sp, #52]	; 0x34
 800f9cc:	e741      	b.n	800f852 <_strtod_l+0x702>
 800f9ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9d0:	4642      	mov	r2, r8
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f000 ffc6 	bl	8010964 <__lshift>
 800f9d8:	9018      	str	r0, [sp, #96]	; 0x60
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	f47f af6b 	bne.w	800f8b6 <_strtod_l+0x766>
 800f9e0:	e5fe      	b.n	800f5e0 <_strtod_l+0x490>
 800f9e2:	465f      	mov	r7, fp
 800f9e4:	d16e      	bne.n	800fac4 <_strtod_l+0x974>
 800f9e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9ec:	b342      	cbz	r2, 800fa40 <_strtod_l+0x8f0>
 800f9ee:	4a32      	ldr	r2, [pc, #200]	; (800fab8 <_strtod_l+0x968>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d128      	bne.n	800fa46 <_strtod_l+0x8f6>
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	4651      	mov	r1, sl
 800f9f8:	b1eb      	cbz	r3, 800fa36 <_strtod_l+0x8e6>
 800f9fa:	4b2d      	ldr	r3, [pc, #180]	; (800fab0 <_strtod_l+0x960>)
 800f9fc:	403b      	ands	r3, r7
 800f9fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fa02:	f04f 32ff 	mov.w	r2, #4294967295
 800fa06:	d819      	bhi.n	800fa3c <_strtod_l+0x8ec>
 800fa08:	0d1b      	lsrs	r3, r3, #20
 800fa0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa12:	4299      	cmp	r1, r3
 800fa14:	d117      	bne.n	800fa46 <_strtod_l+0x8f6>
 800fa16:	4b29      	ldr	r3, [pc, #164]	; (800fabc <_strtod_l+0x96c>)
 800fa18:	429f      	cmp	r7, r3
 800fa1a:	d102      	bne.n	800fa22 <_strtod_l+0x8d2>
 800fa1c:	3101      	adds	r1, #1
 800fa1e:	f43f addf 	beq.w	800f5e0 <_strtod_l+0x490>
 800fa22:	4b23      	ldr	r3, [pc, #140]	; (800fab0 <_strtod_l+0x960>)
 800fa24:	403b      	ands	r3, r7
 800fa26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fa2a:	f04f 0a00 	mov.w	sl, #0
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1a4      	bne.n	800f97e <_strtod_l+0x82e>
 800fa34:	e5de      	b.n	800f5f4 <_strtod_l+0x4a4>
 800fa36:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3a:	e7ea      	b.n	800fa12 <_strtod_l+0x8c2>
 800fa3c:	4613      	mov	r3, r2
 800fa3e:	e7e8      	b.n	800fa12 <_strtod_l+0x8c2>
 800fa40:	ea53 030a 	orrs.w	r3, r3, sl
 800fa44:	d08c      	beq.n	800f960 <_strtod_l+0x810>
 800fa46:	9b08      	ldr	r3, [sp, #32]
 800fa48:	b1db      	cbz	r3, 800fa82 <_strtod_l+0x932>
 800fa4a:	423b      	tst	r3, r7
 800fa4c:	d0ef      	beq.n	800fa2e <_strtod_l+0x8de>
 800fa4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa50:	9a04      	ldr	r2, [sp, #16]
 800fa52:	4650      	mov	r0, sl
 800fa54:	4659      	mov	r1, fp
 800fa56:	b1c3      	cbz	r3, 800fa8a <_strtod_l+0x93a>
 800fa58:	f7ff fb5c 	bl	800f114 <sulp>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	ec51 0b18 	vmov	r0, r1, d8
 800fa64:	f7f8 fc32 	bl	80082cc <__adddf3>
 800fa68:	4682      	mov	sl, r0
 800fa6a:	468b      	mov	fp, r1
 800fa6c:	e7df      	b.n	800fa2e <_strtod_l+0x8de>
 800fa6e:	4013      	ands	r3, r2
 800fa70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fa74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fa78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fa7c:	f04f 3aff 	mov.w	sl, #4294967295
 800fa80:	e7d5      	b.n	800fa2e <_strtod_l+0x8de>
 800fa82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa84:	ea13 0f0a 	tst.w	r3, sl
 800fa88:	e7e0      	b.n	800fa4c <_strtod_l+0x8fc>
 800fa8a:	f7ff fb43 	bl	800f114 <sulp>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	ec51 0b18 	vmov	r0, r1, d8
 800fa96:	f7f8 fc17 	bl	80082c8 <__aeabi_dsub>
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4682      	mov	sl, r0
 800faa0:	468b      	mov	fp, r1
 800faa2:	f7f9 f831 	bl	8008b08 <__aeabi_dcmpeq>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d0c1      	beq.n	800fa2e <_strtod_l+0x8de>
 800faaa:	e611      	b.n	800f6d0 <_strtod_l+0x580>
 800faac:	fffffc02 	.word	0xfffffc02
 800fab0:	7ff00000 	.word	0x7ff00000
 800fab4:	39500000 	.word	0x39500000
 800fab8:	000fffff 	.word	0x000fffff
 800fabc:	7fefffff 	.word	0x7fefffff
 800fac0:	08011d20 	.word	0x08011d20
 800fac4:	4631      	mov	r1, r6
 800fac6:	4628      	mov	r0, r5
 800fac8:	f001 f93a 	bl	8010d40 <__ratio>
 800facc:	ec59 8b10 	vmov	r8, r9, d0
 800fad0:	ee10 0a10 	vmov	r0, s0
 800fad4:	2200      	movs	r2, #0
 800fad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fada:	4649      	mov	r1, r9
 800fadc:	f7f9 f828 	bl	8008b30 <__aeabi_dcmple>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	d07a      	beq.n	800fbda <_strtod_l+0xa8a>
 800fae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d04a      	beq.n	800fb80 <_strtod_l+0xa30>
 800faea:	4b95      	ldr	r3, [pc, #596]	; (800fd40 <_strtod_l+0xbf0>)
 800faec:	2200      	movs	r2, #0
 800faee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800faf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fd40 <_strtod_l+0xbf0>
 800faf6:	f04f 0800 	mov.w	r8, #0
 800fafa:	4b92      	ldr	r3, [pc, #584]	; (800fd44 <_strtod_l+0xbf4>)
 800fafc:	403b      	ands	r3, r7
 800fafe:	930d      	str	r3, [sp, #52]	; 0x34
 800fb00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb02:	4b91      	ldr	r3, [pc, #580]	; (800fd48 <_strtod_l+0xbf8>)
 800fb04:	429a      	cmp	r2, r3
 800fb06:	f040 80b0 	bne.w	800fc6a <_strtod_l+0xb1a>
 800fb0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fb12:	ec4b ab10 	vmov	d0, sl, fp
 800fb16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb1a:	f001 f839 	bl	8010b90 <__ulp>
 800fb1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb22:	ec53 2b10 	vmov	r2, r3, d0
 800fb26:	f7f8 fd87 	bl	8008638 <__aeabi_dmul>
 800fb2a:	4652      	mov	r2, sl
 800fb2c:	465b      	mov	r3, fp
 800fb2e:	f7f8 fbcd 	bl	80082cc <__adddf3>
 800fb32:	460b      	mov	r3, r1
 800fb34:	4983      	ldr	r1, [pc, #524]	; (800fd44 <_strtod_l+0xbf4>)
 800fb36:	4a85      	ldr	r2, [pc, #532]	; (800fd4c <_strtod_l+0xbfc>)
 800fb38:	4019      	ands	r1, r3
 800fb3a:	4291      	cmp	r1, r2
 800fb3c:	4682      	mov	sl, r0
 800fb3e:	d960      	bls.n	800fc02 <_strtod_l+0xab2>
 800fb40:	ee18 3a90 	vmov	r3, s17
 800fb44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d104      	bne.n	800fb56 <_strtod_l+0xa06>
 800fb4c:	ee18 3a10 	vmov	r3, s16
 800fb50:	3301      	adds	r3, #1
 800fb52:	f43f ad45 	beq.w	800f5e0 <_strtod_l+0x490>
 800fb56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fd58 <_strtod_l+0xc08>
 800fb5a:	f04f 3aff 	mov.w	sl, #4294967295
 800fb5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 fce3 	bl	801052c <_Bfree>
 800fb66:	9905      	ldr	r1, [sp, #20]
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f000 fcdf 	bl	801052c <_Bfree>
 800fb6e:	4631      	mov	r1, r6
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 fcdb 	bl	801052c <_Bfree>
 800fb76:	4629      	mov	r1, r5
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 fcd7 	bl	801052c <_Bfree>
 800fb7e:	e61a      	b.n	800f7b6 <_strtod_l+0x666>
 800fb80:	f1ba 0f00 	cmp.w	sl, #0
 800fb84:	d11b      	bne.n	800fbbe <_strtod_l+0xa6e>
 800fb86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb8a:	b9f3      	cbnz	r3, 800fbca <_strtod_l+0xa7a>
 800fb8c:	4b6c      	ldr	r3, [pc, #432]	; (800fd40 <_strtod_l+0xbf0>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	4640      	mov	r0, r8
 800fb92:	4649      	mov	r1, r9
 800fb94:	f7f8 ffc2 	bl	8008b1c <__aeabi_dcmplt>
 800fb98:	b9d0      	cbnz	r0, 800fbd0 <_strtod_l+0xa80>
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	4b6c      	ldr	r3, [pc, #432]	; (800fd50 <_strtod_l+0xc00>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	f7f8 fd49 	bl	8008638 <__aeabi_dmul>
 800fba6:	4680      	mov	r8, r0
 800fba8:	4689      	mov	r9, r1
 800fbaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fbae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fbb2:	9315      	str	r3, [sp, #84]	; 0x54
 800fbb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fbb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fbbc:	e79d      	b.n	800fafa <_strtod_l+0x9aa>
 800fbbe:	f1ba 0f01 	cmp.w	sl, #1
 800fbc2:	d102      	bne.n	800fbca <_strtod_l+0xa7a>
 800fbc4:	2f00      	cmp	r7, #0
 800fbc6:	f43f ad83 	beq.w	800f6d0 <_strtod_l+0x580>
 800fbca:	4b62      	ldr	r3, [pc, #392]	; (800fd54 <_strtod_l+0xc04>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	e78e      	b.n	800faee <_strtod_l+0x99e>
 800fbd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fd50 <_strtod_l+0xc00>
 800fbd4:	f04f 0800 	mov.w	r8, #0
 800fbd8:	e7e7      	b.n	800fbaa <_strtod_l+0xa5a>
 800fbda:	4b5d      	ldr	r3, [pc, #372]	; (800fd50 <_strtod_l+0xc00>)
 800fbdc:	4640      	mov	r0, r8
 800fbde:	4649      	mov	r1, r9
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f7f8 fd29 	bl	8008638 <__aeabi_dmul>
 800fbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbe8:	4680      	mov	r8, r0
 800fbea:	4689      	mov	r9, r1
 800fbec:	b933      	cbnz	r3, 800fbfc <_strtod_l+0xaac>
 800fbee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbf2:	900e      	str	r0, [sp, #56]	; 0x38
 800fbf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fbfa:	e7dd      	b.n	800fbb8 <_strtod_l+0xa68>
 800fbfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fc00:	e7f9      	b.n	800fbf6 <_strtod_l+0xaa6>
 800fc02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fc06:	9b04      	ldr	r3, [sp, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1a8      	bne.n	800fb5e <_strtod_l+0xa0e>
 800fc0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc12:	0d1b      	lsrs	r3, r3, #20
 800fc14:	051b      	lsls	r3, r3, #20
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d1a1      	bne.n	800fb5e <_strtod_l+0xa0e>
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	f7f9 f82d 	bl	8008c7c <__aeabi_d2lz>
 800fc22:	f7f8 fcdb 	bl	80085dc <__aeabi_l2d>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4640      	mov	r0, r8
 800fc2c:	4649      	mov	r1, r9
 800fc2e:	f7f8 fb4b 	bl	80082c8 <__aeabi_dsub>
 800fc32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc38:	ea43 030a 	orr.w	r3, r3, sl
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	4680      	mov	r8, r0
 800fc40:	4689      	mov	r9, r1
 800fc42:	d055      	beq.n	800fcf0 <_strtod_l+0xba0>
 800fc44:	a336      	add	r3, pc, #216	; (adr r3, 800fd20 <_strtod_l+0xbd0>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f8 ff67 	bl	8008b1c <__aeabi_dcmplt>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f47f acd0 	bne.w	800f5f4 <_strtod_l+0x4a4>
 800fc54:	a334      	add	r3, pc, #208	; (adr r3, 800fd28 <_strtod_l+0xbd8>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	f7f8 ff7b 	bl	8008b58 <__aeabi_dcmpgt>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	f43f af7b 	beq.w	800fb5e <_strtod_l+0xa0e>
 800fc68:	e4c4      	b.n	800f5f4 <_strtod_l+0x4a4>
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	b333      	cbz	r3, 800fcbc <_strtod_l+0xb6c>
 800fc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fc74:	d822      	bhi.n	800fcbc <_strtod_l+0xb6c>
 800fc76:	a32e      	add	r3, pc, #184	; (adr r3, 800fd30 <_strtod_l+0xbe0>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	4649      	mov	r1, r9
 800fc80:	f7f8 ff56 	bl	8008b30 <__aeabi_dcmple>
 800fc84:	b1a0      	cbz	r0, 800fcb0 <_strtod_l+0xb60>
 800fc86:	4649      	mov	r1, r9
 800fc88:	4640      	mov	r0, r8
 800fc8a:	f7f8 ff6f 	bl	8008b6c <__aeabi_d2uiz>
 800fc8e:	2801      	cmp	r0, #1
 800fc90:	bf38      	it	cc
 800fc92:	2001      	movcc	r0, #1
 800fc94:	f7f8 fc56 	bl	8008544 <__aeabi_ui2d>
 800fc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc9a:	4680      	mov	r8, r0
 800fc9c:	4689      	mov	r9, r1
 800fc9e:	bb23      	cbnz	r3, 800fcea <_strtod_l+0xb9a>
 800fca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fca4:	9010      	str	r0, [sp, #64]	; 0x40
 800fca6:	9311      	str	r3, [sp, #68]	; 0x44
 800fca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fcac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fcb8:	1a9b      	subs	r3, r3, r2
 800fcba:	9309      	str	r3, [sp, #36]	; 0x24
 800fcbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcc0:	eeb0 0a48 	vmov.f32	s0, s16
 800fcc4:	eef0 0a68 	vmov.f32	s1, s17
 800fcc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fccc:	f000 ff60 	bl	8010b90 <__ulp>
 800fcd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcd4:	ec53 2b10 	vmov	r2, r3, d0
 800fcd8:	f7f8 fcae 	bl	8008638 <__aeabi_dmul>
 800fcdc:	ec53 2b18 	vmov	r2, r3, d8
 800fce0:	f7f8 faf4 	bl	80082cc <__adddf3>
 800fce4:	4682      	mov	sl, r0
 800fce6:	468b      	mov	fp, r1
 800fce8:	e78d      	b.n	800fc06 <_strtod_l+0xab6>
 800fcea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fcee:	e7db      	b.n	800fca8 <_strtod_l+0xb58>
 800fcf0:	a311      	add	r3, pc, #68	; (adr r3, 800fd38 <_strtod_l+0xbe8>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	f7f8 ff11 	bl	8008b1c <__aeabi_dcmplt>
 800fcfa:	e7b2      	b.n	800fc62 <_strtod_l+0xb12>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	930a      	str	r3, [sp, #40]	; 0x28
 800fd00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	f7ff ba6b 	b.w	800f1e0 <_strtod_l+0x90>
 800fd0a:	2a65      	cmp	r2, #101	; 0x65
 800fd0c:	f43f ab5f 	beq.w	800f3ce <_strtod_l+0x27e>
 800fd10:	2a45      	cmp	r2, #69	; 0x45
 800fd12:	f43f ab5c 	beq.w	800f3ce <_strtod_l+0x27e>
 800fd16:	2301      	movs	r3, #1
 800fd18:	f7ff bb94 	b.w	800f444 <_strtod_l+0x2f4>
 800fd1c:	f3af 8000 	nop.w
 800fd20:	94a03595 	.word	0x94a03595
 800fd24:	3fdfffff 	.word	0x3fdfffff
 800fd28:	35afe535 	.word	0x35afe535
 800fd2c:	3fe00000 	.word	0x3fe00000
 800fd30:	ffc00000 	.word	0xffc00000
 800fd34:	41dfffff 	.word	0x41dfffff
 800fd38:	94a03595 	.word	0x94a03595
 800fd3c:	3fcfffff 	.word	0x3fcfffff
 800fd40:	3ff00000 	.word	0x3ff00000
 800fd44:	7ff00000 	.word	0x7ff00000
 800fd48:	7fe00000 	.word	0x7fe00000
 800fd4c:	7c9fffff 	.word	0x7c9fffff
 800fd50:	3fe00000 	.word	0x3fe00000
 800fd54:	bff00000 	.word	0xbff00000
 800fd58:	7fefffff 	.word	0x7fefffff

0800fd5c <strtod>:
 800fd5c:	460a      	mov	r2, r1
 800fd5e:	4601      	mov	r1, r0
 800fd60:	4802      	ldr	r0, [pc, #8]	; (800fd6c <strtod+0x10>)
 800fd62:	4b03      	ldr	r3, [pc, #12]	; (800fd70 <strtod+0x14>)
 800fd64:	6800      	ldr	r0, [r0, #0]
 800fd66:	f7ff b9f3 	b.w	800f150 <_strtod_l>
 800fd6a:	bf00      	nop
 800fd6c:	20013890 	.word	0x20013890
 800fd70:	200138f8 	.word	0x200138f8

0800fd74 <rshift>:
 800fd74:	6903      	ldr	r3, [r0, #16]
 800fd76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd82:	f100 0414 	add.w	r4, r0, #20
 800fd86:	dd45      	ble.n	800fe14 <rshift+0xa0>
 800fd88:	f011 011f 	ands.w	r1, r1, #31
 800fd8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd94:	d10c      	bne.n	800fdb0 <rshift+0x3c>
 800fd96:	f100 0710 	add.w	r7, r0, #16
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	42b1      	cmp	r1, r6
 800fd9e:	d334      	bcc.n	800fe0a <rshift+0x96>
 800fda0:	1a9b      	subs	r3, r3, r2
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	1eea      	subs	r2, r5, #3
 800fda6:	4296      	cmp	r6, r2
 800fda8:	bf38      	it	cc
 800fdaa:	2300      	movcc	r3, #0
 800fdac:	4423      	add	r3, r4
 800fdae:	e015      	b.n	800fddc <rshift+0x68>
 800fdb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdb4:	f1c1 0820 	rsb	r8, r1, #32
 800fdb8:	40cf      	lsrs	r7, r1
 800fdba:	f105 0e04 	add.w	lr, r5, #4
 800fdbe:	46a1      	mov	r9, r4
 800fdc0:	4576      	cmp	r6, lr
 800fdc2:	46f4      	mov	ip, lr
 800fdc4:	d815      	bhi.n	800fdf2 <rshift+0x7e>
 800fdc6:	1a9a      	subs	r2, r3, r2
 800fdc8:	0092      	lsls	r2, r2, #2
 800fdca:	3a04      	subs	r2, #4
 800fdcc:	3501      	adds	r5, #1
 800fdce:	42ae      	cmp	r6, r5
 800fdd0:	bf38      	it	cc
 800fdd2:	2200      	movcc	r2, #0
 800fdd4:	18a3      	adds	r3, r4, r2
 800fdd6:	50a7      	str	r7, [r4, r2]
 800fdd8:	b107      	cbz	r7, 800fddc <rshift+0x68>
 800fdda:	3304      	adds	r3, #4
 800fddc:	1b1a      	subs	r2, r3, r4
 800fdde:	42a3      	cmp	r3, r4
 800fde0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fde4:	bf08      	it	eq
 800fde6:	2300      	moveq	r3, #0
 800fde8:	6102      	str	r2, [r0, #16]
 800fdea:	bf08      	it	eq
 800fdec:	6143      	streq	r3, [r0, #20]
 800fdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf2:	f8dc c000 	ldr.w	ip, [ip]
 800fdf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800fdfa:	ea4c 0707 	orr.w	r7, ip, r7
 800fdfe:	f849 7b04 	str.w	r7, [r9], #4
 800fe02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe06:	40cf      	lsrs	r7, r1
 800fe08:	e7da      	b.n	800fdc0 <rshift+0x4c>
 800fe0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe12:	e7c3      	b.n	800fd9c <rshift+0x28>
 800fe14:	4623      	mov	r3, r4
 800fe16:	e7e1      	b.n	800fddc <rshift+0x68>

0800fe18 <__hexdig_fun>:
 800fe18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe1c:	2b09      	cmp	r3, #9
 800fe1e:	d802      	bhi.n	800fe26 <__hexdig_fun+0xe>
 800fe20:	3820      	subs	r0, #32
 800fe22:	b2c0      	uxtb	r0, r0
 800fe24:	4770      	bx	lr
 800fe26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe2a:	2b05      	cmp	r3, #5
 800fe2c:	d801      	bhi.n	800fe32 <__hexdig_fun+0x1a>
 800fe2e:	3847      	subs	r0, #71	; 0x47
 800fe30:	e7f7      	b.n	800fe22 <__hexdig_fun+0xa>
 800fe32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe36:	2b05      	cmp	r3, #5
 800fe38:	d801      	bhi.n	800fe3e <__hexdig_fun+0x26>
 800fe3a:	3827      	subs	r0, #39	; 0x27
 800fe3c:	e7f1      	b.n	800fe22 <__hexdig_fun+0xa>
 800fe3e:	2000      	movs	r0, #0
 800fe40:	4770      	bx	lr
	...

0800fe44 <__gethex>:
 800fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe48:	ed2d 8b02 	vpush	{d8}
 800fe4c:	b089      	sub	sp, #36	; 0x24
 800fe4e:	ee08 0a10 	vmov	s16, r0
 800fe52:	9304      	str	r3, [sp, #16]
 800fe54:	4bb4      	ldr	r3, [pc, #720]	; (8010128 <__gethex+0x2e4>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	468b      	mov	fp, r1
 800fe5e:	4690      	mov	r8, r2
 800fe60:	f7f8 f9d6 	bl	8008210 <strlen>
 800fe64:	9b01      	ldr	r3, [sp, #4]
 800fe66:	f8db 2000 	ldr.w	r2, [fp]
 800fe6a:	4403      	add	r3, r0
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fe72:	9305      	str	r3, [sp, #20]
 800fe74:	1c93      	adds	r3, r2, #2
 800fe76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe7e:	32fe      	adds	r2, #254	; 0xfe
 800fe80:	18d1      	adds	r1, r2, r3
 800fe82:	461f      	mov	r7, r3
 800fe84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fe88:	9100      	str	r1, [sp, #0]
 800fe8a:	2830      	cmp	r0, #48	; 0x30
 800fe8c:	d0f8      	beq.n	800fe80 <__gethex+0x3c>
 800fe8e:	f7ff ffc3 	bl	800fe18 <__hexdig_fun>
 800fe92:	4604      	mov	r4, r0
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d13a      	bne.n	800ff0e <__gethex+0xca>
 800fe98:	9901      	ldr	r1, [sp, #4]
 800fe9a:	4652      	mov	r2, sl
 800fe9c:	4638      	mov	r0, r7
 800fe9e:	f000 ffe7 	bl	8010e70 <strncmp>
 800fea2:	4605      	mov	r5, r0
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d168      	bne.n	800ff7a <__gethex+0x136>
 800fea8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800feac:	eb07 060a 	add.w	r6, r7, sl
 800feb0:	f7ff ffb2 	bl	800fe18 <__hexdig_fun>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d062      	beq.n	800ff7e <__gethex+0x13a>
 800feb8:	4633      	mov	r3, r6
 800feba:	7818      	ldrb	r0, [r3, #0]
 800febc:	2830      	cmp	r0, #48	; 0x30
 800febe:	461f      	mov	r7, r3
 800fec0:	f103 0301 	add.w	r3, r3, #1
 800fec4:	d0f9      	beq.n	800feba <__gethex+0x76>
 800fec6:	f7ff ffa7 	bl	800fe18 <__hexdig_fun>
 800feca:	2301      	movs	r3, #1
 800fecc:	fab0 f480 	clz	r4, r0
 800fed0:	0964      	lsrs	r4, r4, #5
 800fed2:	4635      	mov	r5, r6
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	463a      	mov	r2, r7
 800fed8:	4616      	mov	r6, r2
 800feda:	3201      	adds	r2, #1
 800fedc:	7830      	ldrb	r0, [r6, #0]
 800fede:	f7ff ff9b 	bl	800fe18 <__hexdig_fun>
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d1f8      	bne.n	800fed8 <__gethex+0x94>
 800fee6:	9901      	ldr	r1, [sp, #4]
 800fee8:	4652      	mov	r2, sl
 800feea:	4630      	mov	r0, r6
 800feec:	f000 ffc0 	bl	8010e70 <strncmp>
 800fef0:	b980      	cbnz	r0, 800ff14 <__gethex+0xd0>
 800fef2:	b94d      	cbnz	r5, 800ff08 <__gethex+0xc4>
 800fef4:	eb06 050a 	add.w	r5, r6, sl
 800fef8:	462a      	mov	r2, r5
 800fefa:	4616      	mov	r6, r2
 800fefc:	3201      	adds	r2, #1
 800fefe:	7830      	ldrb	r0, [r6, #0]
 800ff00:	f7ff ff8a 	bl	800fe18 <__hexdig_fun>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d1f8      	bne.n	800fefa <__gethex+0xb6>
 800ff08:	1bad      	subs	r5, r5, r6
 800ff0a:	00ad      	lsls	r5, r5, #2
 800ff0c:	e004      	b.n	800ff18 <__gethex+0xd4>
 800ff0e:	2400      	movs	r4, #0
 800ff10:	4625      	mov	r5, r4
 800ff12:	e7e0      	b.n	800fed6 <__gethex+0x92>
 800ff14:	2d00      	cmp	r5, #0
 800ff16:	d1f7      	bne.n	800ff08 <__gethex+0xc4>
 800ff18:	7833      	ldrb	r3, [r6, #0]
 800ff1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff1e:	2b50      	cmp	r3, #80	; 0x50
 800ff20:	d13b      	bne.n	800ff9a <__gethex+0x156>
 800ff22:	7873      	ldrb	r3, [r6, #1]
 800ff24:	2b2b      	cmp	r3, #43	; 0x2b
 800ff26:	d02c      	beq.n	800ff82 <__gethex+0x13e>
 800ff28:	2b2d      	cmp	r3, #45	; 0x2d
 800ff2a:	d02e      	beq.n	800ff8a <__gethex+0x146>
 800ff2c:	1c71      	adds	r1, r6, #1
 800ff2e:	f04f 0900 	mov.w	r9, #0
 800ff32:	7808      	ldrb	r0, [r1, #0]
 800ff34:	f7ff ff70 	bl	800fe18 <__hexdig_fun>
 800ff38:	1e43      	subs	r3, r0, #1
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b18      	cmp	r3, #24
 800ff3e:	d82c      	bhi.n	800ff9a <__gethex+0x156>
 800ff40:	f1a0 0210 	sub.w	r2, r0, #16
 800ff44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff48:	f7ff ff66 	bl	800fe18 <__hexdig_fun>
 800ff4c:	1e43      	subs	r3, r0, #1
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b18      	cmp	r3, #24
 800ff52:	d91d      	bls.n	800ff90 <__gethex+0x14c>
 800ff54:	f1b9 0f00 	cmp.w	r9, #0
 800ff58:	d000      	beq.n	800ff5c <__gethex+0x118>
 800ff5a:	4252      	negs	r2, r2
 800ff5c:	4415      	add	r5, r2
 800ff5e:	f8cb 1000 	str.w	r1, [fp]
 800ff62:	b1e4      	cbz	r4, 800ff9e <__gethex+0x15a>
 800ff64:	9b00      	ldr	r3, [sp, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	bf14      	ite	ne
 800ff6a:	2700      	movne	r7, #0
 800ff6c:	2706      	moveq	r7, #6
 800ff6e:	4638      	mov	r0, r7
 800ff70:	b009      	add	sp, #36	; 0x24
 800ff72:	ecbd 8b02 	vpop	{d8}
 800ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7a:	463e      	mov	r6, r7
 800ff7c:	4625      	mov	r5, r4
 800ff7e:	2401      	movs	r4, #1
 800ff80:	e7ca      	b.n	800ff18 <__gethex+0xd4>
 800ff82:	f04f 0900 	mov.w	r9, #0
 800ff86:	1cb1      	adds	r1, r6, #2
 800ff88:	e7d3      	b.n	800ff32 <__gethex+0xee>
 800ff8a:	f04f 0901 	mov.w	r9, #1
 800ff8e:	e7fa      	b.n	800ff86 <__gethex+0x142>
 800ff90:	230a      	movs	r3, #10
 800ff92:	fb03 0202 	mla	r2, r3, r2, r0
 800ff96:	3a10      	subs	r2, #16
 800ff98:	e7d4      	b.n	800ff44 <__gethex+0x100>
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	e7df      	b.n	800ff5e <__gethex+0x11a>
 800ff9e:	1bf3      	subs	r3, r6, r7
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	2b07      	cmp	r3, #7
 800ffa6:	dc0b      	bgt.n	800ffc0 <__gethex+0x17c>
 800ffa8:	ee18 0a10 	vmov	r0, s16
 800ffac:	f000 fa7e 	bl	80104ac <_Balloc>
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	b940      	cbnz	r0, 800ffc6 <__gethex+0x182>
 800ffb4:	4b5d      	ldr	r3, [pc, #372]	; (801012c <__gethex+0x2e8>)
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	21de      	movs	r1, #222	; 0xde
 800ffba:	485d      	ldr	r0, [pc, #372]	; (8010130 <__gethex+0x2ec>)
 800ffbc:	f000 ff7a 	bl	8010eb4 <__assert_func>
 800ffc0:	3101      	adds	r1, #1
 800ffc2:	105b      	asrs	r3, r3, #1
 800ffc4:	e7ee      	b.n	800ffa4 <__gethex+0x160>
 800ffc6:	f100 0914 	add.w	r9, r0, #20
 800ffca:	f04f 0b00 	mov.w	fp, #0
 800ffce:	f1ca 0301 	rsb	r3, sl, #1
 800ffd2:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffd6:	f8cd b000 	str.w	fp, [sp]
 800ffda:	9306      	str	r3, [sp, #24]
 800ffdc:	42b7      	cmp	r7, r6
 800ffde:	d340      	bcc.n	8010062 <__gethex+0x21e>
 800ffe0:	9802      	ldr	r0, [sp, #8]
 800ffe2:	9b00      	ldr	r3, [sp, #0]
 800ffe4:	f840 3b04 	str.w	r3, [r0], #4
 800ffe8:	eba0 0009 	sub.w	r0, r0, r9
 800ffec:	1080      	asrs	r0, r0, #2
 800ffee:	0146      	lsls	r6, r0, #5
 800fff0:	6120      	str	r0, [r4, #16]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 fb4c 	bl	8010690 <__hi0bits>
 800fff8:	1a30      	subs	r0, r6, r0
 800fffa:	f8d8 6000 	ldr.w	r6, [r8]
 800fffe:	42b0      	cmp	r0, r6
 8010000:	dd63      	ble.n	80100ca <__gethex+0x286>
 8010002:	1b87      	subs	r7, r0, r6
 8010004:	4639      	mov	r1, r7
 8010006:	4620      	mov	r0, r4
 8010008:	f000 fef0 	bl	8010dec <__any_on>
 801000c:	4682      	mov	sl, r0
 801000e:	b1a8      	cbz	r0, 801003c <__gethex+0x1f8>
 8010010:	1e7b      	subs	r3, r7, #1
 8010012:	1159      	asrs	r1, r3, #5
 8010014:	f003 021f 	and.w	r2, r3, #31
 8010018:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801001c:	f04f 0a01 	mov.w	sl, #1
 8010020:	fa0a f202 	lsl.w	r2, sl, r2
 8010024:	420a      	tst	r2, r1
 8010026:	d009      	beq.n	801003c <__gethex+0x1f8>
 8010028:	4553      	cmp	r3, sl
 801002a:	dd05      	ble.n	8010038 <__gethex+0x1f4>
 801002c:	1eb9      	subs	r1, r7, #2
 801002e:	4620      	mov	r0, r4
 8010030:	f000 fedc 	bl	8010dec <__any_on>
 8010034:	2800      	cmp	r0, #0
 8010036:	d145      	bne.n	80100c4 <__gethex+0x280>
 8010038:	f04f 0a02 	mov.w	sl, #2
 801003c:	4639      	mov	r1, r7
 801003e:	4620      	mov	r0, r4
 8010040:	f7ff fe98 	bl	800fd74 <rshift>
 8010044:	443d      	add	r5, r7
 8010046:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801004a:	42ab      	cmp	r3, r5
 801004c:	da4c      	bge.n	80100e8 <__gethex+0x2a4>
 801004e:	ee18 0a10 	vmov	r0, s16
 8010052:	4621      	mov	r1, r4
 8010054:	f000 fa6a 	bl	801052c <_Bfree>
 8010058:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801005a:	2300      	movs	r3, #0
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	27a3      	movs	r7, #163	; 0xa3
 8010060:	e785      	b.n	800ff6e <__gethex+0x12a>
 8010062:	1e73      	subs	r3, r6, #1
 8010064:	9a05      	ldr	r2, [sp, #20]
 8010066:	9303      	str	r3, [sp, #12]
 8010068:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801006c:	4293      	cmp	r3, r2
 801006e:	d019      	beq.n	80100a4 <__gethex+0x260>
 8010070:	f1bb 0f20 	cmp.w	fp, #32
 8010074:	d107      	bne.n	8010086 <__gethex+0x242>
 8010076:	9b02      	ldr	r3, [sp, #8]
 8010078:	9a00      	ldr	r2, [sp, #0]
 801007a:	f843 2b04 	str.w	r2, [r3], #4
 801007e:	9302      	str	r3, [sp, #8]
 8010080:	2300      	movs	r3, #0
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	469b      	mov	fp, r3
 8010086:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801008a:	f7ff fec5 	bl	800fe18 <__hexdig_fun>
 801008e:	9b00      	ldr	r3, [sp, #0]
 8010090:	f000 000f 	and.w	r0, r0, #15
 8010094:	fa00 f00b 	lsl.w	r0, r0, fp
 8010098:	4303      	orrs	r3, r0
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	f10b 0b04 	add.w	fp, fp, #4
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	e00d      	b.n	80100c0 <__gethex+0x27c>
 80100a4:	9b03      	ldr	r3, [sp, #12]
 80100a6:	9a06      	ldr	r2, [sp, #24]
 80100a8:	4413      	add	r3, r2
 80100aa:	42bb      	cmp	r3, r7
 80100ac:	d3e0      	bcc.n	8010070 <__gethex+0x22c>
 80100ae:	4618      	mov	r0, r3
 80100b0:	9901      	ldr	r1, [sp, #4]
 80100b2:	9307      	str	r3, [sp, #28]
 80100b4:	4652      	mov	r2, sl
 80100b6:	f000 fedb 	bl	8010e70 <strncmp>
 80100ba:	9b07      	ldr	r3, [sp, #28]
 80100bc:	2800      	cmp	r0, #0
 80100be:	d1d7      	bne.n	8010070 <__gethex+0x22c>
 80100c0:	461e      	mov	r6, r3
 80100c2:	e78b      	b.n	800ffdc <__gethex+0x198>
 80100c4:	f04f 0a03 	mov.w	sl, #3
 80100c8:	e7b8      	b.n	801003c <__gethex+0x1f8>
 80100ca:	da0a      	bge.n	80100e2 <__gethex+0x29e>
 80100cc:	1a37      	subs	r7, r6, r0
 80100ce:	4621      	mov	r1, r4
 80100d0:	ee18 0a10 	vmov	r0, s16
 80100d4:	463a      	mov	r2, r7
 80100d6:	f000 fc45 	bl	8010964 <__lshift>
 80100da:	1bed      	subs	r5, r5, r7
 80100dc:	4604      	mov	r4, r0
 80100de:	f100 0914 	add.w	r9, r0, #20
 80100e2:	f04f 0a00 	mov.w	sl, #0
 80100e6:	e7ae      	b.n	8010046 <__gethex+0x202>
 80100e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80100ec:	42a8      	cmp	r0, r5
 80100ee:	dd72      	ble.n	80101d6 <__gethex+0x392>
 80100f0:	1b45      	subs	r5, r0, r5
 80100f2:	42ae      	cmp	r6, r5
 80100f4:	dc36      	bgt.n	8010164 <__gethex+0x320>
 80100f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d02a      	beq.n	8010154 <__gethex+0x310>
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d02c      	beq.n	801015c <__gethex+0x318>
 8010102:	2b01      	cmp	r3, #1
 8010104:	d11c      	bne.n	8010140 <__gethex+0x2fc>
 8010106:	42ae      	cmp	r6, r5
 8010108:	d11a      	bne.n	8010140 <__gethex+0x2fc>
 801010a:	2e01      	cmp	r6, #1
 801010c:	d112      	bne.n	8010134 <__gethex+0x2f0>
 801010e:	9a04      	ldr	r2, [sp, #16]
 8010110:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010114:	6013      	str	r3, [r2, #0]
 8010116:	2301      	movs	r3, #1
 8010118:	6123      	str	r3, [r4, #16]
 801011a:	f8c9 3000 	str.w	r3, [r9]
 801011e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010120:	2762      	movs	r7, #98	; 0x62
 8010122:	601c      	str	r4, [r3, #0]
 8010124:	e723      	b.n	800ff6e <__gethex+0x12a>
 8010126:	bf00      	nop
 8010128:	08011dc0 	.word	0x08011dc0
 801012c:	08011d48 	.word	0x08011d48
 8010130:	08011d59 	.word	0x08011d59
 8010134:	1e71      	subs	r1, r6, #1
 8010136:	4620      	mov	r0, r4
 8010138:	f000 fe58 	bl	8010dec <__any_on>
 801013c:	2800      	cmp	r0, #0
 801013e:	d1e6      	bne.n	801010e <__gethex+0x2ca>
 8010140:	ee18 0a10 	vmov	r0, s16
 8010144:	4621      	mov	r1, r4
 8010146:	f000 f9f1 	bl	801052c <_Bfree>
 801014a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801014c:	2300      	movs	r3, #0
 801014e:	6013      	str	r3, [r2, #0]
 8010150:	2750      	movs	r7, #80	; 0x50
 8010152:	e70c      	b.n	800ff6e <__gethex+0x12a>
 8010154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1f2      	bne.n	8010140 <__gethex+0x2fc>
 801015a:	e7d8      	b.n	801010e <__gethex+0x2ca>
 801015c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801015e:	2b00      	cmp	r3, #0
 8010160:	d1d5      	bne.n	801010e <__gethex+0x2ca>
 8010162:	e7ed      	b.n	8010140 <__gethex+0x2fc>
 8010164:	1e6f      	subs	r7, r5, #1
 8010166:	f1ba 0f00 	cmp.w	sl, #0
 801016a:	d131      	bne.n	80101d0 <__gethex+0x38c>
 801016c:	b127      	cbz	r7, 8010178 <__gethex+0x334>
 801016e:	4639      	mov	r1, r7
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fe3b 	bl	8010dec <__any_on>
 8010176:	4682      	mov	sl, r0
 8010178:	117b      	asrs	r3, r7, #5
 801017a:	2101      	movs	r1, #1
 801017c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010180:	f007 071f 	and.w	r7, r7, #31
 8010184:	fa01 f707 	lsl.w	r7, r1, r7
 8010188:	421f      	tst	r7, r3
 801018a:	4629      	mov	r1, r5
 801018c:	4620      	mov	r0, r4
 801018e:	bf18      	it	ne
 8010190:	f04a 0a02 	orrne.w	sl, sl, #2
 8010194:	1b76      	subs	r6, r6, r5
 8010196:	f7ff fded 	bl	800fd74 <rshift>
 801019a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801019e:	2702      	movs	r7, #2
 80101a0:	f1ba 0f00 	cmp.w	sl, #0
 80101a4:	d048      	beq.n	8010238 <__gethex+0x3f4>
 80101a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d015      	beq.n	80101da <__gethex+0x396>
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d017      	beq.n	80101e2 <__gethex+0x39e>
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d109      	bne.n	80101ca <__gethex+0x386>
 80101b6:	f01a 0f02 	tst.w	sl, #2
 80101ba:	d006      	beq.n	80101ca <__gethex+0x386>
 80101bc:	f8d9 0000 	ldr.w	r0, [r9]
 80101c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80101c4:	f01a 0f01 	tst.w	sl, #1
 80101c8:	d10e      	bne.n	80101e8 <__gethex+0x3a4>
 80101ca:	f047 0710 	orr.w	r7, r7, #16
 80101ce:	e033      	b.n	8010238 <__gethex+0x3f4>
 80101d0:	f04f 0a01 	mov.w	sl, #1
 80101d4:	e7d0      	b.n	8010178 <__gethex+0x334>
 80101d6:	2701      	movs	r7, #1
 80101d8:	e7e2      	b.n	80101a0 <__gethex+0x35c>
 80101da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101dc:	f1c3 0301 	rsb	r3, r3, #1
 80101e0:	9315      	str	r3, [sp, #84]	; 0x54
 80101e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d0f0      	beq.n	80101ca <__gethex+0x386>
 80101e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101ec:	f104 0314 	add.w	r3, r4, #20
 80101f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80101f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80101f8:	f04f 0c00 	mov.w	ip, #0
 80101fc:	4618      	mov	r0, r3
 80101fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010202:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010206:	d01c      	beq.n	8010242 <__gethex+0x3fe>
 8010208:	3201      	adds	r2, #1
 801020a:	6002      	str	r2, [r0, #0]
 801020c:	2f02      	cmp	r7, #2
 801020e:	f104 0314 	add.w	r3, r4, #20
 8010212:	d13f      	bne.n	8010294 <__gethex+0x450>
 8010214:	f8d8 2000 	ldr.w	r2, [r8]
 8010218:	3a01      	subs	r2, #1
 801021a:	42b2      	cmp	r2, r6
 801021c:	d10a      	bne.n	8010234 <__gethex+0x3f0>
 801021e:	1171      	asrs	r1, r6, #5
 8010220:	2201      	movs	r2, #1
 8010222:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010226:	f006 061f 	and.w	r6, r6, #31
 801022a:	fa02 f606 	lsl.w	r6, r2, r6
 801022e:	421e      	tst	r6, r3
 8010230:	bf18      	it	ne
 8010232:	4617      	movne	r7, r2
 8010234:	f047 0720 	orr.w	r7, r7, #32
 8010238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801023a:	601c      	str	r4, [r3, #0]
 801023c:	9b04      	ldr	r3, [sp, #16]
 801023e:	601d      	str	r5, [r3, #0]
 8010240:	e695      	b.n	800ff6e <__gethex+0x12a>
 8010242:	4299      	cmp	r1, r3
 8010244:	f843 cc04 	str.w	ip, [r3, #-4]
 8010248:	d8d8      	bhi.n	80101fc <__gethex+0x3b8>
 801024a:	68a3      	ldr	r3, [r4, #8]
 801024c:	459b      	cmp	fp, r3
 801024e:	db19      	blt.n	8010284 <__gethex+0x440>
 8010250:	6861      	ldr	r1, [r4, #4]
 8010252:	ee18 0a10 	vmov	r0, s16
 8010256:	3101      	adds	r1, #1
 8010258:	f000 f928 	bl	80104ac <_Balloc>
 801025c:	4681      	mov	r9, r0
 801025e:	b918      	cbnz	r0, 8010268 <__gethex+0x424>
 8010260:	4b1a      	ldr	r3, [pc, #104]	; (80102cc <__gethex+0x488>)
 8010262:	4602      	mov	r2, r0
 8010264:	2184      	movs	r1, #132	; 0x84
 8010266:	e6a8      	b.n	800ffba <__gethex+0x176>
 8010268:	6922      	ldr	r2, [r4, #16]
 801026a:	3202      	adds	r2, #2
 801026c:	f104 010c 	add.w	r1, r4, #12
 8010270:	0092      	lsls	r2, r2, #2
 8010272:	300c      	adds	r0, #12
 8010274:	f000 f900 	bl	8010478 <memcpy>
 8010278:	4621      	mov	r1, r4
 801027a:	ee18 0a10 	vmov	r0, s16
 801027e:	f000 f955 	bl	801052c <_Bfree>
 8010282:	464c      	mov	r4, r9
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	1c5a      	adds	r2, r3, #1
 8010288:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801028c:	6122      	str	r2, [r4, #16]
 801028e:	2201      	movs	r2, #1
 8010290:	615a      	str	r2, [r3, #20]
 8010292:	e7bb      	b.n	801020c <__gethex+0x3c8>
 8010294:	6922      	ldr	r2, [r4, #16]
 8010296:	455a      	cmp	r2, fp
 8010298:	dd0b      	ble.n	80102b2 <__gethex+0x46e>
 801029a:	2101      	movs	r1, #1
 801029c:	4620      	mov	r0, r4
 801029e:	f7ff fd69 	bl	800fd74 <rshift>
 80102a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102a6:	3501      	adds	r5, #1
 80102a8:	42ab      	cmp	r3, r5
 80102aa:	f6ff aed0 	blt.w	801004e <__gethex+0x20a>
 80102ae:	2701      	movs	r7, #1
 80102b0:	e7c0      	b.n	8010234 <__gethex+0x3f0>
 80102b2:	f016 061f 	ands.w	r6, r6, #31
 80102b6:	d0fa      	beq.n	80102ae <__gethex+0x46a>
 80102b8:	4453      	add	r3, sl
 80102ba:	f1c6 0620 	rsb	r6, r6, #32
 80102be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80102c2:	f000 f9e5 	bl	8010690 <__hi0bits>
 80102c6:	42b0      	cmp	r0, r6
 80102c8:	dbe7      	blt.n	801029a <__gethex+0x456>
 80102ca:	e7f0      	b.n	80102ae <__gethex+0x46a>
 80102cc:	08011d48 	.word	0x08011d48

080102d0 <L_shift>:
 80102d0:	f1c2 0208 	rsb	r2, r2, #8
 80102d4:	0092      	lsls	r2, r2, #2
 80102d6:	b570      	push	{r4, r5, r6, lr}
 80102d8:	f1c2 0620 	rsb	r6, r2, #32
 80102dc:	6843      	ldr	r3, [r0, #4]
 80102de:	6804      	ldr	r4, [r0, #0]
 80102e0:	fa03 f506 	lsl.w	r5, r3, r6
 80102e4:	432c      	orrs	r4, r5
 80102e6:	40d3      	lsrs	r3, r2
 80102e8:	6004      	str	r4, [r0, #0]
 80102ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80102ee:	4288      	cmp	r0, r1
 80102f0:	d3f4      	bcc.n	80102dc <L_shift+0xc>
 80102f2:	bd70      	pop	{r4, r5, r6, pc}

080102f4 <__match>:
 80102f4:	b530      	push	{r4, r5, lr}
 80102f6:	6803      	ldr	r3, [r0, #0]
 80102f8:	3301      	adds	r3, #1
 80102fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102fe:	b914      	cbnz	r4, 8010306 <__match+0x12>
 8010300:	6003      	str	r3, [r0, #0]
 8010302:	2001      	movs	r0, #1
 8010304:	bd30      	pop	{r4, r5, pc}
 8010306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801030e:	2d19      	cmp	r5, #25
 8010310:	bf98      	it	ls
 8010312:	3220      	addls	r2, #32
 8010314:	42a2      	cmp	r2, r4
 8010316:	d0f0      	beq.n	80102fa <__match+0x6>
 8010318:	2000      	movs	r0, #0
 801031a:	e7f3      	b.n	8010304 <__match+0x10>

0801031c <__hexnan>:
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	680b      	ldr	r3, [r1, #0]
 8010322:	115e      	asrs	r6, r3, #5
 8010324:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010328:	f013 031f 	ands.w	r3, r3, #31
 801032c:	b087      	sub	sp, #28
 801032e:	bf18      	it	ne
 8010330:	3604      	addne	r6, #4
 8010332:	2500      	movs	r5, #0
 8010334:	1f37      	subs	r7, r6, #4
 8010336:	4690      	mov	r8, r2
 8010338:	6802      	ldr	r2, [r0, #0]
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	4682      	mov	sl, r0
 801033e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010342:	46b9      	mov	r9, r7
 8010344:	463c      	mov	r4, r7
 8010346:	9502      	str	r5, [sp, #8]
 8010348:	46ab      	mov	fp, r5
 801034a:	7851      	ldrb	r1, [r2, #1]
 801034c:	1c53      	adds	r3, r2, #1
 801034e:	9303      	str	r3, [sp, #12]
 8010350:	b341      	cbz	r1, 80103a4 <__hexnan+0x88>
 8010352:	4608      	mov	r0, r1
 8010354:	9205      	str	r2, [sp, #20]
 8010356:	9104      	str	r1, [sp, #16]
 8010358:	f7ff fd5e 	bl	800fe18 <__hexdig_fun>
 801035c:	2800      	cmp	r0, #0
 801035e:	d14f      	bne.n	8010400 <__hexnan+0xe4>
 8010360:	9904      	ldr	r1, [sp, #16]
 8010362:	9a05      	ldr	r2, [sp, #20]
 8010364:	2920      	cmp	r1, #32
 8010366:	d818      	bhi.n	801039a <__hexnan+0x7e>
 8010368:	9b02      	ldr	r3, [sp, #8]
 801036a:	459b      	cmp	fp, r3
 801036c:	dd13      	ble.n	8010396 <__hexnan+0x7a>
 801036e:	454c      	cmp	r4, r9
 8010370:	d206      	bcs.n	8010380 <__hexnan+0x64>
 8010372:	2d07      	cmp	r5, #7
 8010374:	dc04      	bgt.n	8010380 <__hexnan+0x64>
 8010376:	462a      	mov	r2, r5
 8010378:	4649      	mov	r1, r9
 801037a:	4620      	mov	r0, r4
 801037c:	f7ff ffa8 	bl	80102d0 <L_shift>
 8010380:	4544      	cmp	r4, r8
 8010382:	d950      	bls.n	8010426 <__hexnan+0x10a>
 8010384:	2300      	movs	r3, #0
 8010386:	f1a4 0904 	sub.w	r9, r4, #4
 801038a:	f844 3c04 	str.w	r3, [r4, #-4]
 801038e:	f8cd b008 	str.w	fp, [sp, #8]
 8010392:	464c      	mov	r4, r9
 8010394:	461d      	mov	r5, r3
 8010396:	9a03      	ldr	r2, [sp, #12]
 8010398:	e7d7      	b.n	801034a <__hexnan+0x2e>
 801039a:	2929      	cmp	r1, #41	; 0x29
 801039c:	d156      	bne.n	801044c <__hexnan+0x130>
 801039e:	3202      	adds	r2, #2
 80103a0:	f8ca 2000 	str.w	r2, [sl]
 80103a4:	f1bb 0f00 	cmp.w	fp, #0
 80103a8:	d050      	beq.n	801044c <__hexnan+0x130>
 80103aa:	454c      	cmp	r4, r9
 80103ac:	d206      	bcs.n	80103bc <__hexnan+0xa0>
 80103ae:	2d07      	cmp	r5, #7
 80103b0:	dc04      	bgt.n	80103bc <__hexnan+0xa0>
 80103b2:	462a      	mov	r2, r5
 80103b4:	4649      	mov	r1, r9
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7ff ff8a 	bl	80102d0 <L_shift>
 80103bc:	4544      	cmp	r4, r8
 80103be:	d934      	bls.n	801042a <__hexnan+0x10e>
 80103c0:	f1a8 0204 	sub.w	r2, r8, #4
 80103c4:	4623      	mov	r3, r4
 80103c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80103ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80103ce:	429f      	cmp	r7, r3
 80103d0:	d2f9      	bcs.n	80103c6 <__hexnan+0xaa>
 80103d2:	1b3b      	subs	r3, r7, r4
 80103d4:	f023 0303 	bic.w	r3, r3, #3
 80103d8:	3304      	adds	r3, #4
 80103da:	3401      	adds	r4, #1
 80103dc:	3e03      	subs	r6, #3
 80103de:	42b4      	cmp	r4, r6
 80103e0:	bf88      	it	hi
 80103e2:	2304      	movhi	r3, #4
 80103e4:	4443      	add	r3, r8
 80103e6:	2200      	movs	r2, #0
 80103e8:	f843 2b04 	str.w	r2, [r3], #4
 80103ec:	429f      	cmp	r7, r3
 80103ee:	d2fb      	bcs.n	80103e8 <__hexnan+0xcc>
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	b91b      	cbnz	r3, 80103fc <__hexnan+0xe0>
 80103f4:	4547      	cmp	r7, r8
 80103f6:	d127      	bne.n	8010448 <__hexnan+0x12c>
 80103f8:	2301      	movs	r3, #1
 80103fa:	603b      	str	r3, [r7, #0]
 80103fc:	2005      	movs	r0, #5
 80103fe:	e026      	b.n	801044e <__hexnan+0x132>
 8010400:	3501      	adds	r5, #1
 8010402:	2d08      	cmp	r5, #8
 8010404:	f10b 0b01 	add.w	fp, fp, #1
 8010408:	dd06      	ble.n	8010418 <__hexnan+0xfc>
 801040a:	4544      	cmp	r4, r8
 801040c:	d9c3      	bls.n	8010396 <__hexnan+0x7a>
 801040e:	2300      	movs	r3, #0
 8010410:	f844 3c04 	str.w	r3, [r4, #-4]
 8010414:	2501      	movs	r5, #1
 8010416:	3c04      	subs	r4, #4
 8010418:	6822      	ldr	r2, [r4, #0]
 801041a:	f000 000f 	and.w	r0, r0, #15
 801041e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010422:	6022      	str	r2, [r4, #0]
 8010424:	e7b7      	b.n	8010396 <__hexnan+0x7a>
 8010426:	2508      	movs	r5, #8
 8010428:	e7b5      	b.n	8010396 <__hexnan+0x7a>
 801042a:	9b01      	ldr	r3, [sp, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0df      	beq.n	80103f0 <__hexnan+0xd4>
 8010430:	f04f 32ff 	mov.w	r2, #4294967295
 8010434:	f1c3 0320 	rsb	r3, r3, #32
 8010438:	fa22 f303 	lsr.w	r3, r2, r3
 801043c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010440:	401a      	ands	r2, r3
 8010442:	f846 2c04 	str.w	r2, [r6, #-4]
 8010446:	e7d3      	b.n	80103f0 <__hexnan+0xd4>
 8010448:	3f04      	subs	r7, #4
 801044a:	e7d1      	b.n	80103f0 <__hexnan+0xd4>
 801044c:	2004      	movs	r0, #4
 801044e:	b007      	add	sp, #28
 8010450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010454 <__ascii_mbtowc>:
 8010454:	b082      	sub	sp, #8
 8010456:	b901      	cbnz	r1, 801045a <__ascii_mbtowc+0x6>
 8010458:	a901      	add	r1, sp, #4
 801045a:	b142      	cbz	r2, 801046e <__ascii_mbtowc+0x1a>
 801045c:	b14b      	cbz	r3, 8010472 <__ascii_mbtowc+0x1e>
 801045e:	7813      	ldrb	r3, [r2, #0]
 8010460:	600b      	str	r3, [r1, #0]
 8010462:	7812      	ldrb	r2, [r2, #0]
 8010464:	1e10      	subs	r0, r2, #0
 8010466:	bf18      	it	ne
 8010468:	2001      	movne	r0, #1
 801046a:	b002      	add	sp, #8
 801046c:	4770      	bx	lr
 801046e:	4610      	mov	r0, r2
 8010470:	e7fb      	b.n	801046a <__ascii_mbtowc+0x16>
 8010472:	f06f 0001 	mvn.w	r0, #1
 8010476:	e7f8      	b.n	801046a <__ascii_mbtowc+0x16>

08010478 <memcpy>:
 8010478:	440a      	add	r2, r1
 801047a:	4291      	cmp	r1, r2
 801047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010480:	d100      	bne.n	8010484 <memcpy+0xc>
 8010482:	4770      	bx	lr
 8010484:	b510      	push	{r4, lr}
 8010486:	f811 4b01 	ldrb.w	r4, [r1], #1
 801048a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801048e:	4291      	cmp	r1, r2
 8010490:	d1f9      	bne.n	8010486 <memcpy+0xe>
 8010492:	bd10      	pop	{r4, pc}

08010494 <__malloc_lock>:
 8010494:	4801      	ldr	r0, [pc, #4]	; (801049c <__malloc_lock+0x8>)
 8010496:	f000 bd3e 	b.w	8010f16 <__retarget_lock_acquire_recursive>
 801049a:	bf00      	nop
 801049c:	2001403c 	.word	0x2001403c

080104a0 <__malloc_unlock>:
 80104a0:	4801      	ldr	r0, [pc, #4]	; (80104a8 <__malloc_unlock+0x8>)
 80104a2:	f000 bd39 	b.w	8010f18 <__retarget_lock_release_recursive>
 80104a6:	bf00      	nop
 80104a8:	2001403c 	.word	0x2001403c

080104ac <_Balloc>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104b0:	4604      	mov	r4, r0
 80104b2:	460d      	mov	r5, r1
 80104b4:	b976      	cbnz	r6, 80104d4 <_Balloc+0x28>
 80104b6:	2010      	movs	r0, #16
 80104b8:	f7fe fd1c 	bl	800eef4 <malloc>
 80104bc:	4602      	mov	r2, r0
 80104be:	6260      	str	r0, [r4, #36]	; 0x24
 80104c0:	b920      	cbnz	r0, 80104cc <_Balloc+0x20>
 80104c2:	4b18      	ldr	r3, [pc, #96]	; (8010524 <_Balloc+0x78>)
 80104c4:	4818      	ldr	r0, [pc, #96]	; (8010528 <_Balloc+0x7c>)
 80104c6:	2166      	movs	r1, #102	; 0x66
 80104c8:	f000 fcf4 	bl	8010eb4 <__assert_func>
 80104cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104d0:	6006      	str	r6, [r0, #0]
 80104d2:	60c6      	str	r6, [r0, #12]
 80104d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104d6:	68f3      	ldr	r3, [r6, #12]
 80104d8:	b183      	cbz	r3, 80104fc <_Balloc+0x50>
 80104da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104e2:	b9b8      	cbnz	r0, 8010514 <_Balloc+0x68>
 80104e4:	2101      	movs	r1, #1
 80104e6:	fa01 f605 	lsl.w	r6, r1, r5
 80104ea:	1d72      	adds	r2, r6, #5
 80104ec:	0092      	lsls	r2, r2, #2
 80104ee:	4620      	mov	r0, r4
 80104f0:	f000 fc9d 	bl	8010e2e <_calloc_r>
 80104f4:	b160      	cbz	r0, 8010510 <_Balloc+0x64>
 80104f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104fa:	e00e      	b.n	801051a <_Balloc+0x6e>
 80104fc:	2221      	movs	r2, #33	; 0x21
 80104fe:	2104      	movs	r1, #4
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fc94 	bl	8010e2e <_calloc_r>
 8010506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010508:	60f0      	str	r0, [r6, #12]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e4      	bne.n	80104da <_Balloc+0x2e>
 8010510:	2000      	movs	r0, #0
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	6802      	ldr	r2, [r0, #0]
 8010516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801051a:	2300      	movs	r3, #0
 801051c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010520:	e7f7      	b.n	8010512 <_Balloc+0x66>
 8010522:	bf00      	nop
 8010524:	08011dd4 	.word	0x08011dd4
 8010528:	08011deb 	.word	0x08011deb

0801052c <_Bfree>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010530:	4605      	mov	r5, r0
 8010532:	460c      	mov	r4, r1
 8010534:	b976      	cbnz	r6, 8010554 <_Bfree+0x28>
 8010536:	2010      	movs	r0, #16
 8010538:	f7fe fcdc 	bl	800eef4 <malloc>
 801053c:	4602      	mov	r2, r0
 801053e:	6268      	str	r0, [r5, #36]	; 0x24
 8010540:	b920      	cbnz	r0, 801054c <_Bfree+0x20>
 8010542:	4b09      	ldr	r3, [pc, #36]	; (8010568 <_Bfree+0x3c>)
 8010544:	4809      	ldr	r0, [pc, #36]	; (801056c <_Bfree+0x40>)
 8010546:	218a      	movs	r1, #138	; 0x8a
 8010548:	f000 fcb4 	bl	8010eb4 <__assert_func>
 801054c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010550:	6006      	str	r6, [r0, #0]
 8010552:	60c6      	str	r6, [r0, #12]
 8010554:	b13c      	cbz	r4, 8010566 <_Bfree+0x3a>
 8010556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010558:	6862      	ldr	r2, [r4, #4]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010560:	6021      	str	r1, [r4, #0]
 8010562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010566:	bd70      	pop	{r4, r5, r6, pc}
 8010568:	08011dd4 	.word	0x08011dd4
 801056c:	08011deb 	.word	0x08011deb

08010570 <__multadd>:
 8010570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010574:	690d      	ldr	r5, [r1, #16]
 8010576:	4607      	mov	r7, r0
 8010578:	460c      	mov	r4, r1
 801057a:	461e      	mov	r6, r3
 801057c:	f101 0c14 	add.w	ip, r1, #20
 8010580:	2000      	movs	r0, #0
 8010582:	f8dc 3000 	ldr.w	r3, [ip]
 8010586:	b299      	uxth	r1, r3
 8010588:	fb02 6101 	mla	r1, r2, r1, r6
 801058c:	0c1e      	lsrs	r6, r3, #16
 801058e:	0c0b      	lsrs	r3, r1, #16
 8010590:	fb02 3306 	mla	r3, r2, r6, r3
 8010594:	b289      	uxth	r1, r1
 8010596:	3001      	adds	r0, #1
 8010598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801059c:	4285      	cmp	r5, r0
 801059e:	f84c 1b04 	str.w	r1, [ip], #4
 80105a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105a6:	dcec      	bgt.n	8010582 <__multadd+0x12>
 80105a8:	b30e      	cbz	r6, 80105ee <__multadd+0x7e>
 80105aa:	68a3      	ldr	r3, [r4, #8]
 80105ac:	42ab      	cmp	r3, r5
 80105ae:	dc19      	bgt.n	80105e4 <__multadd+0x74>
 80105b0:	6861      	ldr	r1, [r4, #4]
 80105b2:	4638      	mov	r0, r7
 80105b4:	3101      	adds	r1, #1
 80105b6:	f7ff ff79 	bl	80104ac <_Balloc>
 80105ba:	4680      	mov	r8, r0
 80105bc:	b928      	cbnz	r0, 80105ca <__multadd+0x5a>
 80105be:	4602      	mov	r2, r0
 80105c0:	4b0c      	ldr	r3, [pc, #48]	; (80105f4 <__multadd+0x84>)
 80105c2:	480d      	ldr	r0, [pc, #52]	; (80105f8 <__multadd+0x88>)
 80105c4:	21b5      	movs	r1, #181	; 0xb5
 80105c6:	f000 fc75 	bl	8010eb4 <__assert_func>
 80105ca:	6922      	ldr	r2, [r4, #16]
 80105cc:	3202      	adds	r2, #2
 80105ce:	f104 010c 	add.w	r1, r4, #12
 80105d2:	0092      	lsls	r2, r2, #2
 80105d4:	300c      	adds	r0, #12
 80105d6:	f7ff ff4f 	bl	8010478 <memcpy>
 80105da:	4621      	mov	r1, r4
 80105dc:	4638      	mov	r0, r7
 80105de:	f7ff ffa5 	bl	801052c <_Bfree>
 80105e2:	4644      	mov	r4, r8
 80105e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105e8:	3501      	adds	r5, #1
 80105ea:	615e      	str	r6, [r3, #20]
 80105ec:	6125      	str	r5, [r4, #16]
 80105ee:	4620      	mov	r0, r4
 80105f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f4:	08011d48 	.word	0x08011d48
 80105f8:	08011deb 	.word	0x08011deb

080105fc <__s2b>:
 80105fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010600:	460c      	mov	r4, r1
 8010602:	4615      	mov	r5, r2
 8010604:	461f      	mov	r7, r3
 8010606:	2209      	movs	r2, #9
 8010608:	3308      	adds	r3, #8
 801060a:	4606      	mov	r6, r0
 801060c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010610:	2100      	movs	r1, #0
 8010612:	2201      	movs	r2, #1
 8010614:	429a      	cmp	r2, r3
 8010616:	db09      	blt.n	801062c <__s2b+0x30>
 8010618:	4630      	mov	r0, r6
 801061a:	f7ff ff47 	bl	80104ac <_Balloc>
 801061e:	b940      	cbnz	r0, 8010632 <__s2b+0x36>
 8010620:	4602      	mov	r2, r0
 8010622:	4b19      	ldr	r3, [pc, #100]	; (8010688 <__s2b+0x8c>)
 8010624:	4819      	ldr	r0, [pc, #100]	; (801068c <__s2b+0x90>)
 8010626:	21ce      	movs	r1, #206	; 0xce
 8010628:	f000 fc44 	bl	8010eb4 <__assert_func>
 801062c:	0052      	lsls	r2, r2, #1
 801062e:	3101      	adds	r1, #1
 8010630:	e7f0      	b.n	8010614 <__s2b+0x18>
 8010632:	9b08      	ldr	r3, [sp, #32]
 8010634:	6143      	str	r3, [r0, #20]
 8010636:	2d09      	cmp	r5, #9
 8010638:	f04f 0301 	mov.w	r3, #1
 801063c:	6103      	str	r3, [r0, #16]
 801063e:	dd16      	ble.n	801066e <__s2b+0x72>
 8010640:	f104 0909 	add.w	r9, r4, #9
 8010644:	46c8      	mov	r8, r9
 8010646:	442c      	add	r4, r5
 8010648:	f818 3b01 	ldrb.w	r3, [r8], #1
 801064c:	4601      	mov	r1, r0
 801064e:	3b30      	subs	r3, #48	; 0x30
 8010650:	220a      	movs	r2, #10
 8010652:	4630      	mov	r0, r6
 8010654:	f7ff ff8c 	bl	8010570 <__multadd>
 8010658:	45a0      	cmp	r8, r4
 801065a:	d1f5      	bne.n	8010648 <__s2b+0x4c>
 801065c:	f1a5 0408 	sub.w	r4, r5, #8
 8010660:	444c      	add	r4, r9
 8010662:	1b2d      	subs	r5, r5, r4
 8010664:	1963      	adds	r3, r4, r5
 8010666:	42bb      	cmp	r3, r7
 8010668:	db04      	blt.n	8010674 <__s2b+0x78>
 801066a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801066e:	340a      	adds	r4, #10
 8010670:	2509      	movs	r5, #9
 8010672:	e7f6      	b.n	8010662 <__s2b+0x66>
 8010674:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010678:	4601      	mov	r1, r0
 801067a:	3b30      	subs	r3, #48	; 0x30
 801067c:	220a      	movs	r2, #10
 801067e:	4630      	mov	r0, r6
 8010680:	f7ff ff76 	bl	8010570 <__multadd>
 8010684:	e7ee      	b.n	8010664 <__s2b+0x68>
 8010686:	bf00      	nop
 8010688:	08011d48 	.word	0x08011d48
 801068c:	08011deb 	.word	0x08011deb

08010690 <__hi0bits>:
 8010690:	0c03      	lsrs	r3, r0, #16
 8010692:	041b      	lsls	r3, r3, #16
 8010694:	b9d3      	cbnz	r3, 80106cc <__hi0bits+0x3c>
 8010696:	0400      	lsls	r0, r0, #16
 8010698:	2310      	movs	r3, #16
 801069a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801069e:	bf04      	itt	eq
 80106a0:	0200      	lsleq	r0, r0, #8
 80106a2:	3308      	addeq	r3, #8
 80106a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106a8:	bf04      	itt	eq
 80106aa:	0100      	lsleq	r0, r0, #4
 80106ac:	3304      	addeq	r3, #4
 80106ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106b2:	bf04      	itt	eq
 80106b4:	0080      	lsleq	r0, r0, #2
 80106b6:	3302      	addeq	r3, #2
 80106b8:	2800      	cmp	r0, #0
 80106ba:	db05      	blt.n	80106c8 <__hi0bits+0x38>
 80106bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106c0:	f103 0301 	add.w	r3, r3, #1
 80106c4:	bf08      	it	eq
 80106c6:	2320      	moveq	r3, #32
 80106c8:	4618      	mov	r0, r3
 80106ca:	4770      	bx	lr
 80106cc:	2300      	movs	r3, #0
 80106ce:	e7e4      	b.n	801069a <__hi0bits+0xa>

080106d0 <__lo0bits>:
 80106d0:	6803      	ldr	r3, [r0, #0]
 80106d2:	f013 0207 	ands.w	r2, r3, #7
 80106d6:	4601      	mov	r1, r0
 80106d8:	d00b      	beq.n	80106f2 <__lo0bits+0x22>
 80106da:	07da      	lsls	r2, r3, #31
 80106dc:	d423      	bmi.n	8010726 <__lo0bits+0x56>
 80106de:	0798      	lsls	r0, r3, #30
 80106e0:	bf49      	itett	mi
 80106e2:	085b      	lsrmi	r3, r3, #1
 80106e4:	089b      	lsrpl	r3, r3, #2
 80106e6:	2001      	movmi	r0, #1
 80106e8:	600b      	strmi	r3, [r1, #0]
 80106ea:	bf5c      	itt	pl
 80106ec:	600b      	strpl	r3, [r1, #0]
 80106ee:	2002      	movpl	r0, #2
 80106f0:	4770      	bx	lr
 80106f2:	b298      	uxth	r0, r3
 80106f4:	b9a8      	cbnz	r0, 8010722 <__lo0bits+0x52>
 80106f6:	0c1b      	lsrs	r3, r3, #16
 80106f8:	2010      	movs	r0, #16
 80106fa:	b2da      	uxtb	r2, r3
 80106fc:	b90a      	cbnz	r2, 8010702 <__lo0bits+0x32>
 80106fe:	3008      	adds	r0, #8
 8010700:	0a1b      	lsrs	r3, r3, #8
 8010702:	071a      	lsls	r2, r3, #28
 8010704:	bf04      	itt	eq
 8010706:	091b      	lsreq	r3, r3, #4
 8010708:	3004      	addeq	r0, #4
 801070a:	079a      	lsls	r2, r3, #30
 801070c:	bf04      	itt	eq
 801070e:	089b      	lsreq	r3, r3, #2
 8010710:	3002      	addeq	r0, #2
 8010712:	07da      	lsls	r2, r3, #31
 8010714:	d403      	bmi.n	801071e <__lo0bits+0x4e>
 8010716:	085b      	lsrs	r3, r3, #1
 8010718:	f100 0001 	add.w	r0, r0, #1
 801071c:	d005      	beq.n	801072a <__lo0bits+0x5a>
 801071e:	600b      	str	r3, [r1, #0]
 8010720:	4770      	bx	lr
 8010722:	4610      	mov	r0, r2
 8010724:	e7e9      	b.n	80106fa <__lo0bits+0x2a>
 8010726:	2000      	movs	r0, #0
 8010728:	4770      	bx	lr
 801072a:	2020      	movs	r0, #32
 801072c:	4770      	bx	lr
	...

08010730 <__i2b>:
 8010730:	b510      	push	{r4, lr}
 8010732:	460c      	mov	r4, r1
 8010734:	2101      	movs	r1, #1
 8010736:	f7ff feb9 	bl	80104ac <_Balloc>
 801073a:	4602      	mov	r2, r0
 801073c:	b928      	cbnz	r0, 801074a <__i2b+0x1a>
 801073e:	4b05      	ldr	r3, [pc, #20]	; (8010754 <__i2b+0x24>)
 8010740:	4805      	ldr	r0, [pc, #20]	; (8010758 <__i2b+0x28>)
 8010742:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010746:	f000 fbb5 	bl	8010eb4 <__assert_func>
 801074a:	2301      	movs	r3, #1
 801074c:	6144      	str	r4, [r0, #20]
 801074e:	6103      	str	r3, [r0, #16]
 8010750:	bd10      	pop	{r4, pc}
 8010752:	bf00      	nop
 8010754:	08011d48 	.word	0x08011d48
 8010758:	08011deb 	.word	0x08011deb

0801075c <__multiply>:
 801075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010760:	4691      	mov	r9, r2
 8010762:	690a      	ldr	r2, [r1, #16]
 8010764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010768:	429a      	cmp	r2, r3
 801076a:	bfb8      	it	lt
 801076c:	460b      	movlt	r3, r1
 801076e:	460c      	mov	r4, r1
 8010770:	bfbc      	itt	lt
 8010772:	464c      	movlt	r4, r9
 8010774:	4699      	movlt	r9, r3
 8010776:	6927      	ldr	r7, [r4, #16]
 8010778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801077c:	68a3      	ldr	r3, [r4, #8]
 801077e:	6861      	ldr	r1, [r4, #4]
 8010780:	eb07 060a 	add.w	r6, r7, sl
 8010784:	42b3      	cmp	r3, r6
 8010786:	b085      	sub	sp, #20
 8010788:	bfb8      	it	lt
 801078a:	3101      	addlt	r1, #1
 801078c:	f7ff fe8e 	bl	80104ac <_Balloc>
 8010790:	b930      	cbnz	r0, 80107a0 <__multiply+0x44>
 8010792:	4602      	mov	r2, r0
 8010794:	4b44      	ldr	r3, [pc, #272]	; (80108a8 <__multiply+0x14c>)
 8010796:	4845      	ldr	r0, [pc, #276]	; (80108ac <__multiply+0x150>)
 8010798:	f240 115d 	movw	r1, #349	; 0x15d
 801079c:	f000 fb8a 	bl	8010eb4 <__assert_func>
 80107a0:	f100 0514 	add.w	r5, r0, #20
 80107a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107a8:	462b      	mov	r3, r5
 80107aa:	2200      	movs	r2, #0
 80107ac:	4543      	cmp	r3, r8
 80107ae:	d321      	bcc.n	80107f4 <__multiply+0x98>
 80107b0:	f104 0314 	add.w	r3, r4, #20
 80107b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107b8:	f109 0314 	add.w	r3, r9, #20
 80107bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107c0:	9202      	str	r2, [sp, #8]
 80107c2:	1b3a      	subs	r2, r7, r4
 80107c4:	3a15      	subs	r2, #21
 80107c6:	f022 0203 	bic.w	r2, r2, #3
 80107ca:	3204      	adds	r2, #4
 80107cc:	f104 0115 	add.w	r1, r4, #21
 80107d0:	428f      	cmp	r7, r1
 80107d2:	bf38      	it	cc
 80107d4:	2204      	movcc	r2, #4
 80107d6:	9201      	str	r2, [sp, #4]
 80107d8:	9a02      	ldr	r2, [sp, #8]
 80107da:	9303      	str	r3, [sp, #12]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d80c      	bhi.n	80107fa <__multiply+0x9e>
 80107e0:	2e00      	cmp	r6, #0
 80107e2:	dd03      	ble.n	80107ec <__multiply+0x90>
 80107e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d05a      	beq.n	80108a2 <__multiply+0x146>
 80107ec:	6106      	str	r6, [r0, #16]
 80107ee:	b005      	add	sp, #20
 80107f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f4:	f843 2b04 	str.w	r2, [r3], #4
 80107f8:	e7d8      	b.n	80107ac <__multiply+0x50>
 80107fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80107fe:	f1ba 0f00 	cmp.w	sl, #0
 8010802:	d024      	beq.n	801084e <__multiply+0xf2>
 8010804:	f104 0e14 	add.w	lr, r4, #20
 8010808:	46a9      	mov	r9, r5
 801080a:	f04f 0c00 	mov.w	ip, #0
 801080e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010812:	f8d9 1000 	ldr.w	r1, [r9]
 8010816:	fa1f fb82 	uxth.w	fp, r2
 801081a:	b289      	uxth	r1, r1
 801081c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010824:	f8d9 2000 	ldr.w	r2, [r9]
 8010828:	4461      	add	r1, ip
 801082a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801082e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010836:	b289      	uxth	r1, r1
 8010838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801083c:	4577      	cmp	r7, lr
 801083e:	f849 1b04 	str.w	r1, [r9], #4
 8010842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010846:	d8e2      	bhi.n	801080e <__multiply+0xb2>
 8010848:	9a01      	ldr	r2, [sp, #4]
 801084a:	f845 c002 	str.w	ip, [r5, r2]
 801084e:	9a03      	ldr	r2, [sp, #12]
 8010850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010854:	3304      	adds	r3, #4
 8010856:	f1b9 0f00 	cmp.w	r9, #0
 801085a:	d020      	beq.n	801089e <__multiply+0x142>
 801085c:	6829      	ldr	r1, [r5, #0]
 801085e:	f104 0c14 	add.w	ip, r4, #20
 8010862:	46ae      	mov	lr, r5
 8010864:	f04f 0a00 	mov.w	sl, #0
 8010868:	f8bc b000 	ldrh.w	fp, [ip]
 801086c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010870:	fb09 220b 	mla	r2, r9, fp, r2
 8010874:	4492      	add	sl, r2
 8010876:	b289      	uxth	r1, r1
 8010878:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801087c:	f84e 1b04 	str.w	r1, [lr], #4
 8010880:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010884:	f8be 1000 	ldrh.w	r1, [lr]
 8010888:	0c12      	lsrs	r2, r2, #16
 801088a:	fb09 1102 	mla	r1, r9, r2, r1
 801088e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010892:	4567      	cmp	r7, ip
 8010894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010898:	d8e6      	bhi.n	8010868 <__multiply+0x10c>
 801089a:	9a01      	ldr	r2, [sp, #4]
 801089c:	50a9      	str	r1, [r5, r2]
 801089e:	3504      	adds	r5, #4
 80108a0:	e79a      	b.n	80107d8 <__multiply+0x7c>
 80108a2:	3e01      	subs	r6, #1
 80108a4:	e79c      	b.n	80107e0 <__multiply+0x84>
 80108a6:	bf00      	nop
 80108a8:	08011d48 	.word	0x08011d48
 80108ac:	08011deb 	.word	0x08011deb

080108b0 <__pow5mult>:
 80108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	4615      	mov	r5, r2
 80108b6:	f012 0203 	ands.w	r2, r2, #3
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	d007      	beq.n	80108d0 <__pow5mult+0x20>
 80108c0:	4c25      	ldr	r4, [pc, #148]	; (8010958 <__pow5mult+0xa8>)
 80108c2:	3a01      	subs	r2, #1
 80108c4:	2300      	movs	r3, #0
 80108c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108ca:	f7ff fe51 	bl	8010570 <__multadd>
 80108ce:	4607      	mov	r7, r0
 80108d0:	10ad      	asrs	r5, r5, #2
 80108d2:	d03d      	beq.n	8010950 <__pow5mult+0xa0>
 80108d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108d6:	b97c      	cbnz	r4, 80108f8 <__pow5mult+0x48>
 80108d8:	2010      	movs	r0, #16
 80108da:	f7fe fb0b 	bl	800eef4 <malloc>
 80108de:	4602      	mov	r2, r0
 80108e0:	6270      	str	r0, [r6, #36]	; 0x24
 80108e2:	b928      	cbnz	r0, 80108f0 <__pow5mult+0x40>
 80108e4:	4b1d      	ldr	r3, [pc, #116]	; (801095c <__pow5mult+0xac>)
 80108e6:	481e      	ldr	r0, [pc, #120]	; (8010960 <__pow5mult+0xb0>)
 80108e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80108ec:	f000 fae2 	bl	8010eb4 <__assert_func>
 80108f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108f4:	6004      	str	r4, [r0, #0]
 80108f6:	60c4      	str	r4, [r0, #12]
 80108f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80108fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010900:	b94c      	cbnz	r4, 8010916 <__pow5mult+0x66>
 8010902:	f240 2171 	movw	r1, #625	; 0x271
 8010906:	4630      	mov	r0, r6
 8010908:	f7ff ff12 	bl	8010730 <__i2b>
 801090c:	2300      	movs	r3, #0
 801090e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010912:	4604      	mov	r4, r0
 8010914:	6003      	str	r3, [r0, #0]
 8010916:	f04f 0900 	mov.w	r9, #0
 801091a:	07eb      	lsls	r3, r5, #31
 801091c:	d50a      	bpl.n	8010934 <__pow5mult+0x84>
 801091e:	4639      	mov	r1, r7
 8010920:	4622      	mov	r2, r4
 8010922:	4630      	mov	r0, r6
 8010924:	f7ff ff1a 	bl	801075c <__multiply>
 8010928:	4639      	mov	r1, r7
 801092a:	4680      	mov	r8, r0
 801092c:	4630      	mov	r0, r6
 801092e:	f7ff fdfd 	bl	801052c <_Bfree>
 8010932:	4647      	mov	r7, r8
 8010934:	106d      	asrs	r5, r5, #1
 8010936:	d00b      	beq.n	8010950 <__pow5mult+0xa0>
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	b938      	cbnz	r0, 801094c <__pow5mult+0x9c>
 801093c:	4622      	mov	r2, r4
 801093e:	4621      	mov	r1, r4
 8010940:	4630      	mov	r0, r6
 8010942:	f7ff ff0b 	bl	801075c <__multiply>
 8010946:	6020      	str	r0, [r4, #0]
 8010948:	f8c0 9000 	str.w	r9, [r0]
 801094c:	4604      	mov	r4, r0
 801094e:	e7e4      	b.n	801091a <__pow5mult+0x6a>
 8010950:	4638      	mov	r0, r7
 8010952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010956:	bf00      	nop
 8010958:	08011f38 	.word	0x08011f38
 801095c:	08011dd4 	.word	0x08011dd4
 8010960:	08011deb 	.word	0x08011deb

08010964 <__lshift>:
 8010964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010968:	460c      	mov	r4, r1
 801096a:	6849      	ldr	r1, [r1, #4]
 801096c:	6923      	ldr	r3, [r4, #16]
 801096e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010972:	68a3      	ldr	r3, [r4, #8]
 8010974:	4607      	mov	r7, r0
 8010976:	4691      	mov	r9, r2
 8010978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801097c:	f108 0601 	add.w	r6, r8, #1
 8010980:	42b3      	cmp	r3, r6
 8010982:	db0b      	blt.n	801099c <__lshift+0x38>
 8010984:	4638      	mov	r0, r7
 8010986:	f7ff fd91 	bl	80104ac <_Balloc>
 801098a:	4605      	mov	r5, r0
 801098c:	b948      	cbnz	r0, 80109a2 <__lshift+0x3e>
 801098e:	4602      	mov	r2, r0
 8010990:	4b2a      	ldr	r3, [pc, #168]	; (8010a3c <__lshift+0xd8>)
 8010992:	482b      	ldr	r0, [pc, #172]	; (8010a40 <__lshift+0xdc>)
 8010994:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010998:	f000 fa8c 	bl	8010eb4 <__assert_func>
 801099c:	3101      	adds	r1, #1
 801099e:	005b      	lsls	r3, r3, #1
 80109a0:	e7ee      	b.n	8010980 <__lshift+0x1c>
 80109a2:	2300      	movs	r3, #0
 80109a4:	f100 0114 	add.w	r1, r0, #20
 80109a8:	f100 0210 	add.w	r2, r0, #16
 80109ac:	4618      	mov	r0, r3
 80109ae:	4553      	cmp	r3, sl
 80109b0:	db37      	blt.n	8010a22 <__lshift+0xbe>
 80109b2:	6920      	ldr	r0, [r4, #16]
 80109b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109b8:	f104 0314 	add.w	r3, r4, #20
 80109bc:	f019 091f 	ands.w	r9, r9, #31
 80109c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109c8:	d02f      	beq.n	8010a2a <__lshift+0xc6>
 80109ca:	f1c9 0e20 	rsb	lr, r9, #32
 80109ce:	468a      	mov	sl, r1
 80109d0:	f04f 0c00 	mov.w	ip, #0
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	fa02 f209 	lsl.w	r2, r2, r9
 80109da:	ea42 020c 	orr.w	r2, r2, ip
 80109de:	f84a 2b04 	str.w	r2, [sl], #4
 80109e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109e6:	4298      	cmp	r0, r3
 80109e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80109ec:	d8f2      	bhi.n	80109d4 <__lshift+0x70>
 80109ee:	1b03      	subs	r3, r0, r4
 80109f0:	3b15      	subs	r3, #21
 80109f2:	f023 0303 	bic.w	r3, r3, #3
 80109f6:	3304      	adds	r3, #4
 80109f8:	f104 0215 	add.w	r2, r4, #21
 80109fc:	4290      	cmp	r0, r2
 80109fe:	bf38      	it	cc
 8010a00:	2304      	movcc	r3, #4
 8010a02:	f841 c003 	str.w	ip, [r1, r3]
 8010a06:	f1bc 0f00 	cmp.w	ip, #0
 8010a0a:	d001      	beq.n	8010a10 <__lshift+0xac>
 8010a0c:	f108 0602 	add.w	r6, r8, #2
 8010a10:	3e01      	subs	r6, #1
 8010a12:	4638      	mov	r0, r7
 8010a14:	612e      	str	r6, [r5, #16]
 8010a16:	4621      	mov	r1, r4
 8010a18:	f7ff fd88 	bl	801052c <_Bfree>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a26:	3301      	adds	r3, #1
 8010a28:	e7c1      	b.n	80109ae <__lshift+0x4a>
 8010a2a:	3904      	subs	r1, #4
 8010a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a34:	4298      	cmp	r0, r3
 8010a36:	d8f9      	bhi.n	8010a2c <__lshift+0xc8>
 8010a38:	e7ea      	b.n	8010a10 <__lshift+0xac>
 8010a3a:	bf00      	nop
 8010a3c:	08011d48 	.word	0x08011d48
 8010a40:	08011deb 	.word	0x08011deb

08010a44 <__mcmp>:
 8010a44:	b530      	push	{r4, r5, lr}
 8010a46:	6902      	ldr	r2, [r0, #16]
 8010a48:	690c      	ldr	r4, [r1, #16]
 8010a4a:	1b12      	subs	r2, r2, r4
 8010a4c:	d10e      	bne.n	8010a6c <__mcmp+0x28>
 8010a4e:	f100 0314 	add.w	r3, r0, #20
 8010a52:	3114      	adds	r1, #20
 8010a54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a64:	42a5      	cmp	r5, r4
 8010a66:	d003      	beq.n	8010a70 <__mcmp+0x2c>
 8010a68:	d305      	bcc.n	8010a76 <__mcmp+0x32>
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	bd30      	pop	{r4, r5, pc}
 8010a70:	4283      	cmp	r3, r0
 8010a72:	d3f3      	bcc.n	8010a5c <__mcmp+0x18>
 8010a74:	e7fa      	b.n	8010a6c <__mcmp+0x28>
 8010a76:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7a:	e7f7      	b.n	8010a6c <__mcmp+0x28>

08010a7c <__mdiff>:
 8010a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	460c      	mov	r4, r1
 8010a82:	4606      	mov	r6, r0
 8010a84:	4611      	mov	r1, r2
 8010a86:	4620      	mov	r0, r4
 8010a88:	4690      	mov	r8, r2
 8010a8a:	f7ff ffdb 	bl	8010a44 <__mcmp>
 8010a8e:	1e05      	subs	r5, r0, #0
 8010a90:	d110      	bne.n	8010ab4 <__mdiff+0x38>
 8010a92:	4629      	mov	r1, r5
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7ff fd09 	bl	80104ac <_Balloc>
 8010a9a:	b930      	cbnz	r0, 8010aaa <__mdiff+0x2e>
 8010a9c:	4b3a      	ldr	r3, [pc, #232]	; (8010b88 <__mdiff+0x10c>)
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	f240 2132 	movw	r1, #562	; 0x232
 8010aa4:	4839      	ldr	r0, [pc, #228]	; (8010b8c <__mdiff+0x110>)
 8010aa6:	f000 fa05 	bl	8010eb4 <__assert_func>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	bfa4      	itt	ge
 8010ab6:	4643      	movge	r3, r8
 8010ab8:	46a0      	movge	r8, r4
 8010aba:	4630      	mov	r0, r6
 8010abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ac0:	bfa6      	itte	ge
 8010ac2:	461c      	movge	r4, r3
 8010ac4:	2500      	movge	r5, #0
 8010ac6:	2501      	movlt	r5, #1
 8010ac8:	f7ff fcf0 	bl	80104ac <_Balloc>
 8010acc:	b920      	cbnz	r0, 8010ad8 <__mdiff+0x5c>
 8010ace:	4b2e      	ldr	r3, [pc, #184]	; (8010b88 <__mdiff+0x10c>)
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ad6:	e7e5      	b.n	8010aa4 <__mdiff+0x28>
 8010ad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010adc:	6926      	ldr	r6, [r4, #16]
 8010ade:	60c5      	str	r5, [r0, #12]
 8010ae0:	f104 0914 	add.w	r9, r4, #20
 8010ae4:	f108 0514 	add.w	r5, r8, #20
 8010ae8:	f100 0e14 	add.w	lr, r0, #20
 8010aec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010af0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010af4:	f108 0210 	add.w	r2, r8, #16
 8010af8:	46f2      	mov	sl, lr
 8010afa:	2100      	movs	r1, #0
 8010afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b04:	fa1f f883 	uxth.w	r8, r3
 8010b08:	fa11 f18b 	uxtah	r1, r1, fp
 8010b0c:	0c1b      	lsrs	r3, r3, #16
 8010b0e:	eba1 0808 	sub.w	r8, r1, r8
 8010b12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b1a:	fa1f f888 	uxth.w	r8, r8
 8010b1e:	1419      	asrs	r1, r3, #16
 8010b20:	454e      	cmp	r6, r9
 8010b22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b26:	f84a 3b04 	str.w	r3, [sl], #4
 8010b2a:	d8e7      	bhi.n	8010afc <__mdiff+0x80>
 8010b2c:	1b33      	subs	r3, r6, r4
 8010b2e:	3b15      	subs	r3, #21
 8010b30:	f023 0303 	bic.w	r3, r3, #3
 8010b34:	3304      	adds	r3, #4
 8010b36:	3415      	adds	r4, #21
 8010b38:	42a6      	cmp	r6, r4
 8010b3a:	bf38      	it	cc
 8010b3c:	2304      	movcc	r3, #4
 8010b3e:	441d      	add	r5, r3
 8010b40:	4473      	add	r3, lr
 8010b42:	469e      	mov	lr, r3
 8010b44:	462e      	mov	r6, r5
 8010b46:	4566      	cmp	r6, ip
 8010b48:	d30e      	bcc.n	8010b68 <__mdiff+0xec>
 8010b4a:	f10c 0203 	add.w	r2, ip, #3
 8010b4e:	1b52      	subs	r2, r2, r5
 8010b50:	f022 0203 	bic.w	r2, r2, #3
 8010b54:	3d03      	subs	r5, #3
 8010b56:	45ac      	cmp	ip, r5
 8010b58:	bf38      	it	cc
 8010b5a:	2200      	movcc	r2, #0
 8010b5c:	441a      	add	r2, r3
 8010b5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b62:	b17b      	cbz	r3, 8010b84 <__mdiff+0x108>
 8010b64:	6107      	str	r7, [r0, #16]
 8010b66:	e7a3      	b.n	8010ab0 <__mdiff+0x34>
 8010b68:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b6c:	fa11 f288 	uxtah	r2, r1, r8
 8010b70:	1414      	asrs	r4, r2, #16
 8010b72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b76:	b292      	uxth	r2, r2
 8010b78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b7c:	f84e 2b04 	str.w	r2, [lr], #4
 8010b80:	1421      	asrs	r1, r4, #16
 8010b82:	e7e0      	b.n	8010b46 <__mdiff+0xca>
 8010b84:	3f01      	subs	r7, #1
 8010b86:	e7ea      	b.n	8010b5e <__mdiff+0xe2>
 8010b88:	08011d48 	.word	0x08011d48
 8010b8c:	08011deb 	.word	0x08011deb

08010b90 <__ulp>:
 8010b90:	b082      	sub	sp, #8
 8010b92:	ed8d 0b00 	vstr	d0, [sp]
 8010b96:	9b01      	ldr	r3, [sp, #4]
 8010b98:	4912      	ldr	r1, [pc, #72]	; (8010be4 <__ulp+0x54>)
 8010b9a:	4019      	ands	r1, r3
 8010b9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010ba0:	2900      	cmp	r1, #0
 8010ba2:	dd05      	ble.n	8010bb0 <__ulp+0x20>
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	ec43 2b10 	vmov	d0, r2, r3
 8010bac:	b002      	add	sp, #8
 8010bae:	4770      	bx	lr
 8010bb0:	4249      	negs	r1, r1
 8010bb2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010bb6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010bba:	f04f 0200 	mov.w	r2, #0
 8010bbe:	f04f 0300 	mov.w	r3, #0
 8010bc2:	da04      	bge.n	8010bce <__ulp+0x3e>
 8010bc4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010bc8:	fa41 f300 	asr.w	r3, r1, r0
 8010bcc:	e7ec      	b.n	8010ba8 <__ulp+0x18>
 8010bce:	f1a0 0114 	sub.w	r1, r0, #20
 8010bd2:	291e      	cmp	r1, #30
 8010bd4:	bfda      	itte	le
 8010bd6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010bda:	fa20 f101 	lsrle.w	r1, r0, r1
 8010bde:	2101      	movgt	r1, #1
 8010be0:	460a      	mov	r2, r1
 8010be2:	e7e1      	b.n	8010ba8 <__ulp+0x18>
 8010be4:	7ff00000 	.word	0x7ff00000

08010be8 <__b2d>:
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bea:	6905      	ldr	r5, [r0, #16]
 8010bec:	f100 0714 	add.w	r7, r0, #20
 8010bf0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010bf4:	1f2e      	subs	r6, r5, #4
 8010bf6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f7ff fd48 	bl	8010690 <__hi0bits>
 8010c00:	f1c0 0320 	rsb	r3, r0, #32
 8010c04:	280a      	cmp	r0, #10
 8010c06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010c84 <__b2d+0x9c>
 8010c0a:	600b      	str	r3, [r1, #0]
 8010c0c:	dc14      	bgt.n	8010c38 <__b2d+0x50>
 8010c0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c12:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c16:	42b7      	cmp	r7, r6
 8010c18:	ea41 030c 	orr.w	r3, r1, ip
 8010c1c:	bf34      	ite	cc
 8010c1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c22:	2100      	movcs	r1, #0
 8010c24:	3015      	adds	r0, #21
 8010c26:	fa04 f000 	lsl.w	r0, r4, r0
 8010c2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c2e:	ea40 0201 	orr.w	r2, r0, r1
 8010c32:	ec43 2b10 	vmov	d0, r2, r3
 8010c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c38:	42b7      	cmp	r7, r6
 8010c3a:	bf3a      	itte	cc
 8010c3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c40:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c44:	2100      	movcs	r1, #0
 8010c46:	380b      	subs	r0, #11
 8010c48:	d017      	beq.n	8010c7a <__b2d+0x92>
 8010c4a:	f1c0 0c20 	rsb	ip, r0, #32
 8010c4e:	fa04 f500 	lsl.w	r5, r4, r0
 8010c52:	42be      	cmp	r6, r7
 8010c54:	fa21 f40c 	lsr.w	r4, r1, ip
 8010c58:	ea45 0504 	orr.w	r5, r5, r4
 8010c5c:	bf8c      	ite	hi
 8010c5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c62:	2400      	movls	r4, #0
 8010c64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010c68:	fa01 f000 	lsl.w	r0, r1, r0
 8010c6c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010c70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010c74:	ea40 0204 	orr.w	r2, r0, r4
 8010c78:	e7db      	b.n	8010c32 <__b2d+0x4a>
 8010c7a:	ea44 030c 	orr.w	r3, r4, ip
 8010c7e:	460a      	mov	r2, r1
 8010c80:	e7d7      	b.n	8010c32 <__b2d+0x4a>
 8010c82:	bf00      	nop
 8010c84:	3ff00000 	.word	0x3ff00000

08010c88 <__d2b>:
 8010c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c8c:	4689      	mov	r9, r1
 8010c8e:	2101      	movs	r1, #1
 8010c90:	ec57 6b10 	vmov	r6, r7, d0
 8010c94:	4690      	mov	r8, r2
 8010c96:	f7ff fc09 	bl	80104ac <_Balloc>
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	b930      	cbnz	r0, 8010cac <__d2b+0x24>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	4b25      	ldr	r3, [pc, #148]	; (8010d38 <__d2b+0xb0>)
 8010ca2:	4826      	ldr	r0, [pc, #152]	; (8010d3c <__d2b+0xb4>)
 8010ca4:	f240 310a 	movw	r1, #778	; 0x30a
 8010ca8:	f000 f904 	bl	8010eb4 <__assert_func>
 8010cac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cb4:	bb35      	cbnz	r5, 8010d04 <__d2b+0x7c>
 8010cb6:	2e00      	cmp	r6, #0
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	d028      	beq.n	8010d0e <__d2b+0x86>
 8010cbc:	4668      	mov	r0, sp
 8010cbe:	9600      	str	r6, [sp, #0]
 8010cc0:	f7ff fd06 	bl	80106d0 <__lo0bits>
 8010cc4:	9900      	ldr	r1, [sp, #0]
 8010cc6:	b300      	cbz	r0, 8010d0a <__d2b+0x82>
 8010cc8:	9a01      	ldr	r2, [sp, #4]
 8010cca:	f1c0 0320 	rsb	r3, r0, #32
 8010cce:	fa02 f303 	lsl.w	r3, r2, r3
 8010cd2:	430b      	orrs	r3, r1
 8010cd4:	40c2      	lsrs	r2, r0
 8010cd6:	6163      	str	r3, [r4, #20]
 8010cd8:	9201      	str	r2, [sp, #4]
 8010cda:	9b01      	ldr	r3, [sp, #4]
 8010cdc:	61a3      	str	r3, [r4, #24]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	bf14      	ite	ne
 8010ce2:	2202      	movne	r2, #2
 8010ce4:	2201      	moveq	r2, #1
 8010ce6:	6122      	str	r2, [r4, #16]
 8010ce8:	b1d5      	cbz	r5, 8010d20 <__d2b+0x98>
 8010cea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010cee:	4405      	add	r5, r0
 8010cf0:	f8c9 5000 	str.w	r5, [r9]
 8010cf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010cf8:	f8c8 0000 	str.w	r0, [r8]
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	b003      	add	sp, #12
 8010d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d08:	e7d5      	b.n	8010cb6 <__d2b+0x2e>
 8010d0a:	6161      	str	r1, [r4, #20]
 8010d0c:	e7e5      	b.n	8010cda <__d2b+0x52>
 8010d0e:	a801      	add	r0, sp, #4
 8010d10:	f7ff fcde 	bl	80106d0 <__lo0bits>
 8010d14:	9b01      	ldr	r3, [sp, #4]
 8010d16:	6163      	str	r3, [r4, #20]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	6122      	str	r2, [r4, #16]
 8010d1c:	3020      	adds	r0, #32
 8010d1e:	e7e3      	b.n	8010ce8 <__d2b+0x60>
 8010d20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d28:	f8c9 0000 	str.w	r0, [r9]
 8010d2c:	6918      	ldr	r0, [r3, #16]
 8010d2e:	f7ff fcaf 	bl	8010690 <__hi0bits>
 8010d32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d36:	e7df      	b.n	8010cf8 <__d2b+0x70>
 8010d38:	08011d48 	.word	0x08011d48
 8010d3c:	08011deb 	.word	0x08011deb

08010d40 <__ratio>:
 8010d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	4688      	mov	r8, r1
 8010d46:	4669      	mov	r1, sp
 8010d48:	4681      	mov	r9, r0
 8010d4a:	f7ff ff4d 	bl	8010be8 <__b2d>
 8010d4e:	a901      	add	r1, sp, #4
 8010d50:	4640      	mov	r0, r8
 8010d52:	ec55 4b10 	vmov	r4, r5, d0
 8010d56:	f7ff ff47 	bl	8010be8 <__b2d>
 8010d5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d62:	eba3 0c02 	sub.w	ip, r3, r2
 8010d66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d6a:	1a9b      	subs	r3, r3, r2
 8010d6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d70:	ec51 0b10 	vmov	r0, r1, d0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	bfd6      	itet	le
 8010d78:	460a      	movle	r2, r1
 8010d7a:	462a      	movgt	r2, r5
 8010d7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d80:	468b      	mov	fp, r1
 8010d82:	462f      	mov	r7, r5
 8010d84:	bfd4      	ite	le
 8010d86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d8e:	4620      	mov	r0, r4
 8010d90:	ee10 2a10 	vmov	r2, s0
 8010d94:	465b      	mov	r3, fp
 8010d96:	4639      	mov	r1, r7
 8010d98:	f7f7 fd78 	bl	800888c <__aeabi_ddiv>
 8010d9c:	ec41 0b10 	vmov	d0, r0, r1
 8010da0:	b003      	add	sp, #12
 8010da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010da6 <__copybits>:
 8010da6:	3901      	subs	r1, #1
 8010da8:	b570      	push	{r4, r5, r6, lr}
 8010daa:	1149      	asrs	r1, r1, #5
 8010dac:	6914      	ldr	r4, [r2, #16]
 8010dae:	3101      	adds	r1, #1
 8010db0:	f102 0314 	add.w	r3, r2, #20
 8010db4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010db8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010dbc:	1f05      	subs	r5, r0, #4
 8010dbe:	42a3      	cmp	r3, r4
 8010dc0:	d30c      	bcc.n	8010ddc <__copybits+0x36>
 8010dc2:	1aa3      	subs	r3, r4, r2
 8010dc4:	3b11      	subs	r3, #17
 8010dc6:	f023 0303 	bic.w	r3, r3, #3
 8010dca:	3211      	adds	r2, #17
 8010dcc:	42a2      	cmp	r2, r4
 8010dce:	bf88      	it	hi
 8010dd0:	2300      	movhi	r3, #0
 8010dd2:	4418      	add	r0, r3
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4288      	cmp	r0, r1
 8010dd8:	d305      	bcc.n	8010de6 <__copybits+0x40>
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	f853 6b04 	ldr.w	r6, [r3], #4
 8010de0:	f845 6f04 	str.w	r6, [r5, #4]!
 8010de4:	e7eb      	b.n	8010dbe <__copybits+0x18>
 8010de6:	f840 3b04 	str.w	r3, [r0], #4
 8010dea:	e7f4      	b.n	8010dd6 <__copybits+0x30>

08010dec <__any_on>:
 8010dec:	f100 0214 	add.w	r2, r0, #20
 8010df0:	6900      	ldr	r0, [r0, #16]
 8010df2:	114b      	asrs	r3, r1, #5
 8010df4:	4298      	cmp	r0, r3
 8010df6:	b510      	push	{r4, lr}
 8010df8:	db11      	blt.n	8010e1e <__any_on+0x32>
 8010dfa:	dd0a      	ble.n	8010e12 <__any_on+0x26>
 8010dfc:	f011 011f 	ands.w	r1, r1, #31
 8010e00:	d007      	beq.n	8010e12 <__any_on+0x26>
 8010e02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e06:	fa24 f001 	lsr.w	r0, r4, r1
 8010e0a:	fa00 f101 	lsl.w	r1, r0, r1
 8010e0e:	428c      	cmp	r4, r1
 8010e10:	d10b      	bne.n	8010e2a <__any_on+0x3e>
 8010e12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d803      	bhi.n	8010e22 <__any_on+0x36>
 8010e1a:	2000      	movs	r0, #0
 8010e1c:	bd10      	pop	{r4, pc}
 8010e1e:	4603      	mov	r3, r0
 8010e20:	e7f7      	b.n	8010e12 <__any_on+0x26>
 8010e22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e26:	2900      	cmp	r1, #0
 8010e28:	d0f5      	beq.n	8010e16 <__any_on+0x2a>
 8010e2a:	2001      	movs	r0, #1
 8010e2c:	e7f6      	b.n	8010e1c <__any_on+0x30>

08010e2e <_calloc_r>:
 8010e2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e30:	fba1 2402 	umull	r2, r4, r1, r2
 8010e34:	b94c      	cbnz	r4, 8010e4a <_calloc_r+0x1c>
 8010e36:	4611      	mov	r1, r2
 8010e38:	9201      	str	r2, [sp, #4]
 8010e3a:	f7fe f8df 	bl	800effc <_malloc_r>
 8010e3e:	9a01      	ldr	r2, [sp, #4]
 8010e40:	4605      	mov	r5, r0
 8010e42:	b930      	cbnz	r0, 8010e52 <_calloc_r+0x24>
 8010e44:	4628      	mov	r0, r5
 8010e46:	b003      	add	sp, #12
 8010e48:	bd30      	pop	{r4, r5, pc}
 8010e4a:	220c      	movs	r2, #12
 8010e4c:	6002      	str	r2, [r0, #0]
 8010e4e:	2500      	movs	r5, #0
 8010e50:	e7f8      	b.n	8010e44 <_calloc_r+0x16>
 8010e52:	4621      	mov	r1, r4
 8010e54:	f7fe f85e 	bl	800ef14 <memset>
 8010e58:	e7f4      	b.n	8010e44 <_calloc_r+0x16>
 8010e5a:	0000      	movs	r0, r0
 8010e5c:	0000      	movs	r0, r0
	...

08010e60 <nan>:
 8010e60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e68 <nan+0x8>
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	00000000 	.word	0x00000000
 8010e6c:	7ff80000 	.word	0x7ff80000

08010e70 <strncmp>:
 8010e70:	b510      	push	{r4, lr}
 8010e72:	b17a      	cbz	r2, 8010e94 <strncmp+0x24>
 8010e74:	4603      	mov	r3, r0
 8010e76:	3901      	subs	r1, #1
 8010e78:	1884      	adds	r4, r0, r2
 8010e7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e82:	4290      	cmp	r0, r2
 8010e84:	d101      	bne.n	8010e8a <strncmp+0x1a>
 8010e86:	42a3      	cmp	r3, r4
 8010e88:	d101      	bne.n	8010e8e <strncmp+0x1e>
 8010e8a:	1a80      	subs	r0, r0, r2
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d1f3      	bne.n	8010e7a <strncmp+0xa>
 8010e92:	e7fa      	b.n	8010e8a <strncmp+0x1a>
 8010e94:	4610      	mov	r0, r2
 8010e96:	e7f9      	b.n	8010e8c <strncmp+0x1c>

08010e98 <__ascii_wctomb>:
 8010e98:	b149      	cbz	r1, 8010eae <__ascii_wctomb+0x16>
 8010e9a:	2aff      	cmp	r2, #255	; 0xff
 8010e9c:	bf85      	ittet	hi
 8010e9e:	238a      	movhi	r3, #138	; 0x8a
 8010ea0:	6003      	strhi	r3, [r0, #0]
 8010ea2:	700a      	strbls	r2, [r1, #0]
 8010ea4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ea8:	bf98      	it	ls
 8010eaa:	2001      	movls	r0, #1
 8010eac:	4770      	bx	lr
 8010eae:	4608      	mov	r0, r1
 8010eb0:	4770      	bx	lr
	...

08010eb4 <__assert_func>:
 8010eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eb6:	4614      	mov	r4, r2
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4b09      	ldr	r3, [pc, #36]	; (8010ee0 <__assert_func+0x2c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	68d8      	ldr	r0, [r3, #12]
 8010ec2:	b14c      	cbz	r4, 8010ed8 <__assert_func+0x24>
 8010ec4:	4b07      	ldr	r3, [pc, #28]	; (8010ee4 <__assert_func+0x30>)
 8010ec6:	9100      	str	r1, [sp, #0]
 8010ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ecc:	4906      	ldr	r1, [pc, #24]	; (8010ee8 <__assert_func+0x34>)
 8010ece:	462b      	mov	r3, r5
 8010ed0:	f000 f80e 	bl	8010ef0 <fiprintf>
 8010ed4:	f000 fbce 	bl	8011674 <abort>
 8010ed8:	4b04      	ldr	r3, [pc, #16]	; (8010eec <__assert_func+0x38>)
 8010eda:	461c      	mov	r4, r3
 8010edc:	e7f3      	b.n	8010ec6 <__assert_func+0x12>
 8010ede:	bf00      	nop
 8010ee0:	20013890 	.word	0x20013890
 8010ee4:	08011f44 	.word	0x08011f44
 8010ee8:	08011f51 	.word	0x08011f51
 8010eec:	08011f7f 	.word	0x08011f7f

08010ef0 <fiprintf>:
 8010ef0:	b40e      	push	{r1, r2, r3}
 8010ef2:	b503      	push	{r0, r1, lr}
 8010ef4:	4601      	mov	r1, r0
 8010ef6:	ab03      	add	r3, sp, #12
 8010ef8:	4805      	ldr	r0, [pc, #20]	; (8010f10 <fiprintf+0x20>)
 8010efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010efe:	6800      	ldr	r0, [r0, #0]
 8010f00:	9301      	str	r3, [sp, #4]
 8010f02:	f000 f833 	bl	8010f6c <_vfiprintf_r>
 8010f06:	b002      	add	sp, #8
 8010f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f0c:	b003      	add	sp, #12
 8010f0e:	4770      	bx	lr
 8010f10:	20013890 	.word	0x20013890

08010f14 <__retarget_lock_init_recursive>:
 8010f14:	4770      	bx	lr

08010f16 <__retarget_lock_acquire_recursive>:
 8010f16:	4770      	bx	lr

08010f18 <__retarget_lock_release_recursive>:
 8010f18:	4770      	bx	lr

08010f1a <__sfputc_r>:
 8010f1a:	6893      	ldr	r3, [r2, #8]
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	b410      	push	{r4}
 8010f22:	6093      	str	r3, [r2, #8]
 8010f24:	da08      	bge.n	8010f38 <__sfputc_r+0x1e>
 8010f26:	6994      	ldr	r4, [r2, #24]
 8010f28:	42a3      	cmp	r3, r4
 8010f2a:	db01      	blt.n	8010f30 <__sfputc_r+0x16>
 8010f2c:	290a      	cmp	r1, #10
 8010f2e:	d103      	bne.n	8010f38 <__sfputc_r+0x1e>
 8010f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f34:	f000 bade 	b.w	80114f4 <__swbuf_r>
 8010f38:	6813      	ldr	r3, [r2, #0]
 8010f3a:	1c58      	adds	r0, r3, #1
 8010f3c:	6010      	str	r0, [r2, #0]
 8010f3e:	7019      	strb	r1, [r3, #0]
 8010f40:	4608      	mov	r0, r1
 8010f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <__sfputs_r>:
 8010f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460f      	mov	r7, r1
 8010f4e:	4614      	mov	r4, r2
 8010f50:	18d5      	adds	r5, r2, r3
 8010f52:	42ac      	cmp	r4, r5
 8010f54:	d101      	bne.n	8010f5a <__sfputs_r+0x12>
 8010f56:	2000      	movs	r0, #0
 8010f58:	e007      	b.n	8010f6a <__sfputs_r+0x22>
 8010f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f5e:	463a      	mov	r2, r7
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7ff ffda 	bl	8010f1a <__sfputc_r>
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	d1f3      	bne.n	8010f52 <__sfputs_r+0xa>
 8010f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f6c <_vfiprintf_r>:
 8010f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f70:	460d      	mov	r5, r1
 8010f72:	b09d      	sub	sp, #116	; 0x74
 8010f74:	4614      	mov	r4, r2
 8010f76:	4698      	mov	r8, r3
 8010f78:	4606      	mov	r6, r0
 8010f7a:	b118      	cbz	r0, 8010f84 <_vfiprintf_r+0x18>
 8010f7c:	6983      	ldr	r3, [r0, #24]
 8010f7e:	b90b      	cbnz	r3, 8010f84 <_vfiprintf_r+0x18>
 8010f80:	f000 fc9a 	bl	80118b8 <__sinit>
 8010f84:	4b89      	ldr	r3, [pc, #548]	; (80111ac <_vfiprintf_r+0x240>)
 8010f86:	429d      	cmp	r5, r3
 8010f88:	d11b      	bne.n	8010fc2 <_vfiprintf_r+0x56>
 8010f8a:	6875      	ldr	r5, [r6, #4]
 8010f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f8e:	07d9      	lsls	r1, r3, #31
 8010f90:	d405      	bmi.n	8010f9e <_vfiprintf_r+0x32>
 8010f92:	89ab      	ldrh	r3, [r5, #12]
 8010f94:	059a      	lsls	r2, r3, #22
 8010f96:	d402      	bmi.n	8010f9e <_vfiprintf_r+0x32>
 8010f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f9a:	f7ff ffbc 	bl	8010f16 <__retarget_lock_acquire_recursive>
 8010f9e:	89ab      	ldrh	r3, [r5, #12]
 8010fa0:	071b      	lsls	r3, r3, #28
 8010fa2:	d501      	bpl.n	8010fa8 <_vfiprintf_r+0x3c>
 8010fa4:	692b      	ldr	r3, [r5, #16]
 8010fa6:	b9eb      	cbnz	r3, 8010fe4 <_vfiprintf_r+0x78>
 8010fa8:	4629      	mov	r1, r5
 8010faa:	4630      	mov	r0, r6
 8010fac:	f000 faf4 	bl	8011598 <__swsetup_r>
 8010fb0:	b1c0      	cbz	r0, 8010fe4 <_vfiprintf_r+0x78>
 8010fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fb4:	07dc      	lsls	r4, r3, #31
 8010fb6:	d50e      	bpl.n	8010fd6 <_vfiprintf_r+0x6a>
 8010fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fbc:	b01d      	add	sp, #116	; 0x74
 8010fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc2:	4b7b      	ldr	r3, [pc, #492]	; (80111b0 <_vfiprintf_r+0x244>)
 8010fc4:	429d      	cmp	r5, r3
 8010fc6:	d101      	bne.n	8010fcc <_vfiprintf_r+0x60>
 8010fc8:	68b5      	ldr	r5, [r6, #8]
 8010fca:	e7df      	b.n	8010f8c <_vfiprintf_r+0x20>
 8010fcc:	4b79      	ldr	r3, [pc, #484]	; (80111b4 <_vfiprintf_r+0x248>)
 8010fce:	429d      	cmp	r5, r3
 8010fd0:	bf08      	it	eq
 8010fd2:	68f5      	ldreq	r5, [r6, #12]
 8010fd4:	e7da      	b.n	8010f8c <_vfiprintf_r+0x20>
 8010fd6:	89ab      	ldrh	r3, [r5, #12]
 8010fd8:	0598      	lsls	r0, r3, #22
 8010fda:	d4ed      	bmi.n	8010fb8 <_vfiprintf_r+0x4c>
 8010fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fde:	f7ff ff9b 	bl	8010f18 <__retarget_lock_release_recursive>
 8010fe2:	e7e9      	b.n	8010fb8 <_vfiprintf_r+0x4c>
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fe8:	2320      	movs	r3, #32
 8010fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ff2:	2330      	movs	r3, #48	; 0x30
 8010ff4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80111b8 <_vfiprintf_r+0x24c>
 8010ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ffc:	f04f 0901 	mov.w	r9, #1
 8011000:	4623      	mov	r3, r4
 8011002:	469a      	mov	sl, r3
 8011004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011008:	b10a      	cbz	r2, 801100e <_vfiprintf_r+0xa2>
 801100a:	2a25      	cmp	r2, #37	; 0x25
 801100c:	d1f9      	bne.n	8011002 <_vfiprintf_r+0x96>
 801100e:	ebba 0b04 	subs.w	fp, sl, r4
 8011012:	d00b      	beq.n	801102c <_vfiprintf_r+0xc0>
 8011014:	465b      	mov	r3, fp
 8011016:	4622      	mov	r2, r4
 8011018:	4629      	mov	r1, r5
 801101a:	4630      	mov	r0, r6
 801101c:	f7ff ff94 	bl	8010f48 <__sfputs_r>
 8011020:	3001      	adds	r0, #1
 8011022:	f000 80aa 	beq.w	801117a <_vfiprintf_r+0x20e>
 8011026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011028:	445a      	add	r2, fp
 801102a:	9209      	str	r2, [sp, #36]	; 0x24
 801102c:	f89a 3000 	ldrb.w	r3, [sl]
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 80a2 	beq.w	801117a <_vfiprintf_r+0x20e>
 8011036:	2300      	movs	r3, #0
 8011038:	f04f 32ff 	mov.w	r2, #4294967295
 801103c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011040:	f10a 0a01 	add.w	sl, sl, #1
 8011044:	9304      	str	r3, [sp, #16]
 8011046:	9307      	str	r3, [sp, #28]
 8011048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801104c:	931a      	str	r3, [sp, #104]	; 0x68
 801104e:	4654      	mov	r4, sl
 8011050:	2205      	movs	r2, #5
 8011052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011056:	4858      	ldr	r0, [pc, #352]	; (80111b8 <_vfiprintf_r+0x24c>)
 8011058:	f7f7 f8e2 	bl	8008220 <memchr>
 801105c:	9a04      	ldr	r2, [sp, #16]
 801105e:	b9d8      	cbnz	r0, 8011098 <_vfiprintf_r+0x12c>
 8011060:	06d1      	lsls	r1, r2, #27
 8011062:	bf44      	itt	mi
 8011064:	2320      	movmi	r3, #32
 8011066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801106a:	0713      	lsls	r3, r2, #28
 801106c:	bf44      	itt	mi
 801106e:	232b      	movmi	r3, #43	; 0x2b
 8011070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011074:	f89a 3000 	ldrb.w	r3, [sl]
 8011078:	2b2a      	cmp	r3, #42	; 0x2a
 801107a:	d015      	beq.n	80110a8 <_vfiprintf_r+0x13c>
 801107c:	9a07      	ldr	r2, [sp, #28]
 801107e:	4654      	mov	r4, sl
 8011080:	2000      	movs	r0, #0
 8011082:	f04f 0c0a 	mov.w	ip, #10
 8011086:	4621      	mov	r1, r4
 8011088:	f811 3b01 	ldrb.w	r3, [r1], #1
 801108c:	3b30      	subs	r3, #48	; 0x30
 801108e:	2b09      	cmp	r3, #9
 8011090:	d94e      	bls.n	8011130 <_vfiprintf_r+0x1c4>
 8011092:	b1b0      	cbz	r0, 80110c2 <_vfiprintf_r+0x156>
 8011094:	9207      	str	r2, [sp, #28]
 8011096:	e014      	b.n	80110c2 <_vfiprintf_r+0x156>
 8011098:	eba0 0308 	sub.w	r3, r0, r8
 801109c:	fa09 f303 	lsl.w	r3, r9, r3
 80110a0:	4313      	orrs	r3, r2
 80110a2:	9304      	str	r3, [sp, #16]
 80110a4:	46a2      	mov	sl, r4
 80110a6:	e7d2      	b.n	801104e <_vfiprintf_r+0xe2>
 80110a8:	9b03      	ldr	r3, [sp, #12]
 80110aa:	1d19      	adds	r1, r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	9103      	str	r1, [sp, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	bfbb      	ittet	lt
 80110b4:	425b      	neglt	r3, r3
 80110b6:	f042 0202 	orrlt.w	r2, r2, #2
 80110ba:	9307      	strge	r3, [sp, #28]
 80110bc:	9307      	strlt	r3, [sp, #28]
 80110be:	bfb8      	it	lt
 80110c0:	9204      	strlt	r2, [sp, #16]
 80110c2:	7823      	ldrb	r3, [r4, #0]
 80110c4:	2b2e      	cmp	r3, #46	; 0x2e
 80110c6:	d10c      	bne.n	80110e2 <_vfiprintf_r+0x176>
 80110c8:	7863      	ldrb	r3, [r4, #1]
 80110ca:	2b2a      	cmp	r3, #42	; 0x2a
 80110cc:	d135      	bne.n	801113a <_vfiprintf_r+0x1ce>
 80110ce:	9b03      	ldr	r3, [sp, #12]
 80110d0:	1d1a      	adds	r2, r3, #4
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	9203      	str	r2, [sp, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	bfb8      	it	lt
 80110da:	f04f 33ff 	movlt.w	r3, #4294967295
 80110de:	3402      	adds	r4, #2
 80110e0:	9305      	str	r3, [sp, #20]
 80110e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80111c8 <_vfiprintf_r+0x25c>
 80110e6:	7821      	ldrb	r1, [r4, #0]
 80110e8:	2203      	movs	r2, #3
 80110ea:	4650      	mov	r0, sl
 80110ec:	f7f7 f898 	bl	8008220 <memchr>
 80110f0:	b140      	cbz	r0, 8011104 <_vfiprintf_r+0x198>
 80110f2:	2340      	movs	r3, #64	; 0x40
 80110f4:	eba0 000a 	sub.w	r0, r0, sl
 80110f8:	fa03 f000 	lsl.w	r0, r3, r0
 80110fc:	9b04      	ldr	r3, [sp, #16]
 80110fe:	4303      	orrs	r3, r0
 8011100:	3401      	adds	r4, #1
 8011102:	9304      	str	r3, [sp, #16]
 8011104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011108:	482c      	ldr	r0, [pc, #176]	; (80111bc <_vfiprintf_r+0x250>)
 801110a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801110e:	2206      	movs	r2, #6
 8011110:	f7f7 f886 	bl	8008220 <memchr>
 8011114:	2800      	cmp	r0, #0
 8011116:	d03f      	beq.n	8011198 <_vfiprintf_r+0x22c>
 8011118:	4b29      	ldr	r3, [pc, #164]	; (80111c0 <_vfiprintf_r+0x254>)
 801111a:	bb1b      	cbnz	r3, 8011164 <_vfiprintf_r+0x1f8>
 801111c:	9b03      	ldr	r3, [sp, #12]
 801111e:	3307      	adds	r3, #7
 8011120:	f023 0307 	bic.w	r3, r3, #7
 8011124:	3308      	adds	r3, #8
 8011126:	9303      	str	r3, [sp, #12]
 8011128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801112a:	443b      	add	r3, r7
 801112c:	9309      	str	r3, [sp, #36]	; 0x24
 801112e:	e767      	b.n	8011000 <_vfiprintf_r+0x94>
 8011130:	fb0c 3202 	mla	r2, ip, r2, r3
 8011134:	460c      	mov	r4, r1
 8011136:	2001      	movs	r0, #1
 8011138:	e7a5      	b.n	8011086 <_vfiprintf_r+0x11a>
 801113a:	2300      	movs	r3, #0
 801113c:	3401      	adds	r4, #1
 801113e:	9305      	str	r3, [sp, #20]
 8011140:	4619      	mov	r1, r3
 8011142:	f04f 0c0a 	mov.w	ip, #10
 8011146:	4620      	mov	r0, r4
 8011148:	f810 2b01 	ldrb.w	r2, [r0], #1
 801114c:	3a30      	subs	r2, #48	; 0x30
 801114e:	2a09      	cmp	r2, #9
 8011150:	d903      	bls.n	801115a <_vfiprintf_r+0x1ee>
 8011152:	2b00      	cmp	r3, #0
 8011154:	d0c5      	beq.n	80110e2 <_vfiprintf_r+0x176>
 8011156:	9105      	str	r1, [sp, #20]
 8011158:	e7c3      	b.n	80110e2 <_vfiprintf_r+0x176>
 801115a:	fb0c 2101 	mla	r1, ip, r1, r2
 801115e:	4604      	mov	r4, r0
 8011160:	2301      	movs	r3, #1
 8011162:	e7f0      	b.n	8011146 <_vfiprintf_r+0x1da>
 8011164:	ab03      	add	r3, sp, #12
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	462a      	mov	r2, r5
 801116a:	4b16      	ldr	r3, [pc, #88]	; (80111c4 <_vfiprintf_r+0x258>)
 801116c:	a904      	add	r1, sp, #16
 801116e:	4630      	mov	r0, r6
 8011170:	f3af 8000 	nop.w
 8011174:	4607      	mov	r7, r0
 8011176:	1c78      	adds	r0, r7, #1
 8011178:	d1d6      	bne.n	8011128 <_vfiprintf_r+0x1bc>
 801117a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801117c:	07d9      	lsls	r1, r3, #31
 801117e:	d405      	bmi.n	801118c <_vfiprintf_r+0x220>
 8011180:	89ab      	ldrh	r3, [r5, #12]
 8011182:	059a      	lsls	r2, r3, #22
 8011184:	d402      	bmi.n	801118c <_vfiprintf_r+0x220>
 8011186:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011188:	f7ff fec6 	bl	8010f18 <__retarget_lock_release_recursive>
 801118c:	89ab      	ldrh	r3, [r5, #12]
 801118e:	065b      	lsls	r3, r3, #25
 8011190:	f53f af12 	bmi.w	8010fb8 <_vfiprintf_r+0x4c>
 8011194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011196:	e711      	b.n	8010fbc <_vfiprintf_r+0x50>
 8011198:	ab03      	add	r3, sp, #12
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	462a      	mov	r2, r5
 801119e:	4b09      	ldr	r3, [pc, #36]	; (80111c4 <_vfiprintf_r+0x258>)
 80111a0:	a904      	add	r1, sp, #16
 80111a2:	4630      	mov	r0, r6
 80111a4:	f000 f880 	bl	80112a8 <_printf_i>
 80111a8:	e7e4      	b.n	8011174 <_vfiprintf_r+0x208>
 80111aa:	bf00      	nop
 80111ac:	080120d4 	.word	0x080120d4
 80111b0:	080120f4 	.word	0x080120f4
 80111b4:	080120b4 	.word	0x080120b4
 80111b8:	08012081 	.word	0x08012081
 80111bc:	0801208b 	.word	0x0801208b
 80111c0:	00000000 	.word	0x00000000
 80111c4:	08010f49 	.word	0x08010f49
 80111c8:	08012087 	.word	0x08012087

080111cc <_printf_common>:
 80111cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d0:	4616      	mov	r6, r2
 80111d2:	4699      	mov	r9, r3
 80111d4:	688a      	ldr	r2, [r1, #8]
 80111d6:	690b      	ldr	r3, [r1, #16]
 80111d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80111dc:	4293      	cmp	r3, r2
 80111de:	bfb8      	it	lt
 80111e0:	4613      	movlt	r3, r2
 80111e2:	6033      	str	r3, [r6, #0]
 80111e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80111e8:	4607      	mov	r7, r0
 80111ea:	460c      	mov	r4, r1
 80111ec:	b10a      	cbz	r2, 80111f2 <_printf_common+0x26>
 80111ee:	3301      	adds	r3, #1
 80111f0:	6033      	str	r3, [r6, #0]
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	0699      	lsls	r1, r3, #26
 80111f6:	bf42      	ittt	mi
 80111f8:	6833      	ldrmi	r3, [r6, #0]
 80111fa:	3302      	addmi	r3, #2
 80111fc:	6033      	strmi	r3, [r6, #0]
 80111fe:	6825      	ldr	r5, [r4, #0]
 8011200:	f015 0506 	ands.w	r5, r5, #6
 8011204:	d106      	bne.n	8011214 <_printf_common+0x48>
 8011206:	f104 0a19 	add.w	sl, r4, #25
 801120a:	68e3      	ldr	r3, [r4, #12]
 801120c:	6832      	ldr	r2, [r6, #0]
 801120e:	1a9b      	subs	r3, r3, r2
 8011210:	42ab      	cmp	r3, r5
 8011212:	dc26      	bgt.n	8011262 <_printf_common+0x96>
 8011214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011218:	1e13      	subs	r3, r2, #0
 801121a:	6822      	ldr	r2, [r4, #0]
 801121c:	bf18      	it	ne
 801121e:	2301      	movne	r3, #1
 8011220:	0692      	lsls	r2, r2, #26
 8011222:	d42b      	bmi.n	801127c <_printf_common+0xb0>
 8011224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011228:	4649      	mov	r1, r9
 801122a:	4638      	mov	r0, r7
 801122c:	47c0      	blx	r8
 801122e:	3001      	adds	r0, #1
 8011230:	d01e      	beq.n	8011270 <_printf_common+0xa4>
 8011232:	6823      	ldr	r3, [r4, #0]
 8011234:	68e5      	ldr	r5, [r4, #12]
 8011236:	6832      	ldr	r2, [r6, #0]
 8011238:	f003 0306 	and.w	r3, r3, #6
 801123c:	2b04      	cmp	r3, #4
 801123e:	bf08      	it	eq
 8011240:	1aad      	subeq	r5, r5, r2
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	6922      	ldr	r2, [r4, #16]
 8011246:	bf0c      	ite	eq
 8011248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801124c:	2500      	movne	r5, #0
 801124e:	4293      	cmp	r3, r2
 8011250:	bfc4      	itt	gt
 8011252:	1a9b      	subgt	r3, r3, r2
 8011254:	18ed      	addgt	r5, r5, r3
 8011256:	2600      	movs	r6, #0
 8011258:	341a      	adds	r4, #26
 801125a:	42b5      	cmp	r5, r6
 801125c:	d11a      	bne.n	8011294 <_printf_common+0xc8>
 801125e:	2000      	movs	r0, #0
 8011260:	e008      	b.n	8011274 <_printf_common+0xa8>
 8011262:	2301      	movs	r3, #1
 8011264:	4652      	mov	r2, sl
 8011266:	4649      	mov	r1, r9
 8011268:	4638      	mov	r0, r7
 801126a:	47c0      	blx	r8
 801126c:	3001      	adds	r0, #1
 801126e:	d103      	bne.n	8011278 <_printf_common+0xac>
 8011270:	f04f 30ff 	mov.w	r0, #4294967295
 8011274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011278:	3501      	adds	r5, #1
 801127a:	e7c6      	b.n	801120a <_printf_common+0x3e>
 801127c:	18e1      	adds	r1, r4, r3
 801127e:	1c5a      	adds	r2, r3, #1
 8011280:	2030      	movs	r0, #48	; 0x30
 8011282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011286:	4422      	add	r2, r4
 8011288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801128c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011290:	3302      	adds	r3, #2
 8011292:	e7c7      	b.n	8011224 <_printf_common+0x58>
 8011294:	2301      	movs	r3, #1
 8011296:	4622      	mov	r2, r4
 8011298:	4649      	mov	r1, r9
 801129a:	4638      	mov	r0, r7
 801129c:	47c0      	blx	r8
 801129e:	3001      	adds	r0, #1
 80112a0:	d0e6      	beq.n	8011270 <_printf_common+0xa4>
 80112a2:	3601      	adds	r6, #1
 80112a4:	e7d9      	b.n	801125a <_printf_common+0x8e>
	...

080112a8 <_printf_i>:
 80112a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112ac:	7e0f      	ldrb	r7, [r1, #24]
 80112ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112b0:	2f78      	cmp	r7, #120	; 0x78
 80112b2:	4691      	mov	r9, r2
 80112b4:	4680      	mov	r8, r0
 80112b6:	460c      	mov	r4, r1
 80112b8:	469a      	mov	sl, r3
 80112ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112be:	d807      	bhi.n	80112d0 <_printf_i+0x28>
 80112c0:	2f62      	cmp	r7, #98	; 0x62
 80112c2:	d80a      	bhi.n	80112da <_printf_i+0x32>
 80112c4:	2f00      	cmp	r7, #0
 80112c6:	f000 80d8 	beq.w	801147a <_printf_i+0x1d2>
 80112ca:	2f58      	cmp	r7, #88	; 0x58
 80112cc:	f000 80a3 	beq.w	8011416 <_printf_i+0x16e>
 80112d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80112d8:	e03a      	b.n	8011350 <_printf_i+0xa8>
 80112da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80112de:	2b15      	cmp	r3, #21
 80112e0:	d8f6      	bhi.n	80112d0 <_printf_i+0x28>
 80112e2:	a101      	add	r1, pc, #4	; (adr r1, 80112e8 <_printf_i+0x40>)
 80112e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112e8:	08011341 	.word	0x08011341
 80112ec:	08011355 	.word	0x08011355
 80112f0:	080112d1 	.word	0x080112d1
 80112f4:	080112d1 	.word	0x080112d1
 80112f8:	080112d1 	.word	0x080112d1
 80112fc:	080112d1 	.word	0x080112d1
 8011300:	08011355 	.word	0x08011355
 8011304:	080112d1 	.word	0x080112d1
 8011308:	080112d1 	.word	0x080112d1
 801130c:	080112d1 	.word	0x080112d1
 8011310:	080112d1 	.word	0x080112d1
 8011314:	08011461 	.word	0x08011461
 8011318:	08011385 	.word	0x08011385
 801131c:	08011443 	.word	0x08011443
 8011320:	080112d1 	.word	0x080112d1
 8011324:	080112d1 	.word	0x080112d1
 8011328:	08011483 	.word	0x08011483
 801132c:	080112d1 	.word	0x080112d1
 8011330:	08011385 	.word	0x08011385
 8011334:	080112d1 	.word	0x080112d1
 8011338:	080112d1 	.word	0x080112d1
 801133c:	0801144b 	.word	0x0801144b
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	1d1a      	adds	r2, r3, #4
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	602a      	str	r2, [r5, #0]
 8011348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801134c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011350:	2301      	movs	r3, #1
 8011352:	e0a3      	b.n	801149c <_printf_i+0x1f4>
 8011354:	6820      	ldr	r0, [r4, #0]
 8011356:	6829      	ldr	r1, [r5, #0]
 8011358:	0606      	lsls	r6, r0, #24
 801135a:	f101 0304 	add.w	r3, r1, #4
 801135e:	d50a      	bpl.n	8011376 <_printf_i+0xce>
 8011360:	680e      	ldr	r6, [r1, #0]
 8011362:	602b      	str	r3, [r5, #0]
 8011364:	2e00      	cmp	r6, #0
 8011366:	da03      	bge.n	8011370 <_printf_i+0xc8>
 8011368:	232d      	movs	r3, #45	; 0x2d
 801136a:	4276      	negs	r6, r6
 801136c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011370:	485e      	ldr	r0, [pc, #376]	; (80114ec <_printf_i+0x244>)
 8011372:	230a      	movs	r3, #10
 8011374:	e019      	b.n	80113aa <_printf_i+0x102>
 8011376:	680e      	ldr	r6, [r1, #0]
 8011378:	602b      	str	r3, [r5, #0]
 801137a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801137e:	bf18      	it	ne
 8011380:	b236      	sxthne	r6, r6
 8011382:	e7ef      	b.n	8011364 <_printf_i+0xbc>
 8011384:	682b      	ldr	r3, [r5, #0]
 8011386:	6820      	ldr	r0, [r4, #0]
 8011388:	1d19      	adds	r1, r3, #4
 801138a:	6029      	str	r1, [r5, #0]
 801138c:	0601      	lsls	r1, r0, #24
 801138e:	d501      	bpl.n	8011394 <_printf_i+0xec>
 8011390:	681e      	ldr	r6, [r3, #0]
 8011392:	e002      	b.n	801139a <_printf_i+0xf2>
 8011394:	0646      	lsls	r6, r0, #25
 8011396:	d5fb      	bpl.n	8011390 <_printf_i+0xe8>
 8011398:	881e      	ldrh	r6, [r3, #0]
 801139a:	4854      	ldr	r0, [pc, #336]	; (80114ec <_printf_i+0x244>)
 801139c:	2f6f      	cmp	r7, #111	; 0x6f
 801139e:	bf0c      	ite	eq
 80113a0:	2308      	moveq	r3, #8
 80113a2:	230a      	movne	r3, #10
 80113a4:	2100      	movs	r1, #0
 80113a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113aa:	6865      	ldr	r5, [r4, #4]
 80113ac:	60a5      	str	r5, [r4, #8]
 80113ae:	2d00      	cmp	r5, #0
 80113b0:	bfa2      	ittt	ge
 80113b2:	6821      	ldrge	r1, [r4, #0]
 80113b4:	f021 0104 	bicge.w	r1, r1, #4
 80113b8:	6021      	strge	r1, [r4, #0]
 80113ba:	b90e      	cbnz	r6, 80113c0 <_printf_i+0x118>
 80113bc:	2d00      	cmp	r5, #0
 80113be:	d04d      	beq.n	801145c <_printf_i+0x1b4>
 80113c0:	4615      	mov	r5, r2
 80113c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80113c6:	fb03 6711 	mls	r7, r3, r1, r6
 80113ca:	5dc7      	ldrb	r7, [r0, r7]
 80113cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80113d0:	4637      	mov	r7, r6
 80113d2:	42bb      	cmp	r3, r7
 80113d4:	460e      	mov	r6, r1
 80113d6:	d9f4      	bls.n	80113c2 <_printf_i+0x11a>
 80113d8:	2b08      	cmp	r3, #8
 80113da:	d10b      	bne.n	80113f4 <_printf_i+0x14c>
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	07de      	lsls	r6, r3, #31
 80113e0:	d508      	bpl.n	80113f4 <_printf_i+0x14c>
 80113e2:	6923      	ldr	r3, [r4, #16]
 80113e4:	6861      	ldr	r1, [r4, #4]
 80113e6:	4299      	cmp	r1, r3
 80113e8:	bfde      	ittt	le
 80113ea:	2330      	movle	r3, #48	; 0x30
 80113ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80113f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80113f4:	1b52      	subs	r2, r2, r5
 80113f6:	6122      	str	r2, [r4, #16]
 80113f8:	f8cd a000 	str.w	sl, [sp]
 80113fc:	464b      	mov	r3, r9
 80113fe:	aa03      	add	r2, sp, #12
 8011400:	4621      	mov	r1, r4
 8011402:	4640      	mov	r0, r8
 8011404:	f7ff fee2 	bl	80111cc <_printf_common>
 8011408:	3001      	adds	r0, #1
 801140a:	d14c      	bne.n	80114a6 <_printf_i+0x1fe>
 801140c:	f04f 30ff 	mov.w	r0, #4294967295
 8011410:	b004      	add	sp, #16
 8011412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011416:	4835      	ldr	r0, [pc, #212]	; (80114ec <_printf_i+0x244>)
 8011418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801141c:	6829      	ldr	r1, [r5, #0]
 801141e:	6823      	ldr	r3, [r4, #0]
 8011420:	f851 6b04 	ldr.w	r6, [r1], #4
 8011424:	6029      	str	r1, [r5, #0]
 8011426:	061d      	lsls	r5, r3, #24
 8011428:	d514      	bpl.n	8011454 <_printf_i+0x1ac>
 801142a:	07df      	lsls	r7, r3, #31
 801142c:	bf44      	itt	mi
 801142e:	f043 0320 	orrmi.w	r3, r3, #32
 8011432:	6023      	strmi	r3, [r4, #0]
 8011434:	b91e      	cbnz	r6, 801143e <_printf_i+0x196>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	f023 0320 	bic.w	r3, r3, #32
 801143c:	6023      	str	r3, [r4, #0]
 801143e:	2310      	movs	r3, #16
 8011440:	e7b0      	b.n	80113a4 <_printf_i+0xfc>
 8011442:	6823      	ldr	r3, [r4, #0]
 8011444:	f043 0320 	orr.w	r3, r3, #32
 8011448:	6023      	str	r3, [r4, #0]
 801144a:	2378      	movs	r3, #120	; 0x78
 801144c:	4828      	ldr	r0, [pc, #160]	; (80114f0 <_printf_i+0x248>)
 801144e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011452:	e7e3      	b.n	801141c <_printf_i+0x174>
 8011454:	0659      	lsls	r1, r3, #25
 8011456:	bf48      	it	mi
 8011458:	b2b6      	uxthmi	r6, r6
 801145a:	e7e6      	b.n	801142a <_printf_i+0x182>
 801145c:	4615      	mov	r5, r2
 801145e:	e7bb      	b.n	80113d8 <_printf_i+0x130>
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	6826      	ldr	r6, [r4, #0]
 8011464:	6961      	ldr	r1, [r4, #20]
 8011466:	1d18      	adds	r0, r3, #4
 8011468:	6028      	str	r0, [r5, #0]
 801146a:	0635      	lsls	r5, r6, #24
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	d501      	bpl.n	8011474 <_printf_i+0x1cc>
 8011470:	6019      	str	r1, [r3, #0]
 8011472:	e002      	b.n	801147a <_printf_i+0x1d2>
 8011474:	0670      	lsls	r0, r6, #25
 8011476:	d5fb      	bpl.n	8011470 <_printf_i+0x1c8>
 8011478:	8019      	strh	r1, [r3, #0]
 801147a:	2300      	movs	r3, #0
 801147c:	6123      	str	r3, [r4, #16]
 801147e:	4615      	mov	r5, r2
 8011480:	e7ba      	b.n	80113f8 <_printf_i+0x150>
 8011482:	682b      	ldr	r3, [r5, #0]
 8011484:	1d1a      	adds	r2, r3, #4
 8011486:	602a      	str	r2, [r5, #0]
 8011488:	681d      	ldr	r5, [r3, #0]
 801148a:	6862      	ldr	r2, [r4, #4]
 801148c:	2100      	movs	r1, #0
 801148e:	4628      	mov	r0, r5
 8011490:	f7f6 fec6 	bl	8008220 <memchr>
 8011494:	b108      	cbz	r0, 801149a <_printf_i+0x1f2>
 8011496:	1b40      	subs	r0, r0, r5
 8011498:	6060      	str	r0, [r4, #4]
 801149a:	6863      	ldr	r3, [r4, #4]
 801149c:	6123      	str	r3, [r4, #16]
 801149e:	2300      	movs	r3, #0
 80114a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114a4:	e7a8      	b.n	80113f8 <_printf_i+0x150>
 80114a6:	6923      	ldr	r3, [r4, #16]
 80114a8:	462a      	mov	r2, r5
 80114aa:	4649      	mov	r1, r9
 80114ac:	4640      	mov	r0, r8
 80114ae:	47d0      	blx	sl
 80114b0:	3001      	adds	r0, #1
 80114b2:	d0ab      	beq.n	801140c <_printf_i+0x164>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	079b      	lsls	r3, r3, #30
 80114b8:	d413      	bmi.n	80114e2 <_printf_i+0x23a>
 80114ba:	68e0      	ldr	r0, [r4, #12]
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	4298      	cmp	r0, r3
 80114c0:	bfb8      	it	lt
 80114c2:	4618      	movlt	r0, r3
 80114c4:	e7a4      	b.n	8011410 <_printf_i+0x168>
 80114c6:	2301      	movs	r3, #1
 80114c8:	4632      	mov	r2, r6
 80114ca:	4649      	mov	r1, r9
 80114cc:	4640      	mov	r0, r8
 80114ce:	47d0      	blx	sl
 80114d0:	3001      	adds	r0, #1
 80114d2:	d09b      	beq.n	801140c <_printf_i+0x164>
 80114d4:	3501      	adds	r5, #1
 80114d6:	68e3      	ldr	r3, [r4, #12]
 80114d8:	9903      	ldr	r1, [sp, #12]
 80114da:	1a5b      	subs	r3, r3, r1
 80114dc:	42ab      	cmp	r3, r5
 80114de:	dcf2      	bgt.n	80114c6 <_printf_i+0x21e>
 80114e0:	e7eb      	b.n	80114ba <_printf_i+0x212>
 80114e2:	2500      	movs	r5, #0
 80114e4:	f104 0619 	add.w	r6, r4, #25
 80114e8:	e7f5      	b.n	80114d6 <_printf_i+0x22e>
 80114ea:	bf00      	nop
 80114ec:	08012092 	.word	0x08012092
 80114f0:	080120a3 	.word	0x080120a3

080114f4 <__swbuf_r>:
 80114f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f6:	460e      	mov	r6, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	4605      	mov	r5, r0
 80114fc:	b118      	cbz	r0, 8011506 <__swbuf_r+0x12>
 80114fe:	6983      	ldr	r3, [r0, #24]
 8011500:	b90b      	cbnz	r3, 8011506 <__swbuf_r+0x12>
 8011502:	f000 f9d9 	bl	80118b8 <__sinit>
 8011506:	4b21      	ldr	r3, [pc, #132]	; (801158c <__swbuf_r+0x98>)
 8011508:	429c      	cmp	r4, r3
 801150a:	d12b      	bne.n	8011564 <__swbuf_r+0x70>
 801150c:	686c      	ldr	r4, [r5, #4]
 801150e:	69a3      	ldr	r3, [r4, #24]
 8011510:	60a3      	str	r3, [r4, #8]
 8011512:	89a3      	ldrh	r3, [r4, #12]
 8011514:	071a      	lsls	r2, r3, #28
 8011516:	d52f      	bpl.n	8011578 <__swbuf_r+0x84>
 8011518:	6923      	ldr	r3, [r4, #16]
 801151a:	b36b      	cbz	r3, 8011578 <__swbuf_r+0x84>
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	6820      	ldr	r0, [r4, #0]
 8011520:	1ac0      	subs	r0, r0, r3
 8011522:	6963      	ldr	r3, [r4, #20]
 8011524:	b2f6      	uxtb	r6, r6
 8011526:	4283      	cmp	r3, r0
 8011528:	4637      	mov	r7, r6
 801152a:	dc04      	bgt.n	8011536 <__swbuf_r+0x42>
 801152c:	4621      	mov	r1, r4
 801152e:	4628      	mov	r0, r5
 8011530:	f000 f92e 	bl	8011790 <_fflush_r>
 8011534:	bb30      	cbnz	r0, 8011584 <__swbuf_r+0x90>
 8011536:	68a3      	ldr	r3, [r4, #8]
 8011538:	3b01      	subs	r3, #1
 801153a:	60a3      	str	r3, [r4, #8]
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	1c5a      	adds	r2, r3, #1
 8011540:	6022      	str	r2, [r4, #0]
 8011542:	701e      	strb	r6, [r3, #0]
 8011544:	6963      	ldr	r3, [r4, #20]
 8011546:	3001      	adds	r0, #1
 8011548:	4283      	cmp	r3, r0
 801154a:	d004      	beq.n	8011556 <__swbuf_r+0x62>
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	07db      	lsls	r3, r3, #31
 8011550:	d506      	bpl.n	8011560 <__swbuf_r+0x6c>
 8011552:	2e0a      	cmp	r6, #10
 8011554:	d104      	bne.n	8011560 <__swbuf_r+0x6c>
 8011556:	4621      	mov	r1, r4
 8011558:	4628      	mov	r0, r5
 801155a:	f000 f919 	bl	8011790 <_fflush_r>
 801155e:	b988      	cbnz	r0, 8011584 <__swbuf_r+0x90>
 8011560:	4638      	mov	r0, r7
 8011562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011564:	4b0a      	ldr	r3, [pc, #40]	; (8011590 <__swbuf_r+0x9c>)
 8011566:	429c      	cmp	r4, r3
 8011568:	d101      	bne.n	801156e <__swbuf_r+0x7a>
 801156a:	68ac      	ldr	r4, [r5, #8]
 801156c:	e7cf      	b.n	801150e <__swbuf_r+0x1a>
 801156e:	4b09      	ldr	r3, [pc, #36]	; (8011594 <__swbuf_r+0xa0>)
 8011570:	429c      	cmp	r4, r3
 8011572:	bf08      	it	eq
 8011574:	68ec      	ldreq	r4, [r5, #12]
 8011576:	e7ca      	b.n	801150e <__swbuf_r+0x1a>
 8011578:	4621      	mov	r1, r4
 801157a:	4628      	mov	r0, r5
 801157c:	f000 f80c 	bl	8011598 <__swsetup_r>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0cb      	beq.n	801151c <__swbuf_r+0x28>
 8011584:	f04f 37ff 	mov.w	r7, #4294967295
 8011588:	e7ea      	b.n	8011560 <__swbuf_r+0x6c>
 801158a:	bf00      	nop
 801158c:	080120d4 	.word	0x080120d4
 8011590:	080120f4 	.word	0x080120f4
 8011594:	080120b4 	.word	0x080120b4

08011598 <__swsetup_r>:
 8011598:	4b32      	ldr	r3, [pc, #200]	; (8011664 <__swsetup_r+0xcc>)
 801159a:	b570      	push	{r4, r5, r6, lr}
 801159c:	681d      	ldr	r5, [r3, #0]
 801159e:	4606      	mov	r6, r0
 80115a0:	460c      	mov	r4, r1
 80115a2:	b125      	cbz	r5, 80115ae <__swsetup_r+0x16>
 80115a4:	69ab      	ldr	r3, [r5, #24]
 80115a6:	b913      	cbnz	r3, 80115ae <__swsetup_r+0x16>
 80115a8:	4628      	mov	r0, r5
 80115aa:	f000 f985 	bl	80118b8 <__sinit>
 80115ae:	4b2e      	ldr	r3, [pc, #184]	; (8011668 <__swsetup_r+0xd0>)
 80115b0:	429c      	cmp	r4, r3
 80115b2:	d10f      	bne.n	80115d4 <__swsetup_r+0x3c>
 80115b4:	686c      	ldr	r4, [r5, #4]
 80115b6:	89a3      	ldrh	r3, [r4, #12]
 80115b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115bc:	0719      	lsls	r1, r3, #28
 80115be:	d42c      	bmi.n	801161a <__swsetup_r+0x82>
 80115c0:	06dd      	lsls	r5, r3, #27
 80115c2:	d411      	bmi.n	80115e8 <__swsetup_r+0x50>
 80115c4:	2309      	movs	r3, #9
 80115c6:	6033      	str	r3, [r6, #0]
 80115c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80115cc:	81a3      	strh	r3, [r4, #12]
 80115ce:	f04f 30ff 	mov.w	r0, #4294967295
 80115d2:	e03e      	b.n	8011652 <__swsetup_r+0xba>
 80115d4:	4b25      	ldr	r3, [pc, #148]	; (801166c <__swsetup_r+0xd4>)
 80115d6:	429c      	cmp	r4, r3
 80115d8:	d101      	bne.n	80115de <__swsetup_r+0x46>
 80115da:	68ac      	ldr	r4, [r5, #8]
 80115dc:	e7eb      	b.n	80115b6 <__swsetup_r+0x1e>
 80115de:	4b24      	ldr	r3, [pc, #144]	; (8011670 <__swsetup_r+0xd8>)
 80115e0:	429c      	cmp	r4, r3
 80115e2:	bf08      	it	eq
 80115e4:	68ec      	ldreq	r4, [r5, #12]
 80115e6:	e7e6      	b.n	80115b6 <__swsetup_r+0x1e>
 80115e8:	0758      	lsls	r0, r3, #29
 80115ea:	d512      	bpl.n	8011612 <__swsetup_r+0x7a>
 80115ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115ee:	b141      	cbz	r1, 8011602 <__swsetup_r+0x6a>
 80115f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115f4:	4299      	cmp	r1, r3
 80115f6:	d002      	beq.n	80115fe <__swsetup_r+0x66>
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7fd fc93 	bl	800ef24 <_free_r>
 80115fe:	2300      	movs	r3, #0
 8011600:	6363      	str	r3, [r4, #52]	; 0x34
 8011602:	89a3      	ldrh	r3, [r4, #12]
 8011604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011608:	81a3      	strh	r3, [r4, #12]
 801160a:	2300      	movs	r3, #0
 801160c:	6063      	str	r3, [r4, #4]
 801160e:	6923      	ldr	r3, [r4, #16]
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	f043 0308 	orr.w	r3, r3, #8
 8011618:	81a3      	strh	r3, [r4, #12]
 801161a:	6923      	ldr	r3, [r4, #16]
 801161c:	b94b      	cbnz	r3, 8011632 <__swsetup_r+0x9a>
 801161e:	89a3      	ldrh	r3, [r4, #12]
 8011620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011628:	d003      	beq.n	8011632 <__swsetup_r+0x9a>
 801162a:	4621      	mov	r1, r4
 801162c:	4630      	mov	r0, r6
 801162e:	f000 fa05 	bl	8011a3c <__smakebuf_r>
 8011632:	89a0      	ldrh	r0, [r4, #12]
 8011634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011638:	f010 0301 	ands.w	r3, r0, #1
 801163c:	d00a      	beq.n	8011654 <__swsetup_r+0xbc>
 801163e:	2300      	movs	r3, #0
 8011640:	60a3      	str	r3, [r4, #8]
 8011642:	6963      	ldr	r3, [r4, #20]
 8011644:	425b      	negs	r3, r3
 8011646:	61a3      	str	r3, [r4, #24]
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	b943      	cbnz	r3, 801165e <__swsetup_r+0xc6>
 801164c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011650:	d1ba      	bne.n	80115c8 <__swsetup_r+0x30>
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	0781      	lsls	r1, r0, #30
 8011656:	bf58      	it	pl
 8011658:	6963      	ldrpl	r3, [r4, #20]
 801165a:	60a3      	str	r3, [r4, #8]
 801165c:	e7f4      	b.n	8011648 <__swsetup_r+0xb0>
 801165e:	2000      	movs	r0, #0
 8011660:	e7f7      	b.n	8011652 <__swsetup_r+0xba>
 8011662:	bf00      	nop
 8011664:	20013890 	.word	0x20013890
 8011668:	080120d4 	.word	0x080120d4
 801166c:	080120f4 	.word	0x080120f4
 8011670:	080120b4 	.word	0x080120b4

08011674 <abort>:
 8011674:	b508      	push	{r3, lr}
 8011676:	2006      	movs	r0, #6
 8011678:	f000 fa48 	bl	8011b0c <raise>
 801167c:	2001      	movs	r0, #1
 801167e:	f7f9 f87b 	bl	800a778 <_exit>
	...

08011684 <__sflush_r>:
 8011684:	898a      	ldrh	r2, [r1, #12]
 8011686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168a:	4605      	mov	r5, r0
 801168c:	0710      	lsls	r0, r2, #28
 801168e:	460c      	mov	r4, r1
 8011690:	d458      	bmi.n	8011744 <__sflush_r+0xc0>
 8011692:	684b      	ldr	r3, [r1, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc05      	bgt.n	80116a4 <__sflush_r+0x20>
 8011698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801169a:	2b00      	cmp	r3, #0
 801169c:	dc02      	bgt.n	80116a4 <__sflush_r+0x20>
 801169e:	2000      	movs	r0, #0
 80116a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116a6:	2e00      	cmp	r6, #0
 80116a8:	d0f9      	beq.n	801169e <__sflush_r+0x1a>
 80116aa:	2300      	movs	r3, #0
 80116ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116b0:	682f      	ldr	r7, [r5, #0]
 80116b2:	602b      	str	r3, [r5, #0]
 80116b4:	d032      	beq.n	801171c <__sflush_r+0x98>
 80116b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116b8:	89a3      	ldrh	r3, [r4, #12]
 80116ba:	075a      	lsls	r2, r3, #29
 80116bc:	d505      	bpl.n	80116ca <__sflush_r+0x46>
 80116be:	6863      	ldr	r3, [r4, #4]
 80116c0:	1ac0      	subs	r0, r0, r3
 80116c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116c4:	b10b      	cbz	r3, 80116ca <__sflush_r+0x46>
 80116c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116c8:	1ac0      	subs	r0, r0, r3
 80116ca:	2300      	movs	r3, #0
 80116cc:	4602      	mov	r2, r0
 80116ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116d0:	6a21      	ldr	r1, [r4, #32]
 80116d2:	4628      	mov	r0, r5
 80116d4:	47b0      	blx	r6
 80116d6:	1c43      	adds	r3, r0, #1
 80116d8:	89a3      	ldrh	r3, [r4, #12]
 80116da:	d106      	bne.n	80116ea <__sflush_r+0x66>
 80116dc:	6829      	ldr	r1, [r5, #0]
 80116de:	291d      	cmp	r1, #29
 80116e0:	d82c      	bhi.n	801173c <__sflush_r+0xb8>
 80116e2:	4a2a      	ldr	r2, [pc, #168]	; (801178c <__sflush_r+0x108>)
 80116e4:	40ca      	lsrs	r2, r1
 80116e6:	07d6      	lsls	r6, r2, #31
 80116e8:	d528      	bpl.n	801173c <__sflush_r+0xb8>
 80116ea:	2200      	movs	r2, #0
 80116ec:	6062      	str	r2, [r4, #4]
 80116ee:	04d9      	lsls	r1, r3, #19
 80116f0:	6922      	ldr	r2, [r4, #16]
 80116f2:	6022      	str	r2, [r4, #0]
 80116f4:	d504      	bpl.n	8011700 <__sflush_r+0x7c>
 80116f6:	1c42      	adds	r2, r0, #1
 80116f8:	d101      	bne.n	80116fe <__sflush_r+0x7a>
 80116fa:	682b      	ldr	r3, [r5, #0]
 80116fc:	b903      	cbnz	r3, 8011700 <__sflush_r+0x7c>
 80116fe:	6560      	str	r0, [r4, #84]	; 0x54
 8011700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011702:	602f      	str	r7, [r5, #0]
 8011704:	2900      	cmp	r1, #0
 8011706:	d0ca      	beq.n	801169e <__sflush_r+0x1a>
 8011708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801170c:	4299      	cmp	r1, r3
 801170e:	d002      	beq.n	8011716 <__sflush_r+0x92>
 8011710:	4628      	mov	r0, r5
 8011712:	f7fd fc07 	bl	800ef24 <_free_r>
 8011716:	2000      	movs	r0, #0
 8011718:	6360      	str	r0, [r4, #52]	; 0x34
 801171a:	e7c1      	b.n	80116a0 <__sflush_r+0x1c>
 801171c:	6a21      	ldr	r1, [r4, #32]
 801171e:	2301      	movs	r3, #1
 8011720:	4628      	mov	r0, r5
 8011722:	47b0      	blx	r6
 8011724:	1c41      	adds	r1, r0, #1
 8011726:	d1c7      	bne.n	80116b8 <__sflush_r+0x34>
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d0c4      	beq.n	80116b8 <__sflush_r+0x34>
 801172e:	2b1d      	cmp	r3, #29
 8011730:	d001      	beq.n	8011736 <__sflush_r+0xb2>
 8011732:	2b16      	cmp	r3, #22
 8011734:	d101      	bne.n	801173a <__sflush_r+0xb6>
 8011736:	602f      	str	r7, [r5, #0]
 8011738:	e7b1      	b.n	801169e <__sflush_r+0x1a>
 801173a:	89a3      	ldrh	r3, [r4, #12]
 801173c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	e7ad      	b.n	80116a0 <__sflush_r+0x1c>
 8011744:	690f      	ldr	r7, [r1, #16]
 8011746:	2f00      	cmp	r7, #0
 8011748:	d0a9      	beq.n	801169e <__sflush_r+0x1a>
 801174a:	0793      	lsls	r3, r2, #30
 801174c:	680e      	ldr	r6, [r1, #0]
 801174e:	bf08      	it	eq
 8011750:	694b      	ldreq	r3, [r1, #20]
 8011752:	600f      	str	r7, [r1, #0]
 8011754:	bf18      	it	ne
 8011756:	2300      	movne	r3, #0
 8011758:	eba6 0807 	sub.w	r8, r6, r7
 801175c:	608b      	str	r3, [r1, #8]
 801175e:	f1b8 0f00 	cmp.w	r8, #0
 8011762:	dd9c      	ble.n	801169e <__sflush_r+0x1a>
 8011764:	6a21      	ldr	r1, [r4, #32]
 8011766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011768:	4643      	mov	r3, r8
 801176a:	463a      	mov	r2, r7
 801176c:	4628      	mov	r0, r5
 801176e:	47b0      	blx	r6
 8011770:	2800      	cmp	r0, #0
 8011772:	dc06      	bgt.n	8011782 <__sflush_r+0xfe>
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177a:	81a3      	strh	r3, [r4, #12]
 801177c:	f04f 30ff 	mov.w	r0, #4294967295
 8011780:	e78e      	b.n	80116a0 <__sflush_r+0x1c>
 8011782:	4407      	add	r7, r0
 8011784:	eba8 0800 	sub.w	r8, r8, r0
 8011788:	e7e9      	b.n	801175e <__sflush_r+0xda>
 801178a:	bf00      	nop
 801178c:	20400001 	.word	0x20400001

08011790 <_fflush_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	690b      	ldr	r3, [r1, #16]
 8011794:	4605      	mov	r5, r0
 8011796:	460c      	mov	r4, r1
 8011798:	b913      	cbnz	r3, 80117a0 <_fflush_r+0x10>
 801179a:	2500      	movs	r5, #0
 801179c:	4628      	mov	r0, r5
 801179e:	bd38      	pop	{r3, r4, r5, pc}
 80117a0:	b118      	cbz	r0, 80117aa <_fflush_r+0x1a>
 80117a2:	6983      	ldr	r3, [r0, #24]
 80117a4:	b90b      	cbnz	r3, 80117aa <_fflush_r+0x1a>
 80117a6:	f000 f887 	bl	80118b8 <__sinit>
 80117aa:	4b14      	ldr	r3, [pc, #80]	; (80117fc <_fflush_r+0x6c>)
 80117ac:	429c      	cmp	r4, r3
 80117ae:	d11b      	bne.n	80117e8 <_fflush_r+0x58>
 80117b0:	686c      	ldr	r4, [r5, #4]
 80117b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d0ef      	beq.n	801179a <_fflush_r+0xa>
 80117ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117bc:	07d0      	lsls	r0, r2, #31
 80117be:	d404      	bmi.n	80117ca <_fflush_r+0x3a>
 80117c0:	0599      	lsls	r1, r3, #22
 80117c2:	d402      	bmi.n	80117ca <_fflush_r+0x3a>
 80117c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117c6:	f7ff fba6 	bl	8010f16 <__retarget_lock_acquire_recursive>
 80117ca:	4628      	mov	r0, r5
 80117cc:	4621      	mov	r1, r4
 80117ce:	f7ff ff59 	bl	8011684 <__sflush_r>
 80117d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117d4:	07da      	lsls	r2, r3, #31
 80117d6:	4605      	mov	r5, r0
 80117d8:	d4e0      	bmi.n	801179c <_fflush_r+0xc>
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	059b      	lsls	r3, r3, #22
 80117de:	d4dd      	bmi.n	801179c <_fflush_r+0xc>
 80117e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117e2:	f7ff fb99 	bl	8010f18 <__retarget_lock_release_recursive>
 80117e6:	e7d9      	b.n	801179c <_fflush_r+0xc>
 80117e8:	4b05      	ldr	r3, [pc, #20]	; (8011800 <_fflush_r+0x70>)
 80117ea:	429c      	cmp	r4, r3
 80117ec:	d101      	bne.n	80117f2 <_fflush_r+0x62>
 80117ee:	68ac      	ldr	r4, [r5, #8]
 80117f0:	e7df      	b.n	80117b2 <_fflush_r+0x22>
 80117f2:	4b04      	ldr	r3, [pc, #16]	; (8011804 <_fflush_r+0x74>)
 80117f4:	429c      	cmp	r4, r3
 80117f6:	bf08      	it	eq
 80117f8:	68ec      	ldreq	r4, [r5, #12]
 80117fa:	e7da      	b.n	80117b2 <_fflush_r+0x22>
 80117fc:	080120d4 	.word	0x080120d4
 8011800:	080120f4 	.word	0x080120f4
 8011804:	080120b4 	.word	0x080120b4

08011808 <std>:
 8011808:	2300      	movs	r3, #0
 801180a:	b510      	push	{r4, lr}
 801180c:	4604      	mov	r4, r0
 801180e:	e9c0 3300 	strd	r3, r3, [r0]
 8011812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011816:	6083      	str	r3, [r0, #8]
 8011818:	8181      	strh	r1, [r0, #12]
 801181a:	6643      	str	r3, [r0, #100]	; 0x64
 801181c:	81c2      	strh	r2, [r0, #14]
 801181e:	6183      	str	r3, [r0, #24]
 8011820:	4619      	mov	r1, r3
 8011822:	2208      	movs	r2, #8
 8011824:	305c      	adds	r0, #92	; 0x5c
 8011826:	f7fd fb75 	bl	800ef14 <memset>
 801182a:	4b05      	ldr	r3, [pc, #20]	; (8011840 <std+0x38>)
 801182c:	6263      	str	r3, [r4, #36]	; 0x24
 801182e:	4b05      	ldr	r3, [pc, #20]	; (8011844 <std+0x3c>)
 8011830:	62a3      	str	r3, [r4, #40]	; 0x28
 8011832:	4b05      	ldr	r3, [pc, #20]	; (8011848 <std+0x40>)
 8011834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011836:	4b05      	ldr	r3, [pc, #20]	; (801184c <std+0x44>)
 8011838:	6224      	str	r4, [r4, #32]
 801183a:	6323      	str	r3, [r4, #48]	; 0x30
 801183c:	bd10      	pop	{r4, pc}
 801183e:	bf00      	nop
 8011840:	08011b45 	.word	0x08011b45
 8011844:	08011b67 	.word	0x08011b67
 8011848:	08011b9f 	.word	0x08011b9f
 801184c:	08011bc3 	.word	0x08011bc3

08011850 <_cleanup_r>:
 8011850:	4901      	ldr	r1, [pc, #4]	; (8011858 <_cleanup_r+0x8>)
 8011852:	f000 b8af 	b.w	80119b4 <_fwalk_reent>
 8011856:	bf00      	nop
 8011858:	08011791 	.word	0x08011791

0801185c <__sfmoreglue>:
 801185c:	b570      	push	{r4, r5, r6, lr}
 801185e:	2268      	movs	r2, #104	; 0x68
 8011860:	1e4d      	subs	r5, r1, #1
 8011862:	4355      	muls	r5, r2
 8011864:	460e      	mov	r6, r1
 8011866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801186a:	f7fd fbc7 	bl	800effc <_malloc_r>
 801186e:	4604      	mov	r4, r0
 8011870:	b140      	cbz	r0, 8011884 <__sfmoreglue+0x28>
 8011872:	2100      	movs	r1, #0
 8011874:	e9c0 1600 	strd	r1, r6, [r0]
 8011878:	300c      	adds	r0, #12
 801187a:	60a0      	str	r0, [r4, #8]
 801187c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011880:	f7fd fb48 	bl	800ef14 <memset>
 8011884:	4620      	mov	r0, r4
 8011886:	bd70      	pop	{r4, r5, r6, pc}

08011888 <__sfp_lock_acquire>:
 8011888:	4801      	ldr	r0, [pc, #4]	; (8011890 <__sfp_lock_acquire+0x8>)
 801188a:	f7ff bb44 	b.w	8010f16 <__retarget_lock_acquire_recursive>
 801188e:	bf00      	nop
 8011890:	2001403d 	.word	0x2001403d

08011894 <__sfp_lock_release>:
 8011894:	4801      	ldr	r0, [pc, #4]	; (801189c <__sfp_lock_release+0x8>)
 8011896:	f7ff bb3f 	b.w	8010f18 <__retarget_lock_release_recursive>
 801189a:	bf00      	nop
 801189c:	2001403d 	.word	0x2001403d

080118a0 <__sinit_lock_acquire>:
 80118a0:	4801      	ldr	r0, [pc, #4]	; (80118a8 <__sinit_lock_acquire+0x8>)
 80118a2:	f7ff bb38 	b.w	8010f16 <__retarget_lock_acquire_recursive>
 80118a6:	bf00      	nop
 80118a8:	2001403e 	.word	0x2001403e

080118ac <__sinit_lock_release>:
 80118ac:	4801      	ldr	r0, [pc, #4]	; (80118b4 <__sinit_lock_release+0x8>)
 80118ae:	f7ff bb33 	b.w	8010f18 <__retarget_lock_release_recursive>
 80118b2:	bf00      	nop
 80118b4:	2001403e 	.word	0x2001403e

080118b8 <__sinit>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	4604      	mov	r4, r0
 80118bc:	f7ff fff0 	bl	80118a0 <__sinit_lock_acquire>
 80118c0:	69a3      	ldr	r3, [r4, #24]
 80118c2:	b11b      	cbz	r3, 80118cc <__sinit+0x14>
 80118c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c8:	f7ff bff0 	b.w	80118ac <__sinit_lock_release>
 80118cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118d0:	6523      	str	r3, [r4, #80]	; 0x50
 80118d2:	4b13      	ldr	r3, [pc, #76]	; (8011920 <__sinit+0x68>)
 80118d4:	4a13      	ldr	r2, [pc, #76]	; (8011924 <__sinit+0x6c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80118da:	42a3      	cmp	r3, r4
 80118dc:	bf04      	itt	eq
 80118de:	2301      	moveq	r3, #1
 80118e0:	61a3      	streq	r3, [r4, #24]
 80118e2:	4620      	mov	r0, r4
 80118e4:	f000 f820 	bl	8011928 <__sfp>
 80118e8:	6060      	str	r0, [r4, #4]
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 f81c 	bl	8011928 <__sfp>
 80118f0:	60a0      	str	r0, [r4, #8]
 80118f2:	4620      	mov	r0, r4
 80118f4:	f000 f818 	bl	8011928 <__sfp>
 80118f8:	2200      	movs	r2, #0
 80118fa:	60e0      	str	r0, [r4, #12]
 80118fc:	2104      	movs	r1, #4
 80118fe:	6860      	ldr	r0, [r4, #4]
 8011900:	f7ff ff82 	bl	8011808 <std>
 8011904:	68a0      	ldr	r0, [r4, #8]
 8011906:	2201      	movs	r2, #1
 8011908:	2109      	movs	r1, #9
 801190a:	f7ff ff7d 	bl	8011808 <std>
 801190e:	68e0      	ldr	r0, [r4, #12]
 8011910:	2202      	movs	r2, #2
 8011912:	2112      	movs	r1, #18
 8011914:	f7ff ff78 	bl	8011808 <std>
 8011918:	2301      	movs	r3, #1
 801191a:	61a3      	str	r3, [r4, #24]
 801191c:	e7d2      	b.n	80118c4 <__sinit+0xc>
 801191e:	bf00      	nop
 8011920:	08011ce4 	.word	0x08011ce4
 8011924:	08011851 	.word	0x08011851

08011928 <__sfp>:
 8011928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192a:	4607      	mov	r7, r0
 801192c:	f7ff ffac 	bl	8011888 <__sfp_lock_acquire>
 8011930:	4b1e      	ldr	r3, [pc, #120]	; (80119ac <__sfp+0x84>)
 8011932:	681e      	ldr	r6, [r3, #0]
 8011934:	69b3      	ldr	r3, [r6, #24]
 8011936:	b913      	cbnz	r3, 801193e <__sfp+0x16>
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff ffbd 	bl	80118b8 <__sinit>
 801193e:	3648      	adds	r6, #72	; 0x48
 8011940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011944:	3b01      	subs	r3, #1
 8011946:	d503      	bpl.n	8011950 <__sfp+0x28>
 8011948:	6833      	ldr	r3, [r6, #0]
 801194a:	b30b      	cbz	r3, 8011990 <__sfp+0x68>
 801194c:	6836      	ldr	r6, [r6, #0]
 801194e:	e7f7      	b.n	8011940 <__sfp+0x18>
 8011950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011954:	b9d5      	cbnz	r5, 801198c <__sfp+0x64>
 8011956:	4b16      	ldr	r3, [pc, #88]	; (80119b0 <__sfp+0x88>)
 8011958:	60e3      	str	r3, [r4, #12]
 801195a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801195e:	6665      	str	r5, [r4, #100]	; 0x64
 8011960:	f7ff fad8 	bl	8010f14 <__retarget_lock_init_recursive>
 8011964:	f7ff ff96 	bl	8011894 <__sfp_lock_release>
 8011968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801196c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011970:	6025      	str	r5, [r4, #0]
 8011972:	61a5      	str	r5, [r4, #24]
 8011974:	2208      	movs	r2, #8
 8011976:	4629      	mov	r1, r5
 8011978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801197c:	f7fd faca 	bl	800ef14 <memset>
 8011980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011988:	4620      	mov	r0, r4
 801198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801198c:	3468      	adds	r4, #104	; 0x68
 801198e:	e7d9      	b.n	8011944 <__sfp+0x1c>
 8011990:	2104      	movs	r1, #4
 8011992:	4638      	mov	r0, r7
 8011994:	f7ff ff62 	bl	801185c <__sfmoreglue>
 8011998:	4604      	mov	r4, r0
 801199a:	6030      	str	r0, [r6, #0]
 801199c:	2800      	cmp	r0, #0
 801199e:	d1d5      	bne.n	801194c <__sfp+0x24>
 80119a0:	f7ff ff78 	bl	8011894 <__sfp_lock_release>
 80119a4:	230c      	movs	r3, #12
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	e7ee      	b.n	8011988 <__sfp+0x60>
 80119aa:	bf00      	nop
 80119ac:	08011ce4 	.word	0x08011ce4
 80119b0:	ffff0001 	.word	0xffff0001

080119b4 <_fwalk_reent>:
 80119b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119b8:	4606      	mov	r6, r0
 80119ba:	4688      	mov	r8, r1
 80119bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119c0:	2700      	movs	r7, #0
 80119c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119c6:	f1b9 0901 	subs.w	r9, r9, #1
 80119ca:	d505      	bpl.n	80119d8 <_fwalk_reent+0x24>
 80119cc:	6824      	ldr	r4, [r4, #0]
 80119ce:	2c00      	cmp	r4, #0
 80119d0:	d1f7      	bne.n	80119c2 <_fwalk_reent+0xe>
 80119d2:	4638      	mov	r0, r7
 80119d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119d8:	89ab      	ldrh	r3, [r5, #12]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d907      	bls.n	80119ee <_fwalk_reent+0x3a>
 80119de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119e2:	3301      	adds	r3, #1
 80119e4:	d003      	beq.n	80119ee <_fwalk_reent+0x3a>
 80119e6:	4629      	mov	r1, r5
 80119e8:	4630      	mov	r0, r6
 80119ea:	47c0      	blx	r8
 80119ec:	4307      	orrs	r7, r0
 80119ee:	3568      	adds	r5, #104	; 0x68
 80119f0:	e7e9      	b.n	80119c6 <_fwalk_reent+0x12>

080119f2 <__swhatbuf_r>:
 80119f2:	b570      	push	{r4, r5, r6, lr}
 80119f4:	460e      	mov	r6, r1
 80119f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119fa:	2900      	cmp	r1, #0
 80119fc:	b096      	sub	sp, #88	; 0x58
 80119fe:	4614      	mov	r4, r2
 8011a00:	461d      	mov	r5, r3
 8011a02:	da08      	bge.n	8011a16 <__swhatbuf_r+0x24>
 8011a04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	602a      	str	r2, [r5, #0]
 8011a0c:	061a      	lsls	r2, r3, #24
 8011a0e:	d410      	bmi.n	8011a32 <__swhatbuf_r+0x40>
 8011a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a14:	e00e      	b.n	8011a34 <__swhatbuf_r+0x42>
 8011a16:	466a      	mov	r2, sp
 8011a18:	f000 f8fa 	bl	8011c10 <_fstat_r>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	dbf1      	blt.n	8011a04 <__swhatbuf_r+0x12>
 8011a20:	9a01      	ldr	r2, [sp, #4]
 8011a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011a2a:	425a      	negs	r2, r3
 8011a2c:	415a      	adcs	r2, r3
 8011a2e:	602a      	str	r2, [r5, #0]
 8011a30:	e7ee      	b.n	8011a10 <__swhatbuf_r+0x1e>
 8011a32:	2340      	movs	r3, #64	; 0x40
 8011a34:	2000      	movs	r0, #0
 8011a36:	6023      	str	r3, [r4, #0]
 8011a38:	b016      	add	sp, #88	; 0x58
 8011a3a:	bd70      	pop	{r4, r5, r6, pc}

08011a3c <__smakebuf_r>:
 8011a3c:	898b      	ldrh	r3, [r1, #12]
 8011a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a40:	079d      	lsls	r5, r3, #30
 8011a42:	4606      	mov	r6, r0
 8011a44:	460c      	mov	r4, r1
 8011a46:	d507      	bpl.n	8011a58 <__smakebuf_r+0x1c>
 8011a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a4c:	6023      	str	r3, [r4, #0]
 8011a4e:	6123      	str	r3, [r4, #16]
 8011a50:	2301      	movs	r3, #1
 8011a52:	6163      	str	r3, [r4, #20]
 8011a54:	b002      	add	sp, #8
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	ab01      	add	r3, sp, #4
 8011a5a:	466a      	mov	r2, sp
 8011a5c:	f7ff ffc9 	bl	80119f2 <__swhatbuf_r>
 8011a60:	9900      	ldr	r1, [sp, #0]
 8011a62:	4605      	mov	r5, r0
 8011a64:	4630      	mov	r0, r6
 8011a66:	f7fd fac9 	bl	800effc <_malloc_r>
 8011a6a:	b948      	cbnz	r0, 8011a80 <__smakebuf_r+0x44>
 8011a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a70:	059a      	lsls	r2, r3, #22
 8011a72:	d4ef      	bmi.n	8011a54 <__smakebuf_r+0x18>
 8011a74:	f023 0303 	bic.w	r3, r3, #3
 8011a78:	f043 0302 	orr.w	r3, r3, #2
 8011a7c:	81a3      	strh	r3, [r4, #12]
 8011a7e:	e7e3      	b.n	8011a48 <__smakebuf_r+0xc>
 8011a80:	4b0d      	ldr	r3, [pc, #52]	; (8011ab8 <__smakebuf_r+0x7c>)
 8011a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	6020      	str	r0, [r4, #0]
 8011a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a8c:	81a3      	strh	r3, [r4, #12]
 8011a8e:	9b00      	ldr	r3, [sp, #0]
 8011a90:	6163      	str	r3, [r4, #20]
 8011a92:	9b01      	ldr	r3, [sp, #4]
 8011a94:	6120      	str	r0, [r4, #16]
 8011a96:	b15b      	cbz	r3, 8011ab0 <__smakebuf_r+0x74>
 8011a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f000 f8c9 	bl	8011c34 <_isatty_r>
 8011aa2:	b128      	cbz	r0, 8011ab0 <__smakebuf_r+0x74>
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	f023 0303 	bic.w	r3, r3, #3
 8011aaa:	f043 0301 	orr.w	r3, r3, #1
 8011aae:	81a3      	strh	r3, [r4, #12]
 8011ab0:	89a0      	ldrh	r0, [r4, #12]
 8011ab2:	4305      	orrs	r5, r0
 8011ab4:	81a5      	strh	r5, [r4, #12]
 8011ab6:	e7cd      	b.n	8011a54 <__smakebuf_r+0x18>
 8011ab8:	08011851 	.word	0x08011851

08011abc <_raise_r>:
 8011abc:	291f      	cmp	r1, #31
 8011abe:	b538      	push	{r3, r4, r5, lr}
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	460d      	mov	r5, r1
 8011ac4:	d904      	bls.n	8011ad0 <_raise_r+0x14>
 8011ac6:	2316      	movs	r3, #22
 8011ac8:	6003      	str	r3, [r0, #0]
 8011aca:	f04f 30ff 	mov.w	r0, #4294967295
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ad2:	b112      	cbz	r2, 8011ada <_raise_r+0x1e>
 8011ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ad8:	b94b      	cbnz	r3, 8011aee <_raise_r+0x32>
 8011ada:	4620      	mov	r0, r4
 8011adc:	f000 f830 	bl	8011b40 <_getpid_r>
 8011ae0:	462a      	mov	r2, r5
 8011ae2:	4601      	mov	r1, r0
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aea:	f000 b817 	b.w	8011b1c <_kill_r>
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d00a      	beq.n	8011b08 <_raise_r+0x4c>
 8011af2:	1c59      	adds	r1, r3, #1
 8011af4:	d103      	bne.n	8011afe <_raise_r+0x42>
 8011af6:	2316      	movs	r3, #22
 8011af8:	6003      	str	r3, [r0, #0]
 8011afa:	2001      	movs	r0, #1
 8011afc:	e7e7      	b.n	8011ace <_raise_r+0x12>
 8011afe:	2400      	movs	r4, #0
 8011b00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b04:	4628      	mov	r0, r5
 8011b06:	4798      	blx	r3
 8011b08:	2000      	movs	r0, #0
 8011b0a:	e7e0      	b.n	8011ace <_raise_r+0x12>

08011b0c <raise>:
 8011b0c:	4b02      	ldr	r3, [pc, #8]	; (8011b18 <raise+0xc>)
 8011b0e:	4601      	mov	r1, r0
 8011b10:	6818      	ldr	r0, [r3, #0]
 8011b12:	f7ff bfd3 	b.w	8011abc <_raise_r>
 8011b16:	bf00      	nop
 8011b18:	20013890 	.word	0x20013890

08011b1c <_kill_r>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4d07      	ldr	r5, [pc, #28]	; (8011b3c <_kill_r+0x20>)
 8011b20:	2300      	movs	r3, #0
 8011b22:	4604      	mov	r4, r0
 8011b24:	4608      	mov	r0, r1
 8011b26:	4611      	mov	r1, r2
 8011b28:	602b      	str	r3, [r5, #0]
 8011b2a:	f7f8 fe15 	bl	800a758 <_kill>
 8011b2e:	1c43      	adds	r3, r0, #1
 8011b30:	d102      	bne.n	8011b38 <_kill_r+0x1c>
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	b103      	cbz	r3, 8011b38 <_kill_r+0x1c>
 8011b36:	6023      	str	r3, [r4, #0]
 8011b38:	bd38      	pop	{r3, r4, r5, pc}
 8011b3a:	bf00      	nop
 8011b3c:	20014038 	.word	0x20014038

08011b40 <_getpid_r>:
 8011b40:	f7f8 be02 	b.w	800a748 <_getpid>

08011b44 <__sread>:
 8011b44:	b510      	push	{r4, lr}
 8011b46:	460c      	mov	r4, r1
 8011b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b4c:	f000 f894 	bl	8011c78 <_read_r>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	bfab      	itete	ge
 8011b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b56:	89a3      	ldrhlt	r3, [r4, #12]
 8011b58:	181b      	addge	r3, r3, r0
 8011b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b5e:	bfac      	ite	ge
 8011b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b62:	81a3      	strhlt	r3, [r4, #12]
 8011b64:	bd10      	pop	{r4, pc}

08011b66 <__swrite>:
 8011b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6a:	461f      	mov	r7, r3
 8011b6c:	898b      	ldrh	r3, [r1, #12]
 8011b6e:	05db      	lsls	r3, r3, #23
 8011b70:	4605      	mov	r5, r0
 8011b72:	460c      	mov	r4, r1
 8011b74:	4616      	mov	r6, r2
 8011b76:	d505      	bpl.n	8011b84 <__swrite+0x1e>
 8011b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f000 f868 	bl	8011c54 <_lseek_r>
 8011b84:	89a3      	ldrh	r3, [r4, #12]
 8011b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b8e:	81a3      	strh	r3, [r4, #12]
 8011b90:	4632      	mov	r2, r6
 8011b92:	463b      	mov	r3, r7
 8011b94:	4628      	mov	r0, r5
 8011b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9a:	f000 b817 	b.w	8011bcc <_write_r>

08011b9e <__sseek>:
 8011b9e:	b510      	push	{r4, lr}
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ba6:	f000 f855 	bl	8011c54 <_lseek_r>
 8011baa:	1c43      	adds	r3, r0, #1
 8011bac:	89a3      	ldrh	r3, [r4, #12]
 8011bae:	bf15      	itete	ne
 8011bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bba:	81a3      	strheq	r3, [r4, #12]
 8011bbc:	bf18      	it	ne
 8011bbe:	81a3      	strhne	r3, [r4, #12]
 8011bc0:	bd10      	pop	{r4, pc}

08011bc2 <__sclose>:
 8011bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc6:	f000 b813 	b.w	8011bf0 <_close_r>
	...

08011bcc <_write_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d07      	ldr	r5, [pc, #28]	; (8011bec <_write_r+0x20>)
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	4608      	mov	r0, r1
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	602a      	str	r2, [r5, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	f7f8 fdf3 	bl	800a7c6 <_write>
 8011be0:	1c43      	adds	r3, r0, #1
 8011be2:	d102      	bne.n	8011bea <_write_r+0x1e>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	b103      	cbz	r3, 8011bea <_write_r+0x1e>
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd38      	pop	{r3, r4, r5, pc}
 8011bec:	20014038 	.word	0x20014038

08011bf0 <_close_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4d06      	ldr	r5, [pc, #24]	; (8011c0c <_close_r+0x1c>)
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	602b      	str	r3, [r5, #0]
 8011bfc:	f7f8 fdff 	bl	800a7fe <_close>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	d102      	bne.n	8011c0a <_close_r+0x1a>
 8011c04:	682b      	ldr	r3, [r5, #0]
 8011c06:	b103      	cbz	r3, 8011c0a <_close_r+0x1a>
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}
 8011c0c:	20014038 	.word	0x20014038

08011c10 <_fstat_r>:
 8011c10:	b538      	push	{r3, r4, r5, lr}
 8011c12:	4d07      	ldr	r5, [pc, #28]	; (8011c30 <_fstat_r+0x20>)
 8011c14:	2300      	movs	r3, #0
 8011c16:	4604      	mov	r4, r0
 8011c18:	4608      	mov	r0, r1
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	602b      	str	r3, [r5, #0]
 8011c1e:	f7f8 fdfa 	bl	800a816 <_fstat>
 8011c22:	1c43      	adds	r3, r0, #1
 8011c24:	d102      	bne.n	8011c2c <_fstat_r+0x1c>
 8011c26:	682b      	ldr	r3, [r5, #0]
 8011c28:	b103      	cbz	r3, 8011c2c <_fstat_r+0x1c>
 8011c2a:	6023      	str	r3, [r4, #0]
 8011c2c:	bd38      	pop	{r3, r4, r5, pc}
 8011c2e:	bf00      	nop
 8011c30:	20014038 	.word	0x20014038

08011c34 <_isatty_r>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4d06      	ldr	r5, [pc, #24]	; (8011c50 <_isatty_r+0x1c>)
 8011c38:	2300      	movs	r3, #0
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	4608      	mov	r0, r1
 8011c3e:	602b      	str	r3, [r5, #0]
 8011c40:	f7f8 fdf9 	bl	800a836 <_isatty>
 8011c44:	1c43      	adds	r3, r0, #1
 8011c46:	d102      	bne.n	8011c4e <_isatty_r+0x1a>
 8011c48:	682b      	ldr	r3, [r5, #0]
 8011c4a:	b103      	cbz	r3, 8011c4e <_isatty_r+0x1a>
 8011c4c:	6023      	str	r3, [r4, #0]
 8011c4e:	bd38      	pop	{r3, r4, r5, pc}
 8011c50:	20014038 	.word	0x20014038

08011c54 <_lseek_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d07      	ldr	r5, [pc, #28]	; (8011c74 <_lseek_r+0x20>)
 8011c58:	4604      	mov	r4, r0
 8011c5a:	4608      	mov	r0, r1
 8011c5c:	4611      	mov	r1, r2
 8011c5e:	2200      	movs	r2, #0
 8011c60:	602a      	str	r2, [r5, #0]
 8011c62:	461a      	mov	r2, r3
 8011c64:	f7f8 fdf2 	bl	800a84c <_lseek>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	d102      	bne.n	8011c72 <_lseek_r+0x1e>
 8011c6c:	682b      	ldr	r3, [r5, #0]
 8011c6e:	b103      	cbz	r3, 8011c72 <_lseek_r+0x1e>
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	bd38      	pop	{r3, r4, r5, pc}
 8011c74:	20014038 	.word	0x20014038

08011c78 <_read_r>:
 8011c78:	b538      	push	{r3, r4, r5, lr}
 8011c7a:	4d07      	ldr	r5, [pc, #28]	; (8011c98 <_read_r+0x20>)
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	4608      	mov	r0, r1
 8011c80:	4611      	mov	r1, r2
 8011c82:	2200      	movs	r2, #0
 8011c84:	602a      	str	r2, [r5, #0]
 8011c86:	461a      	mov	r2, r3
 8011c88:	f7f8 fd80 	bl	800a78c <_read>
 8011c8c:	1c43      	adds	r3, r0, #1
 8011c8e:	d102      	bne.n	8011c96 <_read_r+0x1e>
 8011c90:	682b      	ldr	r3, [r5, #0]
 8011c92:	b103      	cbz	r3, 8011c96 <_read_r+0x1e>
 8011c94:	6023      	str	r3, [r4, #0]
 8011c96:	bd38      	pop	{r3, r4, r5, pc}
 8011c98:	20014038 	.word	0x20014038

08011c9c <_init>:
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	bf00      	nop
 8011ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ca2:	bc08      	pop	{r3}
 8011ca4:	469e      	mov	lr, r3
 8011ca6:	4770      	bx	lr

08011ca8 <_fini>:
 8011ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011caa:	bf00      	nop
 8011cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cae:	bc08      	pop	{r3}
 8011cb0:	469e      	mov	lr, r3
 8011cb2:	4770      	bx	lr
