
USB_UP_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008470  08008470  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008478  08008478  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200000fc  0800857c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001588  0800857c  00021588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013830  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fd  00000000  00000000  0003395c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00036b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00037990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b29  00000000  00000000  00038678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001623e  00000000  00000000  000511a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890ae  00000000  00000000  000673df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f048d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  000f04e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080083f8 	.word	0x080083f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080083f8 	.word	0x080083f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_GPIO_Init+0xc4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <MX_GPIO_Init+0xc4>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xc4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_GPIO_Init+0xc4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a22      	ldr	r2, [pc, #136]	; (800059c <MX_GPIO_Init+0xc4>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_GPIO_Init+0xc4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_GPIO_Init+0xc4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a1b      	ldr	r2, [pc, #108]	; (800059c <MX_GPIO_Init+0xc4>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_GPIO_Init+0xc4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xc8>)
 800054a:	f000 fe5b 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4814      	ldr	r0, [pc, #80]	; (80005a4 <MX_GPIO_Init+0xcc>)
 8000554:	f000 fe56 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4619      	mov	r1, r3
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0xc8>)
 8000572:	f000 fcc3 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000576:	2310      	movs	r3, #16
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_GPIO_Init+0xcc>)
 800058e:	f000 fcb5 	bl	8000efc <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020000 	.word	0x40020000

080005a8 <HAL_UART_RxCpltCallback>:

uint8_t rx_data = 0;
uint8_t flag_reset_chip = 0;
uint8_t uart1_data = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART2 )
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_UART_RxCpltCallback+0x58>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d110      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x34>
	{
		if( rx_data >= 'A' && rx_data <= 'Z' )
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_UART_RxCpltCallback+0x5c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b40      	cmp	r3, #64	; 0x40
 80005c0:	d907      	bls.n	80005d2 <HAL_UART_RxCpltCallback+0x2a>
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HAL_UART_RxCpltCallback+0x5c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b5a      	cmp	r3, #90	; 0x5a
 80005c8:	d803      	bhi.n	80005d2 <HAL_UART_RxCpltCallback+0x2a>
			CDC_Transmit_FS((uint8_t*) &rx_data, 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <HAL_UART_RxCpltCallback+0x5c>)
 80005ce:	f007 fa95 	bl	8007afc <CDC_Transmit_FS>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	490b      	ldr	r1, [pc, #44]	; (8000604 <HAL_UART_RxCpltCallback+0x5c>)
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <HAL_UART_RxCpltCallback+0x60>)
 80005d8:	f002 fdfb 	bl	80031d2 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART1 )
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_UART_RxCpltCallback+0x64>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x50>
	{
		CDC_Transmit_FS((uint8_t*) &uart1_data, 1);
 80005e6:	2101      	movs	r1, #1
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_UART_RxCpltCallback+0x68>)
 80005ea:	f007 fa87 	bl	8007afc <CDC_Transmit_FS>
		HAL_UART_Receive_IT(&huart1, &uart1_data, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <HAL_UART_RxCpltCallback+0x68>)
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <HAL_UART_RxCpltCallback+0x6c>)
 80005f4:	f002 fded 	bl	80031d2 <HAL_UART_Receive_IT>
	}
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	20000118 	.word	0x20000118
 8000608:	20000160 	.word	0x20000160
 800060c:	40011000 	.word	0x40011000
 8000610:	2000011a 	.word	0x2000011a
 8000614:	2000011c 	.word	0x2000011c

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fa34 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f834 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f7ff ff58 	bl	80004d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000628:	f007 f982 	bl	8007930 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f94c 	bl	80008c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f920 	bl	8000874 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	490f      	ldr	r1, [pc, #60]	; (8000674 <main+0x5c>)
 8000638:	480f      	ldr	r0, [pc, #60]	; (8000678 <main+0x60>)
 800063a:	f002 fdca 	bl	80031d2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_data, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	490e      	ldr	r1, [pc, #56]	; (800067c <main+0x64>)
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0x68>)
 8000644:	f002 fdc5 	bl	80031d2 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if( flag_reset_chip )
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <main+0x6c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0fb      	beq.n	8000648 <main+0x30>
	{
		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0x70>)
 8000656:	f000 fdd5 	bl	8001204 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800065a:	2032      	movs	r0, #50	; 0x32
 800065c:	f000 fa86 	bl	8000b6c <HAL_Delay>
		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2110      	movs	r1, #16
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <main+0x70>)
 8000666:	f000 fdcd 	bl	8001204 <HAL_GPIO_WritePin>
		flag_reset_chip = 0;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0x6c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	if( flag_reset_chip )
 8000670:	e7ea      	b.n	8000648 <main+0x30>
 8000672:	bf00      	nop
 8000674:	20000118 	.word	0x20000118
 8000678:	20000160 	.word	0x20000160
 800067c:	2000011a 	.word	0x2000011a
 8000680:	2000011c 	.word	0x2000011c
 8000684:	20000119 	.word	0x20000119
 8000688:	40020000 	.word	0x40020000

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f007 fea4 	bl	80083e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <SystemClock_Config+0xd0>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xd0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xd4>)
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000700:	2319      	movs	r3, #25
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000704:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070a:	2304      	movs	r3, #4
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070e:	2307      	movs	r3, #7
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f824 	bl	8002764 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000722:	f000 f81f 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2102      	movs	r1, #2
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fa86 	bl	8002c54 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074e:	f000 f809 	bl	8000764 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f98e 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <USART1_IRQHandler+0x10>)
 800081a:	f002 fd0b 	bl	8003234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000011c 	.word	0x2000011c

08000828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <USART2_IRQHandler+0x10>)
 800082e:	f002 fd01 	bl	8003234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000160 	.word	0x20000160

0800083c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <OTG_FS_IRQHandler+0x10>)
 8000842:	f000 fe62 	bl	800150a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000e5c 	.word	0x20000e5c

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART1_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008ac:	f002 fbb2 	bl	8003014 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f7ff ff55 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000011c 	.word	0x2000011c
 80008c4:	40011000 	.word	0x40011000

080008c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_USART2_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 8000900:	f002 fb88 	bl	8003014 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f7ff ff2b 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000160 	.word	0x20000160
 8000918:	40004400 	.word	0x40004400

0800091c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <HAL_UART_MspInit+0x108>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d135      	bne.n	80009aa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000988:	2307      	movs	r3, #7
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4826      	ldr	r0, [pc, #152]	; (8000a2c <HAL_UART_MspInit+0x110>)
 8000994:	f000 fab2 	bl	8000efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2025      	movs	r0, #37	; 0x25
 800099e:	f000 f9e4 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a2:	2025      	movs	r0, #37	; 0x25
 80009a4:	f000 f9fd 	bl	8000da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a8:	e038      	b.n	8000a1c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_UART_MspInit+0x114>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d133      	bne.n	8000a1c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x10c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ec:	230c      	movs	r3, #12
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <HAL_UART_MspInit+0x110>)
 8000a08:	f000 fa78 	bl	8000efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2026      	movs	r0, #38	; 0x26
 8000a12:	f000 f9aa 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a16:	2026      	movs	r0, #38	; 0x26
 8000a18:	f000 f9c3 	bl	8000da2 <HAL_NVIC_EnableIRQ>
}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40004400 	.word	0x40004400

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5e:	f7ff fef7 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f007 fc9d 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fdd7 	bl	8000618 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a78:	08008480 	.word	0x08008480
  ldr r2, =_sbss
 8000a7c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a80:	20001588 	.word	0x20001588

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_Init+0x40>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_Init+0x40>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x40>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f94f 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe58 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f967 	bl	8000dbe <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f92f 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200001a4 	.word	0x200001a4

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200001a4 	.word	0x200001a4

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff3e 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff31 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff feb6 	bl	8000b54 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d008      	beq.n	8000e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e052      	b.n	8000eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0216 	bic.w	r2, r2, #22
 8000e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <HAL_DMA_Abort+0x62>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0208 	bic.w	r2, r2, #8
 8000e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e58:	e013      	b.n	8000e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e5a:	f7ff fe7b 	bl	8000b54 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d90c      	bls.n	8000e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e015      	b.n	8000eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e4      	bne.n	8000e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e94:	223f      	movs	r2, #63	; 0x3f
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d004      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e00c      	b.n	8000eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e159      	b.n	80011cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8148 	bne.w	80011c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a2 	beq.w	80011c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b57      	ldr	r3, [pc, #348]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x2ec>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x202>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2f4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1fe>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <HAL_GPIO_Init+0x2f8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1f6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_GPIO_Init+0x300>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1f2>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x204>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x2ec>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_GPIO_Init+0x304>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_GPIO_Init+0x304>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f aea2 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800126a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126c:	b08f      	sub	sp, #60	; 0x3c
 800126e:	af0a      	add	r7, sp, #40	; 0x28
 8001270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e10f      	b.n	800149c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f006 fd78 	bl	8007d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f837 	bl	800432e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	687e      	ldr	r6, [r7, #4]
 80012c8:	466d      	mov	r5, sp
 80012ca:	f106 0410 	add.w	r4, r6, #16
 80012ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012da:	e885 0003 	stmia.w	r5, {r0, r1}
 80012de:	1d33      	adds	r3, r6, #4
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f002 ff0e 	bl	8004104 <USB_CoreInit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0d0      	b.n	800149c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f003 f825 	bl	8004350 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e04a      	b.n	80013a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	333d      	adds	r3, #61	; 0x3d
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	333c      	adds	r3, #60	; 0x3c
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	b298      	uxth	r0, r3
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3344      	adds	r3, #68	; 0x44
 8001348:	4602      	mov	r2, r0
 800134a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3340      	adds	r3, #64	; 0x40
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3348      	adds	r3, #72	; 0x48
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334c      	adds	r3, #76	; 0x4c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3354      	adds	r3, #84	; 0x54
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3301      	adds	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3af      	bcc.n	800130c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e044      	b.n	800143c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3b5      	bcc.n	80013b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	687e      	ldr	r6, [r7, #4]
 800144e:	466d      	mov	r5, sp
 8001450:	f106 0410 	add.w	r4, r6, #16
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001460:	e885 0003 	stmia.w	r5, {r0, r1}
 8001464:	1d33      	adds	r3, r6, #4
 8001466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f002 ffbd 	bl	80043e8 <USB_DevInit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e00d      	b.n	800149c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f004 f90c 	bl	80056b2 <USB_DevDisconnect>

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_PCD_Start+0x1c>
 80014bc:	2302      	movs	r3, #2
 80014be:	e020      	b.n	8001502 <HAL_PCD_Start+0x5e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d109      	bne.n	80014e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d005      	beq.n	80014e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 ff0f 	bl	800430c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 f8bc 	bl	8005670 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800150a:	b590      	push	{r4, r7, lr}
 800150c:	b08d      	sub	sp, #52	; 0x34
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f004 f97a 	bl	800581a <USB_GetMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 848a 	bne.w	8001e42 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f8de 	bl	80056f4 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8480 	beq.w	8001e40 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f004 f8cb 	bl	80056f4 <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b02      	cmp	r3, #2
 8001566:	d107      	bne.n	8001578 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f002 0202 	and.w	r2, r2, #2
 8001576:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 f8b9 	bl	80056f4 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b10      	cmp	r3, #16
 800158a:	d161      	bne.n	8001650 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0210 	bic.w	r2, r2, #16
 800159a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f003 020f 	and.w	r2, r3, #15
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	0c5b      	lsrs	r3, r3, #17
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d124      	bne.n	8001612 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d035      	beq.n	8001640 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	6a38      	ldr	r0, [r7, #32]
 80015e8:	f003 fef0 	bl	80053cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f8:	441a      	add	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160a:	441a      	add	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	e016      	b.n	8001640 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	0c5b      	lsrs	r3, r3, #17
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	2b06      	cmp	r3, #6
 800161c:	d110      	bne.n	8001640 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001624:	2208      	movs	r2, #8
 8001626:	4619      	mov	r1, r3
 8001628:	6a38      	ldr	r0, [r7, #32]
 800162a:	f003 fecf 	bl	80053cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163a:	441a      	add	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0210 	orr.w	r2, r2, #16
 800164e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f004 f84d 	bl	80056f4 <USB_ReadInterrupts>
 800165a:	4603      	mov	r3, r0
 800165c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001660:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001664:	f040 80a7 	bne.w	80017b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f004 f852 	bl	800571a <USB_ReadDevAllOutEpInterrupt>
 8001676:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001678:	e099      	b.n	80017ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 808e 	beq.w	80017a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f876 	bl	8005782 <USB_ReadDevOutEPInterrupt>
 8001696:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ae:	461a      	mov	r2, r3
 80016b0:	2301      	movs	r3, #1
 80016b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fec2 	bl	8002440 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d2:	461a      	mov	r2, r3
 80016d4:	2308      	movs	r3, #8
 80016d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 ff98 	bl	8002610 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f6:	461a      	mov	r2, r3
 80016f8:	2310      	movs	r3, #16
 80016fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d030      	beq.n	8001768 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	d109      	bne.n	8001726 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	3304      	adds	r3, #4
 800173a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2200      	movs	r2, #0
 8001748:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f006 fc17 	bl	8007f84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001762:	461a      	mov	r2, r3
 8001764:	2302      	movs	r3, #2
 8001766:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177e:	461a      	mov	r2, r3
 8001780:	2320      	movs	r3, #32
 8001782:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	461a      	mov	r2, r3
 800179c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f47f af62 	bne.w	800167a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 ff9a 	bl	80056f4 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017ca:	f040 80db 	bne.w	8001984 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 ffbb 	bl	800574e <USB_ReadDevAllInEpInterrupt>
 80017d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017de:	e0cd      	b.n	800197c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80c2 	beq.w	8001970 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 ffe1 	bl	80057be <USB_ReadDevInEPInterrupt>
 80017fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d057      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	2201      	movs	r2, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	69f9      	ldr	r1, [r7, #28]
 8001824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001828:	4013      	ands	r3, r2
 800182a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001838:	461a      	mov	r2, r3
 800183a:	2301      	movs	r3, #1
 800183c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d132      	bne.n	80018ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	334c      	adds	r3, #76	; 0x4c
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4403      	add	r3, r0
 8001866:	3348      	adds	r3, #72	; 0x48
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4419      	add	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4403      	add	r3, r0
 800187a:	334c      	adds	r3, #76	; 0x4c
 800187c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	2b00      	cmp	r3, #0
 8001882:	d113      	bne.n	80018ac <HAL_PCD_IRQHandler+0x3a2>
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3354      	adds	r3, #84	; 0x54
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018a4:	461a      	mov	r2, r3
 80018a6:	2101      	movs	r1, #1
 80018a8:	f003 ffe8 	bl	800587c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 faeb 	bl	8007e8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	461a      	mov	r2, r3
 80018d0:	2308      	movs	r3, #8
 80018d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	461a      	mov	r2, r3
 80018ec:	2310      	movs	r3, #16
 80018ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	461a      	mov	r2, r3
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d023      	beq.n	800195e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001918:	6a38      	ldr	r0, [r7, #32]
 800191a:	f002 fec9 	bl	80046b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	3338      	adds	r3, #56	; 0x38
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	78db      	ldrb	r3, [r3, #3]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2200      	movs	r2, #0
 800193e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f006 fb2e 	bl	8007fa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001958:	461a      	mov	r2, r3
 800195a:	2302      	movs	r3, #2
 800195c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fcdb 	bl	8002326 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3301      	adds	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	f47f af2e 	bne.w	80017e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 feb3 	bl	80056f4 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001998:	d122      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019c0:	2100      	movs	r1, #0
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fec2 	bl	800274c <HAL_PCDEx_LPM_Callback>
 80019c8:	e002      	b.n	80019d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f006 facc 	bl	8007f68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fe85 	bl	80056f4 <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f4:	d112      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f006 fa88 	bl	8007f1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a1a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fe67 	bl	80056f4 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a30:	f040 80b7 	bne.w	8001ba2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fe2e 	bl	80046b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	e046      	b.n	8001ae8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a66:	461a      	mov	r2, r3
 8001a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab2:	0151      	lsls	r1, r2, #5
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	440a      	add	r2, r1
 8001ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001abc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad2:	0151      	lsls	r1, r2, #5
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	440a      	add	r2, r1
 8001ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3b3      	bcc.n	8001a5a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f043 030b 	orr.w	r3, r3, #11
 8001b22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b34:	f043 030b 	orr.w	r3, r3, #11
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	e015      	b.n	8001b68 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b62:	f043 030b 	orr.w	r3, r3, #11
 8001b66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f003 fe75 	bl	800587c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fda4 	bl	80056f4 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d124      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fe3a 	bl	8005836 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fdef 	bl	80047aa <USB_GetDevSpeed>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681c      	ldr	r4, [r3, #0]
 8001bd8:	f001 f9e8 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8001bdc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	4620      	mov	r0, r4
 8001be8:	f002 faee 	bl	80041c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f006 f976 	bl	8007ede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fd74 	bl	80056f4 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d10a      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f006 f953 	bl	8007ec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f002 0208 	and.w	r2, r2, #8
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fd5f 	bl	80056f4 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d122      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	e014      	b.n	8001c7c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fb27 	bl	80022c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3301      	adds	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3e5      	bcc.n	8001c52 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fd32 	bl	80056f4 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c9a:	d13b      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e02b      	b.n	8001cfa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3340      	adds	r3, #64	; 0x40
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d115      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da12      	bge.n	8001cf4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	333f      	adds	r3, #63	; 0x3f
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fae8 	bl	80022c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3ce      	bcc.n	8001ca2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fceb 	bl	80056f4 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d28:	d155      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	e045      	b.n	8001dbc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d12e      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da2b      	bge.n	8001db6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d121      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	6053      	str	r3, [r2, #4]
            break;
 8001db4:	e007      	b.n	8001dc6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	3301      	adds	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3b4      	bcc.n	8001d30 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fc8a 	bl	80056f4 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d10a      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f006 f8ed 	bl	8007fcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fc74 	bl	80056f4 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d115      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f006 f8dd 	bl	8007fe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	e000      	b.n	8001e42 <HAL_PCD_IRQHandler+0x938>
      return;
 8001e40:	bf00      	nop
    }
  }
}
 8001e42:	3734      	adds	r7, #52	; 0x34
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}

08001e48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_SetAddress+0x1a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e013      	b.n	8001e8a <HAL_PCD_SetAddress+0x42>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fbd2 	bl	8005624 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	4608      	mov	r0, r1
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	70fb      	strb	r3, [r7, #3]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	803b      	strh	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da0f      	bge.n	8001ed8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	3338      	adds	r3, #56	; 0x38
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	705a      	strb	r2, [r3, #1]
 8001ed6:	e00f      	b.n	8001ef8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f04:	883a      	ldrh	r2, [r7, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	78ba      	ldrb	r2, [r7, #2]
 8001f0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f22:	78bb      	ldrb	r3, [r7, #2]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d102      	bne.n	8001f2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_EP_Open+0xaa>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e00e      	b.n	8001f5a <HAL_PCD_EP_Open+0xc8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fc52 	bl	80047f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f58:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da0f      	bge.n	8001f96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	705a      	strb	r2, [r3, #1]
 8001f94:	e00f      	b.n	8001fb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_EP_Close+0x6e>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e00e      	b.n	8001fee <HAL_PCD_EP_Close+0x8c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fc90 	bl	8004904 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	460b      	mov	r3, r1
 8002004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 020f 	and.w	r2, r3, #15
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	b2da      	uxtb	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	f002 ff6f 	bl	8004f4c <USB_EP0StartXfer>
 800206e:	e008      	b.n	8002082 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	f002 fd1d 	bl	8004abc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3338      	adds	r3, #56	; 0x38
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2201      	movs	r2, #1
 80020fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	b2da      	uxtb	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	f002 ff0d 	bl	8004f4c <USB_EP0StartXfer>
 8002132:	e008      	b.n	8002146 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	f002 fcbb 	bl	8004abc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d901      	bls.n	800216e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e050      	b.n	8002210 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800216e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0f      	bge.n	8002196 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3338      	adds	r3, #56	; 0x38
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00d      	b.n	80021b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_PCD_EP_SetStall+0x82>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e01e      	b.n	8002210 <HAL_PCD_EP_SetStall+0xc0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 f94b 	bl	800547c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	b2d9      	uxtb	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002200:	461a      	mov	r2, r3
 8002202:	f003 fb3b 	bl	800587c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d901      	bls.n	8002236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e042      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0f      	bge.n	800225e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00f      	b.n	800227e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x86>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f953 	bl	8005558 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0c      	bge.n	80022f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e00c      	b.n	800230c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 020f 	and.w	r2, r3, #15
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 ff72 	bl	80051fc <USB_EPStopXfer>
 8002318:	4603      	mov	r3, r0
 800231a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800231c:	7afb      	ldrb	r3, [r7, #11]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b08a      	sub	sp, #40	; 0x28
 800232a:	af02      	add	r7, sp, #8
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3338      	adds	r3, #56	; 0x38
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	429a      	cmp	r2, r3
 8002358:	d901      	bls.n	800235e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06c      	b.n	8002438 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	d902      	bls.n	800237a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3303      	adds	r3, #3
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002382:	e02b      	b.n	80023dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	429a      	cmp	r2, r3
 8002398:	d902      	bls.n	80023a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3303      	adds	r3, #3
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f002 ffc6 	bl	8005350 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	441a      	add	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d809      	bhi.n	8002406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d203      	bcs.n	8002406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1be      	bne.n	8002384 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	429a      	cmp	r2, r3
 8002410:	d811      	bhi.n	8002436 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	2201      	movs	r2, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	43db      	mvns	r3, r3
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002432:	4013      	ands	r3, r2
 8002434:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	333c      	adds	r3, #60	; 0x3c
 8002458:	3304      	adds	r3, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d17b      	bne.n	800256e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	4a61      	ldr	r2, [pc, #388]	; (8002608 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	f240 80b9 	bls.w	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b3 	beq.w	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a2:	461a      	mov	r2, r3
 80024a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a8:	6093      	str	r3, [r2, #8]
 80024aa:	e0a7      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2320      	movs	r3, #32
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	e098      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 8093 	bne.w	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d90f      	bls.n	80024fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fa:	6093      	str	r3, [r2, #8]
 80024fc:	e07e      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	3304      	adds	r3, #4
 8002512:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	0159      	lsls	r1, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	440b      	add	r3, r1
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d114      	bne.n	8002560 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f003 f996 	bl	800587c <USB_EP0_OutStart>
 8002550:	e006      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	441a      	add	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 fc76 	bl	8007e58 <HAL_PCD_DataOutStageCallback>
 800256c:	e046      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d124      	bne.n	80025c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	461a      	mov	r2, r3
 800258e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002592:	6093      	str	r3, [r2, #8]
 8002594:	e032      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	2320      	movs	r3, #32
 80025b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f005 fc4d 	bl	8007e58 <HAL_PCD_DataOutStageCallback>
 80025be:	e01d      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d114      	bne.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e8:	461a      	mov	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f003 f946 	bl	800587c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 fc2e 	bl	8007e58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	4f54300a 	.word	0x4f54300a
 800260c:	4f54310a 	.word	0x4f54310a

08002610 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	333c      	adds	r3, #60	; 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <PCD_EP_OutSetupPacket_int+0x88>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d90e      	bls.n	8002664 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f005 fbe5 	bl	8007e34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <PCD_EP_OutSetupPacket_int+0x88>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d90c      	bls.n	800268c <PCD_EP_OutSetupPacket_int+0x7c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002684:	461a      	mov	r2, r3
 8002686:	2101      	movs	r1, #1
 8002688:	f003 f8f8 	bl	800587c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	4f54300a 	.word	0x4f54300a

0800269c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
 80026a8:	4613      	mov	r3, r2
 80026aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026ba:	883b      	ldrh	r3, [r7, #0]
 80026bc:	0419      	lsls	r1, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
 80026c8:	e028      	b.n	800271c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e00d      	b.n	80026fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	3340      	adds	r3, #64	; 0x40
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	4413      	add	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	3b01      	subs	r3, #1
 8002700:	429a      	cmp	r2, r3
 8002702:	d3ec      	bcc.n	80026de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002704:	883b      	ldrh	r3, [r7, #0]
 8002706:	0418      	lsls	r0, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	3b01      	subs	r3, #1
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	4302      	orrs	r2, r0
 8002714:	3340      	adds	r3, #64	; 0x40
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e267      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e242      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x74>
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6c      	ldr	r2, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a68      	ldr	r2, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe f99a 	bl	8000b54 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe f996 	bl	8000b54 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e207      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xc0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe f986 	bl	8000b54 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe f982 	bl	8000b54 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1f3      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1c7      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe f93b 	bl	8000b54 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe f937 	bl	8000b54 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1a8      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4925      	ldr	r1, [pc, #148]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe f91a 	bl	8000b54 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe f916 	bl	8000b54 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e187      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d036      	beq.n	80029bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe f8fa 	bl	8000b54 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe f8f6 	bl	8000b54 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e167      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x200>
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe f8e3 	bl	8000b54 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe f8df 	bl	8000b54 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e150      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	42470000 	.word	0x42470000
 80029ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8097 	beq.w	8002af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a73      	ldr	r2, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe f89f 	bl	8000b54 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe f89b 	bl	8000b54 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e10c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2ea>
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x30c>
 8002a56:	4b5f      	ldr	r3, [pc, #380]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe f860 	bl	8000b54 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe f85c 	bl	8000b54 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0cb      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe f84a 	bl	8000b54 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe f846 	bl	8000b54 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0b5      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a38      	ldr	r2, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a1 	beq.w	8002c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d05c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d141      	bne.n	8002b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f81a 	bl	8000b54 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe f816 	bl	8000b54 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e087      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fd ffef 	bl	8000b54 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fd ffeb 	bl	8000b54 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e05c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x416>
 8002b98:	e054      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ffd8 	bl	8000b54 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fd ffd4 	bl	8000b54 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e045      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e038      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4ec>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d028      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d121      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d11a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cc      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d90c      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e067      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fd ff06 	bl	8000b54 <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7fd ff02 	bl	8000b54 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e04f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d20c      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fe66 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08008458 	.word	0x08008458
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b090      	sub	sp, #64	; 0x40
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e30:	2300      	movs	r3, #0
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80a1 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e09b      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e58:	e09b      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e5e:	e098      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	627a      	str	r2, [r7, #36]	; 0x24
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e8c:	fb03 f201 	mul.w	r2, r3, r1
 8002e90:	2300      	movs	r3, #0
 8002e92:	fb00 f303 	mul.w	r3, r0, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea6:	4413      	add	r3, r2
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	2200      	movs	r2, #0
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	61fa      	str	r2, [r7, #28]
 8002eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eba:	f7fd f98b 	bl	80001d4 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec6:	e053      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	617a      	str	r2, [r7, #20]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eda:	f04f 0b00 	mov.w	fp, #0
 8002ede:	4652      	mov	r2, sl
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	f04f 0000 	mov.w	r0, #0
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	0159      	lsls	r1, r3, #5
 8002eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef0:	0150      	lsls	r0, r2, #5
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8002efa:	eb63 090b 	sbc.w	r9, r3, fp
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f12:	ebb2 0408 	subs.w	r4, r2, r8
 8002f16:	eb63 0509 	sbc.w	r5, r3, r9
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	00eb      	lsls	r3, r5, #3
 8002f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f28:	00e2      	lsls	r2, r4, #3
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	eb14 030a 	adds.w	r3, r4, sl
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	eb45 030b 	adc.w	r3, r5, fp
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	60fa      	str	r2, [r7, #12]
 8002f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f64:	f7fd f936 	bl	80001d4 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3740      	adds	r7, #64	; 0x40
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	017d7840 	.word	0x017d7840

08002fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc8:	f7ff fff0 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08008468 	.word	0x08008468

08002fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff0:	f7ff ffdc 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0b5b      	lsrs	r3, r3, #13
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	08008468 	.word	0x08008468

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e03f      	b.n	80030a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fc6e 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fddf 	bl	8003c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b08a      	sub	sp, #40	; 0x28
 80030b2:	af02      	add	r7, sp, #8
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d17c      	bne.n	80031c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_UART_Transmit+0x2c>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e075      	b.n	80031ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Transmit+0x3e>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e06e      	b.n	80031ca <HAL_UART_Transmit+0x11c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	; 0x21
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fd fd27 	bl	8000b54 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x82>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003140:	e02a      	b.n	8003198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fb1f 	bl	8003790 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e036      	b.n	80031ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3302      	adds	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e007      	b.n	800318a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cf      	bne.n	8003142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 faef 	bl	8003790 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e006      	b.n	80031ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d11d      	bne.n	8003228 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_UART_Receive_IT+0x26>
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e016      	b.n	800322a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_UART_Receive_IT+0x38>
 8003206:	2302      	movs	r3, #2
 8003208:	e00f      	b.n	800322a <HAL_UART_Receive_IT+0x58>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	461a      	mov	r2, r3
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fb24 	bl	800386c <UART_Start_Receive_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	e000      	b.n	800322a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b0ba      	sub	sp, #232	; 0xe8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_UART_IRQHandler+0x66>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fc07 	bl	8003aa6 <UART_Receive_IT>
      return;
 8003298:	e256      	b.n	8003748 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800329a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80de 	beq.w	8003460 <HAL_UART_IRQHandler+0x22c>
 80032a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80d1 	beq.w	8003460 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_UART_IRQHandler+0xae>
 80032ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_UART_IRQHandler+0xd2>
 80032ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f043 0202 	orr.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_UART_IRQHandler+0xf6>
 8003312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d011      	beq.n	800335a <HAL_UART_IRQHandler+0x126>
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0208 	orr.w	r2, r3, #8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 81ed 	beq.w	800373e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_UART_IRQHandler+0x14e>
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fb92 	bl	8003aa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_UART_IRQHandler+0x17a>
 80033a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04f      	beq.n	800344e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa9a 	bl	80038e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d141      	bne.n	8003446 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3314      	adds	r3, #20
 80033c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1d9      	bne.n	80033c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	2b00      	cmp	r3, #0
 8003414:	d013      	beq.n	800343e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_UART_IRQHandler+0x3dc>)
 800341c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fd47 	bl	8000eb6 <HAL_DMA_Abort_IT>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003438:	4610      	mov	r0, r2
 800343a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e00e      	b.n	800345c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f990 	bl	8003764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	e00a      	b.n	800345c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f98c 	bl	8003764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	e006      	b.n	800345c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f988 	bl	8003764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800345a:	e170      	b.n	800373e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	bf00      	nop
    return;
 800345e:	e16e      	b.n	800373e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 814a 	bne.w	80036fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8143 	beq.w	80036fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 813c 	beq.w	80036fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	f040 80b4 	bne.w	8003614 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8140 	beq.w	8003742 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ca:	429a      	cmp	r2, r3
 80034cc:	f080 8139 	bcs.w	8003742 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	f000 8088 	beq.w	80035f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800351e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800352a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1d9      	bne.n	80034e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003556:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800355a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800355e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e1      	bne.n	8003532 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e3      	bne.n	800356e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	f023 0310 	bic.w	r3, r3, #16
 80035ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e3      	bne.n	80035b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fbf0 	bl	8000dd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8b6 	bl	8003778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800360c:	e099      	b.n	8003742 <HAL_UART_IRQHandler+0x50e>
 800360e:	bf00      	nop
 8003610:	080039af 	.word	0x080039af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 808b 	beq.w	8003746 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8086 	beq.w	8003746 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800365e:	647a      	str	r2, [r7, #68]	; 0x44
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e3      	bne.n	800363a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	623b      	str	r3, [r7, #32]
   return(result);
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003696:	633a      	str	r2, [r7, #48]	; 0x30
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800369c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e3      	bne.n	80036b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f83e 	bl	8003778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036fc:	e023      	b.n	8003746 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0x4ea>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f95d 	bl	80039d6 <UART_Transmit_IT>
    return;
 800371c:	e014      	b.n	8003748 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <HAL_UART_IRQHandler+0x514>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f99d 	bl	8003a76 <UART_EndTransmit_IT>
    return;
 800373c:	e004      	b.n	8003748 <HAL_UART_IRQHandler+0x514>
    return;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <HAL_UART_IRQHandler+0x514>
      return;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <HAL_UART_IRQHandler+0x514>
      return;
 8003746:	bf00      	nop
  }
}
 8003748:	37e8      	adds	r7, #232	; 0xe8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop

08003750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b090      	sub	sp, #64	; 0x40
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a0:	e050      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d04c      	beq.n	8003844 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b0:	f7fd f9d0 	bl	8000b54 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037bc:	429a      	cmp	r2, r3
 80037be:	d241      	bcs.n	8003844 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e0:	637a      	str	r2, [r7, #52]	; 0x34
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	613b      	str	r3, [r7, #16]
   return(result);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003814:	623a      	str	r2, [r7, #32]
 8003816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	61bb      	str	r3, [r7, #24]
   return(result);
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e00f      	b.n	8003864 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d09f      	beq.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3740      	adds	r7, #64	; 0x40
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2222      	movs	r2, #34	; 0x22
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0220 	orr.w	r2, r2, #32
 80038d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b095      	sub	sp, #84	; 0x54
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003910:	643a      	str	r2, [r7, #64]	; 0x40
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	61fb      	str	r3, [r7, #28]
   return(result);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	2b01      	cmp	r3, #1
 800395e:	d119      	bne.n	8003994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003980:	61ba      	str	r2, [r7, #24]
 8003982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6979      	ldr	r1, [r7, #20]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	613b      	str	r3, [r7, #16]
   return(result);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039a2:	bf00      	nop
 80039a4:	3754      	adds	r7, #84	; 0x54
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fecb 	bl	8003764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d13e      	bne.n	8003a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d114      	bne.n	8003a1e <UART_Transmit_IT+0x48>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d110      	bne.n	8003a1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	621a      	str	r2, [r3, #32]
 8003a1c:	e008      	b.n	8003a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	1c59      	adds	r1, r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6211      	str	r1, [r2, #32]
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10f      	bne.n	8003a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fe5a 	bl	8003750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08c      	sub	sp, #48	; 0x30
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b22      	cmp	r3, #34	; 0x22
 8003ab8:	f040 80ab 	bne.w	8003c12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d117      	bne.n	8003af6 <UART_Receive_IT+0x50>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d113      	bne.n	8003af6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
 8003af4:	e026      	b.n	8003b44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d007      	beq.n	8003b1a <UART_Receive_IT+0x74>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <UART_Receive_IT+0x82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e008      	b.n	8003b3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4619      	mov	r1, r3
 8003b52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d15a      	bne.n	8003c0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0220 	bic.w	r2, r2, #32
 8003b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d135      	bne.n	8003c04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f023 0310 	bic.w	r3, r3, #16
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	623a      	str	r2, [r7, #32]
 8003bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	69f9      	ldr	r1, [r7, #28]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d10a      	bne.n	8003bf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fdbb 	bl	8003778 <HAL_UARTEx_RxEventCallback>
 8003c02:	e002      	b.n	8003c0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fc fccf 	bl	80005a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e002      	b.n	8003c14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3730      	adds	r7, #48	; 0x30
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b0c0      	sub	sp, #256	; 0x100
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	68d9      	ldr	r1, [r3, #12]
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	ea40 0301 	orr.w	r3, r0, r1
 8003c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c74:	f021 010c 	bic.w	r1, r1, #12
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c82:	430b      	orrs	r3, r1
 8003c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	6999      	ldr	r1, [r3, #24]
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	ea40 0301 	orr.w	r3, r0, r1
 8003ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8f      	ldr	r3, [pc, #572]	; (8003ee8 <UART_SetConfig+0x2cc>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d005      	beq.n	8003cbc <UART_SetConfig+0xa0>
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	; (8003eec <UART_SetConfig+0x2d0>)
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d104      	bne.n	8003cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7ff f996 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 8003cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cc4:	e003      	b.n	8003cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f7ff f97d 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8003cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd8:	f040 810c 	bne.w	8003ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cfe:	4621      	mov	r1, r4
 8003d00:	eb12 0801 	adds.w	r8, r2, r1
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb43 0901 	adc.w	r9, r3, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1e:	4690      	mov	r8, r2
 8003d20:	4699      	mov	r9, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	eb18 0303 	adds.w	r3, r8, r3
 8003d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	eb49 0303 	adc.w	r3, r9, r3
 8003d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	18db      	adds	r3, r3, r3
 8003d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d50:	4613      	mov	r3, r2
 8003d52:	eb42 0303 	adc.w	r3, r2, r3
 8003d56:	657b      	str	r3, [r7, #84]	; 0x54
 8003d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d60:	f7fc fa38 	bl	80001d4 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	011c      	lsls	r4, r3, #4
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d94:	4641      	mov	r1, r8
 8003d96:	eb12 0a01 	adds.w	sl, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db4:	4692      	mov	sl, r2
 8003db6:	469b      	mov	fp, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	eb1a 0303 	adds.w	r3, sl, r3
 8003dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003de0:	460b      	mov	r3, r1
 8003de2:	18db      	adds	r3, r3, r3
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
 8003de6:	4613      	mov	r3, r2
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
 8003dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003df6:	f7fc f9ed 	bl	80001d4 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003e02:	fba3 2301 	umull	r2, r3, r3, r1
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2264      	movs	r2, #100	; 0x64
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	1acb      	subs	r3, r1, r3
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003e18:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e24:	441c      	add	r4, r3
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e40:	415b      	adcs	r3, r3
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e48:	4641      	mov	r1, r8
 8003e4a:	1851      	adds	r1, r2, r1
 8003e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4e:	4649      	mov	r1, r9
 8003e50:	414b      	adcs	r3, r1
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e60:	4659      	mov	r1, fp
 8003e62:	00cb      	lsls	r3, r1, #3
 8003e64:	4651      	mov	r1, sl
 8003e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	00ca      	lsls	r2, r1, #3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	4642      	mov	r2, r8
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	460a      	mov	r2, r1
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	18db      	adds	r3, r3, r3
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eb2:	f7fc f98f 	bl	80001d4 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 0207 	and.w	r2, r3, #7
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4422      	add	r2, r4
 8003ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee4:	e105      	b.n	80040f2 <UART_SetConfig+0x4d6>
 8003ee6:	bf00      	nop
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40011400 	.word	0x40011400
 8003ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f06:	4642      	mov	r2, r8
 8003f08:	464b      	mov	r3, r9
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	6239      	str	r1, [r7, #32]
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f16:	4641      	mov	r1, r8
 8003f18:	1854      	adds	r4, r2, r1
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	eb43 0501 	adc.w	r5, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	00eb      	lsls	r3, r5, #3
 8003f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2e:	00e2      	lsls	r2, r4, #3
 8003f30:	4614      	mov	r4, r2
 8003f32:	461d      	mov	r5, r3
 8003f34:	4643      	mov	r3, r8
 8003f36:	18e3      	adds	r3, r4, r3
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	eb45 0303 	adc.w	r3, r5, r3
 8003f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f62:	4629      	mov	r1, r5
 8003f64:	008b      	lsls	r3, r1, #2
 8003f66:	4621      	mov	r1, r4
 8003f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	008a      	lsls	r2, r1, #2
 8003f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f74:	f7fc f92e 	bl	80001d4 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4b60      	ldr	r3, [pc, #384]	; (8004100 <UART_SetConfig+0x4e4>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011c      	lsls	r4, r3, #4
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	61b9      	str	r1, [r7, #24]
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6139      	str	r1, [r7, #16]
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fdc:	464b      	mov	r3, r9
 8003fde:	460a      	mov	r2, r1
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004000:	4649      	mov	r1, r9
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	4641      	mov	r1, r8
 8004006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400a:	4641      	mov	r1, r8
 800400c:	008a      	lsls	r2, r1, #2
 800400e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004012:	f7fc f8df 	bl	80001d4 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <UART_SetConfig+0x4e4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a34      	ldr	r2, [pc, #208]	; (8004100 <UART_SetConfig+0x4e4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403a:	441c      	add	r4, r3
 800403c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004040:	2200      	movs	r2, #0
 8004042:	673b      	str	r3, [r7, #112]	; 0x70
 8004044:	677a      	str	r2, [r7, #116]	; 0x74
 8004046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800404a:	4642      	mov	r2, r8
 800404c:	464b      	mov	r3, r9
 800404e:	1891      	adds	r1, r2, r2
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	415b      	adcs	r3, r3
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800405a:	4641      	mov	r1, r8
 800405c:	1851      	adds	r1, r2, r1
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	4649      	mov	r1, r9
 8004062:	414b      	adcs	r3, r1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004072:	4659      	mov	r1, fp
 8004074:	00cb      	lsls	r3, r1, #3
 8004076:	4651      	mov	r1, sl
 8004078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407c:	4651      	mov	r1, sl
 800407e:	00ca      	lsls	r2, r1, #3
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	4603      	mov	r3, r0
 8004086:	4642      	mov	r2, r8
 8004088:	189b      	adds	r3, r3, r2
 800408a:	66bb      	str	r3, [r7, #104]	; 0x68
 800408c:	464b      	mov	r3, r9
 800408e:	460a      	mov	r2, r1
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	663b      	str	r3, [r7, #96]	; 0x60
 80040a0:	667a      	str	r2, [r7, #100]	; 0x64
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040ae:	4649      	mov	r1, r9
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	4641      	mov	r1, r8
 80040b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b8:	4641      	mov	r1, r8
 80040ba:	008a      	lsls	r2, r1, #2
 80040bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040c0:	f7fc f888 	bl	80001d4 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <UART_SetConfig+0x4e4>)
 80040ca:	fba3 1302 	umull	r1, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2164      	movs	r1, #100	; 0x64
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <UART_SetConfig+0x4e4>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4422      	add	r2, r4
 80040f0:	609a      	str	r2, [r3, #8]
}
 80040f2:	bf00      	nop
 80040f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	51eb851f 	.word	0x51eb851f

08004104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004104:	b084      	sub	sp, #16
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	f107 001c 	add.w	r0, r7, #28
 8004112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	d122      	bne.n	8004162 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f001 fbee 	bl	8005938 <USB_CoreReset>
 800415c:	4603      	mov	r3, r0
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e01a      	b.n	8004198 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fbe2 	bl	8005938 <USB_CoreReset>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
 800418a:	e005      	b.n	8004198 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10b      	bne.n	80041b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f043 0206 	orr.w	r2, r3, #6
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c2:	b004      	add	sp, #16
 80041c4:	4770      	bx	lr
	...

080041c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d165      	bne.n	80042a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a41      	ldr	r2, [pc, #260]	; (80042e4 <USB_SetTurnaroundTime+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d906      	bls.n	80041f2 <USB_SetTurnaroundTime+0x2a>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <USB_SetTurnaroundTime+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d202      	bcs.n	80041f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041ec:	230f      	movs	r3, #15
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e062      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <USB_SetTurnaroundTime+0x120>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d306      	bcc.n	8004208 <USB_SetTurnaroundTime+0x40>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a3b      	ldr	r2, [pc, #236]	; (80042ec <USB_SetTurnaroundTime+0x124>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d202      	bcs.n	8004208 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004202:	230e      	movs	r3, #14
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e057      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a38      	ldr	r2, [pc, #224]	; (80042ec <USB_SetTurnaroundTime+0x124>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d306      	bcc.n	800421e <USB_SetTurnaroundTime+0x56>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <USB_SetTurnaroundTime+0x128>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d202      	bcs.n	800421e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004218:	230d      	movs	r3, #13
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e04c      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <USB_SetTurnaroundTime+0x128>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d306      	bcc.n	8004234 <USB_SetTurnaroundTime+0x6c>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <USB_SetTurnaroundTime+0x12c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d802      	bhi.n	8004234 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800422e:	230c      	movs	r3, #12
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e041      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <USB_SetTurnaroundTime+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d906      	bls.n	800424a <USB_SetTurnaroundTime+0x82>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a2e      	ldr	r2, [pc, #184]	; (80042f8 <USB_SetTurnaroundTime+0x130>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d802      	bhi.n	800424a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004244:	230b      	movs	r3, #11
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e036      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <USB_SetTurnaroundTime+0x130>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d906      	bls.n	8004260 <USB_SetTurnaroundTime+0x98>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <USB_SetTurnaroundTime+0x134>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800425a:	230a      	movs	r3, #10
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e02b      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <USB_SetTurnaroundTime+0x134>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d906      	bls.n	8004276 <USB_SetTurnaroundTime+0xae>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a25      	ldr	r2, [pc, #148]	; (8004300 <USB_SetTurnaroundTime+0x138>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d202      	bcs.n	8004276 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004270:	2309      	movs	r3, #9
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e020      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <USB_SetTurnaroundTime+0x138>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d306      	bcc.n	800428c <USB_SetTurnaroundTime+0xc4>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <USB_SetTurnaroundTime+0x13c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d802      	bhi.n	800428c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004286:	2308      	movs	r3, #8
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e015      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <USB_SetTurnaroundTime+0x13c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d906      	bls.n	80042a2 <USB_SetTurnaroundTime+0xda>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <USB_SetTurnaroundTime+0x140>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d202      	bcs.n	80042a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800429c:	2307      	movs	r3, #7
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e00a      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042a2:	2306      	movs	r3, #6
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e007      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042ae:	2309      	movs	r3, #9
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e001      	b.n	80042b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042b4:	2309      	movs	r3, #9
 80042b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	00d8acbf 	.word	0x00d8acbf
 80042e8:	00e4e1c0 	.word	0x00e4e1c0
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	01067380 	.word	0x01067380
 80042f4:	011a499f 	.word	0x011a499f
 80042f8:	01312cff 	.word	0x01312cff
 80042fc:	014ca43f 	.word	0x014ca43f
 8004300:	016e3600 	.word	0x016e3600
 8004304:	01a6ab1f 	.word	0x01a6ab1f
 8004308:	01e84800 	.word	0x01e84800

0800430c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d115      	bne.n	800439e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800437e:	2001      	movs	r0, #1
 8004380:	f7fc fbf4 	bl	8000b6c <HAL_Delay>
      ms++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 fa45 	bl	800581a <USB_GetMode>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d01e      	beq.n	80043d4 <USB_SetCurrentMode+0x84>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b31      	cmp	r3, #49	; 0x31
 800439a:	d9f0      	bls.n	800437e <USB_SetCurrentMode+0x2e>
 800439c:	e01a      	b.n	80043d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d115      	bne.n	80043d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043b0:	2001      	movs	r0, #1
 80043b2:	f7fc fbdb 	bl	8000b6c <HAL_Delay>
      ms++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3301      	adds	r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 fa2c 	bl	800581a <USB_GetMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <USB_SetCurrentMode+0x84>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b31      	cmp	r3, #49	; 0x31
 80043cc:	d9f0      	bls.n	80043b0 <USB_SetCurrentMode+0x60>
 80043ce:	e001      	b.n	80043d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e005      	b.n	80043e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b32      	cmp	r3, #50	; 0x32
 80043d8:	d101      	bne.n	80043de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043e8:	b084      	sub	sp, #16
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e009      	b.n	800441c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3340      	adds	r3, #64	; 0x40
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	2200      	movs	r2, #0
 8004414:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	3301      	adds	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b0e      	cmp	r3, #14
 8004420:	d9f2      	bls.n	8004408 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11c      	bne.n	8004462 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004436:	f043 0302 	orr.w	r3, r3, #2
 800443a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
 8004460:	e00b      	b.n	800447a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004480:	461a      	mov	r2, r3
 8004482:	2300      	movs	r3, #0
 8004484:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	4619      	mov	r1, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	461a      	mov	r2, r3
 8004496:	680b      	ldr	r3, [r1, #0]
 8004498:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10c      	bne.n	80044ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f965 	bl	8004778 <USB_SetDevSpeed>
 80044ae:	e008      	b.n	80044c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f960 	bl	8004778 <USB_SetDevSpeed>
 80044b8:	e003      	b.n	80044c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044ba:	2103      	movs	r1, #3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f95b 	bl	8004778 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044c2:	2110      	movs	r1, #16
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8f3 	bl	80046b0 <USB_FlushTxFifo>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f91f 	bl	8004718 <USB_FlushRxFifo>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	461a      	mov	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e043      	b.n	8004596 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004524:	d118      	bne.n	8004558 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e013      	b.n	800456a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e008      	b.n	800456a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	461a      	mov	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	461a      	mov	r2, r3
 800458a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800458e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3301      	adds	r3, #1
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3b7      	bcc.n	800450e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e043      	b.n	800462c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ba:	d118      	bne.n	80045ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e013      	b.n	8004600 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e008      	b.n	8004600 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3301      	adds	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3b7      	bcc.n	80045a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004646:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f043 0210 	orr.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <USB_DevInit+0x2c4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f043 0208 	orr.w	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a8:	b004      	add	sp, #16
 80046aa:	4770      	bx	lr
 80046ac:	803c3800 	.word	0x803c3800

080046b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <USB_FlushTxFifo+0x64>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e01b      	b.n	8004708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	daf2      	bge.n	80046be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	019b      	lsls	r3, r3, #6
 80046e0:	f043 0220 	orr.w	r2, r3, #32
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <USB_FlushTxFifo+0x64>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e006      	b.n	8004708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d0f0      	beq.n	80046e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	00030d40 	.word	0x00030d40

08004718 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <USB_FlushRxFifo+0x5c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e018      	b.n	8004768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	daf2      	bge.n	8004724 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2210      	movs	r2, #16
 8004746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <USB_FlushRxFifo+0x5c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e006      	b.n	8004768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b10      	cmp	r3, #16
 8004764:	d0f0      	beq.n	8004748 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	00030d40 	.word	0x00030d40

08004778 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
 80047ce:	e00a      	b.n	80047e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d002      	beq.n	80047dc <USB_GetDevSpeed+0x32>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b06      	cmp	r3, #6
 80047da:	d102      	bne.n	80047e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047dc:	2302      	movs	r3, #2
 80047de:	75fb      	strb	r3, [r7, #23]
 80047e0:	e001      	b.n	80047e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047e2:	230f      	movs	r3, #15
 80047e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d13a      	bne.n	8004886 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	2101      	movs	r1, #1
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	b29b      	uxth	r3, r3
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482e:	4313      	orrs	r3, r2
 8004830:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d155      	bne.n	80048f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	791b      	ldrb	r3, [r3, #4]
 8004862:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004864:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	059b      	lsls	r3, r3, #22
 800486a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800486c:	4313      	orrs	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e036      	b.n	80048f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	2101      	movs	r1, #1
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	68f9      	ldr	r1, [r7, #12]
 80048a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11a      	bne.n	80048f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	791b      	ldrb	r3, [r3, #4]
 80048d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048da:	430b      	orrs	r3, r1
 80048dc:	4313      	orrs	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d161      	bne.n	80049e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004936:	d11f      	bne.n	8004978 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004956:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004976:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	b29b      	uxth	r3, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004998:	4013      	ands	r3, r2
 800499a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049bc:	4013      	ands	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	4619      	mov	r1, r3
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <USB_DeactivateEndpoint+0x1b0>)
 80049de:	4013      	ands	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
 80049e2:	e060      	b.n	8004aa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fa:	d11f      	bne.n	8004a3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	43db      	mvns	r3, r3
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a80:	4013      	ands	r3, r2
 8004a82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	0159      	lsls	r1, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	440b      	add	r3, r1
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <USB_DeactivateEndpoint+0x1b4>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	ec337800 	.word	0xec337800
 8004ab8:	eff37800 	.word	0xeff37800

08004abc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	f040 815c 	bne.w	8004d96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d132      	bne.n	8004b4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b44:	0cdb      	lsrs	r3, r3, #19
 8004b46:	04db      	lsls	r3, r3, #19
 8004b48:	6113      	str	r3, [r2, #16]
 8004b4a:	e074      	b.n	8004c36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	0cdb      	lsrs	r3, r3, #19
 8004b68:	04db      	lsls	r3, r3, #19
 8004b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	440b      	add	r3, r1
 8004ba8:	1e59      	subs	r1, r3, #1
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bb4:	4b9d      	ldr	r3, [pc, #628]	; (8004e2c <USB_EPStartXfer+0x370>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	0148      	lsls	r0, r1, #5
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bde:	69b9      	ldr	r1, [r7, #24]
 8004be0:	0148      	lsls	r0, r1, #5
 8004be2:	69f9      	ldr	r1, [r7, #28]
 8004be4:	4401      	add	r1, r0
 8004be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d11f      	bne.n	8004c36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d14b      	bne.n	8004cd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d128      	bne.n	8004cb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d110      	bne.n	8004c92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e00f      	b.n	8004cb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e133      	b.n	8004f3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d015      	beq.n	8004d28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 811b 	beq.w	8004f3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d22:	4313      	orrs	r3, r2
 8004d24:	634b      	str	r3, [r1, #52]	; 0x34
 8004d26:	e109      	b.n	8004f3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d110      	bne.n	8004d5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e00f      	b.n	8004d7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6919      	ldr	r1, [r3, #16]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	b298      	uxth	r0, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fade 	bl	8005350 <USB_WritePacket>
 8004d94:	e0d2      	b.n	8004f3c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	0cdb      	lsrs	r3, r3, #19
 8004db2:	04db      	lsls	r3, r3, #19
 8004db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d126      	bne.n	8004e30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	0148      	lsls	r0, r1, #5
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	4401      	add	r1, r0
 8004e00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e26:	6113      	str	r3, [r2, #16]
 8004e28:	e03a      	b.n	8004ea0 <USB_EPStartXfer+0x3e4>
 8004e2a:	bf00      	nop
 8004e2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	1e5a      	subs	r2, r3, #1
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	8afa      	ldrh	r2, [r7, #22]
 8004e4c:	fb03 f202 	mul.w	r2, r3, r2
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	04d9      	lsls	r1, r3, #19
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <USB_EPStartXfer+0x48c>)
 8004e68:	400b      	ands	r3, r1
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	0148      	lsls	r0, r1, #5
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	4401      	add	r1, r0
 8004e72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e76:	4313      	orrs	r3, r2
 8004e78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	0148      	lsls	r0, r1, #5
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	4401      	add	r1, r0
 8004e98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10d      	bne.n	8004ec2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6919      	ldr	r1, [r3, #16]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d128      	bne.n	8004f1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d110      	bne.n	8004efc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e00f      	b.n	8004f1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	1ff80000 	.word	0x1ff80000

08004f4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f040 80ce 	bne.w	800510a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d132      	bne.n	8004fdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd4:	0cdb      	lsrs	r3, r3, #19
 8004fd6:	04db      	lsls	r3, r3, #19
 8004fd8:	6113      	str	r3, [r2, #16]
 8004fda:	e04e      	b.n	800507a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	0cdb      	lsrs	r3, r3, #19
 8004ff8:	04db      	lsls	r3, r3, #19
 8004ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800501a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800501e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d903      	bls.n	8005034 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	0148      	lsls	r0, r1, #5
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	4401      	add	r1, r0
 8005072:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11e      	bne.n	80050be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e097      	b.n	80051ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8083 	beq.w	80051ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4313      	orrs	r3, r2
 8005106:	634b      	str	r3, [r1, #52]	; 0x34
 8005108:	e071      	b.n	80051ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	0cdb      	lsrs	r3, r3, #19
 8005126:	04db      	lsls	r3, r3, #19
 8005128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800514c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519c:	6939      	ldr	r1, [r7, #16]
 800519e:	0148      	lsls	r0, r1, #5
 80051a0:	6979      	ldr	r1, [r7, #20]
 80051a2:	4401      	add	r1, r0
 80051a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10d      	bne.n	80051ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6919      	ldr	r1, [r3, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	460a      	mov	r2, r1
 80051cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d14a      	bne.n	80052b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005232:	f040 8086 	bne.w	8005342 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005258:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800527c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f242 7210 	movw	r2, #10000	; 0x2710
 800528a:	4293      	cmp	r3, r2
 800528c:	d902      	bls.n	8005294 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
          break;
 8005292:	e056      	b.n	8005342 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ac:	d0e7      	beq.n	800527e <USB_EPStopXfer+0x82>
 80052ae:	e048      	b.n	8005342 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c8:	d13b      	bne.n	8005342 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f242 7210 	movw	r2, #10000	; 0x2710
 800531e:	4293      	cmp	r3, r2
 8005320:	d902      	bls.n	8005328 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
          break;
 8005326:	e00c      	b.n	8005342 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800533c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005340:	d0e7      	beq.n	8005312 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	; 0x24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4611      	mov	r1, r2
 800535c:	461a      	mov	r2, r3
 800535e:	460b      	mov	r3, r1
 8005360:	71fb      	strb	r3, [r7, #7]
 8005362:	4613      	mov	r3, r2
 8005364:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800536e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d123      	bne.n	80053be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005376:	88bb      	ldrh	r3, [r7, #4]
 8005378:	3303      	adds	r3, #3
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e018      	b.n	80053b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	031a      	lsls	r2, r3, #12
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005390:	461a      	mov	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3301      	adds	r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3e2      	bcc.n	8005384 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3724      	adds	r7, #36	; 0x24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b08b      	sub	sp, #44	; 0x2c
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	e014      	b.n	8005422 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	601a      	str	r2, [r3, #0]
    pDest++;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	3301      	adds	r3, #1
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	3301      	adds	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	3301      	adds	r3, #1
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	6a3a      	ldr	r2, [r7, #32]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	d3e6      	bcc.n	80053f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800542a:	8bfb      	ldrh	r3, [r7, #30]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01e      	beq.n	800546e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543a:	461a      	mov	r2, r3
 800543c:	f107 0310 	add.w	r3, r7, #16
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
 8005450:	b2da      	uxtb	r2, r3
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	701a      	strb	r2, [r3, #0]
      i++;
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	3301      	adds	r3, #1
 800545a:	623b      	str	r3, [r7, #32]
      pDest++;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	3b01      	subs	r3, #1
 8005466:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005468:	8bfb      	ldrh	r3, [r7, #30]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ea      	bne.n	8005444 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005470:	4618      	mov	r0, r3
 8005472:	372c      	adds	r7, #44	; 0x2c
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d12c      	bne.n	80054f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db12      	blt.n	80054d0 <USB_EPSetStall+0x54>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00f      	beq.n	80054d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e02b      	b.n	800554a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	db12      	blt.n	800552a <USB_EPSetStall+0xae>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00f      	beq.n	800552a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005528:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005548:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d128      	bne.n	80055c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005592:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d003      	beq.n	80055a4 <USB_EPClearStall+0x4c>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d138      	bne.n	8005616 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e027      	b.n	8005616 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	791b      	ldrb	r3, [r3, #4]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d003      	beq.n	80055f6 <USB_EPClearStall+0x9e>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	791b      	ldrb	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d10f      	bne.n	8005616 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005642:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005646:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005658:	68f9      	ldr	r1, [r7, #12]
 800565a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f023 0302 	bic.w	r3, r3, #2
 80056a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4013      	ands	r3, r2
 800573c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	0c1b      	lsrs	r3, r3, #16
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	b29b      	uxth	r3, r3
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057b0:	68bb      	ldr	r3, [r7, #8]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057be:	b480      	push	{r7}
 80057c0:	b087      	sub	sp, #28
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	01db      	lsls	r3, r3, #7
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4013      	ands	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800580c:	68bb      	ldr	r3, [r7, #8]
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0301 	and.w	r3, r3, #1
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005854:	f023 0307 	bic.w	r3, r3, #7
 8005858:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	460b      	mov	r3, r1
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	333c      	adds	r3, #60	; 0x3c
 8005892:	3304      	adds	r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4a26      	ldr	r2, [pc, #152]	; (8005934 <USB_EP0_OutStart+0xb8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d90a      	bls.n	80058b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b0:	d101      	bne.n	80058b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e037      	b.n	8005926 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e4:	f043 0318 	orr.w	r3, r3, #24
 80058e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10f      	bne.n	8005924 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005922:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	4f54300a 	.word	0x4f54300a

08005938 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <USB_CoreReset+0x64>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e01b      	b.n	800598e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	daf2      	bge.n	8005944 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f043 0201 	orr.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <USB_CoreReset+0x64>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d0f0      	beq.n	800596e <USB_CoreReset+0x36>

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	00030d40 	.word	0x00030d40

080059a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059b0:	f002 fcb2 	bl	8008318 <USBD_static_malloc>
 80059b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	32b0      	adds	r2, #176	; 0xb0
 80059c6:	2100      	movs	r1, #0
 80059c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80059cc:	2302      	movs	r3, #2
 80059ce:	e0d4      	b.n	8005b7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80059d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80059d4:	2100      	movs	r1, #0
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f002 fd06 	bl	80083e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32b0      	adds	r2, #176	; 0xb0
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	32b0      	adds	r2, #176	; 0xb0
 80059f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	7c1b      	ldrb	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d138      	bne.n	8005a7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a08:	4b5e      	ldr	r3, [pc, #376]	; (8005b84 <USBD_CDC_Init+0x1e4>)
 8005a0a:	7819      	ldrb	r1, [r3, #0]
 8005a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a10:	2202      	movs	r2, #2
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f002 fb5d 	bl	80080d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a18:	4b5a      	ldr	r3, [pc, #360]	; (8005b84 <USBD_CDC_Init+0x1e4>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	2201      	movs	r2, #1
 8005a30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a32:	4b55      	ldr	r3, [pc, #340]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f002 fb48 	bl	80080d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a42:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a5e:	4b4b      	ldr	r3, [pc, #300]	; (8005b8c <USBD_CDC_Init+0x1ec>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f003 020f 	and.w	r2, r3, #15
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	3326      	adds	r3, #38	; 0x26
 8005a74:	2210      	movs	r2, #16
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e035      	b.n	8005ae6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a7a:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <USBD_CDC_Init+0x1e4>)
 8005a7c:	7819      	ldrb	r1, [r3, #0]
 8005a7e:	2340      	movs	r3, #64	; 0x40
 8005a80:	2202      	movs	r2, #2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f002 fb25 	bl	80080d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a88:	4b3e      	ldr	r3, [pc, #248]	; (8005b84 <USBD_CDC_Init+0x1e4>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3324      	adds	r3, #36	; 0x24
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005aa2:	4b39      	ldr	r3, [pc, #228]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005aa4:	7819      	ldrb	r1, [r3, #0]
 8005aa6:	2340      	movs	r3, #64	; 0x40
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f002 fb11 	bl	80080d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ab0:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ac8:	2201      	movs	r2, #1
 8005aca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <USBD_CDC_Init+0x1ec>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3326      	adds	r3, #38	; 0x26
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <USBD_CDC_Init+0x1ec>)
 8005ae8:	7819      	ldrb	r1, [r3, #0]
 8005aea:	2308      	movs	r3, #8
 8005aec:	2203      	movs	r2, #3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f002 faef 	bl	80080d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <USBD_CDC_Init+0x1ec>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 020f 	and.w	r2, r3, #15
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3324      	adds	r3, #36	; 0x24
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	33b0      	adds	r3, #176	; 0xb0
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e018      	b.n	8005b7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	7c1b      	ldrb	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 fba6 	bl	80082b0 <USBD_LL_PrepareReceive>
 8005b64:	e008      	b.n	8005b78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <USBD_CDC_Init+0x1e8>)
 8005b68:	7819      	ldrb	r1, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f002 fb9c 	bl	80082b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000093 	.word	0x20000093
 8005b88:	20000094 	.word	0x20000094
 8005b8c:	20000095 	.word	0x20000095

08005b90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b9c:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <USBD_CDC_DeInit+0xf8>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 fabb 	bl	800811e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ba8:	4b37      	ldr	r3, [pc, #220]	; (8005c88 <USBD_CDC_DeInit+0xf8>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3324      	adds	r3, #36	; 0x24
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bc2:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <USBD_CDC_DeInit+0xfc>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 faa8 	bl	800811e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <USBD_CDC_DeInit+0xfc>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005be6:	2200      	movs	r2, #0
 8005be8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005bea:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <USBD_CDC_DeInit+0x100>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f002 fa94 	bl	800811e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <USBD_CDC_DeInit+0x100>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	3324      	adds	r3, #36	; 0x24
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c10:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <USBD_CDC_DeInit+0x100>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3326      	adds	r3, #38	; 0x26
 8005c26:	2200      	movs	r2, #0
 8005c28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	32b0      	adds	r2, #176	; 0xb0
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01f      	beq.n	8005c7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	33b0      	adds	r3, #176	; 0xb0
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	32b0      	adds	r2, #176	; 0xb0
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 fb68 	bl	8008334 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	32b0      	adds	r2, #176	; 0xb0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000093 	.word	0x20000093
 8005c8c:	20000094 	.word	0x20000094
 8005c90:	20000095 	.word	0x20000095

08005c94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	32b0      	adds	r2, #176	; 0xb0
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0bf      	b.n	8005e44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d050      	beq.n	8005d72 <USBD_CDC_Setup+0xde>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 80af 	bne.w	8005e34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	88db      	ldrh	r3, [r3, #6]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03a      	beq.n	8005d54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da1b      	bge.n	8005d20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	33b0      	adds	r3, #176	; 0xb0
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005cfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	88d2      	ldrh	r2, [r2, #6]
 8005d04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	88db      	ldrh	r3, [r3, #6]
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	bf28      	it	cs
 8005d0e:	2307      	movcs	r3, #7
 8005d10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	89fa      	ldrh	r2, [r7, #14]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fd89 	bl	8007830 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d1e:	e090      	b.n	8005e42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	785a      	ldrb	r2, [r3, #1]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	2b3f      	cmp	r3, #63	; 0x3f
 8005d30:	d803      	bhi.n	8005d3a <USBD_CDC_Setup+0xa6>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	88db      	ldrh	r3, [r3, #6]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	e000      	b.n	8005d3c <USBD_CDC_Setup+0xa8>
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d42:	6939      	ldr	r1, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 fd9b 	bl	8007888 <USBD_CtlPrepareRx>
      break;
 8005d52:	e076      	b.n	8005e42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	33b0      	adds	r3, #176	; 0xb0
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	7850      	ldrb	r0, [r2, #1]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	4798      	blx	r3
      break;
 8005d70:	e067      	b.n	8005e42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b0b      	cmp	r3, #11
 8005d78:	d851      	bhi.n	8005e1e <USBD_CDC_Setup+0x18a>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <USBD_CDC_Setup+0xec>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005db1 	.word	0x08005db1
 8005d84:	08005e2d 	.word	0x08005e2d
 8005d88:	08005e1f 	.word	0x08005e1f
 8005d8c:	08005e1f 	.word	0x08005e1f
 8005d90:	08005e1f 	.word	0x08005e1f
 8005d94:	08005e1f 	.word	0x08005e1f
 8005d98:	08005e1f 	.word	0x08005e1f
 8005d9c:	08005e1f 	.word	0x08005e1f
 8005da0:	08005e1f 	.word	0x08005e1f
 8005da4:	08005e1f 	.word	0x08005e1f
 8005da8:	08005ddb 	.word	0x08005ddb
 8005dac:	08005e05 	.word	0x08005e05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d107      	bne.n	8005dcc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dbc:	f107 030a 	add.w	r3, r7, #10
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fd33 	bl	8007830 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dca:	e032      	b.n	8005e32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fcbd 	bl	800774e <USBD_CtlError>
            ret = USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd8:	e02b      	b.n	8005e32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d107      	bne.n	8005df6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005de6:	f107 030d 	add.w	r3, r7, #13
 8005dea:	2201      	movs	r2, #1
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fd1e 	bl	8007830 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005df4:	e01d      	b.n	8005e32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 fca8 	bl	800774e <USBD_CtlError>
            ret = USBD_FAIL;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
          break;
 8005e02:	e016      	b.n	8005e32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d00f      	beq.n	8005e30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 fc9b 	bl	800774e <USBD_CtlError>
            ret = USBD_FAIL;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e1c:	e008      	b.n	8005e30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fc94 	bl	800774e <USBD_CtlError>
          ret = USBD_FAIL;
 8005e26:	2303      	movs	r3, #3
 8005e28:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2a:	e002      	b.n	8005e32 <USBD_CDC_Setup+0x19e>
          break;
 8005e2c:	bf00      	nop
 8005e2e:	e008      	b.n	8005e42 <USBD_CDC_Setup+0x1ae>
          break;
 8005e30:	bf00      	nop
      }
      break;
 8005e32:	e006      	b.n	8005e42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fc89 	bl	800774e <USBD_CtlError>
      ret = USBD_FAIL;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32b0      	adds	r2, #176	; 0xb0
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e065      	b.n	8005f42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	32b0      	adds	r2, #176	; 0xb0
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3318      	adds	r3, #24
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02f      	beq.n	8005f00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 010f 	and.w	r1, r3, #15
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	440b      	add	r3, r1
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4403      	add	r3, r0
 8005ec8:	3348      	adds	r3, #72	; 0x48
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d112      	bne.n	8005f00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3318      	adds	r3, #24
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ef2:	78f9      	ldrb	r1, [r7, #3]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f002 f9b8 	bl	800826e <USBD_LL_Transmit>
 8005efe:	e01f      	b.n	8005f40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	33b0      	adds	r3, #176	; 0xb0
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d010      	beq.n	8005f40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	33b0      	adds	r3, #176	; 0xb0
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32b0      	adds	r2, #176	; 0xb0
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	32b0      	adds	r2, #176	; 0xb0
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e01a      	b.n	8005fb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f002 f9b6 	bl	80082f2 <USBD_LL_GetRxDataSize>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	33b0      	adds	r3, #176	; 0xb0
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fac:	4611      	mov	r1, r2
 8005fae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	; 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e025      	b.n	8006028 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	33b0      	adds	r3, #176	; 0xb0
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <USBD_CDC_EP0_RxReady+0x6c>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
 8005ff8:	d015      	beq.n	8006026 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	33b0      	adds	r3, #176	; 0xb0
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006012:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800601a:	b292      	uxth	r2, r2
 800601c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006038:	2182      	movs	r1, #130	; 0x82
 800603a:	4818      	ldr	r0, [pc, #96]	; (800609c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800603c:	f000 fd4f 	bl	8006ade <USBD_GetEpDesc>
 8006040:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006042:	2101      	movs	r1, #1
 8006044:	4815      	ldr	r0, [pc, #84]	; (800609c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006046:	f000 fd4a 	bl	8006ade <USBD_GetEpDesc>
 800604a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800604c:	2181      	movs	r1, #129	; 0x81
 800604e:	4813      	ldr	r0, [pc, #76]	; (800609c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006050:	f000 fd45 	bl	8006ade <USBD_GetEpDesc>
 8006054:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2210      	movs	r2, #16
 8006060:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2200      	movs	r2, #0
 800606c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006070:	711a      	strb	r2, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006084:	711a      	strb	r2, [r3, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2243      	movs	r2, #67	; 0x43
 800608e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000050 	.word	0x20000050

080060a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060a8:	2182      	movs	r1, #130	; 0x82
 80060aa:	4818      	ldr	r0, [pc, #96]	; (800610c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060ac:	f000 fd17 	bl	8006ade <USBD_GetEpDesc>
 80060b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060b2:	2101      	movs	r1, #1
 80060b4:	4815      	ldr	r0, [pc, #84]	; (800610c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060b6:	f000 fd12 	bl	8006ade <USBD_GetEpDesc>
 80060ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060bc:	2181      	movs	r1, #129	; 0x81
 80060be:	4813      	ldr	r0, [pc, #76]	; (800610c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060c0:	f000 fd0d 	bl	8006ade <USBD_GetEpDesc>
 80060c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2210      	movs	r2, #16
 80060d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d006      	beq.n	80060e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2200      	movs	r2, #0
 80060dc:	711a      	strb	r2, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f042 0202 	orr.w	r2, r2, #2
 80060e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	711a      	strb	r2, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f042 0202 	orr.w	r2, r2, #2
 80060f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2243      	movs	r2, #67	; 0x43
 80060fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000050 	.word	0x20000050

08006110 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006118:	2182      	movs	r1, #130	; 0x82
 800611a:	4818      	ldr	r0, [pc, #96]	; (800617c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800611c:	f000 fcdf 	bl	8006ade <USBD_GetEpDesc>
 8006120:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006122:	2101      	movs	r1, #1
 8006124:	4815      	ldr	r0, [pc, #84]	; (800617c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006126:	f000 fcda 	bl	8006ade <USBD_GetEpDesc>
 800612a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800612c:	2181      	movs	r1, #129	; 0x81
 800612e:	4813      	ldr	r0, [pc, #76]	; (800617c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006130:	f000 fcd5 	bl	8006ade <USBD_GetEpDesc>
 8006134:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2210      	movs	r2, #16
 8006140:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2200      	movs	r2, #0
 800614c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006150:	711a      	strb	r2, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d006      	beq.n	800616a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006164:	711a      	strb	r2, [r3, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2243      	movs	r2, #67	; 0x43
 800616e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000050 	.word	0x20000050

08006180 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	220a      	movs	r2, #10
 800618c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	2000000c 	.word	0x2000000c

080061a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e009      	b.n	80061c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	33b0      	adds	r3, #176	; 0xb0
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	32b0      	adds	r2, #176	; 0xb0
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e008      	b.n	800620c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	32b0      	adds	r2, #176	; 0xb0
 800622c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006230:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	e004      	b.n	8006246 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32b0      	adds	r2, #176	; 0xb0
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32b0      	adds	r2, #176	; 0xb0
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	e025      	b.n	80062d2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800628c:	2b00      	cmp	r3, #0
 800628e:	d11f      	bne.n	80062d0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2201      	movs	r2, #1
 8006294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006298:	4b10      	ldr	r3, [pc, #64]	; (80062dc <USBD_CDC_TransmitPacket+0x88>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4403      	add	r3, r0
 80062b2:	3318      	adds	r3, #24
 80062b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <USBD_CDC_TransmitPacket+0x88>)
 80062b8:	7819      	ldrb	r1, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 ffd1 	bl	800826e <USBD_LL_Transmit>

    ret = USBD_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000093 	.word	0x20000093

080062e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32b0      	adds	r2, #176	; 0xb0
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32b0      	adds	r2, #176	; 0xb0
 8006302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800630a:	2303      	movs	r3, #3
 800630c:	e018      	b.n	8006340 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7c1b      	ldrb	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <USBD_CDC_ReceivePacket+0x68>)
 8006318:	7819      	ldrb	r1, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 ffc3 	bl	80082b0 <USBD_LL_PrepareReceive>
 800632a:	e008      	b.n	800633e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <USBD_CDC_ReceivePacket+0x68>)
 800632e:	7819      	ldrb	r1, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 ffb9 	bl	80082b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000094 	.word	0x20000094

0800634c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e01f      	b.n	80063a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	79fa      	ldrb	r2, [r7, #7]
 8006396:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f001 fe33 	bl	8008004 <USBD_LL_Init>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e025      	b.n	8006410 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32ae      	adds	r2, #174	; 0xae
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00f      	beq.n	8006400 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	; 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f107 020e 	add.w	r2, r7, #14
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fe3b 	bl	800809c <USBD_LL_Start>
 8006426:	4603      	mov	r3, r0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006438:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	4611      	mov	r1, r2
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	4611      	mov	r1, r2
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f908 	bl	80076da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d01a      	beq.n	8006524 <USBD_LL_SetupStage+0x72>
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d822      	bhi.n	8006538 <USBD_LL_SetupStage+0x86>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <USBD_LL_SetupStage+0x4a>
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d00a      	beq.n	8006510 <USBD_LL_SetupStage+0x5e>
 80064fa:	e01d      	b.n	8006538 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb5f 	bl	8006bc8 <USBD_StdDevReq>
 800650a:	4603      	mov	r3, r0
 800650c:	73fb      	strb	r3, [r7, #15]
      break;
 800650e:	e020      	b.n	8006552 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fbc7 	bl	8006cac <USBD_StdItfReq>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]
      break;
 8006522:	e016      	b.n	8006552 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fc29 	bl	8006d84 <USBD_StdEPReq>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
      break;
 8006536:	e00c      	b.n	8006552 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800653e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006542:	b2db      	uxtb	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fe08 	bl	800815c <USBD_LL_StallEP>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
      break;
 8006550:	bf00      	nop
  }

  return ret;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	460b      	mov	r3, r1
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d16e      	bne.n	8006652 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800657a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006582:	2b03      	cmp	r3, #3
 8006584:	f040 8098 	bne.w	80066b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	429a      	cmp	r2, r3
 8006592:	d913      	bls.n	80065bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	1ad2      	subs	r2, r2, r3
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bf28      	it	cs
 80065ae:	4613      	movcs	r3, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 f984 	bl	80078c2 <USBD_CtlContinueRx>
 80065ba:	e07d      	b.n	80066b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d014      	beq.n	80065f4 <USBD_LL_DataOutStage+0x98>
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d81d      	bhi.n	800660a <USBD_LL_DataOutStage+0xae>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <USBD_LL_DataOutStage+0x7c>
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d003      	beq.n	80065de <USBD_LL_DataOutStage+0x82>
 80065d6:	e018      	b.n	800660a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	75bb      	strb	r3, [r7, #22]
            break;
 80065dc:	e018      	b.n	8006610 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fa5e 	bl	8006aaa <USBD_CoreFindIF>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75bb      	strb	r3, [r7, #22]
            break;
 80065f2:	e00d      	b.n	8006610 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fa60 	bl	8006ac4 <USBD_CoreFindEP>
 8006604:	4603      	mov	r3, r0
 8006606:	75bb      	strb	r3, [r7, #22]
            break;
 8006608:	e002      	b.n	8006610 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	75bb      	strb	r3, [r7, #22]
            break;
 800660e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006610:	7dbb      	ldrb	r3, [r7, #22]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d119      	bne.n	800664a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b03      	cmp	r3, #3
 8006620:	d113      	bne.n	800664a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006622:	7dba      	ldrb	r2, [r7, #22]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	32ae      	adds	r2, #174	; 0xae
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006632:	7dba      	ldrb	r2, [r7, #22]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800663a:	7dba      	ldrb	r2, [r7, #22]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	32ae      	adds	r2, #174	; 0xae
 8006640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f001 f94a 	bl	80078e4 <USBD_CtlSendStatus>
 8006650:	e032      	b.n	80066b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006658:	b2db      	uxtb	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fa31 	bl	8006ac4 <USBD_CoreFindEP>
 8006662:	4603      	mov	r3, r0
 8006664:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006666:	7dbb      	ldrb	r3, [r7, #22]
 8006668:	2bff      	cmp	r3, #255	; 0xff
 800666a:	d025      	beq.n	80066b8 <USBD_LL_DataOutStage+0x15c>
 800666c:	7dbb      	ldrb	r3, [r7, #22]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d122      	bne.n	80066b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b03      	cmp	r3, #3
 800667c:	d117      	bne.n	80066ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800667e:	7dba      	ldrb	r2, [r7, #22]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	32ae      	adds	r2, #174	; 0xae
 8006684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00f      	beq.n	80066ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800668e:	7dba      	ldrb	r2, [r7, #22]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006696:	7dba      	ldrb	r2, [r7, #22]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	32ae      	adds	r2, #174	; 0xae
 800669c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	7afa      	ldrb	r2, [r7, #11]
 80066a4:	4611      	mov	r1, r2
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	e000      	b.n	80066ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	460b      	mov	r3, r1
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d16f      	bne.n	80067b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3314      	adds	r3, #20
 80066da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d15a      	bne.n	800679c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d914      	bls.n	800671c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	461a      	mov	r2, r3
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 f8ac 	bl	8007866 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800670e:	2300      	movs	r3, #0
 8006710:	2200      	movs	r2, #0
 8006712:	2100      	movs	r1, #0
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f001 fdcb 	bl	80082b0 <USBD_LL_PrepareReceive>
 800671a:	e03f      	b.n	800679c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	d11c      	bne.n	8006762 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006730:	429a      	cmp	r2, r3
 8006732:	d316      	bcc.n	8006762 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800673e:	429a      	cmp	r2, r3
 8006740:	d20f      	bcs.n	8006762 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f001 f88d 	bl	8007866 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006754:	2300      	movs	r3, #0
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f001 fda8 	bl	80082b0 <USBD_LL_PrepareReceive>
 8006760:	e01c      	b.n	800679c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d10f      	bne.n	800678e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 fce3 	bl	800815c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 f8b7 	bl	800790a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03a      	beq.n	800681c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fe42 	bl	8006430 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067b4:	e032      	b.n	800681c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f97f 	bl	8006ac4 <USBD_CoreFindEP>
 80067c6:	4603      	mov	r3, r0
 80067c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2bff      	cmp	r3, #255	; 0xff
 80067ce:	d025      	beq.n	800681c <USBD_LL_DataInStage+0x15a>
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d122      	bne.n	800681c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d11c      	bne.n	800681c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80067e2:	7dfa      	ldrb	r2, [r7, #23]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	32ae      	adds	r2, #174	; 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d014      	beq.n	800681c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80067f2:	7dfa      	ldrb	r2, [r7, #23]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80067fa:	7dfa      	ldrb	r2, [r7, #23]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	32ae      	adds	r2, #174	; 0xae
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	7afa      	ldrb	r2, [r7, #11]
 8006808:	4611      	mov	r1, r2
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006812:	7dbb      	ldrb	r3, [r7, #22]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006818:	7dbb      	ldrb	r3, [r7, #22]
 800681a:	e000      	b.n	800681e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d014      	beq.n	800688c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6852      	ldr	r2, [r2, #4]
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	4611      	mov	r1, r2
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006888:	2303      	movs	r3, #3
 800688a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fc1d 	bl	80080d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2240      	movs	r2, #64	; 0x40
 80068a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068a8:	2340      	movs	r3, #64	; 0x40
 80068aa:	2200      	movs	r2, #0
 80068ac:	2180      	movs	r1, #128	; 0x80
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fc0f 	bl	80080d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2240      	movs	r2, #64	; 0x40
 80068be:	621a      	str	r2, [r3, #32]

  return ret;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2204      	movs	r2, #4
 8006904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b04      	cmp	r3, #4
 8006928:	d106      	bne.n	8006938 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006930:	b2da      	uxtb	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d110      	bne.n	800697c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32ae      	adds	r2, #174	; 0xae
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e01c      	b.n	80069e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d115      	bne.n	80069e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	32ae      	adds	r2, #174	; 0xae
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32ae      	adds	r2, #174	; 0xae
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	4611      	mov	r1, r2
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32ae      	adds	r2, #174	; 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e01c      	b.n	8006a46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d115      	bne.n	8006a44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	32ae      	adds	r2, #174	; 0xae
 8006a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32ae      	adds	r2, #174	; 0xae
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6852      	ldr	r2, [r2, #4]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	4611      	mov	r1, r2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ab6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ad0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d920      	bls.n	8006b48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b0e:	e013      	b.n	8006b38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b10:	f107 030a 	add.w	r3, r7, #10
 8006b14:	4619      	mov	r1, r3
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f000 f81b 	bl	8006b52 <USBD_GetNextDesc>
 8006b1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d108      	bne.n	8006b38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	789b      	ldrb	r3, [r3, #2]
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d008      	beq.n	8006b46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	897b      	ldrh	r3, [r7, #10]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d8e5      	bhi.n	8006b10 <USBD_GetEpDesc+0x32>
 8006b44:	e000      	b.n	8006b48 <USBD_GetEpDesc+0x6a>
          break;
 8006b46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b48:	693b      	ldr	r3, [r7, #16]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006baa:	8a3b      	ldrh	r3, [r7, #16]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b21a      	sxth	r2, r3
 8006bb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bba:	89fb      	ldrh	r3, [r7, #14]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d005      	beq.n	8006bee <USBD_StdDevReq+0x26>
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d857      	bhi.n	8006c96 <USBD_StdDevReq+0xce>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00f      	beq.n	8006c0a <USBD_StdDevReq+0x42>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d153      	bne.n	8006c96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	32ae      	adds	r2, #174	; 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
      break;
 8006c08:	e04a      	b.n	8006ca0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d83b      	bhi.n	8006c8a <USBD_StdDevReq+0xc2>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <USBD_StdDevReq+0x50>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c8b 	.word	0x08006c8b
 8006c24:	08006c77 	.word	0x08006c77
 8006c28:	08006c8b 	.word	0x08006c8b
 8006c2c:	08006c4b 	.word	0x08006c4b
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c8b 	.word	0x08006c8b
 8006c38:	08006c63 	.word	0x08006c63
 8006c3c:	08006c55 	.word	0x08006c55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa3c 	bl	80070c0 <USBD_GetDescriptor>
          break;
 8006c48:	e024      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fba1 	bl	8007394 <USBD_SetAddress>
          break;
 8006c52:	e01f      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fbe0 	bl	800741c <USBD_SetConfig>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
          break;
 8006c60:	e018      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc83 	bl	8007570 <USBD_GetConfig>
          break;
 8006c6a:	e013      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fcb4 	bl	80075dc <USBD_GetStatus>
          break;
 8006c74:	e00e      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fce3 	bl	8007644 <USBD_SetFeature>
          break;
 8006c7e:	e009      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd07 	bl	8007696 <USBD_ClrFeature>
          break;
 8006c88:	e004      	b.n	8006c94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fd5e 	bl	800774e <USBD_CtlError>
          break;
 8006c92:	bf00      	nop
      }
      break;
 8006c94:	e004      	b.n	8006ca0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fd58 	bl	800774e <USBD_CtlError>
      break;
 8006c9e:	bf00      	nop
  }

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop

08006cac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d005      	beq.n	8006cd2 <USBD_StdItfReq+0x26>
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d852      	bhi.n	8006d70 <USBD_StdItfReq+0xc4>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <USBD_StdItfReq+0x26>
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d14e      	bne.n	8006d70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d840      	bhi.n	8006d62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	889b      	ldrh	r3, [r3, #4]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d836      	bhi.n	8006d58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	889b      	ldrh	r3, [r3, #4]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fed9 	bl	8006aaa <USBD_CoreFindIF>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d01d      	beq.n	8006d3e <USBD_StdItfReq+0x92>
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d08:	7bba      	ldrb	r2, [r7, #14]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	32ae      	adds	r2, #174	; 0xae
 8006d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00f      	beq.n	8006d38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d18:	7bba      	ldrb	r2, [r7, #14]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d20:	7bba      	ldrb	r2, [r7, #14]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32ae      	adds	r2, #174	; 0xae
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d36:	e004      	b.n	8006d42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d3c:	e001      	b.n	8006d42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	88db      	ldrh	r3, [r3, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d110      	bne.n	8006d6c <USBD_StdItfReq+0xc0>
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fdc7 	bl	80078e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d56:	e009      	b.n	8006d6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fcf7 	bl	800774e <USBD_CtlError>
          break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fcf2 	bl	800774e <USBD_CtlError>
          break;
 8006d6a:	e000      	b.n	8006d6e <USBD_StdItfReq+0xc2>
          break;
 8006d6c:	bf00      	nop
      }
      break;
 8006d6e:	e004      	b.n	8006d7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fceb 	bl	800774e <USBD_CtlError>
      break;
 8006d78:	bf00      	nop
  }

  return ret;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	889b      	ldrh	r3, [r3, #4]
 8006d96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d007      	beq.n	8006db4 <USBD_StdEPReq+0x30>
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	f200 817f 	bhi.w	80070a8 <USBD_StdEPReq+0x324>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02a      	beq.n	8006e04 <USBD_StdEPReq+0x80>
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	f040 817a 	bne.w	80070a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fe83 	bl	8006ac4 <USBD_CoreFindEP>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dc2:	7b7b      	ldrb	r3, [r7, #13]
 8006dc4:	2bff      	cmp	r3, #255	; 0xff
 8006dc6:	f000 8174 	beq.w	80070b2 <USBD_StdEPReq+0x32e>
 8006dca:	7b7b      	ldrb	r3, [r7, #13]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 8170 	bne.w	80070b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006dd2:	7b7a      	ldrb	r2, [r7, #13]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006dda:	7b7a      	ldrb	r2, [r7, #13]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	32ae      	adds	r2, #174	; 0xae
 8006de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8163 	beq.w	80070b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006dec:	7b7a      	ldrb	r2, [r7, #13]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32ae      	adds	r2, #174	; 0xae
 8006df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e02:	e156      	b.n	80070b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	785b      	ldrb	r3, [r3, #1]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d008      	beq.n	8006e1e <USBD_StdEPReq+0x9a>
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	f300 8145 	bgt.w	800709c <USBD_StdEPReq+0x318>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 809b 	beq.w	8006f4e <USBD_StdEPReq+0x1ca>
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d03c      	beq.n	8006e96 <USBD_StdEPReq+0x112>
 8006e1c:	e13e      	b.n	800709c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d002      	beq.n	8006e30 <USBD_StdEPReq+0xac>
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d016      	beq.n	8006e5c <USBD_StdEPReq+0xd8>
 8006e2e:	e02c      	b.n	8006e8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <USBD_StdEPReq+0xce>
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d00a      	beq.n	8006e52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f98b 	bl	800815c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e46:	2180      	movs	r1, #128	; 0x80
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f987 	bl	800815c <USBD_LL_StallEP>
 8006e4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e50:	e020      	b.n	8006e94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fc7a 	bl	800774e <USBD_CtlError>
              break;
 8006e5a:	e01b      	b.n	8006e94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10e      	bne.n	8006e82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <USBD_StdEPReq+0xfe>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d008      	beq.n	8006e82 <USBD_StdEPReq+0xfe>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	88db      	ldrh	r3, [r3, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f96d 	bl	800815c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd2e 	bl	80078e4 <USBD_CtlSendStatus>

              break;
 8006e88:	e004      	b.n	8006e94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fc5e 	bl	800774e <USBD_CtlError>
              break;
 8006e92:	bf00      	nop
          }
          break;
 8006e94:	e107      	b.n	80070a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d002      	beq.n	8006ea8 <USBD_StdEPReq+0x124>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d016      	beq.n	8006ed4 <USBD_StdEPReq+0x150>
 8006ea6:	e04b      	b.n	8006f40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <USBD_StdEPReq+0x146>
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b80      	cmp	r3, #128	; 0x80
 8006eb2:	d00a      	beq.n	8006eca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 f94f 	bl	800815c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f94b 	bl	800815c <USBD_LL_StallEP>
 8006ec6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ec8:	e040      	b.n	8006f4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc3e 	bl	800774e <USBD_CtlError>
              break;
 8006ed2:	e03b      	b.n	8006f4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	885b      	ldrh	r3, [r3, #2]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d136      	bne.n	8006f4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f955 	bl	800819a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fcf7 	bl	80078e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fde2 	bl	8006ac4 <USBD_CoreFindEP>
 8006f00:	4603      	mov	r3, r0
 8006f02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f04:	7b7b      	ldrb	r3, [r7, #13]
 8006f06:	2bff      	cmp	r3, #255	; 0xff
 8006f08:	d01f      	beq.n	8006f4a <USBD_StdEPReq+0x1c6>
 8006f0a:	7b7b      	ldrb	r3, [r7, #13]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11c      	bne.n	8006f4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f10:	7b7a      	ldrb	r2, [r7, #13]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f18:	7b7a      	ldrb	r2, [r7, #13]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	; 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d010      	beq.n	8006f4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f28:	7b7a      	ldrb	r2, [r7, #13]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	32ae      	adds	r2, #174	; 0xae
 8006f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f3e:	e004      	b.n	8006f4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc03 	bl	800774e <USBD_CtlError>
              break;
 8006f48:	e000      	b.n	8006f4c <USBD_StdEPReq+0x1c8>
              break;
 8006f4a:	bf00      	nop
          }
          break;
 8006f4c:	e0ab      	b.n	80070a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d002      	beq.n	8006f60 <USBD_StdEPReq+0x1dc>
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d032      	beq.n	8006fc4 <USBD_StdEPReq+0x240>
 8006f5e:	e097      	b.n	8007090 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <USBD_StdEPReq+0x1f2>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d004      	beq.n	8006f76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fbed 	bl	800774e <USBD_CtlError>
                break;
 8006f74:	e091      	b.n	800709a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da0b      	bge.n	8006f96 <USBD_StdEPReq+0x212>
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	3304      	adds	r3, #4
 8006f94:	e00b      	b.n	8006fae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3304      	adds	r3, #4
 8006fae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fc37 	bl	8007830 <USBD_CtlSendData>
              break;
 8006fc2:	e06a      	b.n	800709a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da11      	bge.n	8006ff0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d117      	bne.n	8007016 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fbb0 	bl	800774e <USBD_CtlError>
                  break;
 8006fee:	e054      	b.n	800709a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fb9d 	bl	800774e <USBD_CtlError>
                  break;
 8007014:	e041      	b.n	800709a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	da0b      	bge.n	8007036 <USBD_StdEPReq+0x2b2>
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	3310      	adds	r3, #16
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	3304      	adds	r3, #4
 8007034:	e00b      	b.n	800704e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4413      	add	r3, r2
 800704c:	3304      	adds	r3, #4
 800704e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <USBD_StdEPReq+0x2d8>
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d103      	bne.n	8007064 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e00e      	b.n	8007082 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f8b5 	bl	80081d8 <USBD_LL_IsStallEP>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e002      	b.n	8007082 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2202      	movs	r2, #2
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fbd1 	bl	8007830 <USBD_CtlSendData>
              break;
 800708e:	e004      	b.n	800709a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb5b 	bl	800774e <USBD_CtlError>
              break;
 8007098:	bf00      	nop
          }
          break;
 800709a:	e004      	b.n	80070a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb55 	bl	800774e <USBD_CtlError>
          break;
 80070a4:	bf00      	nop
      }
      break;
 80070a6:	e005      	b.n	80070b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb4f 	bl	800774e <USBD_CtlError>
      break;
 80070b0:	e000      	b.n	80070b4 <USBD_StdEPReq+0x330>
      break;
 80070b2:	bf00      	nop
  }

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	0a1b      	lsrs	r3, r3, #8
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	f200 8128 	bhi.w	8007336 <USBD_GetDescriptor+0x276>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <USBD_GetDescriptor+0x2c>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007109 	.word	0x08007109
 80070f0:	08007121 	.word	0x08007121
 80070f4:	08007161 	.word	0x08007161
 80070f8:	08007337 	.word	0x08007337
 80070fc:	08007337 	.word	0x08007337
 8007100:	080072d7 	.word	0x080072d7
 8007104:	08007303 	.word	0x08007303
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
      break;
 800711e:	e112      	b.n	8007346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7c1b      	ldrb	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f107 0208 	add.w	r2, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007142:	e100      	b.n	8007346 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	2202      	movs	r2, #2
 800715c:	701a      	strb	r2, [r3, #0]
      break;
 800715e:	e0f2      	b.n	8007346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	885b      	ldrh	r3, [r3, #2]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b05      	cmp	r3, #5
 8007168:	f200 80ac 	bhi.w	80072c4 <USBD_GetDescriptor+0x204>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <USBD_GetDescriptor+0xb4>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	0800718d 	.word	0x0800718d
 8007178:	080071c1 	.word	0x080071c1
 800717c:	080071f5 	.word	0x080071f5
 8007180:	08007229 	.word	0x08007229
 8007184:	0800725d 	.word	0x0800725d
 8007188:	08007291 	.word	0x08007291
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ae:	e091      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 facb 	bl	800774e <USBD_CtlError>
            err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
          break;
 80071be:	e089      	b.n	80072d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e2:	e077      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fab1 	bl	800774e <USBD_CtlError>
            err++;
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3301      	adds	r3, #1
 80071f0:	72fb      	strb	r3, [r7, #11]
          break;
 80071f2:	e06f      	b.n	80072d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
 8007214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007216:	e05d      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa97 	bl	800774e <USBD_CtlError>
            err++;
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	3301      	adds	r3, #1
 8007224:	72fb      	strb	r3, [r7, #11]
          break;
 8007226:	e055      	b.n	80072d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	7c12      	ldrb	r2, [r2, #16]
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800724a:	e043      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa7d 	bl	800774e <USBD_CtlError>
            err++;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	3301      	adds	r3, #1
 8007258:	72fb      	strb	r3, [r7, #11]
          break;
 800725a:	e03b      	b.n	80072d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	7c12      	ldrb	r2, [r2, #16]
 8007274:	f107 0108 	add.w	r1, r7, #8
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800727e:	e029      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa63 	bl	800774e <USBD_CtlError>
            err++;
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	3301      	adds	r3, #1
 800728c:	72fb      	strb	r3, [r7, #11]
          break;
 800728e:	e021      	b.n	80072d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b2:	e00f      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa49 	bl	800774e <USBD_CtlError>
            err++;
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	3301      	adds	r3, #1
 80072c0:	72fb      	strb	r3, [r7, #11]
          break;
 80072c2:	e007      	b.n	80072d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa41 	bl	800774e <USBD_CtlError>
          err++;
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	3301      	adds	r3, #1
 80072d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072d2:	bf00      	nop
      }
      break;
 80072d4:	e037      	b.n	8007346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7c1b      	ldrb	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	f107 0208 	add.w	r2, r7, #8
 80072ea:	4610      	mov	r0, r2
 80072ec:	4798      	blx	r3
 80072ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072f0:	e029      	b.n	8007346 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fa2a 	bl	800774e <USBD_CtlError>
        err++;
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	3301      	adds	r3, #1
 80072fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007300:	e021      	b.n	8007346 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7c1b      	ldrb	r3, [r3, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f107 0208 	add.w	r2, r7, #8
 8007316:	4610      	mov	r0, r2
 8007318:	4798      	blx	r3
 800731a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	2207      	movs	r2, #7
 8007322:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007324:	e00f      	b.n	8007346 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa10 	bl	800774e <USBD_CtlError>
        err++;
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	3301      	adds	r3, #1
 8007332:	72fb      	strb	r3, [r7, #11]
      break;
 8007334:	e007      	b.n	8007346 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa08 	bl	800774e <USBD_CtlError>
      err++;
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	3301      	adds	r3, #1
 8007342:	72fb      	strb	r3, [r7, #11]
      break;
 8007344:	bf00      	nop
  }

  if (err != 0U)
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11e      	bne.n	800738a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	88db      	ldrh	r3, [r3, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d016      	beq.n	8007382 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007354:	893b      	ldrh	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00e      	beq.n	8007378 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	88da      	ldrh	r2, [r3, #6]
 800735e:	893b      	ldrh	r3, [r7, #8]
 8007360:	4293      	cmp	r3, r2
 8007362:	bf28      	it	cs
 8007364:	4613      	movcs	r3, r2
 8007366:	b29b      	uxth	r3, r3
 8007368:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800736a:	893b      	ldrh	r3, [r7, #8]
 800736c:	461a      	mov	r2, r3
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa5d 	bl	8007830 <USBD_CtlSendData>
 8007376:	e009      	b.n	800738c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9e7 	bl	800774e <USBD_CtlError>
 8007380:	e004      	b.n	800738c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 faae 	bl	80078e4 <USBD_CtlSendStatus>
 8007388:	e000      	b.n	800738c <USBD_GetDescriptor+0x2cc>
    return;
 800738a:	bf00      	nop
  }
}
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	889b      	ldrh	r3, [r3, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d131      	bne.n	800740a <USBD_SetAddress+0x76>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	88db      	ldrh	r3, [r3, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d12d      	bne.n	800740a <USBD_SetAddress+0x76>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	2b7f      	cmp	r3, #127	; 0x7f
 80073b4:	d829      	bhi.n	800740a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d104      	bne.n	80073d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9bc 	bl	800774e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d6:	e01d      	b.n	8007414 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ff23 	bl	8008230 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa7a 	bl	80078e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	e009      	b.n	8007414 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007408:	e004      	b.n	8007414 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f99e 	bl	800774e <USBD_CtlError>
  }
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	885b      	ldrh	r3, [r3, #2]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	4b4e      	ldr	r3, [pc, #312]	; (800756c <USBD_SetConfig+0x150>)
 8007432:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007434:	4b4d      	ldr	r3, [pc, #308]	; (800756c <USBD_SetConfig+0x150>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d905      	bls.n	8007448 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f985 	bl	800774e <USBD_CtlError>
    return USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e08c      	b.n	8007562 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d002      	beq.n	800745a <USBD_SetConfig+0x3e>
 8007454:	2b03      	cmp	r3, #3
 8007456:	d029      	beq.n	80074ac <USBD_SetConfig+0x90>
 8007458:	e075      	b.n	8007546 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800745a:	4b44      	ldr	r3, [pc, #272]	; (800756c <USBD_SetConfig+0x150>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007462:	4b42      	ldr	r3, [pc, #264]	; (800756c <USBD_SetConfig+0x150>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800746c:	4b3f      	ldr	r3, [pc, #252]	; (800756c <USBD_SetConfig+0x150>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fe ffe7 	bl	8006446 <USBD_SetClassConfig>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f962 	bl	800774e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007492:	e065      	b.n	8007560 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fa25 	bl	80078e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2203      	movs	r2, #3
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074a2:	e05d      	b.n	8007560 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa1d 	bl	80078e4 <USBD_CtlSendStatus>
      break;
 80074aa:	e059      	b.n	8007560 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074ac:	4b2f      	ldr	r3, [pc, #188]	; (800756c <USBD_SetConfig+0x150>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d112      	bne.n	80074da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074bc:	4b2b      	ldr	r3, [pc, #172]	; (800756c <USBD_SetConfig+0x150>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <USBD_SetConfig+0x150>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ffd6 	bl	800647e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa06 	bl	80078e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074d8:	e042      	b.n	8007560 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80074da:	4b24      	ldr	r3, [pc, #144]	; (800756c <USBD_SetConfig+0x150>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d02a      	beq.n	800753e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7fe ffc4 	bl	800647e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80074f6:	4b1d      	ldr	r3, [pc, #116]	; (800756c <USBD_SetConfig+0x150>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007500:	4b1a      	ldr	r3, [pc, #104]	; (800756c <USBD_SetConfig+0x150>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fe ff9d 	bl	8006446 <USBD_SetClassConfig>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00f      	beq.n	8007536 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f918 	bl	800774e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fe ffa9 	bl	800647e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007534:	e014      	b.n	8007560 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9d4 	bl	80078e4 <USBD_CtlSendStatus>
      break;
 800753c:	e010      	b.n	8007560 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f9d0 	bl	80078e4 <USBD_CtlSendStatus>
      break;
 8007544:	e00c      	b.n	8007560 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f900 	bl	800774e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <USBD_SetConfig+0x150>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fe ff92 	bl	800647e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800755a:	2303      	movs	r3, #3
 800755c:	73fb      	strb	r3, [r7, #15]
      break;
 800755e:	bf00      	nop
  }

  return ret;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200001a8 	.word	0x200001a8

08007570 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d004      	beq.n	800758c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8e2 	bl	800774e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800758a:	e023      	b.n	80075d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	dc02      	bgt.n	800759e <USBD_GetConfig+0x2e>
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc03      	bgt.n	80075a4 <USBD_GetConfig+0x34>
 800759c:	e015      	b.n	80075ca <USBD_GetConfig+0x5a>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d00b      	beq.n	80075ba <USBD_GetConfig+0x4a>
 80075a2:	e012      	b.n	80075ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3308      	adds	r3, #8
 80075ae:	2201      	movs	r2, #1
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f93c 	bl	8007830 <USBD_CtlSendData>
        break;
 80075b8:	e00c      	b.n	80075d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	2201      	movs	r2, #1
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f934 	bl	8007830 <USBD_CtlSendData>
        break;
 80075c8:	e004      	b.n	80075d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f8be 	bl	800774e <USBD_CtlError>
        break;
 80075d2:	bf00      	nop
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d81e      	bhi.n	8007632 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d004      	beq.n	8007606 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8a5 	bl	800774e <USBD_CtlError>
        break;
 8007604:	e01a      	b.n	800763c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	330c      	adds	r3, #12
 8007626:	2202      	movs	r2, #2
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f900 	bl	8007830 <USBD_CtlSendData>
      break;
 8007630:	e004      	b.n	800763c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f88a 	bl	800774e <USBD_CtlError>
      break;
 800763a:	bf00      	nop
  }
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	885b      	ldrh	r3, [r3, #2]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d107      	bne.n	8007666 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f940 	bl	80078e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007664:	e013      	b.n	800768e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	885b      	ldrh	r3, [r3, #2]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d10b      	bne.n	8007686 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	889b      	ldrh	r3, [r3, #4]
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	b29b      	uxth	r3, r3
 8007676:	b2da      	uxtb	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f930 	bl	80078e4 <USBD_CtlSendStatus>
}
 8007684:	e003      	b.n	800768e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f860 	bl	800774e <USBD_CtlError>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d80b      	bhi.n	80076c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	885b      	ldrh	r3, [r3, #2]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10c      	bne.n	80076d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f910 	bl	80078e4 <USBD_CtlSendStatus>
      }
      break;
 80076c4:	e004      	b.n	80076d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f840 	bl	800774e <USBD_CtlError>
      break;
 80076ce:	e000      	b.n	80076d2 <USBD_ClrFeature+0x3c>
      break;
 80076d0:	bf00      	nop
  }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff fa41 	bl	8006b8c <SWAPBYTE>
 800770a:	4603      	mov	r3, r0
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff fa34 	bl	8006b8c <SWAPBYTE>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fa27 	bl	8006b8c <SWAPBYTE>
 800773e:	4603      	mov	r3, r0
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	80da      	strh	r2, [r3, #6]
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007758:	2180      	movs	r1, #128	; 0x80
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fcfe 	bl	800815c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007760:	2100      	movs	r1, #0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fcfa 	bl	800815c <USBD_LL_StallEP>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d036      	beq.n	80077f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800778a:	6938      	ldr	r0, [r7, #16]
 800778c:	f000 f836 	bl	80077fc <USBD_GetLen>
 8007790:	4603      	mov	r3, r0
 8007792:	3301      	adds	r3, #1
 8007794:	b29b      	uxth	r3, r3
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4413      	add	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	3301      	adds	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	2203      	movs	r2, #3
 80077b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	3301      	adds	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077c0:	e013      	b.n	80077ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	4413      	add	r3, r2
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3301      	adds	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]
    idx++;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	3301      	adds	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4413      	add	r3, r2
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	3301      	adds	r3, #1
 80077e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e7      	bne.n	80077c2 <USBD_GetString+0x52>
 80077f2:	e000      	b.n	80077f6 <USBD_GetString+0x86>
    return;
 80077f4:	bf00      	nop
  }
}
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800780c:	e005      	b.n	800781a <USBD_GetLen+0x1e>
  {
    len++;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	3301      	adds	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3301      	adds	r3, #1
 8007818:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f5      	bne.n	800780e <USBD_GetLen+0x12>
  }

  return len;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2202      	movs	r2, #2
 8007840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	2100      	movs	r1, #0
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fd09 	bl	800826e <USBD_LL_Transmit>

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	2100      	movs	r1, #0
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fcf8 	bl	800826e <USBD_LL_Transmit>

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2203      	movs	r2, #3
 8007898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	2100      	movs	r1, #0
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fcfc 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fceb 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2204      	movs	r2, #4
 80078f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078f4:	2300      	movs	r3, #0
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fcb7 	bl	800826e <USBD_LL_Transmit>

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2205      	movs	r2, #5
 8007916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800791a:	2300      	movs	r3, #0
 800791c:	2200      	movs	r2, #0
 800791e:	2100      	movs	r1, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fcc5 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007934:	2200      	movs	r2, #0
 8007936:	4912      	ldr	r1, [pc, #72]	; (8007980 <MX_USB_DEVICE_Init+0x50>)
 8007938:	4812      	ldr	r0, [pc, #72]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe fd07 	bl	800634c <USBD_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007944:	f7f8 ff0e 	bl	8000764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007948:	490f      	ldr	r1, [pc, #60]	; (8007988 <MX_USB_DEVICE_Init+0x58>)
 800794a:	480e      	ldr	r0, [pc, #56]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800794c:	f7fe fd2e 	bl	80063ac <USBD_RegisterClass>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007956:	f7f8 ff05 	bl	8000764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800795a:	490c      	ldr	r1, [pc, #48]	; (800798c <MX_USB_DEVICE_Init+0x5c>)
 800795c:	4809      	ldr	r0, [pc, #36]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800795e:	f7fe fc1f 	bl	80061a0 <USBD_CDC_RegisterInterface>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007968:	f7f8 fefc 	bl	8000764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800796c:	4805      	ldr	r0, [pc, #20]	; (8007984 <MX_USB_DEVICE_Init+0x54>)
 800796e:	f7fe fd53 	bl	8006418 <USBD_Start>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007978:	f7f8 fef4 	bl	8000764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800797c:	bf00      	nop
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200000ac 	.word	0x200000ac
 8007984:	200001ac 	.word	0x200001ac
 8007988:	20000018 	.word	0x20000018
 800798c:	20000098 	.word	0x20000098

08007990 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007994:	2200      	movs	r2, #0
 8007996:	4905      	ldr	r1, [pc, #20]	; (80079ac <CDC_Init_FS+0x1c>)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <CDC_Init_FS+0x20>)
 800799a:	f7fe fc1b 	bl	80061d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800799e:	4905      	ldr	r1, [pc, #20]	; (80079b4 <CDC_Init_FS+0x24>)
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <CDC_Init_FS+0x20>)
 80079a2:	f7fe fc39 	bl	8006218 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000874 	.word	0x20000874
 80079b0:	200001ac 	.word	0x200001ac
 80079b4:	2000048c 	.word	0x2000048c

080079b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079be:	4618      	mov	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b23      	cmp	r3, #35	; 0x23
 80079dc:	d84a      	bhi.n	8007a74 <CDC_Control_FS+0xac>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <CDC_Control_FS+0x1c>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a75 	.word	0x08007a75
 80079e8:	08007a75 	.word	0x08007a75
 80079ec:	08007a75 	.word	0x08007a75
 80079f0:	08007a75 	.word	0x08007a75
 80079f4:	08007a75 	.word	0x08007a75
 80079f8:	08007a75 	.word	0x08007a75
 80079fc:	08007a75 	.word	0x08007a75
 8007a00:	08007a75 	.word	0x08007a75
 8007a04:	08007a75 	.word	0x08007a75
 8007a08:	08007a75 	.word	0x08007a75
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	08007a75 	.word	0x08007a75
 8007a14:	08007a75 	.word	0x08007a75
 8007a18:	08007a75 	.word	0x08007a75
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a75 	.word	0x08007a75
 8007a2c:	08007a75 	.word	0x08007a75
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a75 	.word	0x08007a75
 8007a38:	08007a75 	.word	0x08007a75
 8007a3c:	08007a75 	.word	0x08007a75
 8007a40:	08007a75 	.word	0x08007a75
 8007a44:	08007a75 	.word	0x08007a75
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a75 	.word	0x08007a75
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a75 	.word	0x08007a75
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a75 	.word	0x08007a75
 8007a6c:	08007a75 	.word	0x08007a75
 8007a70:	08007a75 	.word	0x08007a75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a74:	bf00      	nop
  }

  return (USBD_OK);
 8007a76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4815      	ldr	r0, [pc, #84]	; (8007ae8 <CDC_Receive_FS+0x64>)
 8007a92:	f7fe fbc1 	bl	8006218 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a96:	4814      	ldr	r0, [pc, #80]	; (8007ae8 <CDC_Receive_FS+0x64>)
 8007a98:	f7fe fc22 	bl	80062e0 <USBD_CDC_ReceivePacket>

  if( ( Buf[0] == 'U' ) && ( *Len == 1 ) && lastchar != 'U' )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b55      	cmp	r3, #85	; 0x55
 8007aa2:	d10a      	bne.n	8007aba <CDC_Receive_FS+0x36>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d106      	bne.n	8007aba <CDC_Receive_FS+0x36>
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <CDC_Receive_FS+0x68>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b55      	cmp	r3, #85	; 0x55
 8007ab2:	d002      	beq.n	8007aba <CDC_Receive_FS+0x36>
	  flag_reset_chip = 1;
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <CDC_Receive_FS+0x6c>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]

  lastchar = Buf[0];
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <CDC_Receive_FS+0x68>)
 8007ac0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Buf, *Len, 100);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	2364      	movs	r3, #100	; 0x64
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4809      	ldr	r0, [pc, #36]	; (8007af4 <CDC_Receive_FS+0x70>)
 8007ace:	f7fb faee 	bl	80030ae <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ad6:	4808      	ldr	r0, [pc, #32]	; (8007af8 <CDC_Receive_FS+0x74>)
 8007ad8:	f7f9 fbad 	bl	8001236 <HAL_GPIO_TogglePin>

  return (USBD_OK);
 8007adc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200001ac 	.word	0x200001ac
 8007aec:	20000488 	.word	0x20000488
 8007af0:	20000119 	.word	0x20000119
 8007af4:	20000160 	.word	0x20000160
 8007af8:	40020800 	.word	0x40020800

08007afc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <CDC_Transmit_FS+0x48>)
 8007b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e00b      	b.n	8007b3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b22:	887b      	ldrh	r3, [r7, #2]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4806      	ldr	r0, [pc, #24]	; (8007b44 <CDC_Transmit_FS+0x48>)
 8007b2a:	f7fe fb53 	bl	80061d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b2e:	4805      	ldr	r0, [pc, #20]	; (8007b44 <CDC_Transmit_FS+0x48>)
 8007b30:	f7fe fb90 	bl	8006254 <USBD_CDC_TransmitPacket>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200001ac 	.word	0x200001ac

08007b48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2212      	movs	r2, #18
 8007b7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	200000c8 	.word	0x200000c8

08007b90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ba2:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	200000dc 	.word	0x200000dc

08007bb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4907      	ldr	r1, [pc, #28]	; (8007be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bca:	4808      	ldr	r0, [pc, #32]	; (8007bec <USBD_FS_ProductStrDescriptor+0x38>)
 8007bcc:	f7ff fdd0 	bl	8007770 <USBD_GetString>
 8007bd0:	e004      	b.n	8007bdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4904      	ldr	r1, [pc, #16]	; (8007be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bd6:	4805      	ldr	r0, [pc, #20]	; (8007bec <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd8:	f7ff fdca 	bl	8007770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000c5c 	.word	0x20000c5c
 8007bec:	08008410 	.word	0x08008410

08007bf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	4904      	ldr	r1, [pc, #16]	; (8007c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c00:	4804      	ldr	r0, [pc, #16]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c02:	f7ff fdb5 	bl	8007770 <USBD_GetString>
  return USBD_StrDesc;
 8007c06:	4b02      	ldr	r3, [pc, #8]	; (8007c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000c5c 	.word	0x20000c5c
 8007c14:	08008428 	.word	0x08008428

08007c18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	221a      	movs	r2, #26
 8007c28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c2a:	f000 f843 	bl	8007cb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c2e:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	200000e0 	.word	0x200000e0

08007c3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c52:	4808      	ldr	r0, [pc, #32]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c54:	f7ff fd8c 	bl	8007770 <USBD_GetString>
 8007c58:	e004      	b.n	8007c64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4904      	ldr	r1, [pc, #16]	; (8007c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c5e:	4805      	ldr	r0, [pc, #20]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c60:	f7ff fd86 	bl	8007770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000c5c 	.word	0x20000c5c
 8007c74:	0800843c 	.word	0x0800843c

08007c78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c90:	f7ff fd6e 	bl	8007770 <USBD_GetString>
 8007c94:	e004      	b.n	8007ca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c9c:	f7ff fd68 	bl	8007770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000c5c 	.word	0x20000c5c
 8007cb0:	08008448 	.word	0x08008448

08007cb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <Get_SerialNum+0x44>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cc0:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <Get_SerialNum+0x48>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <Get_SerialNum+0x4c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cda:	2208      	movs	r2, #8
 8007cdc:	4909      	ldr	r1, [pc, #36]	; (8007d04 <Get_SerialNum+0x50>)
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f814 	bl	8007d0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	4908      	ldr	r1, [pc, #32]	; (8007d08 <Get_SerialNum+0x54>)
 8007ce8:	68b8      	ldr	r0, [r7, #8]
 8007cea:	f000 f80f 	bl	8007d0c <IntToUnicode>
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	1fff7a10 	.word	0x1fff7a10
 8007cfc:	1fff7a14 	.word	0x1fff7a14
 8007d00:	1fff7a18 	.word	0x1fff7a18
 8007d04:	200000e2 	.word	0x200000e2
 8007d08:	200000f2 	.word	0x200000f2

08007d0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
 8007d22:	e027      	b.n	8007d74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	0f1b      	lsrs	r3, r3, #28
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	d80b      	bhi.n	8007d44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	0f1b      	lsrs	r3, r3, #28
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	4619      	mov	r1, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3230      	adds	r2, #48	; 0x30
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e00a      	b.n	8007d5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	0f1b      	lsrs	r3, r3, #28
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	440b      	add	r3, r1
 8007d54:	3237      	adds	r2, #55	; 0x37
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	3301      	adds	r3, #1
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	4413      	add	r3, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	3301      	adds	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
 8007d74:	7dfa      	ldrb	r2, [r7, #23]
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d3d3      	bcc.n	8007d24 <IntToUnicode+0x18>
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	605a      	str	r2, [r3, #4]
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dac:	d13a      	bne.n	8007e24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ddc:	230a      	movs	r3, #10
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4619      	mov	r1, r3
 8007de6:	4812      	ldr	r0, [pc, #72]	; (8007e30 <HAL_PCD_MspInit+0xa4>)
 8007de8:	f7f9 f888 	bl	8000efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	4a0e      	ldr	r2, [pc, #56]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df6:	6353      	str	r3, [r2, #52]	; 0x34
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e06:	6453      	str	r3, [r2, #68]	; 0x44
 8007e08:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <HAL_PCD_MspInit+0xa0>)
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e14:	2200      	movs	r2, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	2043      	movs	r0, #67	; 0x43
 8007e1a:	f7f8 ffa6 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e1e:	2043      	movs	r0, #67	; 0x43
 8007e20:	f7f8 ffbf 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e24:	bf00      	nop
 8007e26:	3728      	adds	r7, #40	; 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40020000 	.word	0x40020000

08007e34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fe fb31 	bl	80064b2 <USBD_LL_SetupStage>
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	4619      	mov	r1, r3
 8007e82:	f7fe fb6b 	bl	800655c <USBD_LL_DataOutStage>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	334c      	adds	r3, #76	; 0x4c
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f7fe fc04 	bl	80066c2 <USBD_LL_DataInStage>
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fd38 	bl	8006946 <USBD_LL_SOF>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d001      	beq.n	8007ef6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ef2:	f7f8 fc37 	bl	8000764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007efc:	7bfa      	ldrb	r2, [r7, #15]
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fce2 	bl	80068ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fc8a 	bl	8006826 <USBD_LL_Reset>
}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fcdd 	bl	80068ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_PCD_SuspendCallback+0x48>)
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	4a03      	ldr	r2, [pc, #12]	; (8007f64 <HAL_PCD_SuspendCallback+0x48>)
 8007f56:	f043 0306 	orr.w	r3, r3, #6
 8007f5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fccd 	bl	8006916 <USBD_LL_Resume>
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fd25 	bl	80069ea <USBD_LL_IsoOUTIncomplete>
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fce1 	bl	8006986 <USBD_LL_IsoINIncomplete>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fd37 	bl	8006a4e <USBD_LL_DevConnected>
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fd34 	bl	8006a64 <USBD_LL_DevDisconnected>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d13c      	bne.n	800808e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008014:	4a20      	ldr	r2, [pc, #128]	; (8008098 <USBD_LL_Init+0x94>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <USBD_LL_Init+0x94>)
 8008020:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008024:	4b1c      	ldr	r3, [pc, #112]	; (8008098 <USBD_LL_Init+0x94>)
 8008026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800802a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <USBD_LL_Init+0x94>)
 800802e:	2204      	movs	r2, #4
 8008030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008032:	4b19      	ldr	r3, [pc, #100]	; (8008098 <USBD_LL_Init+0x94>)
 8008034:	2202      	movs	r2, #2
 8008036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008038:	4b17      	ldr	r3, [pc, #92]	; (8008098 <USBD_LL_Init+0x94>)
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <USBD_LL_Init+0x94>)
 8008040:	2202      	movs	r2, #2
 8008042:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008044:	4b14      	ldr	r3, [pc, #80]	; (8008098 <USBD_LL_Init+0x94>)
 8008046:	2200      	movs	r2, #0
 8008048:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800804a:	4b13      	ldr	r3, [pc, #76]	; (8008098 <USBD_LL_Init+0x94>)
 800804c:	2200      	movs	r2, #0
 800804e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008050:	4b11      	ldr	r3, [pc, #68]	; (8008098 <USBD_LL_Init+0x94>)
 8008052:	2200      	movs	r2, #0
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <USBD_LL_Init+0x94>)
 8008058:	2200      	movs	r2, #0
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800805c:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <USBD_LL_Init+0x94>)
 800805e:	2200      	movs	r2, #0
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008062:	480d      	ldr	r0, [pc, #52]	; (8008098 <USBD_LL_Init+0x94>)
 8008064:	f7f9 f901 	bl	800126a <HAL_PCD_Init>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800806e:	f7f8 fb79 	bl	8000764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008072:	2180      	movs	r1, #128	; 0x80
 8008074:	4808      	ldr	r0, [pc, #32]	; (8008098 <USBD_LL_Init+0x94>)
 8008076:	f7fa fb58 	bl	800272a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800807a:	2240      	movs	r2, #64	; 0x40
 800807c:	2100      	movs	r1, #0
 800807e:	4806      	ldr	r0, [pc, #24]	; (8008098 <USBD_LL_Init+0x94>)
 8008080:	f7fa fb0c 	bl	800269c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008084:	2280      	movs	r2, #128	; 0x80
 8008086:	2101      	movs	r1, #1
 8008088:	4803      	ldr	r0, [pc, #12]	; (8008098 <USBD_LL_Init+0x94>)
 800808a:	f7fa fb07 	bl	800269c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000e5c 	.word	0x20000e5c

0800809c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f9 f9f6 	bl	80014a4 <HAL_PCD_Start>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f942 	bl	8008348 <USBD_Get_USB_Status>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	461a      	mov	r2, r3
 80080e0:	4603      	mov	r3, r0
 80080e2:	70fb      	strb	r3, [r7, #3]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70bb      	strb	r3, [r7, #2]
 80080e8:	4613      	mov	r3, r2
 80080ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080fa:	78bb      	ldrb	r3, [r7, #2]
 80080fc:	883a      	ldrh	r2, [r7, #0]
 80080fe:	78f9      	ldrb	r1, [r7, #3]
 8008100:	f7f9 fec7 	bl	8001e92 <HAL_PCD_EP_Open>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f91c 	bl	8008348 <USBD_Get_USB_Status>
 8008110:	4603      	mov	r3, r0
 8008112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008114:	7bbb      	ldrb	r3, [r7, #14]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7f9 ff10 	bl	8001f62 <HAL_PCD_EP_Close>
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f8fd 	bl	8008348 <USBD_Get_USB_Status>
 800814e:	4603      	mov	r3, r0
 8008150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008152:	7bbb      	ldrb	r3, [r7, #14]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7f9 ffe8 	bl	8002150 <HAL_PCD_EP_SetStall>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f8de 	bl	8008348 <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fa f82d 	bl	8002218 <HAL_PCD_EP_ClrStall>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f8bf 	bl	8008348 <USBD_Get_USB_Status>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	da0b      	bge.n	800820c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	333e      	adds	r3, #62	; 0x3e
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	e00b      	b.n	8008224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008222:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7f9 fdfa 	bl	8001e48 <HAL_PCD_SetAddress>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f874 	bl	8008348 <USBD_Get_USB_Status>
 8008260:	4603      	mov	r3, r0
 8008262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008264:	7bbb      	ldrb	r3, [r7, #14]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	460b      	mov	r3, r1
 800827c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800828c:	7af9      	ldrb	r1, [r7, #11]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	f7f9 ff13 	bl	80020bc <HAL_PCD_EP_Transmit>
 8008296:	4603      	mov	r3, r0
 8008298:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f853 	bl	8008348 <USBD_Get_USB_Status>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	460b      	mov	r3, r1
 80082be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ce:	7af9      	ldrb	r1, [r7, #11]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	f7f9 fe8f 	bl	8001ff6 <HAL_PCD_EP_Receive>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f832 	bl	8008348 <USBD_Get_USB_Status>
 80082e4:	4603      	mov	r3, r0
 80082e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7f9 febf 	bl	800208c <HAL_PCD_EP_GetRxCount>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <USBD_static_malloc+0x18>)
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20001368 	.word	0x20001368

08008334 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]

}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	2b03      	cmp	r3, #3
 800835a:	d817      	bhi.n	800838c <USBD_Get_USB_Status+0x44>
 800835c:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <USBD_Get_USB_Status+0x1c>)
 800835e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008362:	bf00      	nop
 8008364:	08008375 	.word	0x08008375
 8008368:	0800837b 	.word	0x0800837b
 800836c:	08008381 	.word	0x08008381
 8008370:	08008387 	.word	0x08008387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
    break;
 8008378:	e00b      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	73fb      	strb	r3, [r7, #15]
    break;
 800837e:	e008      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e005      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
    break;
 800838a:	e002      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	bf00      	nop
  }
  return usb_status;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	; (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	; (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	; (80083e4 <__libc_init_array+0x44>)
 80083b4:	f000 f820 	bl	80083f8 <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	08008478 	.word	0x08008478
 80083dc:	08008478 	.word	0x08008478
 80083e0:	08008478 	.word	0x08008478
 80083e4:	0800847c 	.word	0x0800847c

080083e8 <memset>:
 80083e8:	4402      	add	r2, r0
 80083ea:	4603      	mov	r3, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
