
BOOTLOADER_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063cc  080063cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  20000074  08006448  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08006448  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3f0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002537  00000000  00000000  0002c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002f328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226e4  00000000  00000000  0002fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2db  00000000  00000000  0005228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d66  00000000  00000000  00061567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  0012b320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006054 	.word	0x08006054

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006054 	.word	0x08006054

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <bootloader_handle_error>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bootloader_handle_error(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  bsp_uart1_printf(BOOTLOADER_RESEND_DATA);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <bootloader_handle_error+0x10>)
 80005ca:	f001 f8bd 	bl	8001748 <bsp_uart1_printf>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800606c 	.word	0x0800606c

080005d8 <bootloader_handle_command>:

void bootloader_handle_command(bootloader_command_data_t comand_data)
{
 80005d8:	b084      	sub	sp, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	b09c      	sub	sp, #112	; 0x70
 80005de:	af00      	add	r7, sp, #0
 80005e0:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 80005e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  switch (comand_data.cmd)
 80005e8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	f200 81cb 	bhi.w	8000988 <bootloader_handle_command+0x3b0>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <bootloader_handle_command+0x20>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	0800060d 	.word	0x0800060d
 80005fc:	0800069b 	.word	0x0800069b
 8000600:	080007b1 	.word	0x080007b1
 8000604:	080007fb 	.word	0x080007fb
 8000608:	0800080f 	.word	0x0800080f
  {
  case COMMAND_READ:
  {
    /* code */
    char tx[20];
    bsp_uart1_printf((uint8_t *) "\r\nCOMMAND_READ\r\n");
 800060c:	48ca      	ldr	r0, [pc, #808]	; (8000938 <bootloader_handle_command+0x360>)
 800060e:	f001 f89b 	bl	8001748 <bsp_uart1_printf>
    uint32_t address_value = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t address       = (comand_data.address[0] << 24) | (comand_data.address[1] << 16) | (comand_data.address[2] << 8) | (comand_data.address[3]);
 8000616:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800061a:	061a      	lsls	r2, r3, #24
 800061c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	431a      	orrs	r2, r3
 8000624:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	4313      	orrs	r3, r2
 800062c:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8000630:	4313      	orrs	r3, r2
 8000632:	653b      	str	r3, [r7, #80]	; 0x50

    sprintf(tx, "Address: %lx\r\n", address);
 8000634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000638:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800063a:	49c0      	ldr	r1, [pc, #768]	; (800093c <bootloader_handle_command+0x364>)
 800063c:	4618      	mov	r0, r3
 800063e:	f005 f8a9 	bl	8005794 <siprintf>
    bsp_uart1_printf((uint8_t *) tx);
 8000642:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f87e 	bl	8001748 <bsp_uart1_printf>

    for (uint8_t i = 0; i < comand_data.len / 4; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000652:	e019      	b.n	8000688 <bootloader_handle_command+0xb0>
    {
      address_value = *(uint32_t *) (address + i * 4);
 8000654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	461a      	mov	r2, r3
 800065c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800065e:	4413      	add	r3, r2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
      sprintf(tx, "Value %d: %lx\r\n", i, address_value);
 8000664:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000668:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800066e:	49b4      	ldr	r1, [pc, #720]	; (8000940 <bootloader_handle_command+0x368>)
 8000670:	f005 f890 	bl	8005794 <siprintf>
      bsp_uart1_printf((uint8_t *) tx);
 8000674:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f865 	bl	8001748 <bsp_uart1_printf>
    for (uint8_t i = 0; i < comand_data.len / 4; i++)
 800067e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000682:	3301      	adds	r3, #1
 8000684:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000688:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000694:	429a      	cmp	r2, r3
 8000696:	d3dd      	bcc.n	8000654 <bootloader_handle_command+0x7c>
    }
    break;
 8000698:	e17b      	b.n	8000992 <bootloader_handle_command+0x3ba>
  }
  case COMMAND_WRITE:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "\r\nCOMMAND_WRITE\r\n");
 800069a:	48aa      	ldr	r0, [pc, #680]	; (8000944 <bootloader_handle_command+0x36c>)
 800069c:	f001 f854 	bl	8001748 <bsp_uart1_printf>
    uint32_t address = (comand_data.address[0] << 24) | (comand_data.address[1] << 16) | (comand_data.address[2] << 8) | (comand_data.address[3]);
 80006a0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80006a4:	061a      	lsls	r2, r3, #24
 80006a6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80006aa:	041b      	lsls	r3, r3, #16
 80006ac:	431a      	orrs	r2, r3
 80006ae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 80006ba:	4313      	orrs	r3, r2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t  check   = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    for (uint8_t i = 0; i < (comand_data.len / 4); i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80006ca:	e015      	b.n	80006f8 <bootloader_handle_command+0x120>
    {
      if (*(uint32_t *) (address + i * 4) != 0xFFFFFFFF)
 80006cc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	461a      	mov	r2, r3
 80006d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006d6:	4413      	add	r3, r2
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006de:	d006      	beq.n	80006ee <bootloader_handle_command+0x116>
      {
        check = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        bsp_uart1_printf((uint8_t *) "erase memory to write !!!\r\n");
 80006e6:	4898      	ldr	r0, [pc, #608]	; (8000948 <bootloader_handle_command+0x370>)
 80006e8:	f001 f82e 	bl	8001748 <bsp_uart1_printf>
        break;
 80006ec:	e00c      	b.n	8000708 <bootloader_handle_command+0x130>
    for (uint8_t i = 0; i < (comand_data.len / 4); i++)
 80006ee:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80006f2:	3301      	adds	r3, #1
 80006f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80006f8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8000704:	429a      	cmp	r2, r3
 8000706:	d3e1      	bcc.n	80006cc <bootloader_handle_command+0xf4>
      }
    }
    if (check)
 8000708:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 813d 	bne.w	800098c <bootloader_handle_command+0x3b4>
      break;

    uint32_t data_write_flash[8] = { 0 };
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2220      	movs	r2, #32
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f005 f833 	bl	8005784 <memset>
    uint8_t  index               = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    for (uint8_t i = 0; i < comand_data.len; i += 4)
 8000724:	2300      	movs	r3, #0
 8000726:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800072a:	e02d      	b.n	8000788 <bootloader_handle_command+0x1b0>
    {
      data_write_flash[index] = (comand_data.data[i] << 24) | (comand_data.data[i + 1] << 16) | (comand_data.data[i + 2] << 8) | (comand_data.data[i + 3]);
 800072c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000730:	3378      	adds	r3, #120	; 0x78
 8000732:	443b      	add	r3, r7
 8000734:	7b5b      	ldrb	r3, [r3, #13]
 8000736:	061a      	lsls	r2, r3, #24
 8000738:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800073c:	3301      	adds	r3, #1
 800073e:	3378      	adds	r3, #120	; 0x78
 8000740:	443b      	add	r3, r7
 8000742:	7b5b      	ldrb	r3, [r3, #13]
 8000744:	041b      	lsls	r3, r3, #16
 8000746:	431a      	orrs	r2, r3
 8000748:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800074c:	3302      	adds	r3, #2
 800074e:	3378      	adds	r3, #120	; 0x78
 8000750:	443b      	add	r3, r7
 8000752:	7b5b      	ldrb	r3, [r3, #13]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	4313      	orrs	r3, r2
 8000758:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800075c:	3203      	adds	r2, #3
 800075e:	3278      	adds	r2, #120	; 0x78
 8000760:	443a      	add	r2, r7
 8000762:	7b52      	ldrb	r2, [r2, #13]
 8000764:	431a      	orrs	r2, r3
 8000766:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	3370      	adds	r3, #112	; 0x70
 800076e:	443b      	add	r3, r7
 8000770:	f843 2c6c 	str.w	r2, [r3, #-108]
      index++;
 8000774:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000778:	3301      	adds	r3, #1
 800077a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    for (uint8_t i = 0; i < comand_data.len; i += 4)
 800077e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000782:	3304      	adds	r3, #4
 8000784:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000788:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800078c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000790:	429a      	cmp	r2, r3
 8000792:	d3cb      	bcc.n	800072c <bootloader_handle_command+0x154>
    }

    bsp_flash_write(address, (uint32_t *) &data_write_flash[0], comand_data.len / 4);
 8000794:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000798:	089b      	lsrs	r3, r3, #2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80007a4:	f000 fee4 	bl	8001570 <bsp_flash_write>
    bsp_uart1_printf((uint8_t *) "write flash memory ok !!!\r\n");
 80007a8:	4868      	ldr	r0, [pc, #416]	; (800094c <bootloader_handle_command+0x374>)
 80007aa:	f000 ffcd 	bl	8001748 <bsp_uart1_printf>
    break;
 80007ae:	e0f0      	b.n	8000992 <bootloader_handle_command+0x3ba>
  }
  case COMMAND_ERASE:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "\r\nCOMMAND_ERASE\r\n");
 80007b0:	4867      	ldr	r0, [pc, #412]	; (8000950 <bootloader_handle_command+0x378>)
 80007b2:	f000 ffc9 	bl	8001748 <bsp_uart1_printf>
    uint32_t address      = (comand_data.address[0] << 24) | (comand_data.address[1] << 16) | (comand_data.address[2] << 8) | (comand_data.address[3]);
 80007b6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80007ba:	061a      	lsls	r2, r3, #24
 80007bc:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	431a      	orrs	r2, r3
 80007c4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	4313      	orrs	r3, r2
 80007cc:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 80007d0:	4313      	orrs	r3, r2
 80007d2:	663b      	str	r3, [r7, #96]	; 0x60
    uint8_t  sector_erase = bsp_get_sector_from_address(address);
 80007d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80007d6:	f000 fd89 	bl	80012ec <bsp_get_sector_from_address>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    bsp_flash_erase(bsp_get_address_from_sector(sector_erase));
 80007e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fdfb 	bl	80013e0 <bsp_get_address_from_sector>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fe43 	bl	8001478 <bsp_flash_erase>
    bsp_uart1_printf((uint8_t *) "Erase sector okok !!!\r\n");
 80007f2:	4858      	ldr	r0, [pc, #352]	; (8000954 <bootloader_handle_command+0x37c>)
 80007f4:	f000 ffa8 	bl	8001748 <bsp_uart1_printf>
    break;
 80007f8:	e0cb      	b.n	8000992 <bootloader_handle_command+0x3ba>
  }
  case COMMAND_JUMP:
  {
    /* code */
    /* COMMAND_JUMP */
    bsp_uart1_printf((uint8_t *) "\r\nCOMMAND_JUMP\r\n");
 80007fa:	4857      	ldr	r0, [pc, #348]	; (8000958 <bootloader_handle_command+0x380>)
 80007fc:	f000 ffa4 	bl	8001748 <bsp_uart1_printf>
    bsp_uart1_printf((uint8_t *) "Jump to application ok !!!\r\n");
 8000800:	4856      	ldr	r0, [pc, #344]	; (800095c <bootloader_handle_command+0x384>)
 8000802:	f000 ffa1 	bl	8001748 <bsp_uart1_printf>
    flag_ota_complete = TRUE;
 8000806:	4b56      	ldr	r3, [pc, #344]	; (8000960 <bootloader_handle_command+0x388>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    break;
 800080c:	e0c1      	b.n	8000992 <bootloader_handle_command+0x3ba>
  }
  case COMMAND_UPDATE:
  {
    /* code */
    if (comand_data.status_update == 1)
 800080e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000812:	2b01      	cmp	r3, #1
 8000814:	d106      	bne.n	8000824 <bootloader_handle_command+0x24c>
    {
      /* Update firmware */
      flag_ota_update = TRUE;
 8000816:	4b53      	ldr	r3, [pc, #332]	; (8000964 <bootloader_handle_command+0x38c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
      bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
 800081c:	4852      	ldr	r0, [pc, #328]	; (8000968 <bootloader_handle_command+0x390>)
 800081e:	f000 ff93 	bl	8001748 <bsp_uart1_printf>
        else
          /* data write successful */
          bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
      }
    }
    break;
 8000822:	e0b5      	b.n	8000990 <bootloader_handle_command+0x3b8>
    else if (comand_data.status_update == 2)
 8000824:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000828:	2b02      	cmp	r3, #2
 800082a:	d103      	bne.n	8000834 <bootloader_handle_command+0x25c>
      bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
 800082c:	484e      	ldr	r0, [pc, #312]	; (8000968 <bootloader_handle_command+0x390>)
 800082e:	f000 ff8b 	bl	8001748 <bsp_uart1_printf>
    break;
 8000832:	e0ad      	b.n	8000990 <bootloader_handle_command+0x3b8>
    else if (comand_data.status_update == 3)
 8000834:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000838:	2b03      	cmp	r3, #3
 800083a:	d103      	bne.n	8000844 <bootloader_handle_command+0x26c>
      bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
 800083c:	484a      	ldr	r0, [pc, #296]	; (8000968 <bootloader_handle_command+0x390>)
 800083e:	f000 ff83 	bl	8001748 <bsp_uart1_printf>
    break;
 8000842:	e0a5      	b.n	8000990 <bootloader_handle_command+0x3b8>
    else if (comand_data.status_update == 4)
 8000844:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000848:	2b04      	cmp	r3, #4
 800084a:	d152      	bne.n	80008f2 <bootloader_handle_command+0x31a>
      if (comand_data.size_flash < max_size_flash)
 800084c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <bootloader_handle_command+0x394>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d202      	bcs.n	800085e <bootloader_handle_command+0x286>
        flag_size_flash = TRUE;
 8000858:	4b45      	ldr	r3, [pc, #276]	; (8000970 <bootloader_handle_command+0x398>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
      if ((flag_ota_update == TRUE) && (flag_size_flash == TRUE))
 800085e:	4b41      	ldr	r3, [pc, #260]	; (8000964 <bootloader_handle_command+0x38c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d141      	bne.n	80008ea <bootloader_handle_command+0x312>
 8000866:	4b42      	ldr	r3, [pc, #264]	; (8000970 <bootloader_handle_command+0x398>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d13d      	bne.n	80008ea <bootloader_handle_command+0x312>
        flag_earse_ok = FALSE;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <bootloader_handle_command+0x39c>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
        uint8_t start_sector  = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION);
 8000874:	4840      	ldr	r0, [pc, #256]	; (8000978 <bootloader_handle_command+0x3a0>)
 8000876:	f000 fd39 	bl	80012ec <bsp_get_sector_from_address>
 800087a:	4603      	mov	r3, r0
 800087c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        uint8_t end_sector    = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION + comand_data.size_flash);
 8000880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000884:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000888:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fd2d 	bl	80012ec <bsp_get_sector_from_address>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        uint8_t number_sector = end_sector - start_sector + 1;
 8000898:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800089c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        for (uint8_t i = 0; i < number_sector; i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80008b0:	e012      	b.n	80008d8 <bootloader_handle_command+0x300>
          bsp_flash_erase(bsp_get_address_from_sector(start_sector));
 80008b2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fd92 	bl	80013e0 <bsp_get_address_from_sector>
 80008bc:	4603      	mov	r3, r0
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fdda 	bl	8001478 <bsp_flash_erase>
          start_sector++;
 80008c4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80008c8:	3301      	adds	r3, #1
 80008ca:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        for (uint8_t i = 0; i < number_sector; i++)
 80008ce:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80008d2:	3301      	adds	r3, #1
 80008d4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80008d8:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80008dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d3e6      	bcc.n	80008b2 <bootloader_handle_command+0x2da>
        flag_earse_ok = TRUE;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <bootloader_handle_command+0x39c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
      bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
 80008ea:	481f      	ldr	r0, [pc, #124]	; (8000968 <bootloader_handle_command+0x390>)
 80008ec:	f000 ff2c 	bl	8001748 <bsp_uart1_printf>
    break;
 80008f0:	e04e      	b.n	8000990 <bootloader_handle_command+0x3b8>
    else if (comand_data.status_update == 5)
 80008f2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d14a      	bne.n	8000990 <bootloader_handle_command+0x3b8>
      if (flag_ota_update && flag_size_flash)
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <bootloader_handle_command+0x38c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d046      	beq.n	8000990 <bootloader_handle_command+0x3b8>
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <bootloader_handle_command+0x398>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d042      	beq.n	8000990 <bootloader_handle_command+0x3b8>
        bootloader_handle_data_receive(&hex_data, &comand_data.data[0], comand_data.len);
 800090a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 0185 	add.w	r1, r7, #133	; 0x85
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fbd1 	bl	80010c0 <bootloader_handle_data_receive>
        if (!bootloader_handle_write_flash_memory(&hex_data))
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fa96 	bl	8000e54 <bootloader_handle_write_flash_memory>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d128      	bne.n	8000980 <bootloader_handle_command+0x3a8>
          bsp_uart1_printf(BOOTLOADER_CANCEL_UPDATE);
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <bootloader_handle_command+0x3a4>)
 8000930:	f000 ff0a 	bl	8001748 <bsp_uart1_printf>
    break;
 8000934:	e02c      	b.n	8000990 <bootloader_handle_command+0x3b8>
 8000936:	bf00      	nop
 8000938:	08006070 	.word	0x08006070
 800093c:	08006084 	.word	0x08006084
 8000940:	08006094 	.word	0x08006094
 8000944:	080060a4 	.word	0x080060a4
 8000948:	080060b8 	.word	0x080060b8
 800094c:	080060d4 	.word	0x080060d4
 8000950:	080060f0 	.word	0x080060f0
 8000954:	08006104 	.word	0x08006104
 8000958:	0800611c 	.word	0x0800611c
 800095c:	08006130 	.word	0x08006130
 8000960:	20000092 	.word	0x20000092
 8000964:	20000090 	.word	0x20000090
 8000968:	08006150 	.word	0x08006150
 800096c:	20000000 	.word	0x20000000
 8000970:	20000091 	.word	0x20000091
 8000974:	20000093 	.word	0x20000093
 8000978:	08008000 	.word	0x08008000
 800097c:	08006154 	.word	0x08006154
          bsp_uart1_printf(BOOTLOADER_CONFIRM_CHAR);
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <bootloader_handle_command+0x3c8>)
 8000982:	f000 fee1 	bl	8001748 <bsp_uart1_printf>
    break;
 8000986:	e003      	b.n	8000990 <bootloader_handle_command+0x3b8>
  }
  default: break;
 8000988:	bf00      	nop
 800098a:	e002      	b.n	8000992 <bootloader_handle_command+0x3ba>
      break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <bootloader_handle_command+0x3ba>
    break;
 8000990:	bf00      	nop
  }
}
 8000992:	bf00      	nop
 8000994:	3770      	adds	r7, #112	; 0x70
 8000996:	46bd      	mov	sp, r7
 8000998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr
 80009a0:	08006150 	.word	0x08006150

080009a4 <bootloader_start_up>:

void bootloader_start_up(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
  bsp_uart_set_callback_bootloader_command(bootloader_handle_command);
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <bootloader_start_up+0x58>)
 80009ac:	f000 fe8c 	bl	80016c8 <bsp_uart_set_callback_bootloader_command>
  bsp_uart_set_callback_bootloader_error(bootloader_handle_error);
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <bootloader_start_up+0x5c>)
 80009b2:	f000 fe99 	bl	80016e8 <bsp_uart_set_callback_bootloader_error>
  bsp_uart_init();
 80009b6:	f000 fea7 	bl	8001708 <bsp_uart_init>

  bsp_uart1_printf((uint8_t *) "Bootloader stm32!!!");
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <bootloader_start_up+0x60>)
 80009bc:	f000 fec4 	bl	8001748 <bsp_uart1_printf>

  while (1)
  {
    if (flag_ota_complete == TRUE)
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <bootloader_start_up+0x64>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1fb      	bne.n	80009c0 <bootloader_start_up+0x1c>
    {
      bsp_uart_deinit_peripheral();
 80009c8:	f000 fefa 	bl	80017c0 <bsp_uart_deinit_peripheral>
      HAL_RCC_DeInit();
 80009cc:	f003 f8a8 	bl	8003b20 <HAL_RCC_DeInit>

      SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <bootloader_start_up+0x68>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <bootloader_start_up+0x68>)
 80009d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80009da:	6253      	str	r3, [r2, #36]	; 0x24
      __set_MSP(*((volatile uint32_t *) ADDRESS_FIRMWARE_APPLICATION));
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <bootloader_start_up+0x6c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f383 8808 	msr	MSP, r3
}
 80009e8:	bf00      	nop
      uint32_t jump_address       = *((volatile uint32_t *) (ADDRESS_FIRMWARE_APPLICATION + 4));
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <bootloader_start_up+0x70>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
      void (*reset_handler)(void) = (void *) jump_address;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	60bb      	str	r3, [r7, #8]
      reset_handler();
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4798      	blx	r3
    if (flag_ota_complete == TRUE)
 80009f8:	e7e2      	b.n	80009c0 <bootloader_start_up+0x1c>
 80009fa:	bf00      	nop
 80009fc:	080005d9 	.word	0x080005d9
 8000a00:	080005c5 	.word	0x080005c5
 8000a04:	08006158 	.word	0x08006158
 8000a08:	20000092 	.word	0x20000092
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	08008000 	.word	0x08008000
 8000a14:	08008004 	.word	0x08008004

08000a18 <bootloader_command_handle_data>:
/* Function definitions ----------------------------------------------- */
uint16_t cal_crc = 0;
uint8_t  buffer_data[256];

bootloader_command_status_t bootloader_command_handle_data(bootloader_command_data_t *command_data, uint8_t *data, uint16_t size)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4613      	mov	r3, r2
 8000a24:	80fb      	strh	r3, [r7, #6]
  bootloader_command_field_t field_frame = START_FRAME;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
  /* parse string to hex form data hex */
  for (uint8_t count = 0; count < size; count++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	75bb      	strb	r3, [r7, #22]
 8000a2e:	e1cc      	b.n	8000dca <bootloader_command_handle_data+0x3b2>
  {
    switch (field_frame)
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	f200 81c4 	bhi.w	8000dc0 <bootloader_command_handle_data+0x3a8>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <bootloader_command_handle_data+0x28>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a8b 	.word	0x08000a8b
 8000a48:	08000af1 	.word	0x08000af1
 8000a4c:	08000b47 	.word	0x08000b47
 8000a50:	08000beb 	.word	0x08000beb
 8000a54:	08000c25 	.word	0x08000c25
 8000a58:	08000c5f 	.word	0x08000c5f
 8000a5c:	08000d65 	.word	0x08000d65
 8000a60:	08000d95 	.word	0x08000d95
    {
    case START_FRAME:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000a64:	7dbb      	ldrb	r3, [r7, #22]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4413      	add	r3, r2
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	48a3      	ldr	r0, [pc, #652]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000a70:	f000 fff6 	bl	8001a60 <bsp_utility_parse_element>
      if (buffer_data[0] != START)
 8000a74:	4ba1      	ldr	r3, [pc, #644]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b55      	cmp	r3, #85	; 0x55
 8000a7a:	d001      	beq.n	8000a80 <bootloader_command_handle_data+0x68>
        return bootloader_command_error;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e1ab      	b.n	8000dd8 <bootloader_command_handle_data+0x3c0>
      else
      {
        count       = 1U;
 8000a80:	2301      	movs	r3, #1
 8000a82:	75bb      	strb	r3, [r7, #22]
        field_frame = CMD;
 8000a84:	2301      	movs	r3, #1
 8000a86:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000a88:	e19c      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CMD:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000a8a:	7dbb      	ldrb	r3, [r7, #22]
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	4413      	add	r3, r2
 8000a90:	2202      	movs	r2, #2
 8000a92:	4619      	mov	r1, r3
 8000a94:	4899      	ldr	r0, [pc, #612]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000a96:	f000 ffe3 	bl	8001a60 <bsp_utility_parse_element>
      command_data->cmd = buffer_data[0];
 8000a9a:	4b98      	ldr	r3, [pc, #608]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	701a      	strb	r2, [r3, #0]
      count             = 3U;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	75bb      	strb	r3, [r7, #22]
      if (command_data->cmd == COMMAND_READ)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <bootloader_command_handle_data+0x9c>
        field_frame = CMD_READ;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	75fb      	strb	r3, [r7, #23]
        field_frame = CMD_JUMP;
      else if (command_data->cmd == COMMAND_UPDATE)
        field_frame = CMD_UPDATE;
      else
        return bootloader_command_error;
      break;
 8000ab2:	e187      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
      else if (command_data->cmd == COMMAND_WRITE)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d102      	bne.n	8000ac2 <bootloader_command_handle_data+0xaa>
        field_frame = CMD_WRITE;
 8000abc:	2303      	movs	r3, #3
 8000abe:	75fb      	strb	r3, [r7, #23]
      break;
 8000ac0:	e180      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
      else if (command_data->cmd == COMMAND_ERASE)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d102      	bne.n	8000ad0 <bootloader_command_handle_data+0xb8>
        field_frame = CMD_EARSE;
 8000aca:	2304      	movs	r3, #4
 8000acc:	75fb      	strb	r3, [r7, #23]
      break;
 8000ace:	e179      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
      else if (command_data->cmd == COMMAND_JUMP)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d102      	bne.n	8000ade <bootloader_command_handle_data+0xc6>
        field_frame = CMD_JUMP;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	75fb      	strb	r3, [r7, #23]
      break;
 8000adc:	e172      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
      else if (command_data->cmd == COMMAND_UPDATE)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d102      	bne.n	8000aec <bootloader_command_handle_data+0xd4>
        field_frame = CMD_UPDATE;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8000aea:	e16b      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
        return bootloader_command_error;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e173      	b.n	8000dd8 <bootloader_command_handle_data+0x3c0>
    }
    case CMD_READ:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 8000af0:	7dbb      	ldrb	r3, [r7, #22]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	2208      	movs	r2, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4880      	ldr	r0, [pc, #512]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000afc:	f000 ffb0 	bl	8001a60 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 8000b00:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000b08:	4b7c      	ldr	r3, [pc, #496]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b0a:	785a      	ldrb	r2, [r3, #1]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000b10:	4b7a      	ldr	r3, [pc, #488]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b12:	789a      	ldrb	r2, [r3, #2]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000b18:	4b78      	ldr	r3, [pc, #480]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b1a:	78da      	ldrb	r2, [r3, #3]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	711a      	strb	r2, [r3, #4]
      count                    = 12U;
 8000b20:	230c      	movs	r3, #12
 8000b22:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000b24:	7dbb      	ldrb	r3, [r7, #22]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4413      	add	r3, r2
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4873      	ldr	r0, [pc, #460]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b30:	f000 ff96 	bl	8001a60 <bsp_utility_parse_element>
      command_data->len = buffer_data[0];
 8000b34:	4b71      	ldr	r3, [pc, #452]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	731a      	strb	r2, [r3, #12]
      field_frame       = CHECK_CRC;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	75fb      	strb	r3, [r7, #23]
      count             = 13U;
 8000b40:	230d      	movs	r3, #13
 8000b42:	75bb      	strb	r3, [r7, #22]
      break;
 8000b44:	e13e      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CMD_WRITE:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 8000b46:	7dbb      	ldrb	r3, [r7, #22]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	486a      	ldr	r0, [pc, #424]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b52:	f000 ff85 	bl	8001a60 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 8000b56:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b60:	785a      	ldrb	r2, [r3, #1]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000b66:	4b65      	ldr	r3, [pc, #404]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b68:	789a      	ldrb	r2, [r3, #2]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000b6e:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b70:	78da      	ldrb	r2, [r3, #3]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	711a      	strb	r2, [r3, #4]
      count                    = 12U;
 8000b76:	230c      	movs	r3, #12
 8000b78:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000b7a:	7dbb      	ldrb	r3, [r7, #22]
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	4413      	add	r3, r2
 8000b80:	2202      	movs	r2, #2
 8000b82:	4619      	mov	r1, r3
 8000b84:	485d      	ldr	r0, [pc, #372]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b86:	f000 ff6b 	bl	8001a60 <bsp_utility_parse_element>
      command_data->len = buffer_data[0];
 8000b8a:	4b5c      	ldr	r3, [pc, #368]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	731a      	strb	r2, [r3, #12]
      count             = 14U;
 8000b92:	230e      	movs	r3, #14
 8000b94:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], command_data->len * 2U);
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	18d1      	adds	r1, r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	7b1b      	ldrb	r3, [r3, #12]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4855      	ldr	r0, [pc, #340]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000ba8:	f000 ff5a 	bl	8001a60 <bsp_utility_parse_element>
      for (uint8_t i = 0; i < command_data->len; i++) command_data->data[i] = buffer_data[i];
 8000bac:	2300      	movs	r3, #0
 8000bae:	757b      	strb	r3, [r7, #21]
 8000bb0:	e00a      	b.n	8000bc8 <bootloader_command_handle_data+0x1b0>
 8000bb2:	7d7a      	ldrb	r2, [r7, #21]
 8000bb4:	7d7b      	ldrb	r3, [r7, #21]
 8000bb6:	4951      	ldr	r1, [pc, #324]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000bb8:	5c89      	ldrb	r1, [r1, r2]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	735a      	strb	r2, [r3, #13]
 8000bc2:	7d7b      	ldrb	r3, [r7, #21]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	757b      	strb	r3, [r7, #21]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7b1b      	ldrb	r3, [r3, #12]
 8000bcc:	7d7a      	ldrb	r2, [r7, #21]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d3ef      	bcc.n	8000bb2 <bootloader_command_handle_data+0x19a>
      count += command_data->len * 2U - 1;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	7b1b      	ldrb	r3, [r3, #12]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	75bb      	strb	r3, [r7, #22]
      field_frame = CHECK_CRC;
 8000be4:	2307      	movs	r3, #7
 8000be6:	75fb      	strb	r3, [r7, #23]
      break;
 8000be8:	e0ec      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CMD_EARSE:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 8000bea:	7dbb      	ldrb	r3, [r7, #22]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	4413      	add	r3, r2
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4841      	ldr	r0, [pc, #260]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000bf6:	f000 ff33 	bl	8001a60 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 8000bfa:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000c02:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c04:	785a      	ldrb	r2, [r3, #1]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c0c:	789a      	ldrb	r2, [r3, #2]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c14:	78da      	ldrb	r2, [r3, #3]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	711a      	strb	r2, [r3, #4]
      count                    = 11U;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	75bb      	strb	r3, [r7, #22]
      field_frame              = CHECK_CRC;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	75fb      	strb	r3, [r7, #23]
      break;
 8000c22:	e0cf      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CMD_JUMP:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 8000c24:	7dbb      	ldrb	r3, [r7, #22]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4833      	ldr	r0, [pc, #204]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c30:	f000 ff16 	bl	8001a60 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c3e:	785a      	ldrb	r2, [r3, #1]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c46:	789a      	ldrb	r2, [r3, #2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <bootloader_command_handle_data+0x2e4>)
 8000c4e:	78da      	ldrb	r2, [r3, #3]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	711a      	strb	r2, [r3, #4]
      count                    = 11U;
 8000c54:	230b      	movs	r3, #11
 8000c56:	75bb      	strb	r3, [r7, #22]
      field_frame              = CHECK_CRC;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8000c5c:	e0b2      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CMD_UPDATE:
    {
      if (data[count] == 'U') /* Update firmware */
 8000c5e:	7dbb      	ldrb	r3, [r7, #22]
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b55      	cmp	r3, #85	; 0x55
 8000c68:	d105      	bne.n	8000c76 <bootloader_command_handle_data+0x25e>
      {
        command_data->status_update = 1;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	715a      	strb	r2, [r3, #5]
        count                       = 9U;
 8000c70:	2309      	movs	r3, #9
 8000c72:	75bb      	strb	r3, [r7, #22]
 8000c74:	e073      	b.n	8000d5e <bootloader_command_handle_data+0x346>
      }
      else if (data[count] == 'B') /* Begin Update firmware */
 8000c76:	7dbb      	ldrb	r3, [r7, #22]
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b42      	cmp	r3, #66	; 0x42
 8000c80:	d105      	bne.n	8000c8e <bootloader_command_handle_data+0x276>
      {
        command_data->status_update = 2;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2202      	movs	r2, #2
 8000c86:	715a      	strb	r2, [r3, #5]
        count                       = 8U;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	75bb      	strb	r3, [r7, #22]
 8000c8c:	e067      	b.n	8000d5e <bootloader_command_handle_data+0x346>
      }
      else if (data[count] == 'E') /* End Update firmware */
 8000c8e:	7dbb      	ldrb	r3, [r7, #22]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b45      	cmp	r3, #69	; 0x45
 8000c98:	d105      	bne.n	8000ca6 <bootloader_command_handle_data+0x28e>
      {
        command_data->status_update = 3;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	715a      	strb	r2, [r3, #5]
        count                       = 6U;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	75bb      	strb	r3, [r7, #22]
 8000ca4:	e05b      	b.n	8000d5e <bootloader_command_handle_data+0x346>
      }
      else if (data[count] == 'S') /* Check size flash memory */
 8000ca6:	7dbb      	ldrb	r3, [r7, #22]
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b53      	cmp	r3, #83	; 0x53
 8000cb0:	d126      	bne.n	8000d00 <bootloader_command_handle_data+0x2e8>
      {
        command_data->status_update = 4;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	715a      	strb	r2, [r3, #5]
        command_data->size_flash    = 0;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
        count                       = 8U;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	75bb      	strb	r3, [r7, #22]
        while (data[count] != ':')
 8000cc2:	e014      	b.n	8000cee <bootloader_command_handle_data+0x2d6>
        {
          command_data->size_flash = command_data->size_flash * 10 + bsp_utility_char_to_hex(data[count]);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	7dbb      	ldrb	r3, [r7, #22]
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff6b 	bl	8001bb6 <bsp_utility_char_to_hex>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	18e2      	adds	r2, r4, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	609a      	str	r2, [r3, #8]
          count++;
 8000ce8:	7dbb      	ldrb	r3, [r7, #22]
 8000cea:	3301      	adds	r3, #1
 8000cec:	75bb      	strb	r3, [r7, #22]
        while (data[count] != ':')
 8000cee:	7dbb      	ldrb	r3, [r7, #22]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b3a      	cmp	r3, #58	; 0x3a
 8000cf8:	d1e4      	bne.n	8000cc4 <bootloader_command_handle_data+0x2ac>
 8000cfa:	e030      	b.n	8000d5e <bootloader_command_handle_data+0x346>
 8000cfc:	20000098 	.word	0x20000098
        }
      }
      else if (data[count] == ':') /* Check size flash memory */
 8000d00:	7dbb      	ldrb	r3, [r7, #22]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b3a      	cmp	r3, #58	; 0x3a
 8000d0a:	d128      	bne.n	8000d5e <bootloader_command_handle_data+0x346>
      {
        uint8_t len = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	753b      	strb	r3, [r7, #20]
        command_data->status_update = 5;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2205      	movs	r2, #5
 8000d14:	715a      	strb	r2, [r3, #5]
        for ( uint8_t i = 0; i < (size - 8); i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	74fb      	strb	r3, [r7, #19]
 8000d1a:	e011      	b.n	8000d40 <bootloader_command_handle_data+0x328>
        {
          command_data->data[i] = data[count + i];
 8000d1c:	7dba      	ldrb	r2, [r7, #22]
 8000d1e:	7cfb      	ldrb	r3, [r7, #19]
 8000d20:	4413      	add	r3, r2
 8000d22:	461a      	mov	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	441a      	add	r2, r3
 8000d28:	7cfb      	ldrb	r3, [r7, #19]
 8000d2a:	7811      	ldrb	r1, [r2, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	460a      	mov	r2, r1
 8000d32:	735a      	strb	r2, [r3, #13]
          len++;
 8000d34:	7d3b      	ldrb	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	753b      	strb	r3, [r7, #20]
        for ( uint8_t i = 0; i < (size - 8); i++)
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	74fb      	strb	r3, [r7, #19]
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	3b08      	subs	r3, #8
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbe8      	blt.n	8000d1c <bootloader_command_handle_data+0x304>
        }
        command_data->len = ++len;
 8000d4a:	7d3b      	ldrb	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	753b      	strb	r3, [r7, #20]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	7d3a      	ldrb	r2, [r7, #20]
 8000d54:	731a      	strb	r2, [r3, #12]
        count = size - 5;
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3b05      	subs	r3, #5
 8000d5c:	75bb      	strb	r3, [r7, #22]
      }
      field_frame = CHECK_CRC;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	75fb      	strb	r3, [r7, #23]
      break;
 8000d62:	e02f      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case CHECK_CRC:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 4U);
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	; (8000de0 <bootloader_command_handle_data+0x3c8>)
 8000d70:	f000 fe76 	bl	8001a60 <bsp_utility_parse_element>
      command_data->crc = (buffer_data[0] << 8) | buffer_data[1];
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <bootloader_command_handle_data+0x3c8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <bootloader_command_handle_data+0x3c8>)
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
      field_frame       = DONE;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	75fb      	strb	r3, [r7, #23]
      break;
 8000d92:	e017      	b.n	8000dc4 <bootloader_command_handle_data+0x3ac>
    }
    case DONE:
    {
      /* check sum data hex */
      cal_crc = bootloader_command_crc(data, size - 4);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	3b04      	subs	r3, #4
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f000 f823 	bl	8000de8 <bootloader_command_crc>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <bootloader_command_handle_data+0x3cc>)
 8000da8:	801a      	strh	r2, [r3, #0]
      if (cal_crc == command_data->crc)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <bootloader_command_handle_data+0x3cc>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d101      	bne.n	8000dbc <bootloader_command_handle_data+0x3a4>
        return bootloader_comand_ok;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e00d      	b.n	8000dd8 <bootloader_command_handle_data+0x3c0>
      else
        return bootloader_command_error;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e00b      	b.n	8000dd8 <bootloader_command_handle_data+0x3c0>
    }
    default: return bootloader_command_error;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e009      	b.n	8000dd8 <bootloader_command_handle_data+0x3c0>
  for (uint8_t count = 0; count < size; count++)
 8000dc4:	7dbb      	ldrb	r3, [r7, #22]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	75bb      	strb	r3, [r7, #22]
 8000dca:	7dbb      	ldrb	r3, [r7, #22]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f63f ae2d 	bhi.w	8000a30 <bootloader_command_handle_data+0x18>
    }
  }
  return bootloader_command_error;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	20000098 	.word	0x20000098
 8000de4:	20000094 	.word	0x20000094

08000de8 <bootloader_command_crc>:

uint16_t bootloader_command_crc(uint8_t *buffer, uint16_t buffer_length)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
  uint8_t      crc_high = 0xFF; /* high byte of CRC initialized */
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint8_t      crc_low  = 0xFF; /* low byte of CRC initialized */
 8000df8:	23ff      	movs	r3, #255	; 0xff
 8000dfa:	73bb      	strb	r3, [r7, #14]
  unsigned int index;           /* will index into CRC lookup table */

  while (buffer_length--) /* pass through message buffer */
 8000dfc:	e013      	b.n	8000e26 <bootloader_command_crc+0x3e>
  {
    index    = crc_low ^ *buffer++; /* calculate the CRC */
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	4053      	eors	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	60bb      	str	r3, [r7, #8]
    crc_low  = crc_high ^ auch_crc_high[index];
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <bootloader_command_crc+0x64>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4413      	add	r3, r2
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73bb      	strb	r3, [r7, #14]
    crc_high = auch_crc_low[index];
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <bootloader_command_crc+0x68>)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	73fb      	strb	r3, [r7, #15]
  while (buffer_length--) /* pass through message buffer */
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	807a      	strh	r2, [r7, #2]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e6      	bne.n	8000dfe <bootloader_command_crc+0x16>
  }
  return (crc_high << 8 | crc_low);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	08006170 	.word	0x08006170
 8000e50:	08006270 	.word	0x08006270

08000e54 <bootloader_handle_write_flash_memory>:
volatile uint32_t address_write_flash;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
uint8_t bootloader_handle_write_flash_memory(bootloader_handle_hex_form_data_t *hex_data)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint8_t  data_count, i;
  uint8_t  counter_index       = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint16_t data_write_flash[8] = { 0 };
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]

  switch (hex_data->record_type)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	f000 809b 	beq.w	8000fb0 <bootloader_handle_write_flash_memory+0x15c>
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	f300 809a 	bgt.w	8000fb4 <bootloader_handle_write_flash_memory+0x160>
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d015      	beq.n	8000eb0 <bootloader_handle_write_flash_memory+0x5c>
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	f040 8095 	bne.w	8000fb4 <bootloader_handle_write_flash_memory+0x160>
  {
  case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
  {
    uint32_t address = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
    address |= hex_data->data[0] << 8 | hex_data->data[1];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	7952      	ldrb	r2, [r2, #5]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	623b      	str	r3, [r7, #32]
    /* Address save firmware update */
    address_write_flash = 0x08000000 | (address << 16);
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eaa:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000eac:	6013      	str	r3, [r2, #0]
    break;
 8000eae:	e082      	b.n	8000fb6 <bootloader_handle_write_flash_memory+0x162>
    break;
  }
  case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
  {
    /* get character count */
    data_count = hex_data->byte_count;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	77fb      	strb	r3, [r7, #31]
    size_data_firmware += data_count;
 8000eb6:	7ffa      	ldrb	r2, [r7, #31]
 8000eb8:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <bootloader_handle_write_flash_memory+0x170>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <bootloader_handle_write_flash_memory+0x170>)
 8000ec0:	6013      	str	r3, [r2, #0]

    /* set full address */
    address_write_flash = address_write_flash & 0xFFFF0000;
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	4a3d      	ldr	r2, [pc, #244]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ecc:	6013      	str	r3, [r2, #0]
    address_write_flash = address_write_flash | (hex_data->address[0] << 8) | (hex_data->address[1]);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	7892      	ldrb	r2, [r2, #2]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ee4:	6013      	str	r3, [r2, #0]

    /* check address wite flash data */
    if (address_write_flash < 0x08008000U)
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <bootloader_handle_write_flash_memory+0x174>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d204      	bcs.n	8000efa <bootloader_handle_write_flash_memory+0xa6>
    {
      address_write_flash = 0;
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
      return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e05e      	b.n	8000fb8 <bootloader_handle_write_flash_memory+0x164>
    }

    /* get the data of the record */
    for (i = 0; i < data_count; i += 2)
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f00:	e021      	b.n	8000f46 <bootloader_handle_write_flash_memory+0xf2>
    {
      data_write_flash[counter_index] = (hex_data->data[i + 1] << 8) | (hex_data->data[i]);
 8000f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f06:	3301      	adds	r3, #1
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	791b      	ldrb	r3, [r3, #4]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	440b      	add	r3, r1
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f26:	b292      	uxth	r2, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	3328      	adds	r3, #40	; 0x28
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f823 2c1c 	strh.w	r2, [r3, #-28]
      counter_index++;
 8000f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f36:	3301      	adds	r3, #1
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < data_count; i += 2)
 8000f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f40:	3302      	adds	r3, #2
 8000f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3d8      	bcc.n	8000f02 <bootloader_handle_write_flash_memory+0xae>
    }

    /* count data old or even */
    if (data_count % 2 != 0)
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01d      	beq.n	8000f98 <bootloader_handle_write_flash_memory+0x144>
    {
      data_write_flash[counter_index] = 0xFF00 | (hex_data->data[data_count - 1]);
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f72:	b292      	uxth	r2, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	3328      	adds	r3, #40	; 0x28
 8000f78:	443b      	add	r3, r7
 8000f7a:	f823 2c1c 	strh.w	r2, [r3, #-28]
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4 + 1);
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	f000 faed 	bl	8001570 <bsp_flash_write>
    }
    else
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
    break;
 8000f96:	e00e      	b.n	8000fb6 <bootloader_handle_write_flash_memory+0x162>
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <bootloader_handle_write_flash_memory+0x16c>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f000 fae1 	bl	8001570 <bsp_flash_write>
    break;
 8000fae:	e002      	b.n	8000fb6 <bootloader_handle_write_flash_memory+0x162>
    break;
 8000fb0:	bf00      	nop
 8000fb2:	e000      	b.n	8000fb6 <bootloader_handle_write_flash_memory+0x162>
  }
  default: break;
 8000fb4:	bf00      	nop
  }
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000019c 	.word	0x2000019c
 8000fc4:	20000198 	.word	0x20000198
 8000fc8:	08008000 	.word	0x08008000

08000fcc <bootloader_handle_parse_element>:

void bootloader_handle_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b08f      	sub	sp, #60	; 0x3c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t count_array = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t buffer_temp[32];

  /* convert data string to data hex and save to des buffer*/
  for (uint8_t count = 0U; count < length; count++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000fe6:	e05f      	b.n	80010a8 <bootloader_handle_parse_element+0xdc>
  {
    if (buff[count] >= '0' && buff[count] <= '9')
 8000fe8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff4:	d914      	bls.n	8001020 <bootloader_handle_parse_element+0x54>
 8000ff6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b39      	cmp	r3, #57	; 0x39
 8001002:	d80d      	bhi.n	8001020 <bootloader_handle_parse_element+0x54>
      buffer_temp[count] = buff[count] - 48;
 8001004:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001012:	3a30      	subs	r2, #48	; 0x30
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	3338      	adds	r3, #56	; 0x38
 8001018:	443b      	add	r3, r7
 800101a:	f803 2c24 	strb.w	r2, [r3, #-36]
 800101e:	e01a      	b.n	8001056 <bootloader_handle_parse_element+0x8a>
    else if (buff[count] >= 'A' && buff[count] <= 'F')
 8001020:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b40      	cmp	r3, #64	; 0x40
 800102c:	d942      	bls.n	80010b4 <bootloader_handle_parse_element+0xe8>
 800102e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b46      	cmp	r3, #70	; 0x46
 800103a:	d83b      	bhi.n	80010b4 <bootloader_handle_parse_element+0xe8>
      buffer_temp[count] = buff[count] - 65 + 10;
 800103c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800104a:	3a37      	subs	r2, #55	; 0x37
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	3338      	adds	r3, #56	; 0x38
 8001050:	443b      	add	r3, r7
 8001052:	f803 2c24 	strb.w	r2, [r3, #-36]
    else
      return;
    if (count % 2 != 0)
 8001056:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01c      	beq.n	800109e <bootloader_handle_parse_element+0xd2>
    {
      des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 8001064:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001068:	3b01      	subs	r3, #1
 800106a:	3338      	adds	r3, #56	; 0x38
 800106c:	443b      	add	r3, r7
 800106e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	b25a      	sxtb	r2, r3
 8001076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800107a:	3338      	adds	r3, #56	; 0x38
 800107c:	443b      	add	r3, r7
 800107e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b259      	sxtb	r1, r3
 8001088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	b2ca      	uxtb	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]
      count_array++;
 8001094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001098:	3301      	adds	r3, #1
 800109a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (uint8_t count = 0U; count < length; count++)
 800109e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80010a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d39a      	bcc.n	8000fe8 <bootloader_handle_parse_element+0x1c>
 80010b2:	e000      	b.n	80010b6 <bootloader_handle_parse_element+0xea>
      return;
 80010b4:	bf00      	nop
    }
  }
}
 80010b6:	373c      	adds	r7, #60	; 0x3c
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <bootloader_handle_data_receive>:

uint8_t bootloader_handle_data_receive(bootloader_handle_hex_form_data_t *hex_data, uint8_t *data, uint16_t size)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
  uint8_t                             cal_check_sum = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bootloader_handle_field_hex_files_t state         = START_CODE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t                             buffer_save_data_hex[16];

  /* parse string to hex form data hex */
  for (uint8_t count = 0; count < size; count++)
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80010e0:	e0e4      	b.n	80012ac <bootloader_handle_data_receive+0x1ec>
  {
    switch (state)
 80010e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	f200 80d9 	bhi.w	800129e <bootloader_handle_data_receive+0x1de>
 80010ec:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <bootloader_handle_data_receive+0x34>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	08001111 	.word	0x08001111
 80010f8:	0800112b 	.word	0x0800112b
 80010fc:	08001153 	.word	0x08001153
 8001100:	08001181 	.word	0x08001181
 8001104:	080011a9 	.word	0x080011a9
 8001108:	0800120f 	.word	0x0800120f
 800110c:	08001231 	.word	0x08001231
    {
    case START_CODE:
    {
      if (data[count] != ':')
 8001110:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b3a      	cmp	r3, #58	; 0x3a
 800111c:	d001      	beq.n	8001122 <bootloader_handle_data_receive+0x62>
        return STATE_ERRORS;
 800111e:	2300      	movs	r3, #0
 8001120:	e0cc      	b.n	80012bc <bootloader_handle_data_receive+0x1fc>
      else
        state = BYTE_COUNT;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8001128:	e0bb      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case BYTE_COUNT:
    {
      bootloader_handle_parse_element(buffer_save_data_hex, &data[count], 2U);
 800112a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	18d1      	adds	r1, r2, r3
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2202      	movs	r2, #2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff47 	bl	8000fcc <bootloader_handle_parse_element>
      hex_data->byte_count = buffer_save_data_hex[0];
 800113e:	7d3a      	ldrb	r2, [r7, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	701a      	strb	r2, [r3, #0]
      count                = 2U;
 8001144:	2302      	movs	r3, #2
 8001146:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = ADDRESS;
 800114a:	2302      	movs	r3, #2
 800114c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8001150:	e0a7      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case ADDRESS:
    {
      bootloader_handle_parse_element(buffer_save_data_hex, &data[count], 4U);
 8001152:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	18d1      	adds	r1, r2, r3
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2204      	movs	r2, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff33 	bl	8000fcc <bootloader_handle_parse_element>
      hex_data->address[0] = buffer_save_data_hex[0];
 8001166:	7d3a      	ldrb	r2, [r7, #20]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	705a      	strb	r2, [r3, #1]
      hex_data->address[1] = buffer_save_data_hex[1];
 800116c:	7d7a      	ldrb	r2, [r7, #21]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	709a      	strb	r2, [r3, #2]
      count                = 6U;
 8001172:	2306      	movs	r3, #6
 8001174:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = RECORD_TYPE;
 8001178:	2303      	movs	r3, #3
 800117a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 800117e:	e090      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case RECORD_TYPE:
    {
      bootloader_handle_parse_element(buffer_save_data_hex, &data[count], 2U);
 8001180:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	18d1      	adds	r1, r2, r3
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2202      	movs	r2, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff1c 	bl	8000fcc <bootloader_handle_parse_element>
      hex_data->record_type = buffer_save_data_hex[0];
 8001194:	7d3a      	ldrb	r2, [r7, #20]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	70da      	strb	r2, [r3, #3]
      count                 = 8U;
 800119a:	2308      	movs	r3, #8
 800119c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                 = DATA;
 80011a0:	2304      	movs	r3, #4
 80011a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80011a6:	e07c      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case DATA:
    {
      bootloader_handle_parse_element(buffer_save_data_hex, &data[count], (hex_data->byte_count * 2U));
 80011a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	18d1      	adds	r1, r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff05 	bl	8000fcc <bootloader_handle_parse_element>
      for (count = 0; count < hex_data->byte_count; count++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011c8:	e010      	b.n	80011ec <bootloader_handle_data_receive+0x12c>
      {
        hex_data->data[count] = buffer_save_data_hex[count];
 80011ca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011d2:	3228      	adds	r2, #40	; 0x28
 80011d4:	443a      	add	r2, r7
 80011d6:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	711a      	strb	r2, [r3, #4]
      for (count = 0; count < hex_data->byte_count; count++)
 80011e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011e6:	3301      	adds	r3, #1
 80011e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3e8      	bcc.n	80011ca <bootloader_handle_data_receive+0x10a>
      }
      count = 8U + (hex_data->byte_count * 2U);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3304      	adds	r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state = CHECKSUM;
 8001206:	2305      	movs	r3, #5
 8001208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 800120c:	e049      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case CHECKSUM:
    {
      bootloader_handle_parse_element(buffer_save_data_hex, &data[count], 2U);
 800120e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	18d1      	adds	r1, r2, r3
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2202      	movs	r2, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fed5 	bl	8000fcc <bootloader_handle_parse_element>
      hex_data->check_sum = buffer_save_data_hex[0];
 8001222:	7d3a      	ldrb	r2, [r7, #20]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	751a      	strb	r2, [r3, #20]
      state               = HEX_DONE;
 8001228:	2306      	movs	r3, #6
 800122a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 800122e:	e038      	b.n	80012a2 <bootloader_handle_data_receive+0x1e2>
    }
    case HEX_DONE:
    {
      /* check sum data hex */
      cal_check_sum = hex_data->byte_count + hex_data->address[0] + hex_data->address[1] + hex_data->record_type;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	4413      	add	r3, r2
 800123a:	b2da      	uxtb	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	4413      	add	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	78db      	ldrb	r3, [r3, #3]
 8001248:	4413      	add	r3, r2
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001254:	e00e      	b.n	8001274 <bootloader_handle_data_receive+0x1b4>
      {
        cal_check_sum += hex_data->data[count];
 8001256:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	791a      	ldrb	r2, [r3, #4]
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001264:	4413      	add	r3, r2
 8001266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 800126a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800126e:	3301      	adds	r3, #1
 8001270:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800127c:	429a      	cmp	r2, r3
 800127e:	d3ea      	bcc.n	8001256 <bootloader_handle_data_receive+0x196>
      }
      cal_check_sum = ~cal_check_sum + 1U;
 8001280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001284:	425b      	negs	r3, r3
 8001286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (cal_check_sum == hex_data->check_sum)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	7d1b      	ldrb	r3, [r3, #20]
 800128e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001292:	429a      	cmp	r2, r3
 8001294:	d101      	bne.n	800129a <bootloader_handle_data_receive+0x1da>
        return STATE_NO_ERRORS;
 8001296:	2301      	movs	r3, #1
 8001298:	e010      	b.n	80012bc <bootloader_handle_data_receive+0x1fc>
      else
        return STATE_ERRORS;
 800129a:	2300      	movs	r3, #0
 800129c:	e00e      	b.n	80012bc <bootloader_handle_data_receive+0x1fc>
    }
    default: return STATE_ERRORS;
 800129e:	2300      	movs	r3, #0
 80012a0:	e00c      	b.n	80012bc <bootloader_handle_data_receive+0x1fc>
  for (uint8_t count = 0; count < size; count++)
 80012a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012a6:	3301      	adds	r3, #1
 80012a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f63f af14 	bhi.w	80010e2 <bootloader_handle_data_receive+0x22>
    }
  }
  return STATE_ERRORS;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bsp_flash_unlock>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_flash_unlock(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  FLASH->KEYR = KEY1;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <bsp_flash_unlock+0x1c>)
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <bsp_flash_unlock+0x20>)
 80012cc:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = KEY2;
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <bsp_flash_unlock+0x1c>)
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <bsp_flash_unlock+0x24>)
 80012d2:	605a      	str	r2, [r3, #4]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00
 80012e4:	45670123 	.word	0x45670123
 80012e8:	cdef89ab 	.word	0xcdef89ab

080012ec <bsp_get_sector_from_address>:

uint8_t bsp_get_sector_from_address(uint32_t start_address)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint8_t sector_number = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  if ((start_address >= 0x08000000) && (start_address < 0x08003FFF))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012fe:	d306      	bcc.n	800130e <bsp_get_sector_from_address+0x22>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <bsp_get_sector_from_address+0xc8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d802      	bhi.n	800130e <bsp_get_sector_from_address+0x22>
    sector_number = BSP_FLASH_SECTOR_0;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e04b      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08004000) && (start_address < 0x08007FFF))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <bsp_get_sector_from_address+0xcc>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d306      	bcc.n	8001324 <bsp_get_sector_from_address+0x38>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <bsp_get_sector_from_address+0xd0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d802      	bhi.n	8001324 <bsp_get_sector_from_address+0x38>
    sector_number = BSP_FLASH_SECTOR_1;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e040      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08008000) && (start_address < 0x0800BFFF))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <bsp_get_sector_from_address+0xd4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d306      	bcc.n	800133a <bsp_get_sector_from_address+0x4e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <bsp_get_sector_from_address+0xd8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d802      	bhi.n	800133a <bsp_get_sector_from_address+0x4e>
    sector_number = BSP_FLASH_SECTOR_2;
 8001334:	2302      	movs	r3, #2
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e035      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x0800C000) && (start_address < 0x0800FFFF))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <bsp_get_sector_from_address+0xdc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d306      	bcc.n	8001350 <bsp_get_sector_from_address+0x64>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <bsp_get_sector_from_address+0xe0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d202      	bcs.n	8001350 <bsp_get_sector_from_address+0x64>
    sector_number = BSP_FLASH_SECTOR_3;
 800134a:	2303      	movs	r3, #3
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e02a      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08010000) && (start_address < 0x0801FFFF))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <bsp_get_sector_from_address+0xe0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d906      	bls.n	8001366 <bsp_get_sector_from_address+0x7a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <bsp_get_sector_from_address+0xe4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d202      	bcs.n	8001366 <bsp_get_sector_from_address+0x7a>
    sector_number = BSP_FLASH_SECTOR_4;
 8001360:	2304      	movs	r3, #4
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e01f      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08020000) && (start_address < 0x0803FFFF))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <bsp_get_sector_from_address+0xe4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d906      	bls.n	800137c <bsp_get_sector_from_address+0x90>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <bsp_get_sector_from_address+0xe8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d202      	bcs.n	800137c <bsp_get_sector_from_address+0x90>
    sector_number = BSP_FLASH_SECTOR_5;
 8001376:	2305      	movs	r3, #5
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e014      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08040000) && (start_address < 0x0805FFFF))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <bsp_get_sector_from_address+0xe8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d906      	bls.n	8001392 <bsp_get_sector_from_address+0xa6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <bsp_get_sector_from_address+0xec>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d202      	bcs.n	8001392 <bsp_get_sector_from_address+0xa6>
    sector_number = BSP_FLASH_SECTOR_6;
 800138c:	2306      	movs	r3, #6
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e009      	b.n	80013a6 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08060000) && (start_address < 0x0807FFFF))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <bsp_get_sector_from_address+0xec>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d905      	bls.n	80013a6 <bsp_get_sector_from_address+0xba>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <bsp_get_sector_from_address+0xf0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d201      	bcs.n	80013a6 <bsp_get_sector_from_address+0xba>
    sector_number = BSP_FLASH_SECTOR_7;
 80013a2:	2307      	movs	r3, #7
 80013a4:	73fb      	strb	r3, [r7, #15]
  return sector_number;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	08003ffe 	.word	0x08003ffe
 80013b8:	08004000 	.word	0x08004000
 80013bc:	08007ffe 	.word	0x08007ffe
 80013c0:	08008000 	.word	0x08008000
 80013c4:	0800bffe 	.word	0x0800bffe
 80013c8:	0800c000 	.word	0x0800c000
 80013cc:	0800ffff 	.word	0x0800ffff
 80013d0:	0801ffff 	.word	0x0801ffff
 80013d4:	0803ffff 	.word	0x0803ffff
 80013d8:	0805ffff 	.word	0x0805ffff
 80013dc:	0807ffff 	.word	0x0807ffff

080013e0 <bsp_get_address_from_sector>:

uint32_t bsp_get_address_from_sector(uint8_t sector_number)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  uint32_t address_sector = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  if (sector_number == BSP_FLASH_SECTOR_0)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <bsp_get_address_from_sector+0x1c>
    address_sector = 0x08000000;
 80013f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e028      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_1)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d102      	bne.n	8001408 <bsp_get_address_from_sector+0x28>
    address_sector = 0x08004000;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <bsp_get_address_from_sector+0x7c>)
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e022      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_2)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d102      	bne.n	8001414 <bsp_get_address_from_sector+0x34>
    address_sector = 0x08008000;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <bsp_get_address_from_sector+0x80>)
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e01c      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_3)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d102      	bne.n	8001420 <bsp_get_address_from_sector+0x40>
    address_sector = 0x0800C000;
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <bsp_get_address_from_sector+0x84>)
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e016      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_4)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d102      	bne.n	800142c <bsp_get_address_from_sector+0x4c>
    address_sector = 0x08010000;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <bsp_get_address_from_sector+0x88>)
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	e010      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_5)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d102      	bne.n	8001438 <bsp_get_address_from_sector+0x58>
    address_sector = 0x08020000;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <bsp_get_address_from_sector+0x8c>)
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e00a      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_6)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b06      	cmp	r3, #6
 800143c:	d102      	bne.n	8001444 <bsp_get_address_from_sector+0x64>
    address_sector = 0x08040000;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <bsp_get_address_from_sector+0x90>)
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e004      	b.n	800144e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_7)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d101      	bne.n	800144e <bsp_get_address_from_sector+0x6e>
    address_sector = 0x08060000;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <bsp_get_address_from_sector+0x94>)
 800144c:	60fb      	str	r3, [r7, #12]
  return address_sector;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	08004000 	.word	0x08004000
 8001460:	08008000 	.word	0x08008000
 8001464:	0800c000 	.word	0x0800c000
 8001468:	08010000 	.word	0x08010000
 800146c:	08020000 	.word	0x08020000
 8001470:	08040000 	.word	0x08040000
 8001474:	08060000 	.word	0x08060000

08001478 <bsp_flash_erase>:

bsp_flash_status_t bsp_flash_erase(uint32_t start_address)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8001480:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001484:	60fb      	str	r3, [r7, #12]
  /* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001486:	e007      	b.n	8001498 <bsp_flash_erase+0x20>
  {
    if (--time_out == 0x00)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3b01      	subs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <bsp_flash_erase+0x20>
    {
      return bsp_flash_status_errors;
 8001494:	2300      	movs	r3, #0
 8001496:	e064      	b.n	8001562 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <bsp_flash_erase+0xf4>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d102      	bne.n	80014ac <bsp_flash_erase+0x34>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ed      	bne.n	8001488 <bsp_flash_erase+0x10>
    }
  }
  /* Wating for Bsy bit */
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <bsp_flash_erase+0xf4>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014b8:	d101      	bne.n	80014be <bsp_flash_erase+0x46>
  {
    bsp_flash_unlock();
 80014ba:	f7ff ff03 	bl	80012c4 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <bsp_flash_erase+0xf4>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <bsp_flash_erase+0xf4>)
 80014c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c8:	6113      	str	r3, [r2, #16]
  /* Set the SER bit in the FLASH_CR register */
  FLASH->CR |= FLASH_CR_SER;
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <bsp_flash_erase+0xf4>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <bsp_flash_erase+0xf4>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6113      	str	r3, [r2, #16]
  /* Program the FLASH_CR register to select a sector_number to erase */
  FLASH->CR |= bsp_get_sector_from_address(start_address) << 3;
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff08 	bl	80012ec <bsp_get_sector_from_address>
 80014dc:	4603      	mov	r3, r0
 80014de:	00da      	lsls	r2, r3, #3
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <bsp_flash_erase+0xf4>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4a21      	ldr	r2, [pc, #132]	; (800156c <bsp_flash_erase+0xf4>)
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6113      	str	r3, [r2, #16]
  /* Set the STRT bit in the FLASH CR register */
  FLASH->CR |= FLASH_CR_STRT;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <bsp_flash_erase+0xf4>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a1e      	ldr	r2, [pc, #120]	; (800156c <bsp_flash_erase+0xf4>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6113      	str	r3, [r2, #16]
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 80014f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014fc:	60fb      	str	r3, [r7, #12]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80014fe:	e007      	b.n	8001510 <bsp_flash_erase+0x98>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <bsp_flash_erase+0x98>
    {
      return bsp_flash_status_errors;
 800150c:	2300      	movs	r3, #0
 800150e:	e028      	b.n	8001562 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <bsp_flash_erase+0xf4>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d102      	bne.n	8001524 <bsp_flash_erase+0xac>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ed      	bne.n	8001500 <bsp_flash_erase+0x88>
    }
  }
  /* Check FLASH End of Operation flag  */
  if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <bsp_flash_erase+0xf4>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <bsp_flash_erase+0xc4>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR &= ~FLASH_FLAG_EOP;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <bsp_flash_erase+0xf4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <bsp_flash_erase+0xf4>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	60d3      	str	r3, [r2, #12]
  }
  /* Clear SER bit in the FLASH_CR register */
  FLASH->CR &= FLASH_CR_SER;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <bsp_flash_erase+0xf4>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <bsp_flash_erase+0xf4>)
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	6113      	str	r3, [r2, #16]
  /* Clear STRT bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_STRT;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <bsp_flash_erase+0xf4>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <bsp_flash_erase+0xf4>)
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <bsp_flash_erase+0xf4>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <bsp_flash_erase+0xf4>)
 800155a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155e:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <bsp_flash_write>:

bsp_flash_status_t bsp_flash_write(volatile uint32_t start_address, uint32_t *buffer_write, uint32_t length)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t count    = 0u;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8001580:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001584:	613b      	str	r3, [r7, #16]
  /* Check input parameters */
  if ((buffer_write == 0u) || (length == 0u))
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <bsp_flash_write+0x22>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <bsp_flash_write+0x36>
  {
    return bsp_flash_status_errors;
 8001592:	2300      	movs	r3, #0
 8001594:	e05d      	b.n	8001652 <bsp_flash_write+0xe2>
  }
  /* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3b01      	subs	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <bsp_flash_write+0x36>
    {
      return bsp_flash_status_errors;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e055      	b.n	8001652 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <bsp_flash_write+0xec>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d102      	bne.n	80015ba <bsp_flash_write+0x4a>
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ed      	bne.n	8001596 <bsp_flash_write+0x26>
    }
  }
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <bsp_flash_write+0xec>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015c6:	d101      	bne.n	80015cc <bsp_flash_write+0x5c>
  {
    bsp_flash_unlock();
 80015c8:	f7ff fe7c 	bl	80012c4 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <bsp_flash_write+0xec>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <bsp_flash_write+0xec>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d6:	6113      	str	r3, [r2, #16]
  /* Write FLASH CR_PG to 1 */
  FLASH->CR |= FLASH_CR_PG;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <bsp_flash_write+0xec>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <bsp_flash_write+0xec>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6113      	str	r3, [r2, #16]
  /* Perform word write at the desired address */
  for (count = 0; count < length; count++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e00c      	b.n	8001604 <bsp_flash_write+0x94>
  {
    *(__IO uint32_t *) (start_address + count * 4u) = *(uint32_t *) (buffer_write + count);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4413      	add	r3, r2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	0091      	lsls	r1, r2, #2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	440a      	add	r2, r1
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6013      	str	r3, [r2, #0]
  for (count = 0; count < length; count++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3ee      	bcc.n	80015ea <bsp_flash_write+0x7a>
  }
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 800160c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001610:	613b      	str	r3, [r7, #16]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001612:	e007      	b.n	8001624 <bsp_flash_write+0xb4>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3b01      	subs	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <bsp_flash_write+0xb4>
    {
      return bsp_flash_status_errors;
 8001620:	2300      	movs	r3, #0
 8001622:	e016      	b.n	8001652 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <bsp_flash_write+0xec>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d102      	bne.n	8001638 <bsp_flash_write+0xc8>
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ed      	bne.n	8001614 <bsp_flash_write+0xa4>
    }
  }
  /* Clear PG bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_PG;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <bsp_flash_write+0xec>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <bsp_flash_write+0xec>)
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <bsp_flash_write+0xec>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <bsp_flash_write+0xec>)
 800164a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800164e:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db12      	blt.n	8001698 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	490a      	ldr	r1, [pc, #40]	; (80016a4 <__NVIC_DisableIRQ+0x44>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	3320      	adds	r3, #32
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800168c:	f3bf 8f4f 	dsb	sy
}
 8001690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001692:	f3bf 8f6f 	isb	sy
}
 8001696:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <bsp_uart_set_callback_handle_rx_data>:

bootloader_handle_error_t bsp_uart_bootloader_error;

/* Private function prototypes ---------------------------------------- */
void bsp_uart_set_callback_handle_rx_data(void *cb)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  bsp_uart_handle_rx_data_callback = cb;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <bsp_uart_set_callback_handle_rx_data+0x1c>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20001148 	.word	0x20001148

080016c8 <bsp_uart_set_callback_bootloader_command>:

void bsp_uart_set_callback_bootloader_command(void *cb)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  bsp_uart_bootloader_comand_callback = cb;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <bsp_uart_set_callback_bootloader_command+0x1c>)
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000114c 	.word	0x2000114c

080016e8 <bsp_uart_set_callback_bootloader_error>:

void bsp_uart_set_callback_bootloader_error(void *cb)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  bsp_uart_bootloader_error = cb;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <bsp_uart_set_callback_bootloader_error+0x1c>)
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20001150 	.word	0x20001150

08001708 <bsp_uart_init>:

/* Function definitions ----------------------------------------------- */
void bsp_uart_init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  bsp_uart_set_callback_handle_rx_data(bootloader_command_handle_data);
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <bsp_uart_init+0x28>)
 800170e:	f7ff ffcb 	bl	80016a8 <bsp_uart_set_callback_handle_rx_data>
  /* Init UART */
  bsp_uart_dma_unregister_callback(&hdma_usart1_rx, HAL_DMA_XFER_HALFCPLT_CB_ID);
 8001712:	2101      	movs	r1, #1
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <bsp_uart_init+0x2c>)
 8001716:	f000 f843 	bl	80017a0 <bsp_uart_dma_unregister_callback>
  /* receive data uart dma */
  bsp_uart_receive_to_idle_dma(&huart1, data_receive_dma, RX_BUFFER_SIZE);
 800171a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800171e:	4906      	ldr	r1, [pc, #24]	; (8001738 <bsp_uart_init+0x30>)
 8001720:	4806      	ldr	r0, [pc, #24]	; (800173c <bsp_uart_init+0x34>)
 8001722:	f000 f827 	bl	8001774 <bsp_uart_receive_to_idle_dma>
  buffer_save_data_handle = rx_buffer;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <bsp_uart_init+0x38>)
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <bsp_uart_init+0x3c>)
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08000a19 	.word	0x08000a19
 8001734:	200011e0 	.word	0x200011e0
 8001738:	200001a4 	.word	0x200001a4
 800173c:	20001158 	.word	0x20001158
 8001740:	20001144 	.word	0x20001144
 8001744:	20000974 	.word	0x20000974

08001748 <bsp_uart1_printf>:
{
  HAL_UART_Transmit(huart, string, strlen((char *) string), TIME_OUT_TRANSMIT_UART);
}

void bsp_uart1_printf(uint8_t *string)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, string, strlen((char *) string), TIME_OUT_TRANSMIT_UART);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fd5d 	bl	8000210 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <bsp_uart1_printf+0x28>)
 8001762:	f002 fdef 	bl	8004344 <HAL_UART_Transmit>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20001158 	.word	0x20001158

08001774 <bsp_uart_receive_to_idle_dma>:
{
  HAL_UART_Transmit(huart, string, len, TIME_OUT_TRANSMIT_UART);
}

void bsp_uart_receive_to_idle_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(huart, data, size))
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	461a      	mov	r2, r3
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f002 fe6d 	bl	8004468 <HAL_UARTEx_ReceiveToIdle_DMA>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <bsp_uart_receive_to_idle_dma+0x24>
  {
    Error_Handler();
 8001794:	f000 fb50 	bl	8001e38 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bsp_uart_dma_unregister_callback>:

void bsp_uart_dma_unregister_callback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
  HAL_DMA_UnRegisterCallback(hdma, CallbackID);
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f001 fa49 	bl	8002c48 <HAL_DMA_UnRegisterCallback>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <bsp_uart_deinit_peripheral>:

void bsp_uart_deinit_peripheral(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(USART1_IRQn);
 80017c4:	2025      	movs	r0, #37	; 0x25
 80017c6:	f7ff ff4b 	bl	8001660 <__NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
 80017ca:	203a      	movs	r0, #58	; 0x3a
 80017cc:	f000 fea1 	bl	8002512 <HAL_NVIC_DisableIRQ>

  HAL_UART_DeInit(&huart1);
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <bsp_uart_deinit_peripheral+0x28>)
 80017d2:	f002 fd88 	bl	80042e6 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <bsp_uart_deinit_peripheral+0x2c>)
 80017d8:	f002 fd85 	bl	80042e6 <HAL_UART_DeInit>
  HAL_DMA_DeInit(&hdma_usart1_rx);
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <bsp_uart_deinit_peripheral+0x30>)
 80017de:	f000 ff61 	bl	80026a4 <HAL_DMA_DeInit>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20001158 	.word	0x20001158
 80017ec:	2000119c 	.word	0x2000119c
 80017f0:	200011e0 	.word	0x200011e0

080017f4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 80017fa:	af40      	add	r7, sp, #256	; 0x100
 80017fc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001800:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001804:	6018      	str	r0, [r3, #0]
 8001806:	460a      	mov	r2, r1
 8001808:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800180c:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001810:	801a      	strh	r2, [r3, #0]
  bootloader_command_data_t command_data;
  uint16_t                  number_char_receive;
  uint8_t                   check_data_full[256];

  /* read data receive from dma */
  if ((huart->Instance == USART1))
 8001812:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001816:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a86      	ldr	r2, [pc, #536]	; (8001a38 <HAL_UARTEx_RxEventCallback+0x244>)
 8001820:	4293      	cmp	r3, r2
 8001822:	f040 8105 	bne.w	8001a30 <HAL_UARTEx_RxEventCallback+0x23c>
  {
    static uint16_t old_pos = 0;
    uint16_t        i;

    /* check data when dma transfer complete */
    if (g_flag_cplt_dma)
 8001826:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <HAL_UARTEx_RxEventCallback+0x248>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03a      	beq.n	80018a4 <HAL_UARTEx_RxEventCallback+0xb0>
    {
      g_flag_cplt_dma = FALSE;
 800182e:	4b83      	ldr	r3, [pc, #524]	; (8001a3c <HAL_UARTEx_RxEventCallback+0x248>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < size - old_pos; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 800183a:	e013      	b.n	8001864 <HAL_UARTEx_RxEventCallback+0x70>
      {
        check_data_full[i] = data_receive_dma[old_pos + i];
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001846:	441a      	add	r2, r3
 8001848:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 800184c:	497d      	ldr	r1, [pc, #500]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x250>)
 800184e:	5c89      	ldrb	r1, [r1, r2]
 8001850:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001854:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8001858:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < size - old_pos; i++)
 800185a:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 800185e:	3301      	adds	r3, #1
 8001860:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8001864:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8001868:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800186c:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4973      	ldr	r1, [pc, #460]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001874:	8809      	ldrh	r1, [r1, #0]
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	429a      	cmp	r2, r3
 800187a:	dbdf      	blt.n	800183c <HAL_UARTEx_RxEventCallback+0x48>
      }
      /* check data form correct */
      if (bsp_uart_handle_rx_data_callback(&command_data, check_data_full, size - old_pos) == bootloader_command_error)
 800187c:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x254>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8001888:	f2a1 211e 	subw	r1, r1, #542	; 0x21e
 800188c:	8809      	ldrh	r1, [r1, #0]
 800188e:	1a8a      	subs	r2, r1, r2
 8001890:	b292      	uxth	r2, r2
 8001892:	f107 010c 	add.w	r1, r7, #12
 8001896:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800189a:	4798      	blx	r3
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80c5 	beq.w	8001a2e <HAL_UARTEx_RxEventCallback+0x23a>
        return;
    }

    /* check if new data */
    if (size != old_pos)
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80018ac:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	f000 80b3 	beq.w	8001a1e <HAL_UARTEx_RxEventCallback+0x22a>
    {
      /* check wraps around index data */
      if (size > old_pos)
 80018b8:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80018c0:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d927      	bls.n	800191a <HAL_UARTEx_RxEventCallback+0x126>
      {
        number_char_receive = size - old_pos;
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80018d2:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 80018d6:	8812      	ldrh	r2, [r2, #0]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        for (i = 0; i < number_char_receive; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 80018e4:	e012      	b.n	800190c <HAL_UARTEx_RxEventCallback+0x118>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 80018f0:	441a      	add	r2, r3
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x258>)
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 80018fa:	440b      	add	r3, r1
 80018fc:	4951      	ldr	r1, [pc, #324]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x250>)
 80018fe:	5c8a      	ldrb	r2, [r1, r2]
 8001900:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 8001902:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001906:	3301      	adds	r3, #1
 8001908:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 800190c:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8001910:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8001914:	429a      	cmp	r2, r3
 8001916:	d3e6      	bcc.n	80018e6 <HAL_UARTEx_RxEventCallback+0xf2>
 8001918:	e052      	b.n	80019c0 <HAL_UARTEx_RxEventCallback+0x1cc>
        }
      }
      else
      {
        number_char_receive = RX_BUFFER_SIZE - old_pos;
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8001922:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        for (i = 0; i < number_char_receive; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 800192c:	e012      	b.n	8001954 <HAL_UARTEx_RxEventCallback+0x160>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001938:	441a      	add	r2, r3
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x258>)
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001942:	440b      	add	r3, r1
 8001944:	493f      	ldr	r1, [pc, #252]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x250>)
 8001946:	5c8a      	ldrb	r2, [r1, r2]
 8001948:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 800194a:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 800194e:	3301      	adds	r3, #1
 8001950:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8001954:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8001958:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800195c:	429a      	cmp	r2, r3
 800195e:	d3e6      	bcc.n	800192e <HAL_UARTEx_RxEventCallback+0x13a>
        }
        if (size > 0)
 8001960:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001964:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d028      	beq.n	80019c0 <HAL_UARTEx_RxEventCallback+0x1cc>
        {
          for (i = 0; i < size; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8001974:	e011      	b.n	800199a <HAL_UARTEx_RxEventCallback+0x1a6>
          {
            /* read data from buffer dma */
            buffer_save_data_handle[number_char_receive + i] = data_receive_dma[i];
 8001976:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x258>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b7 021e 	ldrh.w	r0, [r7, #542]	; 0x21e
 8001982:	f8b7 121c 	ldrh.w	r1, [r7, #540]	; 0x21c
 8001986:	4401      	add	r1, r0
 8001988:	440b      	add	r3, r1
 800198a:	492e      	ldr	r1, [pc, #184]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x250>)
 800198c:	5c8a      	ldrb	r2, [r1, r2]
 800198e:	701a      	strb	r2, [r3, #0]
          for (i = 0; i < size; i++)
 8001990:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8001994:	3301      	adds	r3, #1
 8001996:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 800199a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800199e:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 80019a2:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3e4      	bcc.n	8001976 <HAL_UARTEx_RxEventCallback+0x182>
          }
          number_char_receive += size;
 80019ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019b0:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 80019b4:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        }
      }

#ifdef DEBUG
      HAL_UART_Transmit(&huart2, buffer_save_data_handle, number_char_receive, 100);
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x258>)
 80019c2:	6819      	ldr	r1, [r3, #0]
 80019c4:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 80019c8:	2364      	movs	r3, #100	; 0x64
 80019ca:	4821      	ldr	r0, [pc, #132]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x25c>)
 80019cc:	f002 fcba 	bl	8004344 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", 2, 100);
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	2202      	movs	r2, #2
 80019d4:	491f      	ldr	r1, [pc, #124]	; (8001a54 <HAL_UARTEx_RxEventCallback+0x260>)
 80019d6:	481e      	ldr	r0, [pc, #120]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x25c>)
 80019d8:	f002 fcb4 	bl	8004344 <HAL_UART_Transmit>
#endif
      /* handle data read */
      if (bsp_uart_handle_rx_data_callback(&command_data, buffer_save_data_handle, number_char_receive) == bootloader_comand_ok)
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x254>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x258>)
 80019e2:	6811      	ldr	r1, [r2, #0]
 80019e4:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 80019e8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80019ec:	4798      	blx	r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d111      	bne.n	8001a18 <HAL_UARTEx_RxEventCallback+0x224>
        bsp_uart_bootloader_comand_callback(command_data);
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_UARTEx_RxEventCallback+0x264>)
 80019f6:	681d      	ldr	r5, [r3, #0]
 80019f8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019fc:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8001a00:	4668      	mov	r0, sp
 8001a02:	f104 0310 	add.w	r3, r4, #16
 8001a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f003 feac 	bl	8005768 <memcpy>
 8001a10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a14:	47a8      	blx	r5
 8001a16:	e002      	b.n	8001a1e <HAL_UARTEx_RxEventCallback+0x22a>
      else
        bsp_uart_bootloader_error();
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_UARTEx_RxEventCallback+0x268>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4798      	blx	r3
    }
    old_pos = size;
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001a20:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001a24:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	8013      	strh	r3, [r2, #0]
 8001a2c:	e000      	b.n	8001a30 <HAL_UARTEx_RxEventCallback+0x23c>
        return;
 8001a2e:	bf00      	nop
  }
}
 8001a30:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bdb0      	pop	{r4, r5, r7, pc}
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	200001a0 	.word	0x200001a0
 8001a40:	20001154 	.word	0x20001154
 8001a44:	200001a4 	.word	0x200001a4
 8001a48:	20001148 	.word	0x20001148
 8001a4c:	20001144 	.word	0x20001144
 8001a50:	2000119c 	.word	0x2000119c
 8001a54:	0800616c 	.word	0x0800616c
 8001a58:	2000114c 	.word	0x2000114c
 8001a5c:	20001150 	.word	0x20001150

08001a60 <bsp_utility_parse_element>:
#include "bsp_utility.h"

void bsp_utility_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b0c7      	sub	sp, #284	; 0x11c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a6e:	6018      	str	r0, [r3, #0]
 8001a70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a78:	6019      	str	r1, [r3, #0]
 8001a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a7e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001a82:	701a      	strb	r2, [r3, #0]
  uint8_t count_array = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint8_t buffer_temp[256];

  /* convert data string to data hex and save to des buffer*/
  for (uint8_t count = 0U; count < length; count++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001a90:	e07f      	b.n	8001b92 <bsp_utility_parse_element+0x132>
  {
    if (buff[count] >= '0' && buff[count] <= '9')
 8001a92:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a96:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a9a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8001aa6:	d91d      	bls.n	8001ae4 <bsp_utility_parse_element+0x84>
 8001aa8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001aac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ab0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b39      	cmp	r3, #57	; 0x39
 8001abc:	d812      	bhi.n	8001ae4 <bsp_utility_parse_element+0x84>
      buffer_temp[count] = buff[count] - 48;
 8001abe:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001ac2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ac6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001ad4:	3a30      	subs	r2, #48	; 0x30
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001adc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001ae0:	54d1      	strb	r1, [r2, r3]
 8001ae2:	e027      	b.n	8001b34 <bsp_utility_parse_element+0xd4>
    else if (buff[count] >= 'A' && buff[count] <= 'F')
 8001ae4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001ae8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001aec:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d956      	bls.n	8001ba8 <bsp_utility_parse_element+0x148>
 8001afa:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001afe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b02:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b46      	cmp	r3, #70	; 0x46
 8001b0e:	d84b      	bhi.n	8001ba8 <bsp_utility_parse_element+0x148>
      buffer_temp[count] = buff[count] - 65 + 10;
 8001b10:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b14:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b18:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b26:	3a37      	subs	r2, #55	; 0x37
 8001b28:	b2d1      	uxtb	r1, r2
 8001b2a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b2e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b32:	54d1      	strb	r1, [r2, r3]
    else
      return;
    if (count % 2 != 0)
 8001b34:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d022      	beq.n	8001b88 <bsp_utility_parse_element+0x128>
    {
      des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 8001b42:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b4c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b5a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001b5e:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b259      	sxtb	r1, r3
 8001b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001b6e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b72:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
      count_array++;
 8001b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001b82:	3301      	adds	r3, #1
 8001b84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  for (uint8_t count = 0U; count < length; count++)
 8001b88:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001b92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b96:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001b9a:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f4ff af76 	bcc.w	8001a92 <bsp_utility_parse_element+0x32>
 8001ba6:	e000      	b.n	8001baa <bsp_utility_parse_element+0x14a>
      return;
 8001ba8:	bf00      	nop
    }
  }
}
 8001baa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <bsp_utility_char_to_hex>:

uint8_t bsp_utility_char_to_hex(uint8_t c)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  /*0 ... 9*/
  if ((c >= '0') && (c <= '9'))
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b2f      	cmp	r3, #47	; 0x2f
 8001bc8:	d906      	bls.n	8001bd8 <bsp_utility_char_to_hex+0x22>
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b39      	cmp	r3, #57	; 0x39
 8001bce:	d803      	bhi.n	8001bd8 <bsp_utility_char_to_hex+0x22>
    result = c - 48;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	3b30      	subs	r3, #48	; 0x30
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e008      	b.n	8001bea <bsp_utility_char_to_hex+0x34>
  /*A ... F*/
  else if ((c >= 'A') && (c <= 'F'))
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d905      	bls.n	8001bea <bsp_utility_char_to_hex+0x34>
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b46      	cmp	r3, #70	; 0x46
 8001be2:	d802      	bhi.n	8001bea <bsp_utility_char_to_hex+0x34>
    result = c - 55;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	3b37      	subs	r3, #55	; 0x37
 8001be8:	73fb      	strb	r3, [r7, #15]
  return result;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfc:	f000 faee 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c00:	f000 f80c 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c04:	f000 f8f0 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c08:	f000 f8ce 	bl	8001da8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001c0c:	f000 f878 	bl	8001d00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c10:	f000 f8a0 	bl	8001d54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bootloader_start_up();
 8001c14:	f7fe fec6 	bl	80009a4 <bootloader_start_up>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <main+0x20>
	...

08001c1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	2234      	movs	r2, #52	; 0x34
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fdaa 	bl	8005784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM       = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN       = 180;
 8001c90:	23b4      	movs	r3, #180	; 0xb4
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ       = 2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR       = 2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 f833 	bl	8003d10 <HAL_RCC_OscConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cb0:	f000 f8c2 	bl	8001e38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb4:	f001 fb9a 	bl	80033ec <HAL_PWREx_EnableOverDrive>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cbe:	f000 f8bb 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2105      	movs	r1, #5
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fbd3 	bl	800348c <HAL_RCC_ClockConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001cec:	f000 f8a4 	bl	8001e38 <Error_Handler>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3750      	adds	r7, #80	; 0x50
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000

08001d00 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <MX_USART1_UART_Init+0x50>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 115200;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_USART1_UART_Init+0x4c>)
 8001d38:	f002 fa88 	bl	800424c <HAL_UART_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d42:	f000 f879 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20001158 	.word	0x20001158
 8001d50:	40011000 	.word	0x40011000

08001d54 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_USART2_UART_Init+0x50>)
 8001d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_USART2_UART_Init+0x4c>)
 8001d8c:	f002 fa5e 	bl	800424c <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d96:	f000 f84f 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000119c 	.word	0x2000119c
 8001da4:	40004400 	.word	0x40004400

08001da8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_DMA_Init+0x3c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	203a      	movs	r0, #58	; 0x3a
 8001dd0:	f000 fb75 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dd4:	203a      	movs	r0, #58	; 0x3a
 8001dd6:	f000 fb8e 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_GPIO_Init+0x4c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_UART_MspInit+0x158>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d164      	bne.n	8001f80 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f00:	2307      	movs	r3, #7
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <HAL_UART_MspInit+0x160>)
 8001f0c:	f000 ffe6 	bl	8002edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_UART_MspInit+0x168>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f24:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f30:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f44:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f52:	4829      	ldr	r0, [pc, #164]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f54:	f000 faf8 	bl	8002548 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f5e:	f7ff ff6b 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_UART_MspInit+0x164>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2025      	movs	r0, #37	; 0x25
 8001f74:	f000 faa3 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f78:	2025      	movs	r0, #37	; 0x25
 8001f7a:	f000 fabc 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	e030      	b.n	8001fe2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_UART_MspInit+0x16c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12b      	bne.n	8001fe2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_UART_MspInit+0x15c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_UART_MspInit+0x160>)
 8001fde:	f000 ff7d 	bl	8002edc <HAL_GPIO_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	200011e0 	.word	0x200011e0
 8001ffc:	40026440 	.word	0x40026440
 8002000:	40004400 	.word	0x40004400

08002004 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <HAL_UART_MspDeInit+0x60>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d113      	bne.n	800203e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_UART_MspDeInit+0x64>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_UART_MspDeInit+0x64>)
 800201c:	f023 0310 	bic.w	r3, r3, #16
 8002020:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002022:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002026:	4811      	ldr	r0, [pc, #68]	; (800206c <HAL_UART_MspDeInit+0x68>)
 8002028:	f001 f8ec 	bl	8003204 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fb37 	bl	80026a4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002036:	2025      	movs	r0, #37	; 0x25
 8002038:	f000 fa6b 	bl	8002512 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800203c:	e00e      	b.n	800205c <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_UART_MspDeInit+0x6c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d109      	bne.n	800205c <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_UART_MspDeInit+0x64>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_UART_MspDeInit+0x64>)
 800204e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002052:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002054:	210c      	movs	r1, #12
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_UART_MspDeInit+0x68>)
 8002058:	f001 f8d4 	bl	8003204 <HAL_GPIO_DeInit>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40011000 	.word	0x40011000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40004400 	.word	0x40004400

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f8de 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USART1_IRQHandler+0x10>)
 80020ce:	f002 fa31 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20001158 	.word	0x20001158

080020dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <DMA2_Stream2_IRQHandler+0x14>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020e6:	4803      	ldr	r0, [pc, #12]	; (80020f4 <DMA2_Stream2_IRQHandler+0x18>)
 80020e8:	f000 fc24 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200001a0 	.word	0x200001a0
 80020f4:	200011e0 	.word	0x200011e0

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f003 faf4 	bl	8005714 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	20001240 	.word	0x20001240
 8002160:	20001258 	.word	0x20001258

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218e:	490e      	ldr	r1, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a4:	4c0b      	ldr	r4, [pc, #44]	; (80021d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b2:	f7ff ffd7 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b6:	f003 fab3 	bl	8005720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7ff fd1d 	bl	8001bf8 <main>
  bx  lr    
 80021be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021cc:	080063d4 	.word	0x080063d4
  ldr r2, =_sbss
 80021d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021d4:	20001258 	.word	0x20001258

080021d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_Init+0x40>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_Init+0x40>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_Init+0x40>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f94f 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	200f      	movs	r0, #15
 800220c:	f000 f808 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fe18 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x54>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_InitTick+0x58>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f975 	bl	800252e <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00e      	b.n	800226c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d80a      	bhi.n	800226a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f000 f92f 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_InitTick+0x5c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000004 	.word	0x20000004
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x20>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_IncTick+0x24>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	20001244 	.word	0x20001244

080022a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_GetTick+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20001244 	.word	0x20001244

080022c0 <__NVIC_SetPriorityGrouping>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_DisableIRQ>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db12      	blt.n	8002398 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	490a      	ldr	r1, [pc, #40]	; (80023a4 <__NVIC_DisableIRQ+0x44>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	3320      	adds	r3, #32
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800238c:	f3bf 8f4f 	dsb	sy
}
 8002390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	bf00      	nop
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff05 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff1a 	bl	8002308 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff0d 	bl	8002324 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff1d 	bl	8002360 <__NVIC_DisableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff94 	bl	8002464 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fea8 	bl	80022a8 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e099      	b.n	8002698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002584:	e00f      	b.n	80025a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002586:	f7ff fe8f 	bl	80022a8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b05      	cmp	r3, #5
 8002592:	d908      	bls.n	80025a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e078      	b.n	8002698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e8      	bne.n	8002586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_DMA_Init+0x158>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0307 	bic.w	r3, r3, #7
 8002626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	2b04      	cmp	r3, #4
 8002638:	d117      	bne.n	800266a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fbc9 	bl	8002de4 <DMA_CheckFifoParam>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002666:	2301      	movs	r3, #1
 8002668:	e016      	b.n	8002698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fb80 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 8002678:	4603      	mov	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	223f      	movs	r2, #63	; 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	f010803f 	.word	0xf010803f

080026a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e050      	b.n	8002758 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d101      	bne.n	80026c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	e048      	b.n	8002758 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2221      	movs	r2, #33	; 0x21
 8002704:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fb36 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 800270c:	4603      	mov	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	223f      	movs	r2, #63	; 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_DMA_Start_IT+0x26>
 8002782:	2302      	movs	r3, #2
 8002784:	e040      	b.n	8002808 <HAL_DMA_Start_IT+0xa8>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d12f      	bne.n	80027fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fab4 	bl	8002d1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	223f      	movs	r2, #63	; 0x3f
 80027ba:	409a      	lsls	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0216 	orr.w	r2, r2, #22
 80027ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0208 	orr.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e005      	b.n	8002806 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7ff fd43 	bl	80022a8 <HAL_GetTick>
 8002822:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e052      	b.n	80028e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0216 	bic.w	r2, r2, #22
 8002850:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <HAL_DMA_Abort+0x62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0208 	bic.w	r2, r2, #8
 8002880:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002892:	e013      	b.n	80028bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002894:	f7ff fd08 	bl	80022a8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d90c      	bls.n	80028bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e015      	b.n	80028e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e4      	bne.n	8002894 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	223f      	movs	r2, #63	; 0x3f
 80028d0:	409a      	lsls	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d004      	beq.n	800290e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e00c      	b.n	8002928 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2205      	movs	r2, #5
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002940:	4b8e      	ldr	r3, [pc, #568]	; (8002b7c <HAL_DMA_IRQHandler+0x248>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a8e      	ldr	r2, [pc, #568]	; (8002b80 <HAL_DMA_IRQHandler+0x24c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a9b      	lsrs	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2208      	movs	r2, #8
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2208      	movs	r2, #8
 800298e:	409a      	lsls	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2204      	movs	r2, #4
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2210      	movs	r2, #16
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d043      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03c      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2210      	movs	r2, #16
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d024      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e01f      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e016      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0208 	bic.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 808f 	beq.w	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8087 	beq.w	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2220      	movs	r2, #32
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d136      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0216 	bic.w	r2, r2, #22
 8002aec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x1da>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0208 	bic.w	r2, r2, #8
 8002b1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07e      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
        }
        return;
 8002b4a:	e079      	b.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e02c      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
 8002b7a:	bf00      	nop
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e01e      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0210 	bic.w	r2, r2, #16
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d307      	bcc.n	8002c1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f2      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x2cc>
 8002c1a:	e000      	b.n	8002c1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c40:	bf00      	nop
    }
  }
}
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_UnRegisterCallback+0x1e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e053      	b.n	8002d0e <HAL_DMA_UnRegisterCallback+0xc6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d142      	bne.n	8002d00 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d83c      	bhi.n	8002cfa <HAL_DMA_UnRegisterCallback+0xb2>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <HAL_DMA_UnRegisterCallback+0x40>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002ca5 	.word	0x08002ca5
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002ccd 	.word	0x08002ccd
 8002ca0:	08002cd5 	.word	0x08002cd5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002caa:	e02b      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002cb2:	e027      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002cba:	e023      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002cc2:	e01f      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002cca:	e01b      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002cd2:	e017      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002cf8:	e004      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e001      	b.n	8002d04 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop

08002d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d108      	bne.n	8002d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d5a:	e007      	b.n	8002d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3b10      	subs	r3, #16
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <DMA_CalcBaseAndBitshift+0x64>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d909      	bls.n	8002dba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58
 8002db8:	e007      	b.n	8002dca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	aaaaaaab 	.word	0xaaaaaaab
 8002de0:	08006388 	.word	0x08006388

08002de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d856      	bhi.n	8002eb2 <DMA_CheckFifoParam+0xce>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <DMA_CheckFifoParam+0x28>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2f 	.word	0x08002e2f
 8002e14:	08002e1d 	.word	0x08002e1d
 8002e18:	08002eb3 	.word	0x08002eb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d046      	beq.n	8002eb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e043      	b.n	8002eb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e36:	d140      	bne.n	8002eba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e03d      	b.n	8002eba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	d121      	bne.n	8002e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d837      	bhi.n	8002ebe <DMA_CheckFifoParam+0xda>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <DMA_CheckFifoParam+0x70>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e6b 	.word	0x08002e6b
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002e7d 	.word	0x08002e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e030      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d025      	beq.n	8002ec2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e022      	b.n	8002ec2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e84:	d11f      	bne.n	8002ec6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e8a:	e01c      	b.n	8002ec6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d903      	bls.n	8002e9a <DMA_CheckFifoParam+0xb6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e98:	e018      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9e:	e015      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e00b      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e00a      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e008      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e006      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e004      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
    }
  } 
  
  return status; 
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e165      	b.n	80031c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8154 	bne.w	80031be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80ae 	beq.w	80031be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_GPIO_Init+0x300>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_GPIO_Init+0x308>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d025      	beq.n	80030f6 <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_Init+0x30c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x310>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x314>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x318>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x20a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <HAL_GPIO_Init+0x31c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x206>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a49      	ldr	r2, [pc, #292]	; (80031fc <HAL_GPIO_Init+0x320>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x202>
 80030da:	2306      	movs	r3, #6
 80030dc:	e00c      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030de:	2307      	movs	r3, #7
 80030e0:	e00a      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e008      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e004      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x21c>
 80030f6:	2300      	movs	r3, #0
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f002 0203 	and.w	r2, r2, #3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	4093      	lsls	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003108:	4935      	ldr	r1, [pc, #212]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_GPIO_Init+0x324>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_GPIO_Init+0x324>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_GPIO_Init+0x324>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	f67f ae96 	bls.w	8002ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40021400 	.word	0x40021400
 80031fc:	40021800 	.word	0x40021800
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e0c7      	b.n	80033b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003220:	2201      	movs	r2, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	f040 80b7 	bne.w	80033aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800323c:	4a62      	ldr	r2, [pc, #392]	; (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a5a      	ldr	r2, [pc, #360]	; (80033cc <HAL_GPIO_DeInit+0x1c8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d025      	beq.n	80032b2 <HAL_GPIO_DeInit+0xae>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a59      	ldr	r2, [pc, #356]	; (80033d0 <HAL_GPIO_DeInit+0x1cc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <HAL_GPIO_DeInit+0xaa>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_GPIO_DeInit+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d019      	beq.n	80032aa <HAL_GPIO_DeInit+0xa6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a57      	ldr	r2, [pc, #348]	; (80033d8 <HAL_GPIO_DeInit+0x1d4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_DeInit+0xa2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a56      	ldr	r2, [pc, #344]	; (80033dc <HAL_GPIO_DeInit+0x1d8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_GPIO_DeInit+0x9e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a55      	ldr	r2, [pc, #340]	; (80033e0 <HAL_GPIO_DeInit+0x1dc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_GPIO_DeInit+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <HAL_GPIO_DeInit+0x1e0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_GPIO_DeInit+0x96>
 8003296:	2306      	movs	r3, #6
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 800329a:	2307      	movs	r3, #7
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_DeInit+0xb0>
 80032b2:	2300      	movs	r3, #0
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d132      	bne.n	800332a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032c4:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4946      	ldr	r1, [pc, #280]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032d2:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	4943      	ldr	r1, [pc, #268]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032dc:	4013      	ands	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032e0:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	493f      	ldr	r1, [pc, #252]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	493c      	ldr	r1, [pc, #240]	; (80033e8 <HAL_GPIO_DeInit+0x1e4>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800330c:	4a2e      	ldr	r2, [pc, #184]	; (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	43da      	mvns	r2, r3
 800331c:	482a      	ldr	r0, [pc, #168]	; (80033c8 <HAL_GPIO_DeInit+0x1c4>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	400a      	ands	r2, r1
 8003324:	3302      	adds	r3, #2
 8003326:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2103      	movs	r1, #3
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	08d2      	lsrs	r2, r2, #3
 8003360:	4019      	ands	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2103      	movs	r1, #3
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2103      	movs	r1, #3
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	f67f af34 	bls.w	8003220 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40020400 	.word	0x40020400
 80033d4:	40020800 	.word	0x40020800
 80033d8:	40020c00 	.word	0x40020c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40021400 	.word	0x40021400
 80033e4:	40021800 	.word	0x40021800
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_PWREx_EnableOverDrive+0x90>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_PWREx_EnableOverDrive+0x90>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_PWREx_EnableOverDrive+0x90>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_PWREx_EnableOverDrive+0x94>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fe ff46 	bl	80022a8 <HAL_GetTick>
 800341c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800341e:	e009      	b.n	8003434 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003420:	f7fe ff42 	bl	80022a8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e01f      	b.n	8003474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_PWREx_EnableOverDrive+0x98>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7fe ff2e 	bl	80022a8 <HAL_GetTick>
 800344c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344e:	e009      	b.n	8003464 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003450:	f7fe ff2a 	bl	80022a8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800345e:	d901      	bls.n	8003464 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e007      	b.n	8003474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_PWREx_EnableOverDrive+0x98>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003470:	d1ee      	bne.n	8003450 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	420e0040 	.word	0x420e0040
 8003484:	40007000 	.word	0x40007000
 8003488:	420e0044 	.word	0x420e0044

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cc      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d90c      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d044      	beq.n	80035ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d119      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d003      	beq.n	800354a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e067      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357c:	f7fe fe94 	bl	80022a8 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe fe90 	bl	80022a8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20c      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f855 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fdf4 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	08006370 	.word	0x08006370
 8003650:	20000004 	.word	0x20000004
 8003654:	20000008 	.word	0x20000008

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	08006380 	.word	0x08006380

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800369c:	f7ff ffdc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0b5b      	lsrs	r3, r3, #13
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08006380 	.word	0x08006380

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b0ae      	sub	sp, #184	; 0xb8
 80036c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e6:	4bcb      	ldr	r3, [pc, #812]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	f200 8206 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x440>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003b01 	.word	0x08003b01
 8003704:	08003b01 	.word	0x08003b01
 8003708:	08003b01 	.word	0x08003b01
 800370c:	08003739 	.word	0x08003739
 8003710:	08003b01 	.word	0x08003b01
 8003714:	08003b01 	.word	0x08003b01
 8003718:	08003b01 	.word	0x08003b01
 800371c:	08003741 	.word	0x08003741
 8003720:	08003b01 	.word	0x08003b01
 8003724:	08003b01 	.word	0x08003b01
 8003728:	08003b01 	.word	0x08003b01
 800372c:	08003931 	.word	0x08003931
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4bb9      	ldr	r3, [pc, #740]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003736:	e1e7      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003738:	4bb8      	ldr	r3, [pc, #736]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800373e:	e1e3      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4bb4      	ldr	r3, [pc, #720]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374c:	4bb1      	ldr	r3, [pc, #708]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d071      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4bae      	ldr	r3, [pc, #696]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003764:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800377a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4621      	mov	r1, r4
 8003798:	1a51      	subs	r1, r2, r1
 800379a:	6439      	str	r1, [r7, #64]	; 0x40
 800379c:	4629      	mov	r1, r5
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037b0:	4649      	mov	r1, r9
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	4641      	mov	r1, r8
 80037b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ba:	4641      	mov	r1, r8
 80037bc:	018a      	lsls	r2, r1, #6
 80037be:	4641      	mov	r1, r8
 80037c0:	1a51      	subs	r1, r2, r1
 80037c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c4:	4649      	mov	r1, r9
 80037c6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037d8:	4649      	mov	r1, r9
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4641      	mov	r1, r8
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4641      	mov	r1, r8
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4622      	mov	r2, r4
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
 80037f2:	462b      	mov	r3, r5
 80037f4:	460a      	mov	r2, r1
 80037f6:	eb42 0303 	adc.w	r3, r2, r3
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003808:	4629      	mov	r1, r5
 800380a:	024b      	lsls	r3, r1, #9
 800380c:	4621      	mov	r1, r4
 800380e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003812:	4621      	mov	r1, r4
 8003814:	024a      	lsls	r2, r1, #9
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003828:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800382c:	f7fc fd48 	bl	80002c0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800383a:	e067      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003848:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800384c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	67bb      	str	r3, [r7, #120]	; 0x78
 8003856:	2300      	movs	r3, #0
 8003858:	67fb      	str	r3, [r7, #124]	; 0x7c
 800385a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	0159      	lsls	r1, r3, #5
 800386c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003870:	0150      	lsls	r0, r2, #5
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4621      	mov	r1, r4
 8003878:	1a51      	subs	r1, r2, r1
 800387a:	62b9      	str	r1, [r7, #40]	; 0x28
 800387c:	4629      	mov	r1, r5
 800387e:	eb63 0301 	sbc.w	r3, r3, r1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003890:	4649      	mov	r1, r9
 8003892:	018b      	lsls	r3, r1, #6
 8003894:	4641      	mov	r1, r8
 8003896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389a:	4641      	mov	r1, r8
 800389c:	018a      	lsls	r2, r1, #6
 800389e:	4641      	mov	r1, r8
 80038a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a4:	4649      	mov	r1, r9
 80038a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038be:	4692      	mov	sl, r2
 80038c0:	469b      	mov	fp, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb1a 0303 	adds.w	r3, sl, r3
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	462b      	mov	r3, r5
 80038cc:	eb4b 0303 	adc.w	r3, fp, r3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038f4:	2200      	movs	r2, #0
 80038f6:	673b      	str	r3, [r7, #112]	; 0x70
 80038f8:	677a      	str	r2, [r7, #116]	; 0x74
 80038fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80038fe:	f7fc fcdf 	bl	80002c0 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4613      	mov	r3, r2
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800391e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800392e:	e0eb      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d06b      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	2200      	movs	r2, #0
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
 800395c:	2300      	movs	r3, #0
 800395e:	667b      	str	r3, [r7, #100]	; 0x64
 8003960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	f04f 0000 	mov.w	r0, #0
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	0159      	lsls	r1, r3, #5
 8003972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003976:	0150      	lsls	r0, r2, #5
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4621      	mov	r1, r4
 800397e:	1a51      	subs	r1, r2, r1
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	4629      	mov	r1, r5
 8003984:	eb63 0301 	sbc.w	r3, r3, r1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003996:	4659      	mov	r1, fp
 8003998:	018b      	lsls	r3, r1, #6
 800399a:	4651      	mov	r1, sl
 800399c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a0:	4651      	mov	r1, sl
 80039a2:	018a      	lsls	r2, r1, #6
 80039a4:	4651      	mov	r1, sl
 80039a6:	ebb2 0801 	subs.w	r8, r2, r1
 80039aa:	4659      	mov	r1, fp
 80039ac:	eb63 0901 	sbc.w	r9, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c4:	4690      	mov	r8, r2
 80039c6:	4699      	mov	r9, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	eb18 0303 	adds.w	r3, r8, r3
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb49 0303 	adc.w	r3, r9, r3
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039e4:	4629      	mov	r1, r5
 80039e6:	024b      	lsls	r3, r1, #9
 80039e8:	4621      	mov	r1, r4
 80039ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ee:	4621      	mov	r1, r4
 80039f0:	024a      	lsls	r2, r1, #9
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039fa:	2200      	movs	r2, #0
 80039fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a04:	f7fc fc5c 	bl	80002c0 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a12:	e065      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x420>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	2200      	movs	r2, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a30:	653b      	str	r3, [r7, #80]	; 0x50
 8003a32:	2300      	movs	r3, #0
 8003a34:	657b      	str	r3, [r7, #84]	; 0x54
 8003a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4641      	mov	r1, r8
 8003a54:	1a51      	subs	r1, r2, r1
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	4649      	mov	r1, r9
 8003a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a76:	4651      	mov	r1, sl
 8003a78:	018a      	lsls	r2, r1, #6
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	1a54      	subs	r4, r2, r1
 8003a7e:	4659      	mov	r1, fp
 8003a80:	eb63 0501 	sbc.w	r5, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac8:	2200      	movs	r2, #0
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003acc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ace:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad2:	f7fc fbf5 	bl	80002c0 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0f1b      	lsrs	r3, r3, #28
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003afe:	e003      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	37b8      	adds	r7, #184	; 0xb8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b26:	f7fe fbbf 	bl	80022a8 <HAL_GetTick>
 8003b2a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b2c:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fbb5 	bl	80022a8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0d0      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b4c:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b58:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a66      	ldr	r2, [pc, #408]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b64:	f7fe fba0 	bl	80022a8 <HAL_GetTick>
 8003b68:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b6a:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b72:	f7fe fb99 	bl	80022a8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0b2      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b88:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ee      	bne.n	8003b72 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b94:	f7fe fb88 	bl	80022a8 <HAL_GetTick>
 8003b98:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003b9a:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a56      	ldr	r2, [pc, #344]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003ba0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fb7e 	bl	80022a8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e099      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bba:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bc6:	f7fe fb6f 	bl	80022a8 <HAL_GetTick>
 8003bca:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003bcc:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fb65 	bl	80022a8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e080      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7fe fb56 	bl	80022a8 <HAL_GetTick>
 8003bfc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c08:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c0c:	f7fe fb4c 	bl	80022a8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e067      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003c2a:	f7fe fb3d 	bl	80022a8 <HAL_GetTick>
 8003c2e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c3e:	f7fe fb33 	bl	80022a8 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e04e      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c5e:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <HAL_RCC_DeInit+0x1dc>)
 8003c60:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c64:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <HAL_RCC_DeInit+0x1dc>)
 8003c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_RCC_DeInit+0x1e0>)
 8003c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c78:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c7c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003c9c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003ca0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_RCC_DeInit+0x1d8>)
 8003ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_RCC_DeInit+0x1e4>)
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <HAL_RCC_DeInit+0x1e8>)
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCC_DeInit+0x1ec>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fa9f 	bl	8002220 <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	24003010 	.word	0x24003010
 8003d00:	04003010 	.word	0x04003010
 8003d04:	20000004 	.word	0x20000004
 8003d08:	00f42400 	.word	0x00f42400
 8003d0c:	20000008 	.word	0x20000008

08003d10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e28d      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8083 	beq.w	8003e36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d30:	4b94      	ldr	r3, [pc, #592]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d019      	beq.n	8003d70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d3c:	4b91      	ldr	r3, [pc, #580]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d48:	4b8e      	ldr	r3, [pc, #568]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b84      	ldr	r3, [pc, #528]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x124>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e25a      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x90>
 8003d92:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xcc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xb4>
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a72      	ldr	r2, [pc, #456]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xcc>
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6b      	ldr	r2, [pc, #428]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fa60 	bl	80022a8 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fa5c 	bl	80022a8 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e21f      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xdc>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fa4c 	bl	80022a8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fa48 	bl	80022a8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e20b      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x104>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d06f      	beq.n	8003f22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e42:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e4e:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d105      	bne.n	8003e66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x186>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1d3      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4937      	ldr	r1, [pc, #220]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x278>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe f9f5 	bl	80022a8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fe f9f1 	bl	80022a8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1b4      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x278>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f9d4 	bl	80022a8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fe f9d0 	bl	80022a8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e193      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d036      	beq.n	8003f9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x27c>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe f9b4 	bl	80022a8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fe f9b0 	bl	80022a8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e173      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x234>
 8003f62:	e01b      	b.n	8003f9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x27c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fe f99d 	bl	80022a8 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e00e      	b.n	8003f90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fe f999 	bl	80022a8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d907      	bls.n	8003f90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e15c      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470000 	.word	0x42470000
 8003f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b8a      	ldr	r3, [pc, #552]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ea      	bne.n	8003f72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8097 	beq.w	80040d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b83      	ldr	r3, [pc, #524]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCC_OscConfig+0x4b0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x4b0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x4b0>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe f959 	bl	80022a8 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fe f955 	bl	80022a8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e118      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x4b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x31e>
 8004020:	4b66      	ldr	r3, [pc, #408]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a65      	ldr	r2, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	e01c      	b.n	8004068 <HAL_RCC_OscConfig+0x358>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x340>
 8004036:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a60      	ldr	r2, [pc, #384]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a5d      	ldr	r2, [pc, #372]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0x358>
 8004050:	4b5a      	ldr	r3, [pc, #360]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a59      	ldr	r2, [pc, #356]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	4b57      	ldr	r3, [pc, #348]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4a56      	ldr	r2, [pc, #344]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004062:	f023 0304 	bic.w	r3, r3, #4
 8004066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fe f91a 	bl	80022a8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fe f916 	bl	80022a8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0d7      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	4b4b      	ldr	r3, [pc, #300]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ee      	beq.n	8004078 <HAL_RCC_OscConfig+0x368>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe f904 	bl	80022a8 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fe f900 	bl	80022a8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0c1      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ee      	bne.n	80040a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	4a3a      	ldr	r2, [pc, #232]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80ad 	beq.w	800423c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d060      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d145      	bne.n	8004182 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <HAL_RCC_OscConfig+0x4b4>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe f8d4 	bl	80022a8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe f8d0 	bl	80022a8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e093      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x4b4>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fe f8a5 	bl	80022a8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fe f8a1 	bl	80022a8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e064      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x452>
 8004180:	e05c      	b.n	800423c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_RCC_OscConfig+0x4b4>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe f88e 	bl	80022a8 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe f88a 	bl	80022a8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e04d      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x480>
 80041ae:	e045      	b.n	800423c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e040      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000
 80041c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <HAL_RCC_OscConfig+0x538>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d030      	beq.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d129      	bne.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d122      	bne.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004200:	4293      	cmp	r3, r2
 8004202:	d119      	bne.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	3b01      	subs	r3, #1
 8004212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d10f      	bne.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d107      	bne.n	8004238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800

0800424c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e03f      	b.n	80042de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fe0e 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 ffcb 	bl	800522c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e021      	b.n	800433c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fd fe77 	bl	8002004 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	d17c      	bne.n	800445e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_UART_Transmit+0x2c>
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e075      	b.n	8004460 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit+0x3e>
 800437e:	2302      	movs	r3, #2
 8004380:	e06e      	b.n	8004460 <HAL_UART_Transmit+0x11c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004398:	f7fd ff86 	bl	80022a8 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d108      	bne.n	80043c6 <HAL_UART_Transmit+0x82>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e003      	b.n	80043ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d6:	e02a      	b.n	800442e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fc54 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e036      	b.n	8004460 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004406:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3302      	adds	r3, #2
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e007      	b.n	8004420 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3301      	adds	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1cf      	bne.n	80043d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2200      	movs	r2, #0
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fc24 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e006      	b.n	8004460 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	d152      	bne.n	8004528 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e04b      	b.n	800452a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800449c:	2302      	movs	r3, #2
 800449e:	e044      	b.n	800452a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	461a      	mov	r2, r3
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fc59 	bl	8004d6c <UART_Start_Receive_DMA>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80044c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d12c      	bne.n	8004522 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d125      	bne.n	800451c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	617b      	str	r3, [r7, #20]
   return(result);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f043 0310 	orr.w	r3, r3, #16
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004506:	627a      	str	r2, [r7, #36]	; 0x24
 8004508:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6a39      	ldr	r1, [r7, #32]
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	61fb      	str	r3, [r7, #28]
   return(result);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800451a:	e002      	b.n	8004522 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004526:	e000      	b.n	800452a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3730      	adds	r7, #48	; 0x30
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b0ba      	sub	sp, #232	; 0xe8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_UART_IRQHandler+0x66>
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd8f 	bl	80050b6 <UART_Receive_IT>
      return;
 8004598:	e256      	b.n	8004a48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800459a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80de 	beq.w	8004760 <HAL_UART_IRQHandler+0x22c>
 80045a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80d1 	beq.w	8004760 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xae>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xd2>
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f043 0202 	orr.w	r2, r3, #2
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_UART_IRQHandler+0xf6>
 8004612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0204 	orr.w	r2, r3, #4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <HAL_UART_IRQHandler+0x126>
 8004636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0208 	orr.w	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 81ed 	beq.w	8004a3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_UART_IRQHandler+0x14e>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fd1a 	bl	80050b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_UART_IRQHandler+0x17a>
 80046a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04f      	beq.n	800474e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fc22 	bl	8004ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d141      	bne.n	8004746 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1d9      	bne.n	80046c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d013      	beq.n	800473e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	4a7d      	ldr	r2, [pc, #500]	; (8004910 <HAL_UART_IRQHandler+0x3dc>)
 800471c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f8e4 	bl	80028f0 <HAL_DMA_Abort_IT>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004738:	4610      	mov	r0, r2
 800473a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e00e      	b.n	800475c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9a4 	bl	8004a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	e00a      	b.n	800475c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9a0 	bl	8004a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	e006      	b.n	800475c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f99c 	bl	8004a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800475a:	e170      	b.n	8004a3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	bf00      	nop
    return;
 800475e:	e16e      	b.n	8004a3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	2b01      	cmp	r3, #1
 8004766:	f040 814a 	bne.w	80049fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8143 	beq.w	80049fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 813c 	beq.w	80049fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	f040 80b4 	bne.w	8004914 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8140 	beq.w	8004a42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ca:	429a      	cmp	r2, r3
 80047cc:	f080 8139 	bcs.w	8004a42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	f000 8088 	beq.w	80048f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800481e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1d9      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004856:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800485a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800485e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e1      	bne.n	8004832 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004894:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004898:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e3      	bne.n	800486e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c6:	f023 0310 	bic.w	r3, r3, #16
 80048ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e3      	bne.n	80048b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd ff8d 	bl	8002810 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc ff74 	bl	80017f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800490c:	e099      	b.n	8004a42 <HAL_UART_IRQHandler+0x50e>
 800490e:	bf00      	nop
 8004910:	08004fbf 	.word	0x08004fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 808b 	beq.w	8004a46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8086 	beq.w	8004a46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800495e:	647a      	str	r2, [r7, #68]	; 0x44
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e3      	bne.n	800493a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	623b      	str	r3, [r7, #32]
   return(result);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004996:	633a      	str	r2, [r7, #48]	; 0x30
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e3      	bne.n	8004972 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0310 	bic.w	r3, r3, #16
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049dc:	61fa      	str	r2, [r7, #28]
 80049de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e3      	bne.n	80049b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fefc 	bl	80017f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049fc:	e023      	b.n	8004a46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_UART_IRQHandler+0x4ea>
 8004a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fae5 	bl	8004fe6 <UART_Transmit_IT>
    return;
 8004a1c:	e014      	b.n	8004a48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <HAL_UART_IRQHandler+0x514>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fb25 	bl	8005086 <UART_EndTransmit_IT>
    return;
 8004a3c:	e004      	b.n	8004a48 <HAL_UART_IRQHandler+0x514>
    return;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <HAL_UART_IRQHandler+0x514>
      return;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <HAL_UART_IRQHandler+0x514>
      return;
 8004a46:	bf00      	nop
  }
}
 8004a48:	37e8      	adds	r7, #232	; 0xe8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop

08004a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b09c      	sub	sp, #112	; 0x70
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d172      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ae2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ae4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b16:	647a      	str	r2, [r7, #68]	; 0x44
 8004b18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b40:	663b      	str	r3, [r7, #96]	; 0x60
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d119      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0310 	bic.w	r3, r3, #16
 8004b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	69b9      	ldr	r1, [r7, #24]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d106      	bne.n	8004bb8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bb2:	f7fc fe1f 	bl	80017f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb6:	e002      	b.n	8004bbe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bba:	f7ff ff53 	bl	8004a64 <HAL_UART_RxCpltCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3770      	adds	r7, #112	; 0x70
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d108      	bne.n	8004bee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7fc fe04 	bl	80017f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bec:	e002      	b.n	8004bf4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff42 	bl	8004a78 <HAL_UART_RxHalfCpltCallback>
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b21      	cmp	r3, #33	; 0x21
 8004c2e:	d108      	bne.n	8004c42 <UART_DMAError+0x46>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c3c:	68b8      	ldr	r0, [r7, #8]
 8004c3e:	f000 f933 	bl	8004ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b22      	cmp	r3, #34	; 0x22
 8004c62:	d108      	bne.n	8004c76 <UART_DMAError+0x7a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f000 f941 	bl	8004ef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f7ff ff02 	bl	8004a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b090      	sub	sp, #64	; 0x40
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	e050      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d04c      	beq.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb0:	f7fd fafa 	bl	80022a8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d241      	bcs.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ce0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	613b      	str	r3, [r7, #16]
   return(result);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d14:	623a      	str	r2, [r7, #32]
 8004d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	69f9      	ldr	r1, [r7, #28]
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e5      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e00f      	b.n	8004d64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d09f      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3740      	adds	r7, #64	; 0x40
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b098      	sub	sp, #96	; 0x60
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2222      	movs	r2, #34	; 0x22
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <UART_Start_Receive_DMA+0x130>)
 8004d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <UART_Start_Receive_DMA+0x134>)
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	4a3e      	ldr	r2, [pc, #248]	; (8004ea4 <UART_Start_Receive_DMA+0x138>)
 8004daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	f7fd fcc8 	bl	8002760 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d019      	beq.n	8004e2a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	657b      	str	r3, [r7, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6a39      	ldr	r1, [r7, #32]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3760      	adds	r7, #96	; 0x60
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08004aa1 	.word	0x08004aa1
 8004ea0:	08004bc7 	.word	0x08004bc7
 8004ea4:	08004bfd 	.word	0x08004bfd

08004ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	61ba      	str	r2, [r7, #24]
 8004ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004eec:	bf00      	nop
 8004eee:	3724      	adds	r7, #36	; 0x24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b095      	sub	sp, #84	; 0x54
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f20:	643a      	str	r2, [r7, #64]	; 0x40
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d119      	bne.n	8004fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0310 	bic.w	r3, r3, #16
 8004f86:	647b      	str	r3, [r7, #68]	; 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f90:	61ba      	str	r2, [r7, #24]
 8004f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6979      	ldr	r1, [r7, #20]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fb2:	bf00      	nop
 8004fb4:	3754      	adds	r7, #84	; 0x54
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fd57 	bl	8004a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b21      	cmp	r3, #33	; 0x21
 8004ff8:	d13e      	bne.n	8005078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d114      	bne.n	800502e <UART_Transmit_IT+0x48>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d110      	bne.n	800502e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]
 800502c:	e008      	b.n	8005040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6211      	str	r1, [r2, #32]
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29b      	uxth	r3, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4619      	mov	r1, r3
 800504e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10f      	bne.n	8005074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	e000      	b.n	800507a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
  }
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fcd2 	bl	8004a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b08c      	sub	sp, #48	; 0x30
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b22      	cmp	r3, #34	; 0x22
 80050c8:	f040 80ab 	bne.w	8005222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d4:	d117      	bne.n	8005106 <UART_Receive_IT+0x50>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d113      	bne.n	8005106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	1c9a      	adds	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
 8005104:	e026      	b.n	8005154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d007      	beq.n	800512a <UART_Receive_IT+0x74>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <UART_Receive_IT+0x82>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e008      	b.n	800514a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005144:	b2da      	uxtb	r2, r3
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4619      	mov	r1, r3
 8005162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005164:	2b00      	cmp	r3, #0
 8005166:	d15a      	bne.n	800521e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0220 	bic.w	r2, r2, #32
 8005176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d135      	bne.n	8005214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	613b      	str	r3, [r7, #16]
   return(result);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	623a      	str	r2, [r7, #32]
 80051d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	61bb      	str	r3, [r7, #24]
   return(result);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d10a      	bne.n	8005206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fc faf1 	bl	80017f4 <HAL_UARTEx_RxEventCallback>
 8005212:	e002      	b.n	800521a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fc25 	bl	8004a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e002      	b.n	8005224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3730      	adds	r7, #48	; 0x30
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005230:	b0c0      	sub	sp, #256	; 0x100
 8005232:	af00      	add	r7, sp, #0
 8005234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	68d9      	ldr	r1, [r3, #12]
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	ea40 0301 	orr.w	r3, r0, r1
 8005254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005284:	f021 010c 	bic.w	r1, r1, #12
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005292:	430b      	orrs	r3, r1
 8005294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	6999      	ldr	r1, [r3, #24]
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	ea40 0301 	orr.w	r3, r0, r1
 80052b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8f      	ldr	r3, [pc, #572]	; (80054f8 <UART_SetConfig+0x2cc>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d005      	beq.n	80052cc <UART_SetConfig+0xa0>
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b8d      	ldr	r3, [pc, #564]	; (80054fc <UART_SetConfig+0x2d0>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d104      	bne.n	80052d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fe f9e4 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80052d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052d4:	e003      	b.n	80052de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d6:	f7fe f9cb 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80052da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e8:	f040 810c 	bne.w	8005504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	1891      	adds	r1, r2, r2
 8005304:	65b9      	str	r1, [r7, #88]	; 0x58
 8005306:	415b      	adcs	r3, r3
 8005308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800530e:	4621      	mov	r1, r4
 8005310:	eb12 0801 	adds.w	r8, r2, r1
 8005314:	4629      	mov	r1, r5
 8005316:	eb43 0901 	adc.w	r9, r3, r1
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532e:	4690      	mov	r8, r2
 8005330:	4699      	mov	r9, r3
 8005332:	4623      	mov	r3, r4
 8005334:	eb18 0303 	adds.w	r3, r8, r3
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800533c:	462b      	mov	r3, r5
 800533e:	eb49 0303 	adc.w	r3, r9, r3
 8005342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800535a:	460b      	mov	r3, r1
 800535c:	18db      	adds	r3, r3, r3
 800535e:	653b      	str	r3, [r7, #80]	; 0x50
 8005360:	4613      	mov	r3, r2
 8005362:	eb42 0303 	adc.w	r3, r2, r3
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
 8005368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800536c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005370:	f7fa ffa6 	bl	80002c0 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b61      	ldr	r3, [pc, #388]	; (8005500 <UART_SetConfig+0x2d4>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011c      	lsls	r4, r3, #4
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800538c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	64b9      	str	r1, [r7, #72]	; 0x48
 800539c:	415b      	adcs	r3, r3
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053a4:	4641      	mov	r1, r8
 80053a6:	eb12 0a01 	adds.w	sl, r2, r1
 80053aa:	4649      	mov	r1, r9
 80053ac:	eb43 0b01 	adc.w	fp, r3, r1
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c4:	4692      	mov	sl, r2
 80053c6:	469b      	mov	fp, r3
 80053c8:	4643      	mov	r3, r8
 80053ca:	eb1a 0303 	adds.w	r3, sl, r3
 80053ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053d2:	464b      	mov	r3, r9
 80053d4:	eb4b 0303 	adc.w	r3, fp, r3
 80053d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053f0:	460b      	mov	r3, r1
 80053f2:	18db      	adds	r3, r3, r3
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
 80053f6:	4613      	mov	r3, r2
 80053f8:	eb42 0303 	adc.w	r3, r2, r3
 80053fc:	647b      	str	r3, [r7, #68]	; 0x44
 80053fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005406:	f7fa ff5b 	bl	80002c0 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4611      	mov	r1, r2
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <UART_SetConfig+0x2d4>)
 8005412:	fba3 2301 	umull	r2, r3, r3, r1
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2264      	movs	r2, #100	; 0x64
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	1acb      	subs	r3, r1, r3
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <UART_SetConfig+0x2d4>)
 8005428:	fba3 2302 	umull	r2, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005434:	441c      	add	r4, r3
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005450:	415b      	adcs	r3, r3
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6339      	str	r1, [r7, #48]	; 0x30
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800548c:	464b      	mov	r3, r9
 800548e:	460a      	mov	r2, r1
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054ac:	460b      	mov	r3, r1
 80054ae:	18db      	adds	r3, r3, r3
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b2:	4613      	mov	r3, r2
 80054b4:	eb42 0303 	adc.w	r3, r2, r3
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054c2:	f7fa fefd 	bl	80002c0 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <UART_SetConfig+0x2d4>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a08      	ldr	r2, [pc, #32]	; (8005500 <UART_SetConfig+0x2d4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4422      	add	r2, r4
 80054f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f4:	e105      	b.n	8005702 <UART_SetConfig+0x4d6>
 80054f6:	bf00      	nop
 80054f8:	40011000 	.word	0x40011000
 80054fc:	40011400 	.word	0x40011400
 8005500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005508:	2200      	movs	r2, #0
 800550a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800550e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005516:	4642      	mov	r2, r8
 8005518:	464b      	mov	r3, r9
 800551a:	1891      	adds	r1, r2, r2
 800551c:	6239      	str	r1, [r7, #32]
 800551e:	415b      	adcs	r3, r3
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005526:	4641      	mov	r1, r8
 8005528:	1854      	adds	r4, r2, r1
 800552a:	4649      	mov	r1, r9
 800552c:	eb43 0501 	adc.w	r5, r3, r1
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	00eb      	lsls	r3, r5, #3
 800553a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553e:	00e2      	lsls	r2, r4, #3
 8005540:	4614      	mov	r4, r2
 8005542:	461d      	mov	r5, r3
 8005544:	4643      	mov	r3, r8
 8005546:	18e3      	adds	r3, r4, r3
 8005548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800554c:	464b      	mov	r3, r9
 800554e:	eb45 0303 	adc.w	r3, r5, r3
 8005552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005572:	4629      	mov	r1, r5
 8005574:	008b      	lsls	r3, r1, #2
 8005576:	4621      	mov	r1, r4
 8005578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800557c:	4621      	mov	r1, r4
 800557e:	008a      	lsls	r2, r1, #2
 8005580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005584:	f7fa fe9c 	bl	80002c0 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4b60      	ldr	r3, [pc, #384]	; (8005710 <UART_SetConfig+0x4e4>)
 800558e:	fba3 2302 	umull	r2, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	011c      	lsls	r4, r3, #4
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	61b9      	str	r1, [r7, #24]
 80055b0:	415b      	adcs	r3, r3
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6139      	str	r1, [r7, #16]
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ec:	464b      	mov	r3, r9
 80055ee:	460a      	mov	r2, r1
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	67bb      	str	r3, [r7, #120]	; 0x78
 8005602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005610:	4649      	mov	r1, r9
 8005612:	008b      	lsls	r3, r1, #2
 8005614:	4641      	mov	r1, r8
 8005616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561a:	4641      	mov	r1, r8
 800561c:	008a      	lsls	r2, r1, #2
 800561e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005622:	f7fa fe4d 	bl	80002c0 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b39      	ldr	r3, [pc, #228]	; (8005710 <UART_SetConfig+0x4e4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	; 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	3332      	adds	r3, #50	; 0x32
 800563e:	4a34      	ldr	r2, [pc, #208]	; (8005710 <UART_SetConfig+0x4e4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564a:	441c      	add	r4, r3
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005650:	2200      	movs	r2, #0
 8005652:	673b      	str	r3, [r7, #112]	; 0x70
 8005654:	677a      	str	r2, [r7, #116]	; 0x74
 8005656:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800565a:	4642      	mov	r2, r8
 800565c:	464b      	mov	r3, r9
 800565e:	1891      	adds	r1, r2, r2
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	415b      	adcs	r3, r3
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800566a:	4641      	mov	r1, r8
 800566c:	1851      	adds	r1, r2, r1
 800566e:	6039      	str	r1, [r7, #0]
 8005670:	4649      	mov	r1, r9
 8005672:	414b      	adcs	r3, r1
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005682:	4659      	mov	r1, fp
 8005684:	00cb      	lsls	r3, r1, #3
 8005686:	4651      	mov	r1, sl
 8005688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568c:	4651      	mov	r1, sl
 800568e:	00ca      	lsls	r2, r1, #3
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	4603      	mov	r3, r0
 8005696:	4642      	mov	r2, r8
 8005698:	189b      	adds	r3, r3, r2
 800569a:	66bb      	str	r3, [r7, #104]	; 0x68
 800569c:	464b      	mov	r3, r9
 800569e:	460a      	mov	r2, r1
 80056a0:	eb42 0303 	adc.w	r3, r2, r3
 80056a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	663b      	str	r3, [r7, #96]	; 0x60
 80056b0:	667a      	str	r2, [r7, #100]	; 0x64
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056be:	4649      	mov	r1, r9
 80056c0:	008b      	lsls	r3, r1, #2
 80056c2:	4641      	mov	r1, r8
 80056c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c8:	4641      	mov	r1, r8
 80056ca:	008a      	lsls	r2, r1, #2
 80056cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056d0:	f7fa fdf6 	bl	80002c0 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <UART_SetConfig+0x4e4>)
 80056da:	fba3 1302 	umull	r1, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2164      	movs	r1, #100	; 0x64
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	3332      	adds	r3, #50	; 0x32
 80056ec:	4a08      	ldr	r2, [pc, #32]	; (8005710 <UART_SetConfig+0x4e4>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	f003 020f 	and.w	r2, r3, #15
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4422      	add	r2, r4
 8005700:	609a      	str	r2, [r3, #8]
}
 8005702:	bf00      	nop
 8005704:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <__errno>:
 8005714:	4b01      	ldr	r3, [pc, #4]	; (800571c <__errno+0x8>)
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000010 	.word	0x20000010

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4d0d      	ldr	r5, [pc, #52]	; (8005758 <__libc_init_array+0x38>)
 8005724:	4c0d      	ldr	r4, [pc, #52]	; (800575c <__libc_init_array+0x3c>)
 8005726:	1b64      	subs	r4, r4, r5
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	2600      	movs	r6, #0
 800572c:	42a6      	cmp	r6, r4
 800572e:	d109      	bne.n	8005744 <__libc_init_array+0x24>
 8005730:	4d0b      	ldr	r5, [pc, #44]	; (8005760 <__libc_init_array+0x40>)
 8005732:	4c0c      	ldr	r4, [pc, #48]	; (8005764 <__libc_init_array+0x44>)
 8005734:	f000 fc8e 	bl	8006054 <_init>
 8005738:	1b64      	subs	r4, r4, r5
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	2600      	movs	r6, #0
 800573e:	42a6      	cmp	r6, r4
 8005740:	d105      	bne.n	800574e <__libc_init_array+0x2e>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f855 3b04 	ldr.w	r3, [r5], #4
 8005748:	4798      	blx	r3
 800574a:	3601      	adds	r6, #1
 800574c:	e7ee      	b.n	800572c <__libc_init_array+0xc>
 800574e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005752:	4798      	blx	r3
 8005754:	3601      	adds	r6, #1
 8005756:	e7f2      	b.n	800573e <__libc_init_array+0x1e>
 8005758:	080063cc 	.word	0x080063cc
 800575c:	080063cc 	.word	0x080063cc
 8005760:	080063cc 	.word	0x080063cc
 8005764:	080063d0 	.word	0x080063d0

08005768 <memcpy>:
 8005768:	440a      	add	r2, r1
 800576a:	4291      	cmp	r1, r2
 800576c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005770:	d100      	bne.n	8005774 <memcpy+0xc>
 8005772:	4770      	bx	lr
 8005774:	b510      	push	{r4, lr}
 8005776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577e:	4291      	cmp	r1, r2
 8005780:	d1f9      	bne.n	8005776 <memcpy+0xe>
 8005782:	bd10      	pop	{r4, pc}

08005784 <memset>:
 8005784:	4402      	add	r2, r0
 8005786:	4603      	mov	r3, r0
 8005788:	4293      	cmp	r3, r2
 800578a:	d100      	bne.n	800578e <memset+0xa>
 800578c:	4770      	bx	lr
 800578e:	f803 1b01 	strb.w	r1, [r3], #1
 8005792:	e7f9      	b.n	8005788 <memset+0x4>

08005794 <siprintf>:
 8005794:	b40e      	push	{r1, r2, r3}
 8005796:	b500      	push	{lr}
 8005798:	b09c      	sub	sp, #112	; 0x70
 800579a:	ab1d      	add	r3, sp, #116	; 0x74
 800579c:	9002      	str	r0, [sp, #8]
 800579e:	9006      	str	r0, [sp, #24]
 80057a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057a4:	4809      	ldr	r0, [pc, #36]	; (80057cc <siprintf+0x38>)
 80057a6:	9107      	str	r1, [sp, #28]
 80057a8:	9104      	str	r1, [sp, #16]
 80057aa:	4909      	ldr	r1, [pc, #36]	; (80057d0 <siprintf+0x3c>)
 80057ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b0:	9105      	str	r1, [sp, #20]
 80057b2:	6800      	ldr	r0, [r0, #0]
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	a902      	add	r1, sp, #8
 80057b8:	f000 f868 	bl	800588c <_svfiprintf_r>
 80057bc:	9b02      	ldr	r3, [sp, #8]
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	b01c      	add	sp, #112	; 0x70
 80057c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c8:	b003      	add	sp, #12
 80057ca:	4770      	bx	lr
 80057cc:	20000010 	.word	0x20000010
 80057d0:	ffff0208 	.word	0xffff0208

080057d4 <__ssputs_r>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	688e      	ldr	r6, [r1, #8]
 80057da:	429e      	cmp	r6, r3
 80057dc:	4682      	mov	sl, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4690      	mov	r8, r2
 80057e2:	461f      	mov	r7, r3
 80057e4:	d838      	bhi.n	8005858 <__ssputs_r+0x84>
 80057e6:	898a      	ldrh	r2, [r1, #12]
 80057e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057ec:	d032      	beq.n	8005854 <__ssputs_r+0x80>
 80057ee:	6825      	ldr	r5, [r4, #0]
 80057f0:	6909      	ldr	r1, [r1, #16]
 80057f2:	eba5 0901 	sub.w	r9, r5, r1
 80057f6:	6965      	ldr	r5, [r4, #20]
 80057f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005800:	3301      	adds	r3, #1
 8005802:	444b      	add	r3, r9
 8005804:	106d      	asrs	r5, r5, #1
 8005806:	429d      	cmp	r5, r3
 8005808:	bf38      	it	cc
 800580a:	461d      	movcc	r5, r3
 800580c:	0553      	lsls	r3, r2, #21
 800580e:	d531      	bpl.n	8005874 <__ssputs_r+0xa0>
 8005810:	4629      	mov	r1, r5
 8005812:	f000 fb55 	bl	8005ec0 <_malloc_r>
 8005816:	4606      	mov	r6, r0
 8005818:	b950      	cbnz	r0, 8005830 <__ssputs_r+0x5c>
 800581a:	230c      	movs	r3, #12
 800581c:	f8ca 3000 	str.w	r3, [sl]
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	6921      	ldr	r1, [r4, #16]
 8005832:	464a      	mov	r2, r9
 8005834:	f7ff ff98 	bl	8005768 <memcpy>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	6126      	str	r6, [r4, #16]
 8005846:	6165      	str	r5, [r4, #20]
 8005848:	444e      	add	r6, r9
 800584a:	eba5 0509 	sub.w	r5, r5, r9
 800584e:	6026      	str	r6, [r4, #0]
 8005850:	60a5      	str	r5, [r4, #8]
 8005852:	463e      	mov	r6, r7
 8005854:	42be      	cmp	r6, r7
 8005856:	d900      	bls.n	800585a <__ssputs_r+0x86>
 8005858:	463e      	mov	r6, r7
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	4632      	mov	r2, r6
 800585e:	4641      	mov	r1, r8
 8005860:	f000 faa8 	bl	8005db4 <memmove>
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	1b9b      	subs	r3, r3, r6
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4433      	add	r3, r6
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	2000      	movs	r0, #0
 8005872:	e7db      	b.n	800582c <__ssputs_r+0x58>
 8005874:	462a      	mov	r2, r5
 8005876:	f000 fb97 	bl	8005fa8 <_realloc_r>
 800587a:	4606      	mov	r6, r0
 800587c:	2800      	cmp	r0, #0
 800587e:	d1e1      	bne.n	8005844 <__ssputs_r+0x70>
 8005880:	6921      	ldr	r1, [r4, #16]
 8005882:	4650      	mov	r0, sl
 8005884:	f000 fab0 	bl	8005de8 <_free_r>
 8005888:	e7c7      	b.n	800581a <__ssputs_r+0x46>
	...

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d50e      	bpl.n	80058be <_svfiprintf_r+0x32>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b963      	cbnz	r3, 80058be <_svfiprintf_r+0x32>
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	f000 fb0b 	bl	8005ec0 <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b920      	cbnz	r0, 80058ba <_svfiprintf_r+0x2e>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e0d1      	b.n	8005a5e <_svfiprintf_r+0x1d2>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	616b      	str	r3, [r5, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	2320      	movs	r3, #32
 80058c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058cc:	2330      	movs	r3, #48	; 0x30
 80058ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a78 <_svfiprintf_r+0x1ec>
 80058d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d6:	f04f 0901 	mov.w	r9, #1
 80058da:	4623      	mov	r3, r4
 80058dc:	469a      	mov	sl, r3
 80058de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e2:	b10a      	cbz	r2, 80058e8 <_svfiprintf_r+0x5c>
 80058e4:	2a25      	cmp	r2, #37	; 0x25
 80058e6:	d1f9      	bne.n	80058dc <_svfiprintf_r+0x50>
 80058e8:	ebba 0b04 	subs.w	fp, sl, r4
 80058ec:	d00b      	beq.n	8005906 <_svfiprintf_r+0x7a>
 80058ee:	465b      	mov	r3, fp
 80058f0:	4622      	mov	r2, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ff6d 	bl	80057d4 <__ssputs_r>
 80058fa:	3001      	adds	r0, #1
 80058fc:	f000 80aa 	beq.w	8005a54 <_svfiprintf_r+0x1c8>
 8005900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005902:	445a      	add	r2, fp
 8005904:	9209      	str	r2, [sp, #36]	; 0x24
 8005906:	f89a 3000 	ldrb.w	r3, [sl]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a2 	beq.w	8005a54 <_svfiprintf_r+0x1c8>
 8005910:	2300      	movs	r3, #0
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591a:	f10a 0a01 	add.w	sl, sl, #1
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005926:	931a      	str	r3, [sp, #104]	; 0x68
 8005928:	4654      	mov	r4, sl
 800592a:	2205      	movs	r2, #5
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	4851      	ldr	r0, [pc, #324]	; (8005a78 <_svfiprintf_r+0x1ec>)
 8005932:	f7fa fc75 	bl	8000220 <memchr>
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	b9d8      	cbnz	r0, 8005972 <_svfiprintf_r+0xe6>
 800593a:	06d0      	lsls	r0, r2, #27
 800593c:	bf44      	itt	mi
 800593e:	2320      	movmi	r3, #32
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005944:	0711      	lsls	r1, r2, #28
 8005946:	bf44      	itt	mi
 8005948:	232b      	movmi	r3, #43	; 0x2b
 800594a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b2a      	cmp	r3, #42	; 0x2a
 8005954:	d015      	beq.n	8005982 <_svfiprintf_r+0xf6>
 8005956:	9a07      	ldr	r2, [sp, #28]
 8005958:	4654      	mov	r4, sl
 800595a:	2000      	movs	r0, #0
 800595c:	f04f 0c0a 	mov.w	ip, #10
 8005960:	4621      	mov	r1, r4
 8005962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005966:	3b30      	subs	r3, #48	; 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d94e      	bls.n	8005a0a <_svfiprintf_r+0x17e>
 800596c:	b1b0      	cbz	r0, 800599c <_svfiprintf_r+0x110>
 800596e:	9207      	str	r2, [sp, #28]
 8005970:	e014      	b.n	800599c <_svfiprintf_r+0x110>
 8005972:	eba0 0308 	sub.w	r3, r0, r8
 8005976:	fa09 f303 	lsl.w	r3, r9, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	46a2      	mov	sl, r4
 8005980:	e7d2      	b.n	8005928 <_svfiprintf_r+0x9c>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	9103      	str	r1, [sp, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfbb      	ittet	lt
 800598e:	425b      	neglt	r3, r3
 8005990:	f042 0202 	orrlt.w	r2, r2, #2
 8005994:	9307      	strge	r3, [sp, #28]
 8005996:	9307      	strlt	r3, [sp, #28]
 8005998:	bfb8      	it	lt
 800599a:	9204      	strlt	r2, [sp, #16]
 800599c:	7823      	ldrb	r3, [r4, #0]
 800599e:	2b2e      	cmp	r3, #46	; 0x2e
 80059a0:	d10c      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a2:	7863      	ldrb	r3, [r4, #1]
 80059a4:	2b2a      	cmp	r3, #42	; 0x2a
 80059a6:	d135      	bne.n	8005a14 <_svfiprintf_r+0x188>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	9203      	str	r2, [sp, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bfb8      	it	lt
 80059b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a88 <_svfiprintf_r+0x1fc>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc2b 	bl	8000220 <memchr>
 80059ca:	b140      	cbz	r0, 80059de <_svfiprintf_r+0x152>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	fa03 f000 	lsl.w	r0, r3, r0
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	4303      	orrs	r3, r0
 80059da:	3401      	adds	r4, #1
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e2:	4826      	ldr	r0, [pc, #152]	; (8005a7c <_svfiprintf_r+0x1f0>)
 80059e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e8:	2206      	movs	r2, #6
 80059ea:	f7fa fc19 	bl	8000220 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d038      	beq.n	8005a64 <_svfiprintf_r+0x1d8>
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <_svfiprintf_r+0x1f4>)
 80059f4:	bb1b      	cbnz	r3, 8005a3e <_svfiprintf_r+0x1b2>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	3307      	adds	r3, #7
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	3308      	adds	r3, #8
 8005a00:	9303      	str	r3, [sp, #12]
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	4433      	add	r3, r6
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	e767      	b.n	80058da <_svfiprintf_r+0x4e>
 8005a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0e:	460c      	mov	r4, r1
 8005a10:	2001      	movs	r0, #1
 8005a12:	e7a5      	b.n	8005960 <_svfiprintf_r+0xd4>
 8005a14:	2300      	movs	r3, #0
 8005a16:	3401      	adds	r4, #1
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4620      	mov	r0, r4
 8005a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a26:	3a30      	subs	r2, #48	; 0x30
 8005a28:	2a09      	cmp	r2, #9
 8005a2a:	d903      	bls.n	8005a34 <_svfiprintf_r+0x1a8>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0c5      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	e7c3      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a38:	4604      	mov	r4, r0
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7f0      	b.n	8005a20 <_svfiprintf_r+0x194>
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <_svfiprintf_r+0x1f8>)
 8005a46:	a904      	add	r1, sp, #16
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f3af 8000 	nop.w
 8005a4e:	1c42      	adds	r2, r0, #1
 8005a50:	4606      	mov	r6, r0
 8005a52:	d1d6      	bne.n	8005a02 <_svfiprintf_r+0x176>
 8005a54:	89ab      	ldrh	r3, [r5, #12]
 8005a56:	065b      	lsls	r3, r3, #25
 8005a58:	f53f af2c 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a5e:	b01d      	add	sp, #116	; 0x74
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <_svfiprintf_r+0x1f8>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f000 f87a 	bl	8005b68 <_printf_i>
 8005a74:	e7eb      	b.n	8005a4e <_svfiprintf_r+0x1c2>
 8005a76:	bf00      	nop
 8005a78:	08006390 	.word	0x08006390
 8005a7c:	0800639a 	.word	0x0800639a
 8005a80:	00000000 	.word	0x00000000
 8005a84:	080057d5 	.word	0x080057d5
 8005a88:	08006396 	.word	0x08006396

08005a8c <_printf_common>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	4616      	mov	r6, r2
 8005a92:	4699      	mov	r9, r3
 8005a94:	688a      	ldr	r2, [r1, #8]
 8005a96:	690b      	ldr	r3, [r1, #16]
 8005a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	bfb8      	it	lt
 8005aa0:	4613      	movlt	r3, r2
 8005aa2:	6033      	str	r3, [r6, #0]
 8005aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	b10a      	cbz	r2, 8005ab2 <_printf_common+0x26>
 8005aae:	3301      	adds	r3, #1
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	0699      	lsls	r1, r3, #26
 8005ab6:	bf42      	ittt	mi
 8005ab8:	6833      	ldrmi	r3, [r6, #0]
 8005aba:	3302      	addmi	r3, #2
 8005abc:	6033      	strmi	r3, [r6, #0]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	f015 0506 	ands.w	r5, r5, #6
 8005ac4:	d106      	bne.n	8005ad4 <_printf_common+0x48>
 8005ac6:	f104 0a19 	add.w	sl, r4, #25
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	6832      	ldr	r2, [r6, #0]
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dc26      	bgt.n	8005b22 <_printf_common+0x96>
 8005ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad8:	1e13      	subs	r3, r2, #0
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	bf18      	it	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	0692      	lsls	r2, r2, #26
 8005ae2:	d42b      	bmi.n	8005b3c <_printf_common+0xb0>
 8005ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d01e      	beq.n	8005b30 <_printf_common+0xa4>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	68e5      	ldr	r5, [r4, #12]
 8005af6:	6832      	ldr	r2, [r6, #0]
 8005af8:	f003 0306 	and.w	r3, r3, #6
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	bf08      	it	eq
 8005b00:	1aad      	subeq	r5, r5, r2
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	6922      	ldr	r2, [r4, #16]
 8005b06:	bf0c      	ite	eq
 8005b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b0c:	2500      	movne	r5, #0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	bfc4      	itt	gt
 8005b12:	1a9b      	subgt	r3, r3, r2
 8005b14:	18ed      	addgt	r5, r5, r3
 8005b16:	2600      	movs	r6, #0
 8005b18:	341a      	adds	r4, #26
 8005b1a:	42b5      	cmp	r5, r6
 8005b1c:	d11a      	bne.n	8005b54 <_printf_common+0xc8>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e008      	b.n	8005b34 <_printf_common+0xa8>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4652      	mov	r2, sl
 8005b26:	4649      	mov	r1, r9
 8005b28:	4638      	mov	r0, r7
 8005b2a:	47c0      	blx	r8
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d103      	bne.n	8005b38 <_printf_common+0xac>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	3501      	adds	r5, #1
 8005b3a:	e7c6      	b.n	8005aca <_printf_common+0x3e>
 8005b3c:	18e1      	adds	r1, r4, r3
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	2030      	movs	r0, #48	; 0x30
 8005b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b46:	4422      	add	r2, r4
 8005b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b50:	3302      	adds	r3, #2
 8005b52:	e7c7      	b.n	8005ae4 <_printf_common+0x58>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4622      	mov	r2, r4
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0e6      	beq.n	8005b30 <_printf_common+0xa4>
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7d9      	b.n	8005b1a <_printf_common+0x8e>
	...

08005b68 <_printf_i>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	7e0f      	ldrb	r7, [r1, #24]
 8005b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b70:	2f78      	cmp	r7, #120	; 0x78
 8005b72:	4691      	mov	r9, r2
 8005b74:	4680      	mov	r8, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b7e:	d807      	bhi.n	8005b90 <_printf_i+0x28>
 8005b80:	2f62      	cmp	r7, #98	; 0x62
 8005b82:	d80a      	bhi.n	8005b9a <_printf_i+0x32>
 8005b84:	2f00      	cmp	r7, #0
 8005b86:	f000 80d8 	beq.w	8005d3a <_printf_i+0x1d2>
 8005b8a:	2f58      	cmp	r7, #88	; 0x58
 8005b8c:	f000 80a3 	beq.w	8005cd6 <_printf_i+0x16e>
 8005b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b98:	e03a      	b.n	8005c10 <_printf_i+0xa8>
 8005b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b9e:	2b15      	cmp	r3, #21
 8005ba0:	d8f6      	bhi.n	8005b90 <_printf_i+0x28>
 8005ba2:	a101      	add	r1, pc, #4	; (adr r1, 8005ba8 <_printf_i+0x40>)
 8005ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005b91 	.word	0x08005b91
 8005bb4:	08005b91 	.word	0x08005b91
 8005bb8:	08005b91 	.word	0x08005b91
 8005bbc:	08005b91 	.word	0x08005b91
 8005bc0:	08005c15 	.word	0x08005c15
 8005bc4:	08005b91 	.word	0x08005b91
 8005bc8:	08005b91 	.word	0x08005b91
 8005bcc:	08005b91 	.word	0x08005b91
 8005bd0:	08005b91 	.word	0x08005b91
 8005bd4:	08005d21 	.word	0x08005d21
 8005bd8:	08005c45 	.word	0x08005c45
 8005bdc:	08005d03 	.word	0x08005d03
 8005be0:	08005b91 	.word	0x08005b91
 8005be4:	08005b91 	.word	0x08005b91
 8005be8:	08005d43 	.word	0x08005d43
 8005bec:	08005b91 	.word	0x08005b91
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005b91 	.word	0x08005b91
 8005bf8:	08005b91 	.word	0x08005b91
 8005bfc:	08005d0b 	.word	0x08005d0b
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	602a      	str	r2, [r5, #0]
 8005c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a3      	b.n	8005d5c <_printf_i+0x1f4>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	6829      	ldr	r1, [r5, #0]
 8005c18:	0606      	lsls	r6, r0, #24
 8005c1a:	f101 0304 	add.w	r3, r1, #4
 8005c1e:	d50a      	bpl.n	8005c36 <_printf_i+0xce>
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	da03      	bge.n	8005c30 <_printf_i+0xc8>
 8005c28:	232d      	movs	r3, #45	; 0x2d
 8005c2a:	4276      	negs	r6, r6
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c30:	485e      	ldr	r0, [pc, #376]	; (8005dac <_printf_i+0x244>)
 8005c32:	230a      	movs	r3, #10
 8005c34:	e019      	b.n	8005c6a <_printf_i+0x102>
 8005c36:	680e      	ldr	r6, [r1, #0]
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3e:	bf18      	it	ne
 8005c40:	b236      	sxthne	r6, r6
 8005c42:	e7ef      	b.n	8005c24 <_printf_i+0xbc>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	1d19      	adds	r1, r3, #4
 8005c4a:	6029      	str	r1, [r5, #0]
 8005c4c:	0601      	lsls	r1, r0, #24
 8005c4e:	d501      	bpl.n	8005c54 <_printf_i+0xec>
 8005c50:	681e      	ldr	r6, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <_printf_i+0xf2>
 8005c54:	0646      	lsls	r6, r0, #25
 8005c56:	d5fb      	bpl.n	8005c50 <_printf_i+0xe8>
 8005c58:	881e      	ldrh	r6, [r3, #0]
 8005c5a:	4854      	ldr	r0, [pc, #336]	; (8005dac <_printf_i+0x244>)
 8005c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c5e:	bf0c      	ite	eq
 8005c60:	2308      	moveq	r3, #8
 8005c62:	230a      	movne	r3, #10
 8005c64:	2100      	movs	r1, #0
 8005c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c6a:	6865      	ldr	r5, [r4, #4]
 8005c6c:	60a5      	str	r5, [r4, #8]
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	bfa2      	ittt	ge
 8005c72:	6821      	ldrge	r1, [r4, #0]
 8005c74:	f021 0104 	bicge.w	r1, r1, #4
 8005c78:	6021      	strge	r1, [r4, #0]
 8005c7a:	b90e      	cbnz	r6, 8005c80 <_printf_i+0x118>
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	d04d      	beq.n	8005d1c <_printf_i+0x1b4>
 8005c80:	4615      	mov	r5, r2
 8005c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c86:	fb03 6711 	mls	r7, r3, r1, r6
 8005c8a:	5dc7      	ldrb	r7, [r0, r7]
 8005c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c90:	4637      	mov	r7, r6
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	460e      	mov	r6, r1
 8005c96:	d9f4      	bls.n	8005c82 <_printf_i+0x11a>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d10b      	bne.n	8005cb4 <_printf_i+0x14c>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07de      	lsls	r6, r3, #31
 8005ca0:	d508      	bpl.n	8005cb4 <_printf_i+0x14c>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6861      	ldr	r1, [r4, #4]
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	bfde      	ittt	le
 8005caa:	2330      	movle	r3, #48	; 0x30
 8005cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb4:	1b52      	subs	r2, r2, r5
 8005cb6:	6122      	str	r2, [r4, #16]
 8005cb8:	f8cd a000 	str.w	sl, [sp]
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	aa03      	add	r2, sp, #12
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	f7ff fee2 	bl	8005a8c <_printf_common>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d14c      	bne.n	8005d66 <_printf_i+0x1fe>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b004      	add	sp, #16
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	4835      	ldr	r0, [pc, #212]	; (8005dac <_printf_i+0x244>)
 8005cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cdc:	6829      	ldr	r1, [r5, #0]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ce4:	6029      	str	r1, [r5, #0]
 8005ce6:	061d      	lsls	r5, r3, #24
 8005ce8:	d514      	bpl.n	8005d14 <_printf_i+0x1ac>
 8005cea:	07df      	lsls	r7, r3, #31
 8005cec:	bf44      	itt	mi
 8005cee:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf2:	6023      	strmi	r3, [r4, #0]
 8005cf4:	b91e      	cbnz	r6, 8005cfe <_printf_i+0x196>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f023 0320 	bic.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	2310      	movs	r3, #16
 8005d00:	e7b0      	b.n	8005c64 <_printf_i+0xfc>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	f043 0320 	orr.w	r3, r3, #32
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	2378      	movs	r3, #120	; 0x78
 8005d0c:	4828      	ldr	r0, [pc, #160]	; (8005db0 <_printf_i+0x248>)
 8005d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d12:	e7e3      	b.n	8005cdc <_printf_i+0x174>
 8005d14:	0659      	lsls	r1, r3, #25
 8005d16:	bf48      	it	mi
 8005d18:	b2b6      	uxthmi	r6, r6
 8005d1a:	e7e6      	b.n	8005cea <_printf_i+0x182>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	e7bb      	b.n	8005c98 <_printf_i+0x130>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	6826      	ldr	r6, [r4, #0]
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6028      	str	r0, [r5, #0]
 8005d2a:	0635      	lsls	r5, r6, #24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0x1cc>
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0x1d2>
 8005d34:	0670      	lsls	r0, r6, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0x1c8>
 8005d38:	8019      	strh	r1, [r3, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	4615      	mov	r5, r2
 8005d40:	e7ba      	b.n	8005cb8 <_printf_i+0x150>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	602a      	str	r2, [r5, #0]
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7fa fa66 	bl	8000220 <memchr>
 8005d54:	b108      	cbz	r0, 8005d5a <_printf_i+0x1f2>
 8005d56:	1b40      	subs	r0, r0, r5
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	e7a8      	b.n	8005cb8 <_printf_i+0x150>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0ab      	beq.n	8005ccc <_printf_i+0x164>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	d413      	bmi.n	8005da2 <_printf_i+0x23a>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e7a4      	b.n	8005cd0 <_printf_i+0x168>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d09b      	beq.n	8005ccc <_printf_i+0x164>
 8005d94:	3501      	adds	r5, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dcf2      	bgt.n	8005d86 <_printf_i+0x21e>
 8005da0:	e7eb      	b.n	8005d7a <_printf_i+0x212>
 8005da2:	2500      	movs	r5, #0
 8005da4:	f104 0619 	add.w	r6, r4, #25
 8005da8:	e7f5      	b.n	8005d96 <_printf_i+0x22e>
 8005daa:	bf00      	nop
 8005dac:	080063a1 	.word	0x080063a1
 8005db0:	080063b2 	.word	0x080063b2

08005db4 <memmove>:
 8005db4:	4288      	cmp	r0, r1
 8005db6:	b510      	push	{r4, lr}
 8005db8:	eb01 0402 	add.w	r4, r1, r2
 8005dbc:	d902      	bls.n	8005dc4 <memmove+0x10>
 8005dbe:	4284      	cmp	r4, r0
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	d807      	bhi.n	8005dd4 <memmove+0x20>
 8005dc4:	1e43      	subs	r3, r0, #1
 8005dc6:	42a1      	cmp	r1, r4
 8005dc8:	d008      	beq.n	8005ddc <memmove+0x28>
 8005dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd2:	e7f8      	b.n	8005dc6 <memmove+0x12>
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	d100      	bne.n	8005dde <memmove+0x2a>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de6:	e7f7      	b.n	8005dd8 <memmove+0x24>

08005de8 <_free_r>:
 8005de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dea:	2900      	cmp	r1, #0
 8005dec:	d044      	beq.n	8005e78 <_free_r+0x90>
 8005dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df2:	9001      	str	r0, [sp, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f1a1 0404 	sub.w	r4, r1, #4
 8005dfa:	bfb8      	it	lt
 8005dfc:	18e4      	addlt	r4, r4, r3
 8005dfe:	f000 f913 	bl	8006028 <__malloc_lock>
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <_free_r+0x94>)
 8005e04:	9801      	ldr	r0, [sp, #4]
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	b933      	cbnz	r3, 8005e18 <_free_r+0x30>
 8005e0a:	6063      	str	r3, [r4, #4]
 8005e0c:	6014      	str	r4, [r2, #0]
 8005e0e:	b003      	add	sp, #12
 8005e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e14:	f000 b90e 	b.w	8006034 <__malloc_unlock>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d908      	bls.n	8005e2e <_free_r+0x46>
 8005e1c:	6825      	ldr	r5, [r4, #0]
 8005e1e:	1961      	adds	r1, r4, r5
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf01      	itttt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	1949      	addeq	r1, r1, r5
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	e7ed      	b.n	8005e0a <_free_r+0x22>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	b10b      	cbz	r3, 8005e38 <_free_r+0x50>
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d9fa      	bls.n	8005e2e <_free_r+0x46>
 8005e38:	6811      	ldr	r1, [r2, #0]
 8005e3a:	1855      	adds	r5, r2, r1
 8005e3c:	42a5      	cmp	r5, r4
 8005e3e:	d10b      	bne.n	8005e58 <_free_r+0x70>
 8005e40:	6824      	ldr	r4, [r4, #0]
 8005e42:	4421      	add	r1, r4
 8005e44:	1854      	adds	r4, r2, r1
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	d1e0      	bne.n	8005e0e <_free_r+0x26>
 8005e4c:	681c      	ldr	r4, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	4421      	add	r1, r4
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	e7da      	b.n	8005e0e <_free_r+0x26>
 8005e58:	d902      	bls.n	8005e60 <_free_r+0x78>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	6003      	str	r3, [r0, #0]
 8005e5e:	e7d6      	b.n	8005e0e <_free_r+0x26>
 8005e60:	6825      	ldr	r5, [r4, #0]
 8005e62:	1961      	adds	r1, r4, r5
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf04      	itt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	bf04      	itt	eq
 8005e70:	1949      	addeq	r1, r1, r5
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	6054      	str	r4, [r2, #4]
 8005e76:	e7ca      	b.n	8005e0e <_free_r+0x26>
 8005e78:	b003      	add	sp, #12
 8005e7a:	bd30      	pop	{r4, r5, pc}
 8005e7c:	20001248 	.word	0x20001248

08005e80 <sbrk_aligned>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	4e0e      	ldr	r6, [pc, #56]	; (8005ebc <sbrk_aligned+0x3c>)
 8005e84:	460c      	mov	r4, r1
 8005e86:	6831      	ldr	r1, [r6, #0]
 8005e88:	4605      	mov	r5, r0
 8005e8a:	b911      	cbnz	r1, 8005e92 <sbrk_aligned+0x12>
 8005e8c:	f000 f8bc 	bl	8006008 <_sbrk_r>
 8005e90:	6030      	str	r0, [r6, #0]
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f8b7 	bl	8006008 <_sbrk_r>
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d00a      	beq.n	8005eb4 <sbrk_aligned+0x34>
 8005e9e:	1cc4      	adds	r4, r0, #3
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d007      	beq.n	8005eb8 <sbrk_aligned+0x38>
 8005ea8:	1a21      	subs	r1, r4, r0
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f8ac 	bl	8006008 <_sbrk_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d101      	bne.n	8005eb8 <sbrk_aligned+0x38>
 8005eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8005eb8:	4620      	mov	r0, r4
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	2000124c 	.word	0x2000124c

08005ec0 <_malloc_r>:
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	1ccd      	adds	r5, r1, #3
 8005ec6:	f025 0503 	bic.w	r5, r5, #3
 8005eca:	3508      	adds	r5, #8
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	bf38      	it	cc
 8005ed0:	250c      	movcc	r5, #12
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	db01      	blt.n	8005edc <_malloc_r+0x1c>
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d905      	bls.n	8005ee8 <_malloc_r+0x28>
 8005edc:	230c      	movs	r3, #12
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	4e2e      	ldr	r6, [pc, #184]	; (8005fa4 <_malloc_r+0xe4>)
 8005eea:	f000 f89d 	bl	8006028 <__malloc_lock>
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	bb34      	cbnz	r4, 8005f42 <_malloc_r+0x82>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff ffc2 	bl	8005e80 <sbrk_aligned>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	4604      	mov	r4, r0
 8005f00:	d14d      	bne.n	8005f9e <_malloc_r+0xde>
 8005f02:	6834      	ldr	r4, [r6, #0]
 8005f04:	4626      	mov	r6, r4
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	d140      	bne.n	8005f8c <_malloc_r+0xcc>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4638      	mov	r0, r7
 8005f10:	eb04 0803 	add.w	r8, r4, r3
 8005f14:	f000 f878 	bl	8006008 <_sbrk_r>
 8005f18:	4580      	cmp	r8, r0
 8005f1a:	d13a      	bne.n	8005f92 <_malloc_r+0xd2>
 8005f1c:	6821      	ldr	r1, [r4, #0]
 8005f1e:	3503      	adds	r5, #3
 8005f20:	1a6d      	subs	r5, r5, r1
 8005f22:	f025 0503 	bic.w	r5, r5, #3
 8005f26:	3508      	adds	r5, #8
 8005f28:	2d0c      	cmp	r5, #12
 8005f2a:	bf38      	it	cc
 8005f2c:	250c      	movcc	r5, #12
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7ff ffa5 	bl	8005e80 <sbrk_aligned>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d02b      	beq.n	8005f92 <_malloc_r+0xd2>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	442b      	add	r3, r5
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	e00e      	b.n	8005f60 <_malloc_r+0xa0>
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	1b52      	subs	r2, r2, r5
 8005f46:	d41e      	bmi.n	8005f86 <_malloc_r+0xc6>
 8005f48:	2a0b      	cmp	r2, #11
 8005f4a:	d916      	bls.n	8005f7a <_malloc_r+0xba>
 8005f4c:	1961      	adds	r1, r4, r5
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	6025      	str	r5, [r4, #0]
 8005f52:	bf18      	it	ne
 8005f54:	6059      	strne	r1, [r3, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	bf08      	it	eq
 8005f5a:	6031      	streq	r1, [r6, #0]
 8005f5c:	5162      	str	r2, [r4, r5]
 8005f5e:	604b      	str	r3, [r1, #4]
 8005f60:	4638      	mov	r0, r7
 8005f62:	f104 060b 	add.w	r6, r4, #11
 8005f66:	f000 f865 	bl	8006034 <__malloc_unlock>
 8005f6a:	f026 0607 	bic.w	r6, r6, #7
 8005f6e:	1d23      	adds	r3, r4, #4
 8005f70:	1af2      	subs	r2, r6, r3
 8005f72:	d0b6      	beq.n	8005ee2 <_malloc_r+0x22>
 8005f74:	1b9b      	subs	r3, r3, r6
 8005f76:	50a3      	str	r3, [r4, r2]
 8005f78:	e7b3      	b.n	8005ee2 <_malloc_r+0x22>
 8005f7a:	6862      	ldr	r2, [r4, #4]
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	bf0c      	ite	eq
 8005f80:	6032      	streq	r2, [r6, #0]
 8005f82:	605a      	strne	r2, [r3, #4]
 8005f84:	e7ec      	b.n	8005f60 <_malloc_r+0xa0>
 8005f86:	4623      	mov	r3, r4
 8005f88:	6864      	ldr	r4, [r4, #4]
 8005f8a:	e7b2      	b.n	8005ef2 <_malloc_r+0x32>
 8005f8c:	4634      	mov	r4, r6
 8005f8e:	6876      	ldr	r6, [r6, #4]
 8005f90:	e7b9      	b.n	8005f06 <_malloc_r+0x46>
 8005f92:	230c      	movs	r3, #12
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4638      	mov	r0, r7
 8005f98:	f000 f84c 	bl	8006034 <__malloc_unlock>
 8005f9c:	e7a1      	b.n	8005ee2 <_malloc_r+0x22>
 8005f9e:	6025      	str	r5, [r4, #0]
 8005fa0:	e7de      	b.n	8005f60 <_malloc_r+0xa0>
 8005fa2:	bf00      	nop
 8005fa4:	20001248 	.word	0x20001248

08005fa8 <_realloc_r>:
 8005fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fac:	4680      	mov	r8, r0
 8005fae:	4614      	mov	r4, r2
 8005fb0:	460e      	mov	r6, r1
 8005fb2:	b921      	cbnz	r1, 8005fbe <_realloc_r+0x16>
 8005fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	4611      	mov	r1, r2
 8005fba:	f7ff bf81 	b.w	8005ec0 <_malloc_r>
 8005fbe:	b92a      	cbnz	r2, 8005fcc <_realloc_r+0x24>
 8005fc0:	f7ff ff12 	bl	8005de8 <_free_r>
 8005fc4:	4625      	mov	r5, r4
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fcc:	f000 f838 	bl	8006040 <_malloc_usable_size_r>
 8005fd0:	4284      	cmp	r4, r0
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	d802      	bhi.n	8005fdc <_realloc_r+0x34>
 8005fd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fda:	d812      	bhi.n	8006002 <_realloc_r+0x5a>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7ff ff6e 	bl	8005ec0 <_malloc_r>
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d0ed      	beq.n	8005fc6 <_realloc_r+0x1e>
 8005fea:	42bc      	cmp	r4, r7
 8005fec:	4622      	mov	r2, r4
 8005fee:	4631      	mov	r1, r6
 8005ff0:	bf28      	it	cs
 8005ff2:	463a      	movcs	r2, r7
 8005ff4:	f7ff fbb8 	bl	8005768 <memcpy>
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f7ff fef4 	bl	8005de8 <_free_r>
 8006000:	e7e1      	b.n	8005fc6 <_realloc_r+0x1e>
 8006002:	4635      	mov	r5, r6
 8006004:	e7df      	b.n	8005fc6 <_realloc_r+0x1e>
	...

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fc f870 	bl	80020f8 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20001250 	.word	0x20001250

08006028 <__malloc_lock>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__malloc_lock+0x8>)
 800602a:	f000 b811 	b.w	8006050 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	20001254 	.word	0x20001254

08006034 <__malloc_unlock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_unlock+0x8>)
 8006036:	f000 b80c 	b.w	8006052 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	20001254 	.word	0x20001254

08006040 <_malloc_usable_size_r>:
 8006040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006044:	1f18      	subs	r0, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfbc      	itt	lt
 800604a:	580b      	ldrlt	r3, [r1, r0]
 800604c:	18c0      	addlt	r0, r0, r3
 800604e:	4770      	bx	lr

08006050 <__retarget_lock_acquire_recursive>:
 8006050:	4770      	bx	lr

08006052 <__retarget_lock_release_recursive>:
 8006052:	4770      	bx	lr

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
