
DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa4  08003fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  0800401c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800401c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bea8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a3b  00000000  00000000  0002ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e566  00000000  00000000  00050893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb147  00000000  00000000  0005edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  00129f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ee0 	.word	0x08003ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003ee0 	.word	0x08003ee0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <bsp_ds1307_bcd_to_bin>:
*/

#include "bsp_ds1307.h"

uint8_t bsp_ds1307_bcd_to_bin(uint8_t bcd)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint8_t dec = 10 * (bcd >> 4);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	091b      	lsrs	r3, r3, #4
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
  dec += bcd & 0x0F;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	4413      	add	r3, r2
 80005da:	73fb      	strb	r3, [r7, #15]
  return dec;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <bsp_ds1307_write_reg>:
  /* Return */
  return high << 4 | low;
}

bsp_ds1307_status_t bsp_ds1307_write_reg(uint8_t reg_write, uint8_t data_write)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2] = { reg_write, data_write };
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	733b      	strb	r3, [r7, #12]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	737b      	strb	r3, [r7, #13]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data, 2, BSP_DS1307_TIME_OUT) == HAL_OK)
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2302      	movs	r3, #2
 8000610:	21d0      	movs	r1, #208	; 0xd0
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <bsp_ds1307_write_reg+0x40>)
 8000614:	f001 f84e 	bl	80016b4 <HAL_I2C_Master_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <bsp_ds1307_write_reg+0x36>
    return bsp_ds1307_success;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <bsp_ds1307_write_reg+0x38>
  else
    return bsp_ds1307_error;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000008c 	.word	0x2000008c

08000630 <bsp_ds1307_read_multi_reg>:
  else
    return bsp_ds1307_error;
}

bsp_ds1307_status_t bsp_ds1307_read_multi_reg(uint8_t reg_read, uint8_t *data_read, uint8_t size)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, &reg_read, 1, BSP_DS1307_TIME_OUT) != HAL_OK)
 8000640:	1dfa      	adds	r2, r7, #7
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	21d0      	movs	r1, #208	; 0xd0
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <bsp_ds1307_read_multi_reg+0x54>)
 800064e:	f001 f831 	bl	80016b4 <HAL_I2C_Master_Transmit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <bsp_ds1307_read_multi_reg+0x2c>
    return bsp_ds1307_error;
 8000658:	2300      	movs	r3, #0
 800065a:	e00f      	b.n	800067c <bsp_ds1307_read_multi_reg+0x4c>
  if (HAL_I2C_Master_Receive(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data_read, size, BSP_DS1307_TIME_OUT) == HAL_OK)
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	b29b      	uxth	r3, r3
 8000660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <bsp_ds1307_read_multi_reg+0x54>)
 800066c:	f001 f920 	bl	80018b0 <HAL_I2C_Master_Receive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <bsp_ds1307_read_multi_reg+0x4a>
    return bsp_ds1307_success;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <bsp_ds1307_read_multi_reg+0x4c>
  else
    return bsp_ds1307_error;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000008c 	.word	0x2000008c

08000688 <bsp_ds1307_read_reg>:

bsp_ds1307_status_t bsp_ds1307_read_reg(uint8_t reg_read, uint8_t *data_read)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, &reg_read, 1, BSP_DS1307_TIME_OUT) != HAL_OK)
 8000694:	1dfa      	adds	r2, r7, #7
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	21d0      	movs	r1, #208	; 0xd0
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <bsp_ds1307_read_reg+0x50>)
 80006a2:	f001 f807 	bl	80016b4 <HAL_I2C_Master_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <bsp_ds1307_read_reg+0x28>
    return bsp_ds1307_error;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e00e      	b.n	80006ce <bsp_ds1307_read_reg+0x46>
  if (HAL_I2C_Master_Receive(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data_read, 1, BSP_DS1307_TIME_OUT) == HAL_OK)
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	21d0      	movs	r1, #208	; 0xd0
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <bsp_ds1307_read_reg+0x50>)
 80006be:	f001 f8f7 	bl	80018b0 <HAL_I2C_Master_Receive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <bsp_ds1307_read_reg+0x44>
    return bsp_ds1307_success;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <bsp_ds1307_read_reg+0x46>
  else
    return bsp_ds1307_error;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <bsp_ds1307_init>:

bsp_ds1307_status_t bsp_ds1307_init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  uint8_t reg_data = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
  bsp_ds1307_read_reg(BSP_DS1307_SECONDS, &reg_data);
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	4619      	mov	r1, r3
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ffcc 	bl	8000688 <bsp_ds1307_read_reg>
  return bsp_ds1307_write_reg(BSP_DS1307_SECONDS, 0 | (reg_data & 0x7f));
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff76 	bl	80005ec <bsp_ds1307_write_reg>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <bsp_ds1307_set_mode_time>:
  else
    return bsp_ds1307_error;
}

bsp_ds1307_status_t bsp_ds1307_set_mode_time(uint8_t mode)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
  uint8_t data_reg;
  switch (mode)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b0c      	cmp	r3, #12
 8000718:	d002      	beq.n	8000720 <bsp_ds1307_set_mode_time+0x16>
 800071a:	2b18      	cmp	r3, #24
 800071c:	d012      	beq.n	8000744 <bsp_ds1307_set_mode_time+0x3a>
 800071e:	e023      	b.n	8000768 <bsp_ds1307_set_mode_time+0x5e>
  {
  case 12:
  {
    bsp_ds1307_read_reg(BSP_DS1307_HOURS, &data_reg);
 8000720:	f107 030f 	add.w	r3, r7, #15
 8000724:	4619      	mov	r1, r3
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff ffae 	bl	8000688 <bsp_ds1307_read_reg>
    data_reg |= (1 << BSP_DS1307_MODE_HOURS);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000732:	b2db      	uxtb	r3, r3
 8000734:	73fb      	strb	r3, [r7, #15]
    return bsp_ds1307_write_reg(BSP_DS1307_HOURS, data_reg);
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	4619      	mov	r1, r3
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ff56 	bl	80005ec <bsp_ds1307_write_reg>
 8000740:	4603      	mov	r3, r0
 8000742:	e012      	b.n	800076a <bsp_ds1307_set_mode_time+0x60>
  }
  case 24:
  {
    bsp_ds1307_read_reg(BSP_DS1307_HOURS, &data_reg);
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	4619      	mov	r1, r3
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff ff9c 	bl	8000688 <bsp_ds1307_read_reg>
    data_reg &= ~(1 << BSP_DS1307_MODE_HOURS);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
    return bsp_ds1307_write_reg(BSP_DS1307_HOURS, data_reg);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4619      	mov	r1, r3
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff ff44 	bl	80005ec <bsp_ds1307_write_reg>
 8000764:	4603      	mov	r3, r0
 8000766:	e000      	b.n	800076a <bsp_ds1307_set_mode_time+0x60>
  }
  default: return bsp_ds1307_error;
 8000768:	2300      	movs	r3, #0
  }
  return bsp_ds1307_error;
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <bsp_ds1307_get_time>:

bsp_ds1307_status_t bsp_ds1307_get_time(uint8_t *data_time)
{
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
  bsp_ds1307_read_multi_reg(BSP_DS1307_SECONDS, data_time, 7);
 800077a:	2207      	movs	r2, #7
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ff56 	bl	8000630 <bsp_ds1307_read_multi_reg>
  data_time[0] = bsp_ds1307_bcd_to_bin(data_time[0] & 0x7F);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff10 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	701a      	strb	r2, [r3, #0]
  data_time[1] = bsp_ds1307_bcd_to_bin(data_time[1]);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5c      	adds	r4, r3, #1
 80007a6:	4610      	mov	r0, r2
 80007a8:	f7ff ff04 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	7023      	strb	r3, [r4, #0]
  data_time[2] = bsp_ds1307_bcd_to_bin(data_time[2] & 0x3F);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3302      	adds	r3, #2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1c9c      	adds	r4, r3, #2
 80007c0:	4610      	mov	r0, r2
 80007c2:	f7ff fef7 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]
  data_time[3] = bsp_ds1307_bcd_to_bin(data_time[3]);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3303      	adds	r3, #3
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1cdc      	adds	r4, r3, #3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f7ff feed 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 80007da:	4603      	mov	r3, r0
 80007dc:	7023      	strb	r3, [r4, #0]
  data_time[4] = bsp_ds1307_bcd_to_bin(data_time[4]);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1d1c      	adds	r4, r3, #4
 80007e8:	4610      	mov	r0, r2
 80007ea:	f7ff fee3 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	7023      	strb	r3, [r4, #0]
  data_time[5] = bsp_ds1307_bcd_to_bin(data_time[5]);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3305      	adds	r3, #5
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1d5c      	adds	r4, r3, #5
 80007fc:	4610      	mov	r0, r2
 80007fe:	f7ff fed9 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000802:	4603      	mov	r3, r0
 8000804:	7023      	strb	r3, [r4, #0]
  data_time[6] = bsp_ds1307_bcd_to_bin(data_time[6]);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3306      	adds	r3, #6
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1d9c      	adds	r4, r3, #6
 8000810:	4610      	mov	r0, r2
 8000812:	f7ff fecf 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000816:	4603      	mov	r3, r0
 8000818:	7023      	strb	r3, [r4, #0]
  return bsp_ds1307_success;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}

08000824 <drv_ds1307_init>:
*/

#include "driver_ds1307.h"

drv_ds1307_status_t drv_ds1307_init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  return bsp_ds1307_init();
 8000828:	f7ff ff58 	bl	80006dc <bsp_ds1307_init>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}

08000832 <drv_ds1307_get_time>:
{
  return bsp_ds1307_check_device();
}

drv_ds1307_status_t drv_ds1307_get_time(drv_ds1307_time_t *time)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  uint8_t data_time[7] = { 0 };
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2100      	movs	r1, #0
 8000844:	460a      	mov	r2, r1
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	460a      	mov	r2, r1
 800084a:	709a      	strb	r2, [r3, #2]
  if (bsp_ds1307_get_time(data_time) != bsp_ds1307_success)
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff8e 	bl	8000772 <bsp_ds1307_get_time>
 8000856:	4603      	mov	r3, r0
 8000858:	2b01      	cmp	r3, #1
 800085a:	d001      	beq.n	8000860 <drv_ds1307_get_time+0x2e>
    return drv_ds1307_error;
 800085c:	2300      	movs	r3, #0
 800085e:	e015      	b.n	800088c <drv_ds1307_get_time+0x5a>
  time->seconds = data_time[0];
 8000860:	7a3a      	ldrb	r2, [r7, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	701a      	strb	r2, [r3, #0]
  time->minutes = data_time[1];
 8000866:	7a7a      	ldrb	r2, [r7, #9]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	705a      	strb	r2, [r3, #1]
  time->hours   = data_time[2];
 800086c:	7aba      	ldrb	r2, [r7, #10]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	709a      	strb	r2, [r3, #2]
  time->day     = data_time[3];
 8000872:	7afa      	ldrb	r2, [r7, #11]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	70da      	strb	r2, [r3, #3]
  time->date    = data_time[4];
 8000878:	7b3a      	ldrb	r2, [r7, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	711a      	strb	r2, [r3, #4]
  time->month   = data_time[5];
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	715a      	strb	r2, [r3, #5]
  time->year    = data_time[6];
 8000884:	7bba      	ldrb	r2, [r7, #14]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	719a      	strb	r2, [r3, #6]
  return drv_ds1307_success;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <drv_ds1307_set_mode_24h>:
{
  return bsp_ds1307_set_mode_time(12);
}

drv_ds1307_status_t drv_ds1307_set_mode_24h(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return bsp_ds1307_set_mode_time(24);
 8000898:	2018      	movs	r0, #24
 800089a:	f7ff ff36 	bl	800070a <bsp_ds1307_set_mode_time>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 faaf 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f865 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f91b 	bl	8000aec <MX_GPIO_Init>
  MX_I2C1_Init();
 80008b6:	f000 f8c1 	bl	8000a3c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 f8ed 	bl	8000a98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  drv_ds1307_init();
 80008be:	f7ff ffb1 	bl	8000824 <drv_ds1307_init>

  time.seconds = 0;
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <main+0xc4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  time.minutes = 45;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <main+0xc4>)
 80008ca:	222d      	movs	r2, #45	; 0x2d
 80008cc:	705a      	strb	r2, [r3, #1]
  time.hours = 13;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <main+0xc4>)
 80008d0:	220d      	movs	r2, #13
 80008d2:	709a      	strb	r2, [r3, #2]
  time.day = 6;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <main+0xc4>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	70da      	strb	r2, [r3, #3]
  time.date = 11;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0xc4>)
 80008dc:	220b      	movs	r2, #11
 80008de:	711a      	strb	r2, [r3, #4]
  time.month = 8;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <main+0xc4>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	715a      	strb	r2, [r3, #5]
  time.year = 23;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <main+0xc4>)
 80008e8:	2217      	movs	r2, #23
 80008ea:	719a      	strb	r2, [r3, #6]

  /* drv_ds1307_set_time(time); */

  drv_ds1307_set_mode_24h();
 80008ec:	f7ff ffd2 	bl	8000894 <drv_ds1307_set_mode_24h>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (drv_ds1307_get_time(&time) == drv_ds1307_error)
 80008f0:	481d      	ldr	r0, [pc, #116]	; (8000968 <main+0xc4>)
 80008f2:	f7ff ff9e 	bl	8000832 <drv_ds1307_get_time>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10a      	bne.n	8000912 <main+0x6e>
    {
      HAL_UART_Transmit(&huart2, (uint8_t *) "Error\r\n", 7, 100);
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	2207      	movs	r2, #7
 8000900:	491a      	ldr	r1, [pc, #104]	; (800096c <main+0xc8>)
 8000902:	481b      	ldr	r0, [pc, #108]	; (8000970 <main+0xcc>)
 8000904:	f002 fad7 	bl	8002eb6 <HAL_UART_Transmit>
      HAL_Delay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090c:	f000 faf0 	bl	8000ef0 <HAL_Delay>
 8000910:	e7ee      	b.n	80008f0 <main+0x4c>
    }
    else
    {
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d\r\n", time.hours, time.minutes, time.seconds, time.day, time.date, time.month, time.year);
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <main+0xc4>)
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	461d      	mov	r5, r3
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <main+0xc4>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	461e      	mov	r6, r3
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0xc4>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <main+0xc4>)
 8000926:	78db      	ldrb	r3, [r3, #3]
 8000928:	4619      	mov	r1, r3
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0xc4>)
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <main+0xc4>)
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	461c      	mov	r4, r3
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <main+0xc4>)
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	9304      	str	r3, [sp, #16]
 800093c:	9403      	str	r4, [sp, #12]
 800093e:	9002      	str	r0, [sp, #8]
 8000940:	9101      	str	r1, [sp, #4]
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	4633      	mov	r3, r6
 8000946:	462a      	mov	r2, r5
 8000948:	490a      	ldr	r1, [pc, #40]	; (8000974 <main+0xd0>)
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <main+0xd4>)
 800094c:	f002 fe5a 	bl	8003604 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	2264      	movs	r2, #100	; 0x64
 8000954:	4908      	ldr	r1, [pc, #32]	; (8000978 <main+0xd4>)
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <main+0xcc>)
 8000958:	f002 faad 	bl	8002eb6 <HAL_UART_Transmit>
      HAL_Delay(1000);
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f000 fac6 	bl	8000ef0 <HAL_Delay>
    if (drv_ds1307_get_time(&time) == drv_ds1307_error)
 8000964:	e7c4      	b.n	80008f0 <main+0x4c>
 8000966:	bf00      	nop
 8000968:	20000124 	.word	0x20000124
 800096c:	08003ef8 	.word	0x08003ef8
 8000970:	200000e0 	.word	0x200000e0
 8000974:	08003f00 	.word	0x08003f00
 8000978:	2000012c 	.word	0x2000012c

0800097c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2234      	movs	r2, #52	; 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fe32 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <SystemClock_Config+0xb8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <SystemClock_Config+0xb8>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <SystemClock_Config+0xb8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <SystemClock_Config+0xbc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <SystemClock_Config+0xbc>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <SystemClock_Config+0xbc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2310      	movs	r3, #16
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 ff75 	bl	80028e0 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009fc:	f000 f8ac 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a00:	230f      	movs	r3, #15
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fc9c 	bl	8002358 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a26:	f000 f897 	bl	8000b58 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance             = I2C1;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_I2C1_Init+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x58>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_I2C1_Init+0x50>)
 8000a7a:	f000 fcd7 	bl	800142c <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 f868 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c
 8000a90:	40005400 	.word	0x40005400
 8000a94:	000186a0 	.word	0x000186a0

08000a98 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 f9a4 	bl	8002e1c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f83d 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e0 	.word	0x200000e0
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_I2C_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	23c0      	movs	r3, #192	; 0xc0
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <HAL_I2C_MspInit+0x8c>)
 8000c0e:	f000 fa79 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000cba:	f000 fa23 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f8c6 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 fc22 	bl	80035a0 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000190 	.word	0x20000190
 8000d90:	200001a8 	.word	0x200001a8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 fbe1 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fd5b 	bl	80008a4 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dfc:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000e00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e04:	200001a8 	.word	0x200001a8

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f931 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe90 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93b 	bl	80010ea <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f911 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000194 	.word	0x20000194

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000194 	.word	0x20000194

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff47 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5c 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb0 	bl	8001058 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e165      	b.n	80013ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8154 	bne.w	80013e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80ae 	beq.w	80013e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5c      	ldr	r2, [pc, #368]	; (8001404 <HAL_GPIO_Init+0x300>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <HAL_GPIO_Init+0x300>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a58      	ldr	r2, [pc, #352]	; (8001408 <HAL_GPIO_Init+0x304>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x308>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x30c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x318>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x20a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x206>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x202>
 8001302:	2306      	movs	r3, #6
 8001304:	e00c      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 8001306:	2307      	movs	r3, #7
 8001308:	e00a      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 800130a:	2305      	movs	r3, #5
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 800130e:	2304      	movs	r3, #4
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x21c>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a31      	ldr	r2, [pc, #196]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_GPIO_Init+0x324>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x324>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_GPIO_Init+0x324>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x324>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_GPIO_Init+0x324>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f ae96 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40021400 	.word	0x40021400
 8001424:	40021800 	.word	0x40021800
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e12b      	b.n	8001696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fbae 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001490:	f001 f854 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_I2C_Init+0x274>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d807      	bhi.n	80014b0 <HAL_I2C_Init+0x84>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a80      	ldr	r2, [pc, #512]	; (80016a4 <HAL_I2C_Init+0x278>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	bf94      	ite	ls
 80014a8:	2301      	movls	r3, #1
 80014aa:	2300      	movhi	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e006      	b.n	80014be <HAL_I2C_Init+0x92>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a7d      	ldr	r2, [pc, #500]	; (80016a8 <HAL_I2C_Init+0x27c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0e7      	b.n	8001696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4a78      	ldr	r2, [pc, #480]	; (80016ac <HAL_I2C_Init+0x280>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0c9b      	lsrs	r3, r3, #18
 80014d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_I2C_Init+0x274>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d802      	bhi.n	8001500 <HAL_I2C_Init+0xd4>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	e009      	b.n	8001514 <HAL_I2C_Init+0xe8>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_I2C_Init+0x284>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	3301      	adds	r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	495c      	ldr	r1, [pc, #368]	; (80016a0 <HAL_I2C_Init+0x274>)
 8001530:	428b      	cmp	r3, r1
 8001532:	d819      	bhi.n	8001568 <HAL_I2C_Init+0x13c>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e59      	subs	r1, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001548:	400b      	ands	r3, r1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <HAL_I2C_Init+0x138>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e59      	subs	r1, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fbb1 f3f3 	udiv	r3, r1, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	e051      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001564:	2304      	movs	r3, #4
 8001566:	e04f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_I2C_Init+0x168>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	3301      	adds	r3, #1
 8001584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e012      	b.n	80015ba <HAL_I2C_Init+0x18e>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	0099      	lsls	r1, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x196>
 80015be:	2301      	movs	r3, #1
 80015c0:	e022      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10e      	bne.n	80015e8 <HAL_I2C_Init+0x1bc>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e58      	subs	r0, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	440b      	add	r3, r1
 80015d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	e00f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	6809      	ldr	r1, [r1, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6911      	ldr	r1, [r2, #16]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	4311      	orrs	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	000186a0 	.word	0x000186a0
 80016a4:	001e847f 	.word	0x001e847f
 80016a8:	003d08ff 	.word	0x003d08ff
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	10624dd3 	.word	0x10624dd3

080016b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	817b      	strh	r3, [r7, #10]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fc06 	bl	8000ed8 <HAL_GetTick>
 80016cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	f040 80e0 	bne.w	800189c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2319      	movs	r3, #25
 80016e2:	2201      	movs	r2, #1
 80016e4:	4970      	ldr	r1, [pc, #448]	; (80018a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fc58 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016f2:	2302      	movs	r3, #2
 80016f4:	e0d3      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_I2C_Master_Transmit+0x50>
 8001700:	2302      	movs	r3, #2
 8001702:	e0cc      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d007      	beq.n	800172a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0201 	orr.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2221      	movs	r2, #33	; 0x21
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2210      	movs	r2, #16
 8001746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	893a      	ldrh	r2, [r7, #8]
 800175a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <HAL_I2C_Master_Transmit+0x1f8>)
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800176c:	8979      	ldrh	r1, [r7, #10]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fac2 	bl	8001cfc <I2C_MasterRequestWrite>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e08d      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001798:	e066      	b.n	8001868 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fcd2 	bl	8002148 <I2C_WaitOnTXEFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d107      	bne.n	80017c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d11b      	bne.n	800183c <HAL_I2C_Master_Transmit+0x188>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d017      	beq.n	800183c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6a39      	ldr	r1, [r7, #32]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fcc2 	bl	80021ca <I2C_WaitOnBTFFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00d      	beq.n	8001868 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2b04      	cmp	r3, #4
 8001852:	d107      	bne.n	8001864 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001862:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e01a      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d194      	bne.n	800179a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800189c:	2302      	movs	r3, #2
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	00100002 	.word	0x00100002
 80018ac:	ffff0000 	.word	0xffff0000

080018b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	817b      	strh	r3, [r7, #10]
 80018c0:	4613      	mov	r3, r2
 80018c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fb08 	bl	8000ed8 <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	f040 820b 	bne.w	8001cee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2319      	movs	r3, #25
 80018de:	2201      	movs	r2, #1
 80018e0:	497c      	ldr	r1, [pc, #496]	; (8001ad4 <HAL_I2C_Master_Receive+0x224>)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fb5a 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
 80018f0:	e1fe      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_I2C_Master_Receive+0x50>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e1f7      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d007      	beq.n	8001926 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2222      	movs	r2, #34	; 0x22
 800193a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2210      	movs	r2, #16
 8001942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	893a      	ldrh	r2, [r7, #8]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_I2C_Master_Receive+0x228>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001968:	8979      	ldrh	r1, [r7, #10]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fa46 	bl	8001e00 <I2C_MasterRequestRead>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1b8      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d113      	bne.n	80019ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e18c      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d11b      	bne.n	80019ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e16c      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d11b      	bne.n	8001a2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	e14c      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a54:	e138      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	f200 80f1 	bhi.w	8001c42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d123      	bne.n	8001ab0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fbed 	bl	800224c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e139      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aae:	e10b      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d14e      	bne.n	8001b56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <HAL_I2C_Master_Receive+0x22c>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fa6a 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e10e      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
 8001ad2:	bf00      	nop
 8001ad4:	00100002 	.word	0x00100002
 8001ad8:	ffff0000 	.word	0xffff0000
 8001adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b54:	e0b8      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4966      	ldr	r1, [pc, #408]	; (8001cf8 <HAL_I2C_Master_Receive+0x448>)
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fa1b 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0bf      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	2200      	movs	r2, #0
 8001bba:	494f      	ldr	r1, [pc, #316]	; (8001cf8 <HAL_I2C_Master_Receive+0x448>)
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f9ed 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e091      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c40:	e042      	b.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fb00 	bl	800224c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e04c      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d118      	bne.n	8001cc8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f aec2 	bne.w	8001a56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	00010004 	.word	0x00010004

08001cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d006      	beq.n	8001d26 <I2C_MasterRequestWrite+0x2a>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <I2C_MasterRequestWrite+0x2a>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d24:	d108      	bne.n	8001d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e00b      	b.n	8001d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	2b12      	cmp	r3, #18
 8001d3e:	d107      	bne.n	8001d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f91d 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d76:	d103      	bne.n	8001d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e035      	b.n	8001df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d8c:	d108      	bne.n	8001da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	e01b      	b.n	8001dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	11db      	asrs	r3, r3, #7
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 0306 	and.w	r3, r3, #6
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f063 030f 	orn	r3, r3, #15
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <I2C_MasterRequestWrite+0xfc>)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f943 	bl	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e010      	b.n	8001df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <I2C_MasterRequestWrite+0x100>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f933 	bl	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	00010008 	.word	0x00010008
 8001dfc:	00010002 	.word	0x00010002

08001e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d006      	beq.n	8001e3a <I2C_MasterRequestRead+0x3a>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d003      	beq.n	8001e3a <I2C_MasterRequestRead+0x3a>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e38:	d108      	bne.n	8001e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e00b      	b.n	8001e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d107      	bne.n	8001e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f893 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8a:	d103      	bne.n	8001e94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e079      	b.n	8001f8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea0:	d108      	bne.n	8001eb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ea2:	897b      	ldrh	r3, [r7, #10]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	e05f      	b.n	8001f74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eb4:	897b      	ldrh	r3, [r7, #10]
 8001eb6:	11db      	asrs	r3, r3, #7
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f003 0306 	and.w	r3, r3, #6
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f063 030f 	orn	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4930      	ldr	r1, [pc, #192]	; (8001f94 <I2C_MasterRequestRead+0x194>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f8b9 	bl	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e054      	b.n	8001f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4929      	ldr	r1, [pc, #164]	; (8001f98 <I2C_MasterRequestRead+0x198>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f8a9 	bl	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e044      	b.n	8001f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f831 	bl	8001f9c <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4e:	d103      	bne.n	8001f58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e017      	b.n	8001f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	11db      	asrs	r3, r3, #7
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0306 	and.w	r3, r3, #6
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f063 030e 	orn	r3, r3, #14
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <I2C_MasterRequestRead+0x198>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f865 	bl	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	00010008 	.word	0x00010008
 8001f98:	00010002 	.word	0x00010002

08001f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fac:	e025      	b.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d021      	beq.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	f7fe ff8f 	bl	8000ed8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e023      	b.n	8002042 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10d      	bne.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4013      	ands	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	e00c      	b.n	800203a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4013      	ands	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	429a      	cmp	r2, r3
 800203e:	d0b6      	beq.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002058:	e051      	b.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002068:	d123      	bne.n	80020b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002078:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002082:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e046      	b.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d021      	beq.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7fe ff0d 	bl	8000ed8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d116      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e020      	b.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4013      	ands	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf14      	ite	ne
 800211a:	2301      	movne	r3, #1
 800211c:	2300      	moveq	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e00b      	b.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d18d      	bne.n	800205a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002154:	e02d      	b.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f8ce 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e02d      	b.n	80021c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d021      	beq.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216e:	f7fe feb3 	bl	8000ed8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	429a      	cmp	r2, r3
 800217c:	d302      	bcc.n	8002184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d116      	bne.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f043 0220 	orr.w	r2, r3, #32
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d1ca      	bne.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d6:	e02d      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f88d 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e02d      	b.n	8002244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ee:	d021      	beq.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f0:	f7fe fe72 	bl	8000ed8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d302      	bcc.n	8002206 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e007      	b.n	8002244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b04      	cmp	r3, #4
 8002240:	d1ca      	bne.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002258:	e042      	b.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d119      	bne.n	800229c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e029      	b.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229c:	f7fe fe1c 	bl	8000ed8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d302      	bcc.n	80022b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d1b5      	bne.n	800225a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d11b      	bne.n	8002348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe fd46 	bl	8000ed8 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fd42 	bl	8000ed8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f855 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fca6 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	08003f50 	.word	0x08003f50
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_GetHCLKFreq+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff0 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0a9b      	lsrs	r3, r3, #10
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08003f60 	.word	0x08003f60

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffdc 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0b5b      	lsrs	r3, r3, #13
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08003f60 	.word	0x08003f60

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b0a6      	sub	sp, #152	; 0x98
 8002592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b2:	4bc8      	ldr	r3, [pc, #800]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	f200 817e 	bhi.w	80028bc <HAL_RCC_GetSysClockFreq+0x330>
 80025c0:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c6:	bf00      	nop
 80025c8:	080025fd 	.word	0x080025fd
 80025cc:	080028bd 	.word	0x080028bd
 80025d0:	080028bd 	.word	0x080028bd
 80025d4:	080028bd 	.word	0x080028bd
 80025d8:	08002605 	.word	0x08002605
 80025dc:	080028bd 	.word	0x080028bd
 80025e0:	080028bd 	.word	0x080028bd
 80025e4:	080028bd 	.word	0x080028bd
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	080028bd 	.word	0x080028bd
 80025f0:	080028bd 	.word	0x080028bd
 80025f4:	080028bd 	.word	0x080028bd
 80025f8:	08002777 	.word	0x08002777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4bb6      	ldr	r3, [pc, #728]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002602:	e15f      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002604:	4bb5      	ldr	r3, [pc, #724]	; (80028dc <HAL_RCC_GetSysClockFreq+0x350>)
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800260a:	e15b      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4bb1      	ldr	r3, [pc, #708]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002618:	4bae      	ldr	r3, [pc, #696]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d031      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4bab      	ldr	r3, [pc, #684]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	2200      	movs	r2, #0
 800262c:	66bb      	str	r3, [r7, #104]	; 0x68
 800262e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	663b      	str	r3, [r7, #96]	; 0x60
 8002638:	2300      	movs	r3, #0
 800263a:	667b      	str	r3, [r7, #100]	; 0x64
 800263c:	4ba7      	ldr	r3, [pc, #668]	; (80028dc <HAL_RCC_GetSysClockFreq+0x350>)
 800263e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002642:	462a      	mov	r2, r5
 8002644:	fb03 f202 	mul.w	r2, r3, r2
 8002648:	2300      	movs	r3, #0
 800264a:	4621      	mov	r1, r4
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	4aa2      	ldr	r2, [pc, #648]	; (80028dc <HAL_RCC_GetSysClockFreq+0x350>)
 8002654:	4621      	mov	r1, r4
 8002656:	fba1 1202 	umull	r1, r2, r1, r2
 800265a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800265c:	460a      	mov	r2, r1
 800265e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002660:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002662:	4413      	add	r3, r2
 8002664:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	2200      	movs	r2, #0
 800266c:	65bb      	str	r3, [r7, #88]	; 0x58
 800266e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002670:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002674:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002678:	f7fd fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002686:	e064      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	2200      	movs	r2, #0
 8002690:	653b      	str	r3, [r7, #80]	; 0x50
 8002692:	657a      	str	r2, [r7, #84]	; 0x54
 8002694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80026a4:	4622      	mov	r2, r4
 80026a6:	462b      	mov	r3, r5
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0159      	lsls	r1, r3, #5
 80026b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b6:	0150      	lsls	r0, r2, #5
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4621      	mov	r1, r4
 80026be:	1a51      	subs	r1, r2, r1
 80026c0:	6139      	str	r1, [r7, #16]
 80026c2:	4629      	mov	r1, r5
 80026c4:	eb63 0301 	sbc.w	r3, r3, r1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d6:	4659      	mov	r1, fp
 80026d8:	018b      	lsls	r3, r1, #6
 80026da:	4651      	mov	r1, sl
 80026dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e0:	4651      	mov	r1, sl
 80026e2:	018a      	lsls	r2, r1, #6
 80026e4:	4651      	mov	r1, sl
 80026e6:	ebb2 0801 	subs.w	r8, r2, r1
 80026ea:	4659      	mov	r1, fp
 80026ec:	eb63 0901 	sbc.w	r9, r3, r1
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002700:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002704:	4690      	mov	r8, r2
 8002706:	4699      	mov	r9, r3
 8002708:	4623      	mov	r3, r4
 800270a:	eb18 0303 	adds.w	r3, r8, r3
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	462b      	mov	r3, r5
 8002712:	eb49 0303 	adc.w	r3, r9, r3
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002724:	4629      	mov	r1, r5
 8002726:	028b      	lsls	r3, r1, #10
 8002728:	4621      	mov	r1, r4
 800272a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272e:	4621      	mov	r1, r4
 8002730:	028a      	lsls	r2, r1, #10
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273a:	2200      	movs	r2, #0
 800273c:	643b      	str	r3, [r7, #64]	; 0x40
 800273e:	647a      	str	r2, [r7, #68]	; 0x44
 8002740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002744:	f7fd fdb4 	bl	80002b0 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002764:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002774:	e0a6      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002776:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800277e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002782:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02a      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	2200      	movs	r2, #0
 8002796:	63bb      	str	r3, [r7, #56]	; 0x38
 8002798:	63fa      	str	r2, [r7, #60]	; 0x3c
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027a0:	2100      	movs	r1, #0
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <HAL_RCC_GetSysClockFreq+0x350>)
 80027a4:	fb03 f201 	mul.w	r2, r3, r1
 80027a8:	2300      	movs	r3, #0
 80027aa:	fb00 f303 	mul.w	r3, r0, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <HAL_RCC_GetSysClockFreq+0x350>)
 80027b2:	fba0 1202 	umull	r1, r2, r0, r2
 80027b6:	677a      	str	r2, [r7, #116]	; 0x74
 80027b8:	460a      	mov	r2, r1
 80027ba:	673a      	str	r2, [r7, #112]	; 0x70
 80027bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027be:	4413      	add	r3, r2
 80027c0:	677b      	str	r3, [r7, #116]	; 0x74
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	2200      	movs	r2, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	637a      	str	r2, [r7, #52]	; 0x34
 80027cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80027d4:	f7fd fd6c 	bl	80002b0 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027e2:	e05b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	2200      	movs	r2, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0159      	lsls	r1, r3, #5
 800280e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002812:	0150      	lsls	r0, r2, #5
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4641      	mov	r1, r8
 800281a:	ebb2 0a01 	subs.w	sl, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb63 0b01 	sbc.w	fp, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002838:	ebb2 040a 	subs.w	r4, r2, sl
 800283c:	eb63 050b 	sbc.w	r5, r3, fp
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	00eb      	lsls	r3, r5, #3
 800284a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284e:	00e2      	lsls	r2, r4, #3
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4643      	mov	r3, r8
 8002856:	18e3      	adds	r3, r4, r3
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	464b      	mov	r3, r9
 800285c:	eb45 0303 	adc.w	r3, r5, r3
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002884:	2200      	movs	r2, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	61fa      	str	r2, [r7, #28]
 800288a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288e:	f7fd fd0f 	bl	80002b0 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4613      	mov	r3, r2
 8002898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0f1b      	lsrs	r3, r3, #28
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80028aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028ba:	e003      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3798      	adds	r7, #152	; 0x98
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	017d7840 	.word	0x017d7840

080028e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e28d      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8083 	beq.w	8002a06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002900:	4b94      	ldr	r3, [pc, #592]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b04      	cmp	r3, #4
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800290c:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002914:	2b08      	cmp	r3, #8
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002918:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002924:	d00c      	beq.n	8002940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d112      	bne.n	8002958 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b88      	ldr	r3, [pc, #544]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05b      	beq.n	8002a04 <HAL_RCC_OscConfig+0x124>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d157      	bne.n	8002a04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e25a      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x90>
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xcc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xb4>
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a72      	ldr	r2, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xcc>
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa90 	bl	8000ed8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fa8c 	bl	8000ed8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e21f      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xdc>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fa7c 	bl	8000ed8 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fa78 	bl	8000ed8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e20b      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x104>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06f      	beq.n	8002af2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d017      	beq.n	8002a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x186>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1d3      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4937      	ldr	r1, [pc, #220]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x278>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fa25 	bl	8000ed8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fa21 	bl	8000ed8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1b4      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4925      	ldr	r1, [pc, #148]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_OscConfig+0x278>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fa04 	bl	8000ed8 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fa00 	bl	8000ed8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e193      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_RCC_OscConfig+0x27c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f9e4 	bl	8000ed8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fe f9e0 	bl	8000ed8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e173      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x234>
 8002b32:	e01b      	b.n	8002b6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x27c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe f9cd 	bl	8000ed8 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00e      	b.n	8002b60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fe f9c9 	bl	8000ed8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d907      	bls.n	8002b60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e15c      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	4b8a      	ldr	r3, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ea      	bne.n	8002b42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8097 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a7e      	ldr	r2, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b79      	ldr	r3, [pc, #484]	; (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe f989 	bl	8000ed8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe f985 	bl	8000ed8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e118      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x4b0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x31e>
 8002bf0:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x358>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x340>
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a60      	ldr	r2, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x358>
 8002c20:	4b5a      	ldr	r3, [pc, #360]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a59      	ldr	r2, [pc, #356]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe f94a 	bl	8000ed8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe f946 	bl	8000ed8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0d7      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCC_OscConfig+0x368>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe f934 	bl	8000ed8 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe f930 	bl	8000ed8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0c1      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a3a      	ldr	r2, [pc, #232]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80ad 	beq.w	8002e0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d060      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d145      	bne.n	8002d52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f904 	bl	8000ed8 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe f900 	bl	8000ed8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e093      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	071b      	lsls	r3, r3, #28
 8002d1e:	491b      	ldr	r1, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe f8d5 	bl	8000ed8 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe f8d1 	bl	8000ed8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e064      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x452>
 8002d50:	e05c      	b.n	8002e0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x4b4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe f8be 	bl	8000ed8 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe f8ba 	bl	8000ed8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e04d      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x480>
 8002d7e:	e045      	b.n	8002e0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e040      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_RCC_OscConfig+0x538>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d030      	beq.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d129      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d122      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d119      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10f      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e03f      	b.n	8002eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd fefe 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f929 	bl	80030b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d17c      	bne.n	8002fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Transmit+0x2c>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e075      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x3e>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e06e      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7fd ffe5 	bl	8000ed8 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f48:	e02a      	b.n	8002fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f840 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e036      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1cf      	bne.n	8002f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f810 	bl	8002fda <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e006      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b090      	sub	sp, #64	; 0x40
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fea:	e050      	b.n	800308e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d04c      	beq.n	800308e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x30>
 8002ffa:	f7fd ff6d 	bl	8000ed8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003006:	429a      	cmp	r2, r3
 8003008:	d241      	bcs.n	800308e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302a:	637a      	str	r2, [r7, #52]	; 0x34
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e5      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3314      	adds	r3, #20
 8003044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	613b      	str	r3, [r7, #16]
   return(result);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800305e:	623a      	str	r2, [r7, #32]
 8003060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	69f9      	ldr	r1, [r7, #28]
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	61bb      	str	r3, [r7, #24]
   return(result);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e00f      	b.n	80030ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d09f      	beq.n	8002fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3740      	adds	r7, #64	; 0x40
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	b0c0      	sub	sp, #256	; 0x100
 80030be:	af00      	add	r7, sp, #0
 80030c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	68d9      	ldr	r1, [r3, #12]
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	ea40 0301 	orr.w	r3, r0, r1
 80030e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003110:	f021 010c 	bic.w	r1, r1, #12
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800311e:	430b      	orrs	r3, r1
 8003120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	6999      	ldr	r1, [r3, #24]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	ea40 0301 	orr.w	r3, r0, r1
 800313e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <UART_SetConfig+0x2cc>)
 8003148:	429a      	cmp	r2, r3
 800314a:	d005      	beq.n	8003158 <UART_SetConfig+0xa0>
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <UART_SetConfig+0x2d0>)
 8003154:	429a      	cmp	r2, r3
 8003156:	d104      	bne.n	8003162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7ff fa04 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 800315c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003160:	e003      	b.n	800316a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003162:	f7ff f9eb 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8003166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003174:	f040 810c 	bne.w	8003390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	1891      	adds	r1, r2, r2
 8003190:	65b9      	str	r1, [r7, #88]	; 0x58
 8003192:	415b      	adcs	r3, r3
 8003194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800319a:	4621      	mov	r1, r4
 800319c:	eb12 0801 	adds.w	r8, r2, r1
 80031a0:	4629      	mov	r1, r5
 80031a2:	eb43 0901 	adc.w	r9, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ba:	4690      	mov	r8, r2
 80031bc:	4699      	mov	r9, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb18 0303 	adds.w	r3, r8, r3
 80031c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031c8:	462b      	mov	r3, r5
 80031ca:	eb49 0303 	adc.w	r3, r9, r3
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031e6:	460b      	mov	r3, r1
 80031e8:	18db      	adds	r3, r3, r3
 80031ea:	653b      	str	r3, [r7, #80]	; 0x50
 80031ec:	4613      	mov	r3, r2
 80031ee:	eb42 0303 	adc.w	r3, r2, r3
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
 80031f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031fc:	f7fd f858 	bl	80002b0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <UART_SetConfig+0x2d4>)
 8003206:	fba3 2302 	umull	r2, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	011c      	lsls	r4, r3, #4
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800321c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	1891      	adds	r1, r2, r2
 8003226:	64b9      	str	r1, [r7, #72]	; 0x48
 8003228:	415b      	adcs	r3, r3
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800322c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003230:	4641      	mov	r1, r8
 8003232:	eb12 0a01 	adds.w	sl, r2, r1
 8003236:	4649      	mov	r1, r9
 8003238:	eb43 0b01 	adc.w	fp, r3, r1
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800324c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003250:	4692      	mov	sl, r2
 8003252:	469b      	mov	fp, r3
 8003254:	4643      	mov	r3, r8
 8003256:	eb1a 0303 	adds.w	r3, sl, r3
 800325a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800325e:	464b      	mov	r3, r9
 8003260:	eb4b 0303 	adc.w	r3, fp, r3
 8003264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800327c:	460b      	mov	r3, r1
 800327e:	18db      	adds	r3, r3, r3
 8003280:	643b      	str	r3, [r7, #64]	; 0x40
 8003282:	4613      	mov	r3, r2
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
 800328a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800328e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003292:	f7fd f80d 	bl	80002b0 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4611      	mov	r1, r2
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <UART_SetConfig+0x2d4>)
 800329e:	fba3 2301 	umull	r2, r3, r3, r1
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2264      	movs	r2, #100	; 0x64
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <UART_SetConfig+0x2d4>)
 80032b4:	fba3 2302 	umull	r2, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032c0:	441c      	add	r4, r3
 80032c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	1891      	adds	r1, r2, r2
 80032da:	63b9      	str	r1, [r7, #56]	; 0x38
 80032dc:	415b      	adcs	r3, r3
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032e4:	4641      	mov	r1, r8
 80032e6:	1851      	adds	r1, r2, r1
 80032e8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ea:	4649      	mov	r1, r9
 80032ec:	414b      	adcs	r3, r1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032fc:	4659      	mov	r1, fp
 80032fe:	00cb      	lsls	r3, r1, #3
 8003300:	4651      	mov	r1, sl
 8003302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003306:	4651      	mov	r1, sl
 8003308:	00ca      	lsls	r2, r1, #3
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	4603      	mov	r3, r0
 8003310:	4642      	mov	r2, r8
 8003312:	189b      	adds	r3, r3, r2
 8003314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003318:	464b      	mov	r3, r9
 800331a:	460a      	mov	r2, r1
 800331c:	eb42 0303 	adc.w	r3, r2, r3
 8003320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003338:	460b      	mov	r3, r1
 800333a:	18db      	adds	r3, r3, r3
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
 800333e:	4613      	mov	r3, r2
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800334a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800334e:	f7fc ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <UART_SetConfig+0x2d4>)
 8003358:	fba3 1302 	umull	r1, r3, r3, r2
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	2164      	movs	r1, #100	; 0x64
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	3332      	adds	r3, #50	; 0x32
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <UART_SetConfig+0x2d4>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	f003 0207 	and.w	r2, r3, #7
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4422      	add	r2, r4
 800337e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003380:	e105      	b.n	800358e <UART_SetConfig+0x4d6>
 8003382:	bf00      	nop
 8003384:	40011000 	.word	0x40011000
 8003388:	40011400 	.word	0x40011400
 800338c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800339a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800339e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033a2:	4642      	mov	r2, r8
 80033a4:	464b      	mov	r3, r9
 80033a6:	1891      	adds	r1, r2, r2
 80033a8:	6239      	str	r1, [r7, #32]
 80033aa:	415b      	adcs	r3, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b2:	4641      	mov	r1, r8
 80033b4:	1854      	adds	r4, r2, r1
 80033b6:	4649      	mov	r1, r9
 80033b8:	eb43 0501 	adc.w	r5, r3, r1
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	00eb      	lsls	r3, r5, #3
 80033c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ca:	00e2      	lsls	r2, r4, #3
 80033cc:	4614      	mov	r4, r2
 80033ce:	461d      	mov	r5, r3
 80033d0:	4643      	mov	r3, r8
 80033d2:	18e3      	adds	r3, r4, r3
 80033d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033d8:	464b      	mov	r3, r9
 80033da:	eb45 0303 	adc.w	r3, r5, r3
 80033de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033fe:	4629      	mov	r1, r5
 8003400:	008b      	lsls	r3, r1, #2
 8003402:	4621      	mov	r1, r4
 8003404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003408:	4621      	mov	r1, r4
 800340a:	008a      	lsls	r2, r1, #2
 800340c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003410:	f7fc ff4e 	bl	80002b0 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4b60      	ldr	r3, [pc, #384]	; (800359c <UART_SetConfig+0x4e4>)
 800341a:	fba3 2302 	umull	r2, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	011c      	lsls	r4, r3, #4
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800342c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	61b9      	str	r1, [r7, #24]
 800343c:	415b      	adcs	r3, r3
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003444:	4641      	mov	r1, r8
 8003446:	1851      	adds	r1, r2, r1
 8003448:	6139      	str	r1, [r7, #16]
 800344a:	4649      	mov	r1, r9
 800344c:	414b      	adcs	r3, r1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800345c:	4659      	mov	r1, fp
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4651      	mov	r1, sl
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4642      	mov	r2, r8
 8003472:	189b      	adds	r3, r3, r2
 8003474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003478:	464b      	mov	r3, r9
 800347a:	460a      	mov	r2, r1
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	67bb      	str	r3, [r7, #120]	; 0x78
 800348e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800349c:	4649      	mov	r1, r9
 800349e:	008b      	lsls	r3, r1, #2
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a6:	4641      	mov	r1, r8
 80034a8:	008a      	lsls	r2, r1, #2
 80034aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ae:	f7fc feff 	bl	80002b0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <UART_SetConfig+0x4e4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	; 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	3332      	adds	r3, #50	; 0x32
 80034ca:	4a34      	ldr	r2, [pc, #208]	; (800359c <UART_SetConfig+0x4e4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d6:	441c      	add	r4, r3
 80034d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034dc:	2200      	movs	r2, #0
 80034de:	673b      	str	r3, [r7, #112]	; 0x70
 80034e0:	677a      	str	r2, [r7, #116]	; 0x74
 80034e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034e6:	4642      	mov	r2, r8
 80034e8:	464b      	mov	r3, r9
 80034ea:	1891      	adds	r1, r2, r2
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	415b      	adcs	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f6:	4641      	mov	r1, r8
 80034f8:	1851      	adds	r1, r2, r1
 80034fa:	6039      	str	r1, [r7, #0]
 80034fc:	4649      	mov	r1, r9
 80034fe:	414b      	adcs	r3, r1
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800350e:	4659      	mov	r1, fp
 8003510:	00cb      	lsls	r3, r1, #3
 8003512:	4651      	mov	r1, sl
 8003514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003518:	4651      	mov	r1, sl
 800351a:	00ca      	lsls	r2, r1, #3
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	4603      	mov	r3, r0
 8003522:	4642      	mov	r2, r8
 8003524:	189b      	adds	r3, r3, r2
 8003526:	66bb      	str	r3, [r7, #104]	; 0x68
 8003528:	464b      	mov	r3, r9
 800352a:	460a      	mov	r2, r1
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
 800353c:	667a      	str	r2, [r7, #100]	; 0x64
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800354a:	4649      	mov	r1, r9
 800354c:	008b      	lsls	r3, r1, #2
 800354e:	4641      	mov	r1, r8
 8003550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003554:	4641      	mov	r1, r8
 8003556:	008a      	lsls	r2, r1, #2
 8003558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800355c:	f7fc fea8 	bl	80002b0 <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <UART_SetConfig+0x4e4>)
 8003566:	fba3 1302 	umull	r1, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a08      	ldr	r2, [pc, #32]	; (800359c <UART_SetConfig+0x4e4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4422      	add	r2, r4
 800358c:	609a      	str	r2, [r3, #8]
}
 800358e:	bf00      	nop
 8003590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4d0d      	ldr	r5, [pc, #52]	; (80035e4 <__libc_init_array+0x38>)
 80035b0:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	2600      	movs	r6, #0
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	4d0b      	ldr	r5, [pc, #44]	; (80035ec <__libc_init_array+0x40>)
 80035be:	4c0c      	ldr	r4, [pc, #48]	; (80035f0 <__libc_init_array+0x44>)
 80035c0:	f000 fc8e 	bl	8003ee0 <_init>
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	2600      	movs	r6, #0
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08003fa4 	.word	0x08003fa4
 80035e8:	08003fa4 	.word	0x08003fa4
 80035ec:	08003fa4 	.word	0x08003fa4
 80035f0:	08003fa8 	.word	0x08003fa8

080035f4 <memset>:
 80035f4:	4402      	add	r2, r0
 80035f6:	4603      	mov	r3, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	b500      	push	{lr}
 8003608:	b09c      	sub	sp, #112	; 0x70
 800360a:	ab1d      	add	r3, sp, #116	; 0x74
 800360c:	9002      	str	r0, [sp, #8]
 800360e:	9006      	str	r0, [sp, #24]
 8003610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003614:	4809      	ldr	r0, [pc, #36]	; (800363c <siprintf+0x38>)
 8003616:	9107      	str	r1, [sp, #28]
 8003618:	9104      	str	r1, [sp, #16]
 800361a:	4909      	ldr	r1, [pc, #36]	; (8003640 <siprintf+0x3c>)
 800361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	a902      	add	r1, sp, #8
 8003628:	f000 f868 	bl	80036fc <_svfiprintf_r>
 800362c:	9b02      	ldr	r3, [sp, #8]
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	b01c      	add	sp, #112	; 0x70
 8003634:	f85d eb04 	ldr.w	lr, [sp], #4
 8003638:	b003      	add	sp, #12
 800363a:	4770      	bx	lr
 800363c:	2000000c 	.word	0x2000000c
 8003640:	ffff0208 	.word	0xffff0208

08003644 <__ssputs_r>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	688e      	ldr	r6, [r1, #8]
 800364a:	429e      	cmp	r6, r3
 800364c:	4682      	mov	sl, r0
 800364e:	460c      	mov	r4, r1
 8003650:	4690      	mov	r8, r2
 8003652:	461f      	mov	r7, r3
 8003654:	d838      	bhi.n	80036c8 <__ssputs_r+0x84>
 8003656:	898a      	ldrh	r2, [r1, #12]
 8003658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800365c:	d032      	beq.n	80036c4 <__ssputs_r+0x80>
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	6909      	ldr	r1, [r1, #16]
 8003662:	eba5 0901 	sub.w	r9, r5, r1
 8003666:	6965      	ldr	r5, [r4, #20]
 8003668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800366c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003670:	3301      	adds	r3, #1
 8003672:	444b      	add	r3, r9
 8003674:	106d      	asrs	r5, r5, #1
 8003676:	429d      	cmp	r5, r3
 8003678:	bf38      	it	cc
 800367a:	461d      	movcc	r5, r3
 800367c:	0553      	lsls	r3, r2, #21
 800367e:	d531      	bpl.n	80036e4 <__ssputs_r+0xa0>
 8003680:	4629      	mov	r1, r5
 8003682:	f000 fb63 	bl	8003d4c <_malloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	b950      	cbnz	r0, 80036a0 <__ssputs_r+0x5c>
 800368a:	230c      	movs	r3, #12
 800368c:	f8ca 3000 	str.w	r3, [sl]
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	6921      	ldr	r1, [r4, #16]
 80036a2:	464a      	mov	r2, r9
 80036a4:	f000 fabe 	bl	8003c24 <memcpy>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	6126      	str	r6, [r4, #16]
 80036b6:	6165      	str	r5, [r4, #20]
 80036b8:	444e      	add	r6, r9
 80036ba:	eba5 0509 	sub.w	r5, r5, r9
 80036be:	6026      	str	r6, [r4, #0]
 80036c0:	60a5      	str	r5, [r4, #8]
 80036c2:	463e      	mov	r6, r7
 80036c4:	42be      	cmp	r6, r7
 80036c6:	d900      	bls.n	80036ca <__ssputs_r+0x86>
 80036c8:	463e      	mov	r6, r7
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	4632      	mov	r2, r6
 80036ce:	4641      	mov	r1, r8
 80036d0:	f000 fab6 	bl	8003c40 <memmove>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	1b9b      	subs	r3, r3, r6
 80036d8:	60a3      	str	r3, [r4, #8]
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	4433      	add	r3, r6
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	2000      	movs	r0, #0
 80036e2:	e7db      	b.n	800369c <__ssputs_r+0x58>
 80036e4:	462a      	mov	r2, r5
 80036e6:	f000 fba5 	bl	8003e34 <_realloc_r>
 80036ea:	4606      	mov	r6, r0
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1e1      	bne.n	80036b4 <__ssputs_r+0x70>
 80036f0:	6921      	ldr	r1, [r4, #16]
 80036f2:	4650      	mov	r0, sl
 80036f4:	f000 fabe 	bl	8003c74 <_free_r>
 80036f8:	e7c7      	b.n	800368a <__ssputs_r+0x46>
	...

080036fc <_svfiprintf_r>:
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	4698      	mov	r8, r3
 8003702:	898b      	ldrh	r3, [r1, #12]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	4607      	mov	r7, r0
 800370a:	460d      	mov	r5, r1
 800370c:	4614      	mov	r4, r2
 800370e:	d50e      	bpl.n	800372e <_svfiprintf_r+0x32>
 8003710:	690b      	ldr	r3, [r1, #16]
 8003712:	b963      	cbnz	r3, 800372e <_svfiprintf_r+0x32>
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f000 fb19 	bl	8003d4c <_malloc_r>
 800371a:	6028      	str	r0, [r5, #0]
 800371c:	6128      	str	r0, [r5, #16]
 800371e:	b920      	cbnz	r0, 800372a <_svfiprintf_r+0x2e>
 8003720:	230c      	movs	r3, #12
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e0d1      	b.n	80038ce <_svfiprintf_r+0x1d2>
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	616b      	str	r3, [r5, #20]
 800372e:	2300      	movs	r3, #0
 8003730:	9309      	str	r3, [sp, #36]	; 0x24
 8003732:	2320      	movs	r3, #32
 8003734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003738:	f8cd 800c 	str.w	r8, [sp, #12]
 800373c:	2330      	movs	r3, #48	; 0x30
 800373e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038e8 <_svfiprintf_r+0x1ec>
 8003742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003746:	f04f 0901 	mov.w	r9, #1
 800374a:	4623      	mov	r3, r4
 800374c:	469a      	mov	sl, r3
 800374e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003752:	b10a      	cbz	r2, 8003758 <_svfiprintf_r+0x5c>
 8003754:	2a25      	cmp	r2, #37	; 0x25
 8003756:	d1f9      	bne.n	800374c <_svfiprintf_r+0x50>
 8003758:	ebba 0b04 	subs.w	fp, sl, r4
 800375c:	d00b      	beq.n	8003776 <_svfiprintf_r+0x7a>
 800375e:	465b      	mov	r3, fp
 8003760:	4622      	mov	r2, r4
 8003762:	4629      	mov	r1, r5
 8003764:	4638      	mov	r0, r7
 8003766:	f7ff ff6d 	bl	8003644 <__ssputs_r>
 800376a:	3001      	adds	r0, #1
 800376c:	f000 80aa 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003772:	445a      	add	r2, fp
 8003774:	9209      	str	r2, [sp, #36]	; 0x24
 8003776:	f89a 3000 	ldrb.w	r3, [sl]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a2 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003780:	2300      	movs	r3, #0
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800378a:	f10a 0a01 	add.w	sl, sl, #1
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	9307      	str	r3, [sp, #28]
 8003792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003796:	931a      	str	r3, [sp, #104]	; 0x68
 8003798:	4654      	mov	r4, sl
 800379a:	2205      	movs	r2, #5
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	4851      	ldr	r0, [pc, #324]	; (80038e8 <_svfiprintf_r+0x1ec>)
 80037a2:	f7fc fd35 	bl	8000210 <memchr>
 80037a6:	9a04      	ldr	r2, [sp, #16]
 80037a8:	b9d8      	cbnz	r0, 80037e2 <_svfiprintf_r+0xe6>
 80037aa:	06d0      	lsls	r0, r2, #27
 80037ac:	bf44      	itt	mi
 80037ae:	2320      	movmi	r3, #32
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b4:	0711      	lsls	r1, r2, #28
 80037b6:	bf44      	itt	mi
 80037b8:	232b      	movmi	r3, #43	; 0x2b
 80037ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037be:	f89a 3000 	ldrb.w	r3, [sl]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d015      	beq.n	80037f2 <_svfiprintf_r+0xf6>
 80037c6:	9a07      	ldr	r2, [sp, #28]
 80037c8:	4654      	mov	r4, sl
 80037ca:	2000      	movs	r0, #0
 80037cc:	f04f 0c0a 	mov.w	ip, #10
 80037d0:	4621      	mov	r1, r4
 80037d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d6:	3b30      	subs	r3, #48	; 0x30
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d94e      	bls.n	800387a <_svfiprintf_r+0x17e>
 80037dc:	b1b0      	cbz	r0, 800380c <_svfiprintf_r+0x110>
 80037de:	9207      	str	r2, [sp, #28]
 80037e0:	e014      	b.n	800380c <_svfiprintf_r+0x110>
 80037e2:	eba0 0308 	sub.w	r3, r0, r8
 80037e6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	46a2      	mov	sl, r4
 80037f0:	e7d2      	b.n	8003798 <_svfiprintf_r+0x9c>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfbb      	ittet	lt
 80037fe:	425b      	neglt	r3, r3
 8003800:	f042 0202 	orrlt.w	r2, r2, #2
 8003804:	9307      	strge	r3, [sp, #28]
 8003806:	9307      	strlt	r3, [sp, #28]
 8003808:	bfb8      	it	lt
 800380a:	9204      	strlt	r2, [sp, #16]
 800380c:	7823      	ldrb	r3, [r4, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d10c      	bne.n	800382c <_svfiprintf_r+0x130>
 8003812:	7863      	ldrb	r3, [r4, #1]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d135      	bne.n	8003884 <_svfiprintf_r+0x188>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	9203      	str	r2, [sp, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	f04f 33ff 	movlt.w	r3, #4294967295
 8003828:	3402      	adds	r4, #2
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038f8 <_svfiprintf_r+0x1fc>
 8003830:	7821      	ldrb	r1, [r4, #0]
 8003832:	2203      	movs	r2, #3
 8003834:	4650      	mov	r0, sl
 8003836:	f7fc fceb 	bl	8000210 <memchr>
 800383a:	b140      	cbz	r0, 800384e <_svfiprintf_r+0x152>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	eba0 000a 	sub.w	r0, r0, sl
 8003842:	fa03 f000 	lsl.w	r0, r3, r0
 8003846:	9b04      	ldr	r3, [sp, #16]
 8003848:	4303      	orrs	r3, r0
 800384a:	3401      	adds	r4, #1
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003852:	4826      	ldr	r0, [pc, #152]	; (80038ec <_svfiprintf_r+0x1f0>)
 8003854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003858:	2206      	movs	r2, #6
 800385a:	f7fc fcd9 	bl	8000210 <memchr>
 800385e:	2800      	cmp	r0, #0
 8003860:	d038      	beq.n	80038d4 <_svfiprintf_r+0x1d8>
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <_svfiprintf_r+0x1f4>)
 8003864:	bb1b      	cbnz	r3, 80038ae <_svfiprintf_r+0x1b2>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	3308      	adds	r3, #8
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	4433      	add	r3, r6
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	e767      	b.n	800374a <_svfiprintf_r+0x4e>
 800387a:	fb0c 3202 	mla	r2, ip, r2, r3
 800387e:	460c      	mov	r4, r1
 8003880:	2001      	movs	r0, #1
 8003882:	e7a5      	b.n	80037d0 <_svfiprintf_r+0xd4>
 8003884:	2300      	movs	r3, #0
 8003886:	3401      	adds	r4, #1
 8003888:	9305      	str	r3, [sp, #20]
 800388a:	4619      	mov	r1, r3
 800388c:	f04f 0c0a 	mov.w	ip, #10
 8003890:	4620      	mov	r0, r4
 8003892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003896:	3a30      	subs	r2, #48	; 0x30
 8003898:	2a09      	cmp	r2, #9
 800389a:	d903      	bls.n	80038a4 <_svfiprintf_r+0x1a8>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c5      	beq.n	800382c <_svfiprintf_r+0x130>
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	e7c3      	b.n	800382c <_svfiprintf_r+0x130>
 80038a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a8:	4604      	mov	r4, r0
 80038aa:	2301      	movs	r3, #1
 80038ac:	e7f0      	b.n	8003890 <_svfiprintf_r+0x194>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038b6:	a904      	add	r1, sp, #16
 80038b8:	4638      	mov	r0, r7
 80038ba:	f3af 8000 	nop.w
 80038be:	1c42      	adds	r2, r0, #1
 80038c0:	4606      	mov	r6, r0
 80038c2:	d1d6      	bne.n	8003872 <_svfiprintf_r+0x176>
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	065b      	lsls	r3, r3, #25
 80038c8:	f53f af2c 	bmi.w	8003724 <_svfiprintf_r+0x28>
 80038cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ce:	b01d      	add	sp, #116	; 0x74
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	462a      	mov	r2, r5
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038dc:	a904      	add	r1, sp, #16
 80038de:	4638      	mov	r0, r7
 80038e0:	f000 f87a 	bl	80039d8 <_printf_i>
 80038e4:	e7eb      	b.n	80038be <_svfiprintf_r+0x1c2>
 80038e6:	bf00      	nop
 80038e8:	08003f68 	.word	0x08003f68
 80038ec:	08003f72 	.word	0x08003f72
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003645 	.word	0x08003645
 80038f8:	08003f6e 	.word	0x08003f6e

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4616      	mov	r6, r2
 8003902:	4699      	mov	r9, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800390c:	4293      	cmp	r3, r2
 800390e:	bfb8      	it	lt
 8003910:	4613      	movlt	r3, r2
 8003912:	6033      	str	r3, [r6, #0]
 8003914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003918:	4607      	mov	r7, r0
 800391a:	460c      	mov	r4, r1
 800391c:	b10a      	cbz	r2, 8003922 <_printf_common+0x26>
 800391e:	3301      	adds	r3, #1
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	6833      	ldrmi	r3, [r6, #0]
 800392a:	3302      	addmi	r3, #2
 800392c:	6033      	strmi	r3, [r6, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	f015 0506 	ands.w	r5, r5, #6
 8003934:	d106      	bne.n	8003944 <_printf_common+0x48>
 8003936:	f104 0a19 	add.w	sl, r4, #25
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc26      	bgt.n	8003992 <_printf_common+0x96>
 8003944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	bf18      	it	ne
 800394e:	2301      	movne	r3, #1
 8003950:	0692      	lsls	r2, r2, #26
 8003952:	d42b      	bmi.n	80039ac <_printf_common+0xb0>
 8003954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003958:	4649      	mov	r1, r9
 800395a:	4638      	mov	r0, r7
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d01e      	beq.n	80039a0 <_printf_common+0xa4>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68e5      	ldr	r5, [r4, #12]
 8003966:	6832      	ldr	r2, [r6, #0]
 8003968:	f003 0306 	and.w	r3, r3, #6
 800396c:	2b04      	cmp	r3, #4
 800396e:	bf08      	it	eq
 8003970:	1aad      	subeq	r5, r5, r2
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	6922      	ldr	r2, [r4, #16]
 8003976:	bf0c      	ite	eq
 8003978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800397c:	2500      	movne	r5, #0
 800397e:	4293      	cmp	r3, r2
 8003980:	bfc4      	itt	gt
 8003982:	1a9b      	subgt	r3, r3, r2
 8003984:	18ed      	addgt	r5, r5, r3
 8003986:	2600      	movs	r6, #0
 8003988:	341a      	adds	r4, #26
 800398a:	42b5      	cmp	r5, r6
 800398c:	d11a      	bne.n	80039c4 <_printf_common+0xc8>
 800398e:	2000      	movs	r0, #0
 8003990:	e008      	b.n	80039a4 <_printf_common+0xa8>
 8003992:	2301      	movs	r3, #1
 8003994:	4652      	mov	r2, sl
 8003996:	4649      	mov	r1, r9
 8003998:	4638      	mov	r0, r7
 800399a:	47c0      	blx	r8
 800399c:	3001      	adds	r0, #1
 800399e:	d103      	bne.n	80039a8 <_printf_common+0xac>
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	3501      	adds	r5, #1
 80039aa:	e7c6      	b.n	800393a <_printf_common+0x3e>
 80039ac:	18e1      	adds	r1, r4, r3
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b6:	4422      	add	r2, r4
 80039b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c0:	3302      	adds	r3, #2
 80039c2:	e7c7      	b.n	8003954 <_printf_common+0x58>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4622      	mov	r2, r4
 80039c8:	4649      	mov	r1, r9
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d0e6      	beq.n	80039a0 <_printf_common+0xa4>
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7d9      	b.n	800398a <_printf_common+0x8e>
	...

080039d8 <_printf_i>:
 80039d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	7e0f      	ldrb	r7, [r1, #24]
 80039de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e0:	2f78      	cmp	r7, #120	; 0x78
 80039e2:	4691      	mov	r9, r2
 80039e4:	4680      	mov	r8, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	469a      	mov	sl, r3
 80039ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ee:	d807      	bhi.n	8003a00 <_printf_i+0x28>
 80039f0:	2f62      	cmp	r7, #98	; 0x62
 80039f2:	d80a      	bhi.n	8003a0a <_printf_i+0x32>
 80039f4:	2f00      	cmp	r7, #0
 80039f6:	f000 80d8 	beq.w	8003baa <_printf_i+0x1d2>
 80039fa:	2f58      	cmp	r7, #88	; 0x58
 80039fc:	f000 80a3 	beq.w	8003b46 <_printf_i+0x16e>
 8003a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a08:	e03a      	b.n	8003a80 <_printf_i+0xa8>
 8003a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a0e:	2b15      	cmp	r3, #21
 8003a10:	d8f6      	bhi.n	8003a00 <_printf_i+0x28>
 8003a12:	a101      	add	r1, pc, #4	; (adr r1, 8003a18 <_printf_i+0x40>)
 8003a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a85 	.word	0x08003a85
 8003a20:	08003a01 	.word	0x08003a01
 8003a24:	08003a01 	.word	0x08003a01
 8003a28:	08003a01 	.word	0x08003a01
 8003a2c:	08003a01 	.word	0x08003a01
 8003a30:	08003a85 	.word	0x08003a85
 8003a34:	08003a01 	.word	0x08003a01
 8003a38:	08003a01 	.word	0x08003a01
 8003a3c:	08003a01 	.word	0x08003a01
 8003a40:	08003a01 	.word	0x08003a01
 8003a44:	08003b91 	.word	0x08003b91
 8003a48:	08003ab5 	.word	0x08003ab5
 8003a4c:	08003b73 	.word	0x08003b73
 8003a50:	08003a01 	.word	0x08003a01
 8003a54:	08003a01 	.word	0x08003a01
 8003a58:	08003bb3 	.word	0x08003bb3
 8003a5c:	08003a01 	.word	0x08003a01
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003a01 	.word	0x08003a01
 8003a68:	08003a01 	.word	0x08003a01
 8003a6c:	08003b7b 	.word	0x08003b7b
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	602a      	str	r2, [r5, #0]
 8003a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0a3      	b.n	8003bcc <_printf_i+0x1f4>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	6829      	ldr	r1, [r5, #0]
 8003a88:	0606      	lsls	r6, r0, #24
 8003a8a:	f101 0304 	add.w	r3, r1, #4
 8003a8e:	d50a      	bpl.n	8003aa6 <_printf_i+0xce>
 8003a90:	680e      	ldr	r6, [r1, #0]
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	2e00      	cmp	r6, #0
 8003a96:	da03      	bge.n	8003aa0 <_printf_i+0xc8>
 8003a98:	232d      	movs	r3, #45	; 0x2d
 8003a9a:	4276      	negs	r6, r6
 8003a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa0:	485e      	ldr	r0, [pc, #376]	; (8003c1c <_printf_i+0x244>)
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e019      	b.n	8003ada <_printf_i+0x102>
 8003aa6:	680e      	ldr	r6, [r1, #0]
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aae:	bf18      	it	ne
 8003ab0:	b236      	sxthne	r6, r6
 8003ab2:	e7ef      	b.n	8003a94 <_printf_i+0xbc>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	1d19      	adds	r1, r3, #4
 8003aba:	6029      	str	r1, [r5, #0]
 8003abc:	0601      	lsls	r1, r0, #24
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0xec>
 8003ac0:	681e      	ldr	r6, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_printf_i+0xf2>
 8003ac4:	0646      	lsls	r6, r0, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0xe8>
 8003ac8:	881e      	ldrh	r6, [r3, #0]
 8003aca:	4854      	ldr	r0, [pc, #336]	; (8003c1c <_printf_i+0x244>)
 8003acc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ace:	bf0c      	ite	eq
 8003ad0:	2308      	moveq	r3, #8
 8003ad2:	230a      	movne	r3, #10
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ada:	6865      	ldr	r5, [r4, #4]
 8003adc:	60a5      	str	r5, [r4, #8]
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	bfa2      	ittt	ge
 8003ae2:	6821      	ldrge	r1, [r4, #0]
 8003ae4:	f021 0104 	bicge.w	r1, r1, #4
 8003ae8:	6021      	strge	r1, [r4, #0]
 8003aea:	b90e      	cbnz	r6, 8003af0 <_printf_i+0x118>
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	d04d      	beq.n	8003b8c <_printf_i+0x1b4>
 8003af0:	4615      	mov	r5, r2
 8003af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003af6:	fb03 6711 	mls	r7, r3, r1, r6
 8003afa:	5dc7      	ldrb	r7, [r0, r7]
 8003afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b00:	4637      	mov	r7, r6
 8003b02:	42bb      	cmp	r3, r7
 8003b04:	460e      	mov	r6, r1
 8003b06:	d9f4      	bls.n	8003af2 <_printf_i+0x11a>
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d10b      	bne.n	8003b24 <_printf_i+0x14c>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	07de      	lsls	r6, r3, #31
 8003b10:	d508      	bpl.n	8003b24 <_printf_i+0x14c>
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	6861      	ldr	r1, [r4, #4]
 8003b16:	4299      	cmp	r1, r3
 8003b18:	bfde      	ittt	le
 8003b1a:	2330      	movle	r3, #48	; 0x30
 8003b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b24:	1b52      	subs	r2, r2, r5
 8003b26:	6122      	str	r2, [r4, #16]
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	aa03      	add	r2, sp, #12
 8003b30:	4621      	mov	r1, r4
 8003b32:	4640      	mov	r0, r8
 8003b34:	f7ff fee2 	bl	80038fc <_printf_common>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d14c      	bne.n	8003bd6 <_printf_i+0x1fe>
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	b004      	add	sp, #16
 8003b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b46:	4835      	ldr	r0, [pc, #212]	; (8003c1c <_printf_i+0x244>)
 8003b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b4c:	6829      	ldr	r1, [r5, #0]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b54:	6029      	str	r1, [r5, #0]
 8003b56:	061d      	lsls	r5, r3, #24
 8003b58:	d514      	bpl.n	8003b84 <_printf_i+0x1ac>
 8003b5a:	07df      	lsls	r7, r3, #31
 8003b5c:	bf44      	itt	mi
 8003b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b62:	6023      	strmi	r3, [r4, #0]
 8003b64:	b91e      	cbnz	r6, 8003b6e <_printf_i+0x196>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f023 0320 	bic.w	r3, r3, #32
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	2310      	movs	r3, #16
 8003b70:	e7b0      	b.n	8003ad4 <_printf_i+0xfc>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	f043 0320 	orr.w	r3, r3, #32
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	2378      	movs	r3, #120	; 0x78
 8003b7c:	4828      	ldr	r0, [pc, #160]	; (8003c20 <_printf_i+0x248>)
 8003b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b82:	e7e3      	b.n	8003b4c <_printf_i+0x174>
 8003b84:	0659      	lsls	r1, r3, #25
 8003b86:	bf48      	it	mi
 8003b88:	b2b6      	uxthmi	r6, r6
 8003b8a:	e7e6      	b.n	8003b5a <_printf_i+0x182>
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	e7bb      	b.n	8003b08 <_printf_i+0x130>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	6826      	ldr	r6, [r4, #0]
 8003b94:	6961      	ldr	r1, [r4, #20]
 8003b96:	1d18      	adds	r0, r3, #4
 8003b98:	6028      	str	r0, [r5, #0]
 8003b9a:	0635      	lsls	r5, r6, #24
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	d501      	bpl.n	8003ba4 <_printf_i+0x1cc>
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	e002      	b.n	8003baa <_printf_i+0x1d2>
 8003ba4:	0670      	lsls	r0, r6, #25
 8003ba6:	d5fb      	bpl.n	8003ba0 <_printf_i+0x1c8>
 8003ba8:	8019      	strh	r1, [r3, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	4615      	mov	r5, r2
 8003bb0:	e7ba      	b.n	8003b28 <_printf_i+0x150>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	602a      	str	r2, [r5, #0]
 8003bb8:	681d      	ldr	r5, [r3, #0]
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7fc fb26 	bl	8000210 <memchr>
 8003bc4:	b108      	cbz	r0, 8003bca <_printf_i+0x1f2>
 8003bc6:	1b40      	subs	r0, r0, r5
 8003bc8:	6060      	str	r0, [r4, #4]
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd4:	e7a8      	b.n	8003b28 <_printf_i+0x150>
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d0ab      	beq.n	8003b3c <_printf_i+0x164>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d413      	bmi.n	8003c12 <_printf_i+0x23a>
 8003bea:	68e0      	ldr	r0, [r4, #12]
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	4298      	cmp	r0, r3
 8003bf0:	bfb8      	it	lt
 8003bf2:	4618      	movlt	r0, r3
 8003bf4:	e7a4      	b.n	8003b40 <_printf_i+0x168>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	47d0      	blx	sl
 8003c00:	3001      	adds	r0, #1
 8003c02:	d09b      	beq.n	8003b3c <_printf_i+0x164>
 8003c04:	3501      	adds	r5, #1
 8003c06:	68e3      	ldr	r3, [r4, #12]
 8003c08:	9903      	ldr	r1, [sp, #12]
 8003c0a:	1a5b      	subs	r3, r3, r1
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	dcf2      	bgt.n	8003bf6 <_printf_i+0x21e>
 8003c10:	e7eb      	b.n	8003bea <_printf_i+0x212>
 8003c12:	2500      	movs	r5, #0
 8003c14:	f104 0619 	add.w	r6, r4, #25
 8003c18:	e7f5      	b.n	8003c06 <_printf_i+0x22e>
 8003c1a:	bf00      	nop
 8003c1c:	08003f79 	.word	0x08003f79
 8003c20:	08003f8a 	.word	0x08003f8a

08003c24 <memcpy>:
 8003c24:	440a      	add	r2, r1
 8003c26:	4291      	cmp	r1, r2
 8003c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c2c:	d100      	bne.n	8003c30 <memcpy+0xc>
 8003c2e:	4770      	bx	lr
 8003c30:	b510      	push	{r4, lr}
 8003c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c3a:	4291      	cmp	r1, r2
 8003c3c:	d1f9      	bne.n	8003c32 <memcpy+0xe>
 8003c3e:	bd10      	pop	{r4, pc}

08003c40 <memmove>:
 8003c40:	4288      	cmp	r0, r1
 8003c42:	b510      	push	{r4, lr}
 8003c44:	eb01 0402 	add.w	r4, r1, r2
 8003c48:	d902      	bls.n	8003c50 <memmove+0x10>
 8003c4a:	4284      	cmp	r4, r0
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	d807      	bhi.n	8003c60 <memmove+0x20>
 8003c50:	1e43      	subs	r3, r0, #1
 8003c52:	42a1      	cmp	r1, r4
 8003c54:	d008      	beq.n	8003c68 <memmove+0x28>
 8003c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c5e:	e7f8      	b.n	8003c52 <memmove+0x12>
 8003c60:	4402      	add	r2, r0
 8003c62:	4601      	mov	r1, r0
 8003c64:	428a      	cmp	r2, r1
 8003c66:	d100      	bne.n	8003c6a <memmove+0x2a>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c72:	e7f7      	b.n	8003c64 <memmove+0x24>

08003c74 <_free_r>:
 8003c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c76:	2900      	cmp	r1, #0
 8003c78:	d044      	beq.n	8003d04 <_free_r+0x90>
 8003c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7e:	9001      	str	r0, [sp, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f1a1 0404 	sub.w	r4, r1, #4
 8003c86:	bfb8      	it	lt
 8003c88:	18e4      	addlt	r4, r4, r3
 8003c8a:	f000 f913 	bl	8003eb4 <__malloc_lock>
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <_free_r+0x94>)
 8003c90:	9801      	ldr	r0, [sp, #4]
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	b933      	cbnz	r3, 8003ca4 <_free_r+0x30>
 8003c96:	6063      	str	r3, [r4, #4]
 8003c98:	6014      	str	r4, [r2, #0]
 8003c9a:	b003      	add	sp, #12
 8003c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ca0:	f000 b90e 	b.w	8003ec0 <__malloc_unlock>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d908      	bls.n	8003cba <_free_r+0x46>
 8003ca8:	6825      	ldr	r5, [r4, #0]
 8003caa:	1961      	adds	r1, r4, r5
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf01      	itttt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	1949      	addeq	r1, r1, r5
 8003cb6:	6021      	streq	r1, [r4, #0]
 8003cb8:	e7ed      	b.n	8003c96 <_free_r+0x22>
 8003cba:	461a      	mov	r2, r3
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b10b      	cbz	r3, 8003cc4 <_free_r+0x50>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d9fa      	bls.n	8003cba <_free_r+0x46>
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	1855      	adds	r5, r2, r1
 8003cc8:	42a5      	cmp	r5, r4
 8003cca:	d10b      	bne.n	8003ce4 <_free_r+0x70>
 8003ccc:	6824      	ldr	r4, [r4, #0]
 8003cce:	4421      	add	r1, r4
 8003cd0:	1854      	adds	r4, r2, r1
 8003cd2:	42a3      	cmp	r3, r4
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	d1e0      	bne.n	8003c9a <_free_r+0x26>
 8003cd8:	681c      	ldr	r4, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	4421      	add	r1, r4
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	e7da      	b.n	8003c9a <_free_r+0x26>
 8003ce4:	d902      	bls.n	8003cec <_free_r+0x78>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	6003      	str	r3, [r0, #0]
 8003cea:	e7d6      	b.n	8003c9a <_free_r+0x26>
 8003cec:	6825      	ldr	r5, [r4, #0]
 8003cee:	1961      	adds	r1, r4, r5
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	bf04      	itt	eq
 8003cf4:	6819      	ldreq	r1, [r3, #0]
 8003cf6:	685b      	ldreq	r3, [r3, #4]
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	bf04      	itt	eq
 8003cfc:	1949      	addeq	r1, r1, r5
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	6054      	str	r4, [r2, #4]
 8003d02:	e7ca      	b.n	8003c9a <_free_r+0x26>
 8003d04:	b003      	add	sp, #12
 8003d06:	bd30      	pop	{r4, r5, pc}
 8003d08:	20000198 	.word	0x20000198

08003d0c <sbrk_aligned>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4e0e      	ldr	r6, [pc, #56]	; (8003d48 <sbrk_aligned+0x3c>)
 8003d10:	460c      	mov	r4, r1
 8003d12:	6831      	ldr	r1, [r6, #0]
 8003d14:	4605      	mov	r5, r0
 8003d16:	b911      	cbnz	r1, 8003d1e <sbrk_aligned+0x12>
 8003d18:	f000 f8bc 	bl	8003e94 <_sbrk_r>
 8003d1c:	6030      	str	r0, [r6, #0]
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 f8b7 	bl	8003e94 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d00a      	beq.n	8003d40 <sbrk_aligned+0x34>
 8003d2a:	1cc4      	adds	r4, r0, #3
 8003d2c:	f024 0403 	bic.w	r4, r4, #3
 8003d30:	42a0      	cmp	r0, r4
 8003d32:	d007      	beq.n	8003d44 <sbrk_aligned+0x38>
 8003d34:	1a21      	subs	r1, r4, r0
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f8ac 	bl	8003e94 <_sbrk_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d101      	bne.n	8003d44 <sbrk_aligned+0x38>
 8003d40:	f04f 34ff 	mov.w	r4, #4294967295
 8003d44:	4620      	mov	r0, r4
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	2000019c 	.word	0x2000019c

08003d4c <_malloc_r>:
 8003d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d50:	1ccd      	adds	r5, r1, #3
 8003d52:	f025 0503 	bic.w	r5, r5, #3
 8003d56:	3508      	adds	r5, #8
 8003d58:	2d0c      	cmp	r5, #12
 8003d5a:	bf38      	it	cc
 8003d5c:	250c      	movcc	r5, #12
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	4607      	mov	r7, r0
 8003d62:	db01      	blt.n	8003d68 <_malloc_r+0x1c>
 8003d64:	42a9      	cmp	r1, r5
 8003d66:	d905      	bls.n	8003d74 <_malloc_r+0x28>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	4630      	mov	r0, r6
 8003d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d74:	4e2e      	ldr	r6, [pc, #184]	; (8003e30 <_malloc_r+0xe4>)
 8003d76:	f000 f89d 	bl	8003eb4 <__malloc_lock>
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	461c      	mov	r4, r3
 8003d7e:	bb34      	cbnz	r4, 8003dce <_malloc_r+0x82>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4638      	mov	r0, r7
 8003d84:	f7ff ffc2 	bl	8003d0c <sbrk_aligned>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	d14d      	bne.n	8003e2a <_malloc_r+0xde>
 8003d8e:	6834      	ldr	r4, [r6, #0]
 8003d90:	4626      	mov	r6, r4
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d140      	bne.n	8003e18 <_malloc_r+0xcc>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	4631      	mov	r1, r6
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	eb04 0803 	add.w	r8, r4, r3
 8003da0:	f000 f878 	bl	8003e94 <_sbrk_r>
 8003da4:	4580      	cmp	r8, r0
 8003da6:	d13a      	bne.n	8003e1e <_malloc_r+0xd2>
 8003da8:	6821      	ldr	r1, [r4, #0]
 8003daa:	3503      	adds	r5, #3
 8003dac:	1a6d      	subs	r5, r5, r1
 8003dae:	f025 0503 	bic.w	r5, r5, #3
 8003db2:	3508      	adds	r5, #8
 8003db4:	2d0c      	cmp	r5, #12
 8003db6:	bf38      	it	cc
 8003db8:	250c      	movcc	r5, #12
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7ff ffa5 	bl	8003d0c <sbrk_aligned>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d02b      	beq.n	8003e1e <_malloc_r+0xd2>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	442b      	add	r3, r5
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	e00e      	b.n	8003dec <_malloc_r+0xa0>
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	1b52      	subs	r2, r2, r5
 8003dd2:	d41e      	bmi.n	8003e12 <_malloc_r+0xc6>
 8003dd4:	2a0b      	cmp	r2, #11
 8003dd6:	d916      	bls.n	8003e06 <_malloc_r+0xba>
 8003dd8:	1961      	adds	r1, r4, r5
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	6025      	str	r5, [r4, #0]
 8003dde:	bf18      	it	ne
 8003de0:	6059      	strne	r1, [r3, #4]
 8003de2:	6863      	ldr	r3, [r4, #4]
 8003de4:	bf08      	it	eq
 8003de6:	6031      	streq	r1, [r6, #0]
 8003de8:	5162      	str	r2, [r4, r5]
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	4638      	mov	r0, r7
 8003dee:	f104 060b 	add.w	r6, r4, #11
 8003df2:	f000 f865 	bl	8003ec0 <__malloc_unlock>
 8003df6:	f026 0607 	bic.w	r6, r6, #7
 8003dfa:	1d23      	adds	r3, r4, #4
 8003dfc:	1af2      	subs	r2, r6, r3
 8003dfe:	d0b6      	beq.n	8003d6e <_malloc_r+0x22>
 8003e00:	1b9b      	subs	r3, r3, r6
 8003e02:	50a3      	str	r3, [r4, r2]
 8003e04:	e7b3      	b.n	8003d6e <_malloc_r+0x22>
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	bf0c      	ite	eq
 8003e0c:	6032      	streq	r2, [r6, #0]
 8003e0e:	605a      	strne	r2, [r3, #4]
 8003e10:	e7ec      	b.n	8003dec <_malloc_r+0xa0>
 8003e12:	4623      	mov	r3, r4
 8003e14:	6864      	ldr	r4, [r4, #4]
 8003e16:	e7b2      	b.n	8003d7e <_malloc_r+0x32>
 8003e18:	4634      	mov	r4, r6
 8003e1a:	6876      	ldr	r6, [r6, #4]
 8003e1c:	e7b9      	b.n	8003d92 <_malloc_r+0x46>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 f84c 	bl	8003ec0 <__malloc_unlock>
 8003e28:	e7a1      	b.n	8003d6e <_malloc_r+0x22>
 8003e2a:	6025      	str	r5, [r4, #0]
 8003e2c:	e7de      	b.n	8003dec <_malloc_r+0xa0>
 8003e2e:	bf00      	nop
 8003e30:	20000198 	.word	0x20000198

08003e34 <_realloc_r>:
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	b921      	cbnz	r1, 8003e4a <_realloc_r+0x16>
 8003e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4611      	mov	r1, r2
 8003e46:	f7ff bf81 	b.w	8003d4c <_malloc_r>
 8003e4a:	b92a      	cbnz	r2, 8003e58 <_realloc_r+0x24>
 8003e4c:	f7ff ff12 	bl	8003c74 <_free_r>
 8003e50:	4625      	mov	r5, r4
 8003e52:	4628      	mov	r0, r5
 8003e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e58:	f000 f838 	bl	8003ecc <_malloc_usable_size_r>
 8003e5c:	4284      	cmp	r4, r0
 8003e5e:	4607      	mov	r7, r0
 8003e60:	d802      	bhi.n	8003e68 <_realloc_r+0x34>
 8003e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e66:	d812      	bhi.n	8003e8e <_realloc_r+0x5a>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f7ff ff6e 	bl	8003d4c <_malloc_r>
 8003e70:	4605      	mov	r5, r0
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0ed      	beq.n	8003e52 <_realloc_r+0x1e>
 8003e76:	42bc      	cmp	r4, r7
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	bf28      	it	cs
 8003e7e:	463a      	movcs	r2, r7
 8003e80:	f7ff fed0 	bl	8003c24 <memcpy>
 8003e84:	4631      	mov	r1, r6
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7ff fef4 	bl	8003c74 <_free_r>
 8003e8c:	e7e1      	b.n	8003e52 <_realloc_r+0x1e>
 8003e8e:	4635      	mov	r5, r6
 8003e90:	e7df      	b.n	8003e52 <_realloc_r+0x1e>
	...

08003e94 <_sbrk_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	; (8003eb0 <_sbrk_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fc ff42 	bl	8000d28 <_sbrk>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_sbrk_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_sbrk_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	200001a0 	.word	0x200001a0

08003eb4 <__malloc_lock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_lock+0x8>)
 8003eb6:	f000 b811 	b.w	8003edc <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	200001a4 	.word	0x200001a4

08003ec0 <__malloc_unlock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_unlock+0x8>)
 8003ec2:	f000 b80c 	b.w	8003ede <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	200001a4 	.word	0x200001a4

08003ecc <_malloc_usable_size_r>:
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f18      	subs	r0, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbc      	itt	lt
 8003ed6:	580b      	ldrlt	r3, [r1, r0]
 8003ed8:	18c0      	addlt	r0, r0, r3
 8003eda:	4770      	bx	lr

08003edc <__retarget_lock_acquire_recursive>:
 8003edc:	4770      	bx	lr

08003ede <__retarget_lock_release_recursive>:
 8003ede:	4770      	bx	lr

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
