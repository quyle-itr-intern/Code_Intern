
BOOTLOADER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f70  08003f70  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f78  08003f78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000010  08003f90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003f90  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1c7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9b  00000000  00000000  0002b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002188a  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c496  00000000  00000000  0004f9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9399  00000000  00000000  0005be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001251d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b4  00000000  00000000  0012522c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003f38 	.word	0x08003f38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003f38 	.word	0x08003f38

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <LVQ_GetSectorFromAddress>:

#define KEY1 		(uint32_t) 0x45670123
#define KEY2        (uint32_t) 0xCDEF89AB

uint8_t LVQ_GetSectorFromAddress(volatile uint32_t u32StartAddr)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint8_t Sector = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
	if( (u32StartAddr >= 0x08000000) && (u32StartAddr < 0x08003FFF) )
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800051a:	d306      	bcc.n	800052a <LVQ_GetSectorFromAddress+0x22>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <LVQ_GetSectorFromAddress+0xc8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d802      	bhi.n	800052a <LVQ_GetSectorFromAddress+0x22>
			Sector = LVQ_FLASH_SECTOR_0;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e04b      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08004000) && (u32StartAddr < 0x08007FFF) )
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <LVQ_GetSectorFromAddress+0xcc>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d306      	bcc.n	8000540 <LVQ_GetSectorFromAddress+0x38>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <LVQ_GetSectorFromAddress+0xd0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d802      	bhi.n	8000540 <LVQ_GetSectorFromAddress+0x38>
			Sector = LVQ_FLASH_SECTOR_1;
 800053a:	2301      	movs	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e040      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08008000) && (u32StartAddr < 0x0800BFFF) )
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a26      	ldr	r2, [pc, #152]	; (80005dc <LVQ_GetSectorFromAddress+0xd4>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d306      	bcc.n	8000556 <LVQ_GetSectorFromAddress+0x4e>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <LVQ_GetSectorFromAddress+0xd8>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d802      	bhi.n	8000556 <LVQ_GetSectorFromAddress+0x4e>
			Sector = LVQ_FLASH_SECTOR_2;
 8000550:	2302      	movs	r3, #2
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e035      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x0800C000) && (u32StartAddr < 0x0800FFFF) )
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <LVQ_GetSectorFromAddress+0xdc>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d306      	bcc.n	800056c <LVQ_GetSectorFromAddress+0x64>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <LVQ_GetSectorFromAddress+0xe0>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d202      	bcs.n	800056c <LVQ_GetSectorFromAddress+0x64>
			Sector = LVQ_FLASH_SECTOR_3;
 8000566:	2303      	movs	r3, #3
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e02a      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08010000) && (u32StartAddr < 0x0801FFFF) )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <LVQ_GetSectorFromAddress+0xe0>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d906      	bls.n	8000582 <LVQ_GetSectorFromAddress+0x7a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <LVQ_GetSectorFromAddress+0xe4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d202      	bcs.n	8000582 <LVQ_GetSectorFromAddress+0x7a>
			Sector = LVQ_FLASH_SECTOR_4;
 800057c:	2304      	movs	r3, #4
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e01f      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08020000) && (u32StartAddr < 0x0803FFFF) )
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a19      	ldr	r2, [pc, #100]	; (80005ec <LVQ_GetSectorFromAddress+0xe4>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d906      	bls.n	8000598 <LVQ_GetSectorFromAddress+0x90>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <LVQ_GetSectorFromAddress+0xe8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d202      	bcs.n	8000598 <LVQ_GetSectorFromAddress+0x90>
			Sector = LVQ_FLASH_SECTOR_5;
 8000592:	2305      	movs	r3, #5
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e014      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08040000) && (u32StartAddr < 0x0805FFFF) )
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <LVQ_GetSectorFromAddress+0xe8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d906      	bls.n	80005ae <LVQ_GetSectorFromAddress+0xa6>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <LVQ_GetSectorFromAddress+0xec>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d202      	bcs.n	80005ae <LVQ_GetSectorFromAddress+0xa6>
			Sector = LVQ_FLASH_SECTOR_6;
 80005a8:	2306      	movs	r3, #6
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e009      	b.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
	else if( (u32StartAddr >= 0x08060000) && (u32StartAddr < 0x0807FFFF) )
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <LVQ_GetSectorFromAddress+0xec>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d905      	bls.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <LVQ_GetSectorFromAddress+0xf0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d201      	bcs.n	80005c2 <LVQ_GetSectorFromAddress+0xba>
			Sector = LVQ_FLASH_SECTOR_7;
 80005be:	2307      	movs	r3, #7
 80005c0:	73fb      	strb	r3, [r7, #15]
	return Sector;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	08003ffe 	.word	0x08003ffe
 80005d4:	08004000 	.word	0x08004000
 80005d8:	08007ffe 	.word	0x08007ffe
 80005dc:	08008000 	.word	0x08008000
 80005e0:	0800bffe 	.word	0x0800bffe
 80005e4:	0800c000 	.word	0x0800c000
 80005e8:	0800ffff 	.word	0x0800ffff
 80005ec:	0801ffff 	.word	0x0801ffff
 80005f0:	0803ffff 	.word	0x0803ffff
 80005f4:	0805ffff 	.word	0x0805ffff
 80005f8:	0807ffff 	.word	0x0807ffff

080005fc <LVQ_GetAddressFromSector>:

uint32_t LVQ_GetAddressFromSector(uint8_t u8Sector)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint32_t Address = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
	if( u8Sector == 0 )
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <LVQ_GetAddressFromSector+0x1c>
			Address = 0x08000000;
 8000610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e028      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 1 )
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d102      	bne.n	8000624 <LVQ_GetAddressFromSector+0x28>
			Address = 0x08004000;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <LVQ_GetAddressFromSector+0x7c>)
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e022      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 2 )
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d102      	bne.n	8000630 <LVQ_GetAddressFromSector+0x34>
			Address = 0x08008000;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <LVQ_GetAddressFromSector+0x80>)
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e01c      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 3 )
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d102      	bne.n	800063c <LVQ_GetAddressFromSector+0x40>
			Address = 0x0800C000;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <LVQ_GetAddressFromSector+0x84>)
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e016      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 4 )
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b04      	cmp	r3, #4
 8000640:	d102      	bne.n	8000648 <LVQ_GetAddressFromSector+0x4c>
			Address = 0x08010000;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <LVQ_GetAddressFromSector+0x88>)
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e010      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 5 )
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b05      	cmp	r3, #5
 800064c:	d102      	bne.n	8000654 <LVQ_GetAddressFromSector+0x58>
			Address = 0x08020000;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <LVQ_GetAddressFromSector+0x8c>)
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e00a      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 6 )
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d102      	bne.n	8000660 <LVQ_GetAddressFromSector+0x64>
			Address = 0x08040000;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <LVQ_GetAddressFromSector+0x90>)
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e004      	b.n	800066a <LVQ_GetAddressFromSector+0x6e>
	else if( u8Sector == 7 )
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b07      	cmp	r3, #7
 8000664:	d101      	bne.n	800066a <LVQ_GetAddressFromSector+0x6e>
			Address = 0x08060000;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <LVQ_GetAddressFromSector+0x94>)
 8000668:	60fb      	str	r3, [r7, #12]
	return Address;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	08004000 	.word	0x08004000
 800067c:	08008000 	.word	0x08008000
 8000680:	0800c000 	.word	0x0800c000
 8000684:	08010000 	.word	0x08010000
 8000688:	08020000 	.word	0x08020000
 800068c:	08040000 	.word	0x08040000
 8000690:	08060000 	.word	0x08060000

08000694 <LVQ_Flash_Unlock>:

void LVQ_Flash_Unlock(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
		FLASH->KEYR = KEY1;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LVQ_Flash_Unlock+0x1c>)
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <LVQ_Flash_Unlock+0x20>)
 800069c:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = KEY2;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <LVQ_Flash_Unlock+0x1c>)
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <LVQ_Flash_Unlock+0x24>)
 80006a2:	605a      	str	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023c00 	.word	0x40023c00
 80006b4:	45670123 	.word	0x45670123
 80006b8:	cdef89ab 	.word	0xcdef89ab

080006bc <LVQ_Flash_Erase>:

LVQ_Flash_Status_t LVQ_Flash_Erase(volatile uint32_t u32StartAddr)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 80006c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006c8:	60fb      	str	r3, [r7, #12]
	/* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 80006ca:	e007      	b.n	80006dc <LVQ_Flash_Erase+0x20>
	{
		if (--Timeout == 0x00)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <LVQ_Flash_Erase+0x20>
		{
			return LVQ_Flash_Status_Errors;
 80006d8:	2300      	movs	r3, #0
 80006da:	e065      	b.n	80007a8 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR&FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout )
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e8:	d102      	bne.n	80006f0 <LVQ_Flash_Erase+0x34>
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1ed      	bne.n	80006cc <LVQ_Flash_Erase+0x10>
		}
	}
	/* Wating for Bsy bit */
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) ==  FLASH_CR_LOCK)
 80006f0:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80006fc:	d101      	bne.n	8000702 <LVQ_Flash_Erase+0x46>
	{
			LVQ_Flash_Unlock();
 80006fe:	f7ff ffc9 	bl	8000694 <LVQ_Flash_Unlock>
	}

	FLASH->CR |= FLASH_PSIZE_WORD;
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070c:	6113      	str	r3, [r2, #16]
	/* Set the SER bit in the FLASH_CR register */
	FLASH->CR |= FLASH_CR_SER;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6113      	str	r3, [r2, #16]
	/* Program the FLASH_CR register to select a sector to erase */
	FLASH->CR |= LVQ_GetSectorFromAddress(u32StartAddr) << 3;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fef3 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000722:	4603      	mov	r3, r0
 8000724:	00da      	lsls	r2, r3, #3
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4611      	mov	r1, r2
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6113      	str	r3, [r2, #16]
	/* Set the STRT bit in the FLASH CR register */
	FLASH->CR |= FLASH_CR_STRT;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073c:	6113      	str	r3, [r2, #16]
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 800073e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000742:	60fb      	str	r3, [r7, #12]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000744:	e007      	b.n	8000756 <LVQ_Flash_Erase+0x9a>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3b01      	subs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <LVQ_Flash_Erase+0x9a>
		{
			return LVQ_Flash_Status_Errors;
 8000752:	2300      	movs	r3, #0
 8000754:	e028      	b.n	80007a8 <LVQ_Flash_Erase+0xec>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d102      	bne.n	800076a <LVQ_Flash_Erase+0xae>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ed      	bne.n	8000746 <LVQ_Flash_Erase+0x8a>
		}
	}

	/* Check FLASH End of Operation flag  */
	if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <LVQ_Flash_Erase+0xc6>
	{
			/* Clear FLASH End of Operation pending bit */
			FLASH->SR &= ~FLASH_FLAG_EOP;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	60d3      	str	r3, [r2, #12]
	}
	/* Clear SER bit in the FLASH_CR register */
	FLASH->CR &= FLASH_CR_SER;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	6113      	str	r3, [r2, #16]
	/* Clear STRT bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_STRT;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 8000794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000798:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <LVQ_Flash_Erase+0xf4>)
 80007a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007a4:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023c00 	.word	0x40023c00

080007b4 <LVQ_Flash_Write>:

LVQ_Flash_Status_t LVQ_Flash_Write(volatile uint32_t u32StartAddr, uint32_t* u32BufferWrite, uint32_t u32Length)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	uint32_t u32Count = 0u;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
	uint32_t Timeout = LVQ_FLASH_TIMEOUT;
 80007c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007c8:	613b      	str	r3, [r7, #16]
	/* Check input parameters */
	if( (u32BufferWrite == 0u) || (u32Length == 0u) )
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <LVQ_Flash_Write+0x22>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d109      	bne.n	80007ea <LVQ_Flash_Write+0x36>
	{
		 return LVQ_Flash_Status_Errors;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e05d      	b.n	8000896 <LVQ_Flash_Write+0xe2>

	/* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3b01      	subs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <LVQ_Flash_Write+0x36>
		{
			return LVQ_Flash_Status_Errors;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e055      	b.n	8000896 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <LVQ_Flash_Write+0xec>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f6:	d102      	bne.n	80007fe <LVQ_Flash_Write+0x4a>
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ed      	bne.n	80007da <LVQ_Flash_Write+0x26>
		}
	}
	/* Check unlock sequences */
	if( (FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK )
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800080a:	d101      	bne.n	8000810 <LVQ_Flash_Write+0x5c>
	{
		LVQ_Flash_Unlock();
 800080c:	f7ff ff42 	bl	8000694 <LVQ_Flash_Unlock>
	}
	FLASH->CR |= FLASH_PSIZE_WORD;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6113      	str	r3, [r2, #16]
	/* Write FLASH CR_PG to 1 */
	FLASH->CR |= FLASH_CR_PG;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6113      	str	r3, [r2, #16]
	/* Perform word write at the desired address */
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00c      	b.n	8000848 <LVQ_Flash_Write+0x94>
	{
		*(__IO uint32_t*) (u32StartAddr + u32Count*4u) = *(uint32_t*) (u32BufferWrite + u32Count);
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	0091      	lsls	r1, r2, #2
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	440a      	add	r2, r1
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6013      	str	r3, [r2, #0]
	for(u32Count = 0; u32Count < u32Length; u32Count++ )
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3ee      	bcc.n	800082e <LVQ_Flash_Write+0x7a>
	}
	/* Wait for the BSY bit to be reset */
	Timeout = LVQ_FLASH_TIMEOUT;
 8000850:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000854:	613b      	str	r3, [r7, #16]
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000856:	e007      	b.n	8000868 <LVQ_Flash_Write+0xb4>
	{
		/* Wating for Bsy bit */
		if (--Timeout == 0x00)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	3b01      	subs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <LVQ_Flash_Write+0xb4>
		{
			return LVQ_Flash_Status_Errors;
 8000864:	2300      	movs	r3, #0
 8000866:	e016      	b.n	8000896 <LVQ_Flash_Write+0xe2>
	while ( ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && Timeout)
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000874:	d102      	bne.n	800087c <LVQ_Flash_Write+0xc8>
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1ed      	bne.n	8000858 <LVQ_Flash_Write+0xa4>
		}
	}
	/* Clear PG bit in the FLASH CR register */
	FLASH->CR &= FLASH_CR_PG;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <LVQ_Flash_Write+0xec>)
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	6113      	str	r3, [r2, #16]

	/* Set the LOCK Bit to lock the FLASH Registers access */
	FLASH->CR |= FLASH_CR_LOCK;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <LVQ_Flash_Write+0xec>)
 800088e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000892:	6113      	str	r3, [r2, #16]

	return LVQ_Flash_Status_Ok;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db12      	blt.n	80008dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	490a      	ldr	r1, [pc, #40]	; (80008e8 <__NVIC_DisableIRQ+0x44>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	3320      	adds	r3, #32
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
}
 80008d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
}
 80008da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <HAL_UART_RxCpltCallback>:

uint8_t cInternalBufferData[32];
field_hex_files_t State;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_UART_RxCpltCallback+0x30>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10a      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x28>
  {
	lvq_usart_callback(rx_data);
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_UART_RxCpltCallback+0x34>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_UART_RxCpltCallback+0x38>)
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	4610      	mov	r0, r2
 8000908:	4798      	blx	r3
	HAL_UART_Receive_IT(USART_UD,&rx_data,1);
 800090a:	2201      	movs	r2, #1
 800090c:	4905      	ldr	r1, [pc, #20]	; (8000924 <HAL_UART_RxCpltCallback+0x38>)
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_UART_RxCpltCallback+0x3c>)
 8000910:	f002 fb4e 	bl	8002fb0 <HAL_UART_Receive_IT>
  }
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40011000 	.word	0x40011000
 8000920:	20000048 	.word	0x20000048
 8000924:	2000004c 	.word	0x2000004c
 8000928:	20000124 	.word	0x20000124

0800092c <lvq_ota_init>:
		uint8_t Index = 0;
		uint32_t MaxSizeFlash = 507904;
#endif

void lvq_ota_init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(USART_UD,&rx_data,1);
 8000930:	2201      	movs	r2, #1
 8000932:	4903      	ldr	r1, [pc, #12]	; (8000940 <lvq_ota_init+0x14>)
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <lvq_ota_init+0x18>)
 8000936:	f002 fb3b 	bl	8002fb0 <HAL_UART_Receive_IT>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000004c 	.word	0x2000004c
 8000944:	20000124 	.word	0x20000124

08000948 <lvq_ota_run>:

volatile uint8_t u8LineReceivedFlag = FALSE;      /* Flag to check if the NodeMCU finished sending a complete line */
volatile uint8_t u8FinishReceiveFlag = FALSE;     /* Flag to check if NodeMCU finished sending the code to run application code */

void lvq_ota_run(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    while (u8FinishReceiveFlag == FALSE)
 800094c:	e03e      	b.n	80009cc <lvq_ota_run+0x84>
    {
        if (u8LineReceivedFlag == TRUE)
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <lvq_ota_run+0xa0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b01      	cmp	r3, #1
 8000956:	d139      	bne.n	80009cc <lvq_ota_run+0x84>
        {
            switch (u8RecieveBuffer[u8RecieveCounter])
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <lvq_ota_run+0xa4>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <lvq_ota_run+0xa8>)
 8000962:	5c9b      	ldrb	r3, [r3, r2]
 8000964:	2b58      	cmp	r3, #88	; 0x58
 8000966:	d002      	beq.n	800096e <lvq_ota_run+0x26>
 8000968:	2b59      	cmp	r3, #89	; 0x59
 800096a:	d00a      	beq.n	8000982 <lvq_ota_run+0x3a>
					}
					u8RecieveCounter = 0;
					break;
				}
				default:
						break;
 800096c:	e02b      	b.n	80009c6 <lvq_ota_run+0x7e>
					u8RecieveCounter = 0;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <lvq_ota_run+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000974:	230a      	movs	r3, #10
 8000976:	2201      	movs	r2, #1
 8000978:	491e      	ldr	r1, [pc, #120]	; (80009f4 <lvq_ota_run+0xac>)
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <lvq_ota_run+0xb0>)
 800097c:	f002 fa86 	bl	8002e8c <HAL_UART_Transmit>
					break;
 8000980:	e021      	b.n	80009c6 <lvq_ota_run+0x7e>
					if( handle_data_hex(u8RecieveBuffer, u8RecieveCounter) == STATE_NO_ERRORS )
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <lvq_ota_run+0xa4>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <lvq_ota_run+0xa8>)
 800098e:	f000 fa29 	bl	8000de4 <handle_data_hex>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d112      	bne.n	80009be <lvq_ota_run+0x76>
						write_flash_memory();
 8000998:	f000 f91a 	bl	8000bd0 <write_flash_memory>
						if( u32AddressWriteFlash )
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <lvq_ota_run+0xb4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <lvq_ota_run+0x6a>
							HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 80009a4:	230a      	movs	r3, #10
 80009a6:	2201      	movs	r2, #1
 80009a8:	4912      	ldr	r1, [pc, #72]	; (80009f4 <lvq_ota_run+0xac>)
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <lvq_ota_run+0xb0>)
 80009ac:	f002 fa6e 	bl	8002e8c <HAL_UART_Transmit>
 80009b0:	e005      	b.n	80009be <lvq_ota_run+0x76>
							HAL_UART_Transmit(USART_UD, OTA_CANCEL_UPDATE, 1, 100);
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	2201      	movs	r2, #1
 80009b6:	4912      	ldr	r1, [pc, #72]	; (8000a00 <lvq_ota_run+0xb8>)
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <lvq_ota_run+0xb0>)
 80009ba:	f002 fa67 	bl	8002e8c <HAL_UART_Transmit>
					u8RecieveCounter = 0;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <lvq_ota_run+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
					break;
 80009c4:	bf00      	nop
            }
            u8LineReceivedFlag = FALSE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <lvq_ota_run+0xa0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    while (u8FinishReceiveFlag == FALSE)
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <lvq_ota_run+0xbc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0bb      	beq.n	800094e <lvq_ota_run+0x6>
        }
    }
    HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 80009d6:	230a      	movs	r3, #10
 80009d8:	2201      	movs	r2, #1
 80009da:	4906      	ldr	r1, [pc, #24]	; (80009f4 <lvq_ota_run+0xac>)
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <lvq_ota_run+0xb0>)
 80009de:	f002 fa55 	bl	8002e8c <HAL_UART_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000120 	.word	0x20000120
 80009ec:	200000b2 	.word	0x200000b2
 80009f0:	20000080 	.word	0x20000080
 80009f4:	08003f50 	.word	0x08003f50
 80009f8:	20000124 	.word	0x20000124
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	08003f54 	.word	0x08003f54
 8000a04:	20000121 	.word	0x20000121

08000a08 <lvq_ota_char_received>:

void lvq_ota_char_received(uint8_t rec)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  u8RecieveBuffer[u8RecieveCounter] = rec;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <lvq_ota_char_received+0x58>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <lvq_ota_char_received+0x5c>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	5453      	strb	r3, [r2, r1]
  switch (rec)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b59      	cmp	r3, #89	; 0x59
 8000a24:	dc02      	bgt.n	8000a2c <lvq_ota_char_received+0x24>
 8000a26:	2b58      	cmp	r3, #88	; 0x58
 8000a28:	da03      	bge.n	8000a32 <lvq_ota_char_received+0x2a>
 8000a2a:	e00a      	b.n	8000a42 <lvq_ota_char_received+0x3a>
 8000a2c:	2b5a      	cmp	r3, #90	; 0x5a
 8000a2e:	d004      	beq.n	8000a3a <lvq_ota_char_received+0x32>
 8000a30:	e007      	b.n	8000a42 <lvq_ota_char_received+0x3a>
  {
	case OTA_DATA_START_CHAR:
	case OTA_LINE_BREAK_CHAR:
	  u8LineReceivedFlag = TRUE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <lvq_ota_char_received+0x60>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
 	  break;
 8000a38:	e00b      	b.n	8000a52 <lvq_ota_char_received+0x4a>
	case OTA_DATA_END_CHAR:
	  u8FinishReceiveFlag = TRUE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <lvq_ota_char_received+0x64>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
	  break;
 8000a40:	e007      	b.n	8000a52 <lvq_ota_char_received+0x4a>
	default:
	  u8RecieveCounter++;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <lvq_ota_char_received+0x58>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <lvq_ota_char_received+0x58>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	  break;
 8000a50:	bf00      	nop
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200000b2 	.word	0x200000b2
 8000a64:	20000080 	.word	0x20000080
 8000a68:	20000120 	.word	0x20000120
 8000a6c:	20000121 	.word	0x20000121

08000a70 <lvq_ota_check_update>:

void lvq_ota_check_update(uint8_t rec)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  switch(rec)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b55      	cmp	r3, #85	; 0x55
 8000a7e:	d006      	beq.n	8000a8e <lvq_ota_check_update+0x1e>
 8000a80:	2b55      	cmp	r3, #85	; 0x55
 8000a82:	dc3e      	bgt.n	8000b02 <lvq_ota_check_update+0x92>
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d00c      	beq.n	8000aa2 <lvq_ota_check_update+0x32>
 8000a88:	2b53      	cmp	r3, #83	; 0x53
 8000a8a:	d045      	beq.n	8000b18 <lvq_ota_check_update+0xa8>
 8000a8c:	e039      	b.n	8000b02 <lvq_ota_check_update+0x92>
  {
	case OTA_UPDATE_FW:
	{
	  flag_ota_update = TRUE;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <lvq_ota_check_update+0xb4>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000a94:	230a      	movs	r3, #10
 8000a96:	2201      	movs	r2, #1
 8000a98:	4923      	ldr	r1, [pc, #140]	; (8000b28 <lvq_ota_check_update+0xb8>)
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <lvq_ota_check_update+0xbc>)
 8000a9c:	f002 f9f6 	bl	8002e8c <HAL_UART_Transmit>
	  break;
 8000aa0:	e03b      	b.n	8000b1a <lvq_ota_check_update+0xaa>
	}
	case OTA_CHECK_SIZE_FLASH:
	  break;
	case '\n':
	{
		for( uint8_t i = 0; i < Index; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e010      	b.n	8000aca <lvq_ota_check_update+0x5a>
			SizeCurrent = SizeCurrent * 10 + ( Size[i] - 48 );
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <lvq_ota_check_update+0xc0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <lvq_ota_check_update+0xc4>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	440b      	add	r3, r1
 8000abe:	3b30      	subs	r3, #48	; 0x30
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <lvq_ota_check_update+0xc0>)
 8000ac2:	6013      	str	r3, [r2, #0]
		for( uint8_t i = 0; i < Index; i++)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <lvq_ota_check_update+0xc8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	7bfa      	ldrb	r2, [r7, #15]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d3e9      	bcc.n	8000aa8 <lvq_ota_check_update+0x38>
		if( SizeCurrent > MaxSizeFlash )
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <lvq_ota_check_update+0xc0>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <lvq_ota_check_update+0xcc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d906      	bls.n	8000aee <lvq_ota_check_update+0x7e>
			HAL_UART_Transmit(USART_UD, OTA_CANCEL_UPDATE, 1, 10);
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4916      	ldr	r1, [pc, #88]	; (8000b40 <lvq_ota_check_update+0xd0>)
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <lvq_ota_check_update+0xbc>)
 8000ae8:	f002 f9d0 	bl	8002e8c <HAL_UART_Transmit>
		else
		{
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
			flag_size_flash = TRUE;
		}
		break;
 8000aec:	e015      	b.n	8000b1a <lvq_ota_check_update+0xaa>
			HAL_UART_Transmit(USART_UD, OTA_READ_CONFIRM_CHAR, 1, 10);
 8000aee:	230a      	movs	r3, #10
 8000af0:	2201      	movs	r2, #1
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <lvq_ota_check_update+0xb8>)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <lvq_ota_check_update+0xbc>)
 8000af6:	f002 f9c9 	bl	8002e8c <HAL_UART_Transmit>
			flag_size_flash = TRUE;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <lvq_ota_check_update+0xd4>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
		break;
 8000b00:	e00b      	b.n	8000b1a <lvq_ota_check_update+0xaa>
	}
	default:
	{
		Size[Index++] = rec;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <lvq_ota_check_update+0xc8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	b2d1      	uxtb	r1, r2
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <lvq_ota_check_update+0xc8>)
 8000b0c:	7011      	strb	r1, [r2, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <lvq_ota_check_update+0xc4>)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	5453      	strb	r3, [r2, r1]
		break;
 8000b16:	e000      	b.n	8000b1a <lvq_ota_check_update+0xaa>
	  break;
 8000b18:	bf00      	nop
	}
   }
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	08003f50 	.word	0x08003f50
 8000b2c:	20000124 	.word	0x20000124
 8000b30:	20000074 	.word	0x20000074
 8000b34:	20000078 	.word	0x20000078
 8000b38:	2000007e 	.word	0x2000007e
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08003f54 	.word	0x08003f54
 8000b44:	2000002d 	.word	0x2000002d

08000b48 <lvq_usart_set_callback>:

void lvq_usart_set_callback(void* cb)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  lvq_usart_callback = cb;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <lvq_usart_set_callback+0x1c>)
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000048 	.word	0x20000048

08000b68 <lvq_ota_setcallback_checkupdatefirmware>:

void lvq_ota_setcallback_checkupdatefirmware(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  lvq_usart_set_callback(lvq_ota_check_update);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <lvq_ota_setcallback_checkupdatefirmware+0x10>)
 8000b6e:	f7ff ffeb 	bl	8000b48 <lvq_usart_set_callback>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08000a71 	.word	0x08000a71

08000b7c <lvq_ota_setcallback_updatefirmware>:

void lvq_ota_setcallback_updatefirmware(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  lvq_usart_set_callback(lvq_ota_char_received);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <lvq_ota_setcallback_updatefirmware+0x10>)
 8000b82:	f7ff ffe1 	bl	8000b48 <lvq_usart_set_callback>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08000a09 	.word	0x08000a09

08000b90 <get_high_address>:

void get_high_address(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
	uint32_t address = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
	address |= hex_data.u8Data[0] << 8 | hex_data.u8Data[1];
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <get_high_address+0x38>)
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <get_high_address+0x38>)
 8000ba2:	7952      	ldrb	r2, [r2, #5]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	607b      	str	r3, [r7, #4]
	u32AddressWriteFlash = 0x08000000 | ( address << 16); /* Address Save Firmware Update */
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <get_high_address+0x3c>)
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000030 	.word	0x20000030
 8000bcc:	2000011c 	.word	0x2000011c

08000bd0 <write_flash_memory>:

void write_flash_memory(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	uint8_t CC, i;
	uint8_t u8data_rawCounter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71bb      	strb	r3, [r7, #6]

	switch (hex_data.u8RecordType)
 8000bda:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <write_flash_memory+0x10c>)
 8000bdc:	78db      	ldrb	r3, [r3, #3]
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d075      	beq.n	8000cce <write_flash_memory+0xfe>
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	dc75      	bgt.n	8000cd2 <write_flash_memory+0x102>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <write_flash_memory+0x24>
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d171      	bne.n	8000cd2 <write_flash_memory+0x102>
	{
		case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
		{	get_high_address();
 8000bee:	f7ff ffcf 	bl	8000b90 <get_high_address>
			break;
 8000bf2:	e06f      	b.n	8000cd4 <write_flash_memory+0x104>
			break;
		}
		case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
		{
			/* Get Character Count */
			CC = hex_data.u8ByteCount;
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <write_flash_memory+0x10c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	717b      	strb	r3, [r7, #5]
			u32SizeDataFirmware += CC;
 8000bfa:	797a      	ldrb	r2, [r7, #5]
 8000bfc:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <write_flash_memory+0x110>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <write_flash_memory+0x110>)
 8000c04:	6013      	str	r3, [r2, #0]

			/* Set full address */
			u32AddressWriteFlash = u32AddressWriteFlash & 0xFFFF0000;
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <write_flash_memory+0x114>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	4a35      	ldr	r2, [pc, #212]	; (8000ce4 <write_flash_memory+0x114>)
 8000c10:	6013      	str	r3, [r2, #0]
			u32AddressWriteFlash = u32AddressWriteFlash 	|
								 ( hex_data.u8Addr[0] << 8) |
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <write_flash_memory+0x10c>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	461a      	mov	r2, r3
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 8000c1a:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <write_flash_memory+0x114>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
								 ( hex_data.u8Addr[1] );
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <write_flash_memory+0x10c>)
 8000c22:	7892      	ldrb	r2, [r2, #2]
								 ( hex_data.u8Addr[0] << 8) |
 8000c24:	4313      	orrs	r3, r2
			u32AddressWriteFlash = u32AddressWriteFlash 	|
 8000c26:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <write_flash_memory+0x114>)
 8000c28:	6013      	str	r3, [r2, #0]

			/* Check address wite flash data */
			if( u32AddressWriteFlash < 0x08004000 )
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <write_flash_memory+0x114>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <write_flash_memory+0x118>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d203      	bcs.n	8000c3c <write_flash_memory+0x6c>
			{
				u32AddressWriteFlash = 0;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <write_flash_memory+0x114>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
				return;
 8000c3a:	e04b      	b.n	8000cd4 <write_flash_memory+0x104>
			}

			/* Get the data of the record */
			for (i = 0; i < CC; i += 2)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e018      	b.n	8000c74 <write_flash_memory+0xa4>
			{
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <write_flash_memory+0x10c>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b21a      	sxth	r2, r3
													   ( hex_data.u8Data[i] );
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4922      	ldr	r1, [pc, #136]	; (8000cdc <write_flash_memory+0x10c>)
 8000c54:	440b      	add	r3, r1
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	b21b      	sxth	r3, r3
				u32DataWriteFlash[u8data_rawCounter] = ( hex_data.u8Data[i+1] << 8) |
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	b291      	uxth	r1, r2
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <write_flash_memory+0x11c>)
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	     		u8data_rawCounter++;
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71bb      	strb	r3, [r7, #6]
			for (i = 0; i < CC; i += 2)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3302      	adds	r3, #2
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3e2      	bcc.n	8000c42 <write_flash_memory+0x72>
			}

			if (CC % 2 != 0)
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d018      	beq.n	8000cba <write_flash_memory+0xea>
			{
				u32DataWriteFlash[u8data_rawCounter] = 0xFF00 | ( hex_data.u8Data[CC-1] );
 8000c88:	797b      	ldrb	r3, [r7, #5]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <write_flash_memory+0x10c>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	b291      	uxth	r1, r2
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <write_flash_memory+0x11c>)
 8000ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4 + 1);
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <write_flash_memory+0x114>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <write_flash_memory+0x11c>)
 8000cb4:	f7ff fd7e 	bl	80007b4 <LVQ_Flash_Write>
			}
			else
			{
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
			}
			break;
 8000cb8:	e00c      	b.n	8000cd4 <write_flash_memory+0x104>
				LVQ_Flash_Write(u32AddressWriteFlash, (uint32_t *)u32DataWriteFlash, CC / 4);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <write_flash_memory+0x114>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4909      	ldr	r1, [pc, #36]	; (8000cec <write_flash_memory+0x11c>)
 8000cc8:	f7ff fd74 	bl	80007b4 <LVQ_Flash_Write>
			break;
 8000ccc:	e002      	b.n	8000cd4 <write_flash_memory+0x104>
			break;
 8000cce:	bf00      	nop
 8000cd0:	e000      	b.n	8000cd4 <write_flash_memory+0x104>
		}
		default:
				break;
 8000cd2:	bf00      	nop
	}
}
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000030 	.word	0x20000030
 8000ce0:	200000b4 	.word	0x200000b4
 8000ce4:	2000011c 	.word	0x2000011c
 8000ce8:	08004000 	.word	0x08004000
 8000cec:	200000b8 	.word	0x200000b8

08000cf0 <parse_element>:

void parse_element(uint8_t *buff, uint8_t u8length)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08d      	sub	sp, #52	; 0x34
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t u8count_array = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t u8temp_buffer[32];

    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000d08:	e05e      	b.n	8000dc8 <parse_element+0xd8>
    {
        if(buff[u8Count] >= '0' && buff[u8Count] <= '9')
 8000d0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b2f      	cmp	r3, #47	; 0x2f
 8000d16:	d914      	bls.n	8000d42 <parse_element+0x52>
 8000d18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b39      	cmp	r3, #57	; 0x39
 8000d24:	d80d      	bhi.n	8000d42 <parse_element+0x52>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 48;
 8000d26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d34:	3a30      	subs	r2, #48	; 0x30
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	3330      	adds	r3, #48	; 0x30
 8000d3a:	443b      	add	r3, r7
 8000d3c:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000d40:	e01a      	b.n	8000d78 <parse_element+0x88>
        }
        else if(buff[u8Count] >= 'A' && buff[u8Count] <= 'F')
 8000d42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b40      	cmp	r3, #64	; 0x40
 8000d4e:	d941      	bls.n	8000dd4 <parse_element+0xe4>
 8000d50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b46      	cmp	r3, #70	; 0x46
 8000d5c:	d83a      	bhi.n	8000dd4 <parse_element+0xe4>
        {
        	u8temp_buffer[u8Count] = buff[u8Count] - 65 + 10;
 8000d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d6c:	3a37      	subs	r2, #55	; 0x37
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	3330      	adds	r3, #48	; 0x30
 8000d72:	443b      	add	r3, r7
 8000d74:	f803 2c24 	strb.w	r2, [r3, #-36]
        else
        {
           return;
        }

        if(u8Count % 2 != 0)
 8000d78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01b      	beq.n	8000dbe <parse_element+0xce>
        {
            cInternalBufferData[u8count_array] = ((u8temp_buffer[u8Count - 1] << 4) | (u8temp_buffer[u8Count]));
 8000d86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	3330      	adds	r3, #48	; 0x30
 8000d8e:	443b      	add	r3, r7
 8000d90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	b25a      	sxtb	r2, r3
 8000d98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d9c:	3330      	adds	r3, #48	; 0x30
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dae:	b2d1      	uxtb	r1, r2
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <parse_element+0xf0>)
 8000db2:	54d1      	strb	r1, [r2, r3]
            u8count_array++;
 8000db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db8:	3301      	adds	r3, #1
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(uint8_t u8Count = 0U; u8Count < u8length; u8Count++)
 8000dbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000dc8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d39b      	bcc.n	8000d0a <parse_element+0x1a>
 8000dd2:	e000      	b.n	8000dd6 <parse_element+0xe6>
           return;
 8000dd4:	bf00      	nop
        }
    }
}
 8000dd6:	3734      	adds	r7, #52	; 0x34
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000050 	.word	0x20000050

08000de4 <handle_data_hex>:

uint8_t handle_data_hex(uint8_t* pData, uint16_t Size)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
	uint8_t u8CaculChecksum = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

	State = START_CODE;
 8000df4:	4b68      	ldr	r3, [pc, #416]	; (8000f98 <handle_data_hex+0x1b4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	e0c0      	b.n	8000f82 <handle_data_hex+0x19e>
	{
		switch(State)
 8000e00:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <handle_data_hex+0x1b4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b06      	cmp	r3, #6
 8000e06:	f200 80b7 	bhi.w	8000f78 <handle_data_hex+0x194>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <handle_data_hex+0x2c>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e2d 	.word	0x08000e2d
 8000e14:	08000e45 	.word	0x08000e45
 8000e18:	08000e67 	.word	0x08000e67
 8000e1c:	08000e91 	.word	0x08000e91
 8000e20:	08000eb3 	.word	0x08000eb3
 8000e24:	08000f03 	.word	0x08000f03
 8000e28:	08000f21 	.word	0x08000f21
		{
			case START_CODE:
			{
				if(pData[u8Count] != ':')
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b3a      	cmp	r3, #58	; 0x3a
 8000e36:	d001      	beq.n	8000e3c <handle_data_hex+0x58>
				{
					return STATE_ERRORS;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e0a9      	b.n	8000f90 <handle_data_hex+0x1ac>
				}
				else
				{
				   State = BYTE_COUNT;
 8000e3c:	4b56      	ldr	r3, [pc, #344]	; (8000f98 <handle_data_hex+0x1b4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e42:	e09b      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case BYTE_COUNT:
			{
				parse_element(&pData[u8Count], 2U);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff4f 	bl	8000cf0 <parse_element>
				hex_data.u8ByteCount = cInternalBufferData[0];
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <handle_data_hex+0x1b8>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000e58:	701a      	strb	r2, [r3, #0]
				u8Count = 2U;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	73bb      	strb	r3, [r7, #14]
				State = ADDRESS;
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <handle_data_hex+0x1b4>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	701a      	strb	r2, [r3, #0]
				break;
 8000e64:	e08a      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case ADDRESS:
			{
				parse_element(&pData[u8Count], 4U);
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff3e 	bl	8000cf0 <parse_element>
				hex_data.u8Addr[0] = cInternalBufferData[0];
 8000e74:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <handle_data_hex+0x1b8>)
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000e7a:	705a      	strb	r2, [r3, #1]
				hex_data.u8Addr[1] = cInternalBufferData[1];
 8000e7c:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <handle_data_hex+0x1b8>)
 8000e7e:	785a      	ldrb	r2, [r3, #1]
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000e82:	709a      	strb	r2, [r3, #2]
				u8Count = 6U;
 8000e84:	2306      	movs	r3, #6
 8000e86:	73bb      	strb	r3, [r7, #14]
				State = RECORD_TYPE;
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <handle_data_hex+0x1b4>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	701a      	strb	r2, [r3, #0]
				break;
 8000e8e:	e075      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case RECORD_TYPE:
			{
				parse_element(&pData[u8Count], 2U);
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	2102      	movs	r1, #2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff29 	bl	8000cf0 <parse_element>
				hex_data.u8RecordType = cInternalBufferData[0];
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <handle_data_hex+0x1b8>)
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000ea4:	70da      	strb	r2, [r3, #3]
				u8Count = 8U;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	73bb      	strb	r3, [r7, #14]
				State = DATA;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <handle_data_hex+0x1b4>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	701a      	strb	r2, [r3, #0]
				break;
 8000eb0:	e064      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case DATA:
			{
				parse_element(&pData[u8Count], (hex_data.u8ByteCount*2U));
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff ff14 	bl	8000cf0 <parse_element>
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]
 8000ecc:	e00a      	b.n	8000ee4 <handle_data_hex+0x100>
				{
					hex_data.u8Data[u8Count] = cInternalBufferData[u8Count];
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	4932      	ldr	r1, [pc, #200]	; (8000f9c <handle_data_hex+0x1b8>)
 8000ed4:	5c89      	ldrb	r1, [r1, r2]
 8000ed6:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000ed8:	4413      	add	r3, r2
 8000eda:	460a      	mov	r2, r1
 8000edc:	711a      	strb	r2, [r3, #4]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	7bba      	ldrb	r2, [r7, #14]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3ef      	bcc.n	8000ece <handle_data_hex+0xea>
				}
				u8Count = 8U + (hex_data.u8ByteCount*2U);
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	73bb      	strb	r3, [r7, #14]
				State = CHECKSUM;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <handle_data_hex+0x1b4>)
 8000efc:	2205      	movs	r2, #5
 8000efe:	701a      	strb	r2, [r3, #0]
				break;
 8000f00:	e03c      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case CHECKSUM:
			{
				parse_element(&pData[u8Count], 2U);
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fef0 	bl	8000cf0 <parse_element>
				hex_data.u8CheckSum = cInternalBufferData[0];
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <handle_data_hex+0x1b8>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f16:	751a      	strb	r2, [r3, #20]
				State = DONE;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <handle_data_hex+0x1b4>)
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	701a      	strb	r2, [r3, #0]
				break;
 8000f1e:	e02d      	b.n	8000f7c <handle_data_hex+0x198>
			}
			case DONE:
			{
				u8CaculChecksum = hex_data.u8ByteCount + hex_data.u8Addr[0] + hex_data.u8Addr[1] + hex_data.u8RecordType;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f2e:	789b      	ldrb	r3, [r3, #2]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	4413      	add	r3, r2
 8000f3a:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73bb      	strb	r3, [r7, #14]
 8000f40:	e009      	b.n	8000f56 <handle_data_hex+0x172>
				{
					u8CaculChecksum += hex_data.u8Data[u8Count];
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f46:	4413      	add	r3, r2
 8000f48:	791a      	ldrb	r2, [r3, #4]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	73fb      	strb	r3, [r7, #15]
				for (u8Count = 0; u8Count < hex_data.u8ByteCount; u8Count++)
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	7bba      	ldrb	r2, [r7, #14]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3f0      	bcc.n	8000f42 <handle_data_hex+0x15e>
				}
				u8CaculChecksum = ~u8CaculChecksum + 1U;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	425b      	negs	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
				if (u8CaculChecksum == hex_data.u8CheckSum )
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <handle_data_hex+0x1bc>)
 8000f68:	7d1b      	ldrb	r3, [r3, #20]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d101      	bne.n	8000f74 <handle_data_hex+0x190>
				{
					return STATE_NO_ERRORS;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e00d      	b.n	8000f90 <handle_data_hex+0x1ac>
				}
				else
				{
					return STATE_ERRORS;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e00b      	b.n	8000f90 <handle_data_hex+0x1ac>
				}
			}
			default:
			{
				return STATE_ERRORS;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e009      	b.n	8000f90 <handle_data_hex+0x1ac>
	for(uint8_t u8Count = 0; u8Count < Size; u8Count++)
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f63f af39 	bhi.w	8000e00 <handle_data_hex+0x1c>
			}
	   }
	}
	return STATE_ERRORS;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000070 	.word	0x20000070
 8000f9c:	20000050 	.word	0x20000050
 8000fa0:	20000030 	.word	0x20000030

08000fa4 <start_up_bootloader>:

void start_up_bootloader(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
  lvq_ota_init();
 8000faa:	f7ff fcbf 	bl	800092c <lvq_ota_init>
  lvq_ota_setcallback_checkupdatefirmware();
 8000fae:	f7ff fddb 	bl	8000b68 <lvq_ota_setcallback_checkupdatefirmware>
  uint32_t time_last = HAL_GetTick();
 8000fb2:	f000 fb55 	bl	8001660 <HAL_GetTick>
 8000fb6:	60b8      	str	r0, [r7, #8]
  while( HAL_GetTick() - time_last < 3000 )
 8000fb8:	e03c      	b.n	8001034 <start_up_bootloader+0x90>
  {
	if( flag_ota_update == TRUE && flag_size_flash == TRUE )
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <start_up_bootloader+0xac>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d138      	bne.n	8001034 <start_up_bootloader+0x90>
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <start_up_bootloader+0xb0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d134      	bne.n	8001034 <start_up_bootloader+0x90>
	{
	  flag_earse_ok = FALSE;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <start_up_bootloader+0xb4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	  uint8_t StartSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION);
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <start_up_bootloader+0xb8>)
 8000fd2:	f7ff fa99 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	  uint8_t EndSector = LVQ_GetSectorFromAddress(ADDRESS_FIRMWARE_APPLICATION + SizeCurrent);
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <start_up_bootloader+0xbc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000fe2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa8e 	bl	8000508 <LVQ_GetSectorFromAddress>
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
	  uint8_t NumberSector = EndSector - StartSector + 1;
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	71bb      	strb	r3, [r7, #6]
	  /* Erase sector for write data */
	  for(uint8_t i = 0; i < NumberSector; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73bb      	strb	r3, [r7, #14]
 8001000:	e00d      	b.n	800101e <start_up_bootloader+0x7a>
	  {
		LVQ_Flash_Erase(LVQ_GetAddressFromSector(StartSector));
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff faf9 	bl	80005fc <LVQ_GetAddressFromSector>
 800100a:	4603      	mov	r3, r0
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fb55 	bl	80006bc <LVQ_Flash_Erase>
		StartSector++;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	3301      	adds	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
	  for(uint8_t i = 0; i < NumberSector; i++)
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	3301      	adds	r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3ed      	bcc.n	8001002 <start_up_bootloader+0x5e>
	  }
	  flag_earse_ok = TRUE;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <start_up_bootloader+0xb4>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
	  lvq_ota_setcallback_updatefirmware();
 800102c:	f7ff fda6 	bl	8000b7c <lvq_ota_setcallback_updatefirmware>
	  lvq_ota_run();
 8001030:	f7ff fc8a 	bl	8000948 <lvq_ota_run>
  while( HAL_GetTick() - time_last < 3000 )
 8001034:	f000 fb14 	bl	8001660 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001042:	4293      	cmp	r3, r2
 8001044:	d9b9      	bls.n	8000fba <start_up_bootloader+0x16>
	}
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000002c 	.word	0x2000002c
 8001054:	2000002d 	.word	0x2000002d
 8001058:	2000002e 	.word	0x2000002e
 800105c:	08008000 	.word	0x08008000
 8001060:	20000074 	.word	0x20000074

08001064 <start_up_firmware_update>:

void start_up_firmware_update(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(USART1_IRQn);
 800106a:	2025      	movs	r0, #37	; 0x25
 800106c:	f7ff fc1a 	bl	80008a4 <__NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
 8001070:	203a      	movs	r0, #58	; 0x3a
 8001072:	f000 fc2a 	bl	80018ca <HAL_NVIC_DisableIRQ>

  HAL_UART_DeInit(&huart1);
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <start_up_firmware_update+0x4c>)
 8001078:	f001 fed9 	bl	8002e2e <HAL_UART_DeInit>
  HAL_RCC_DeInit();
 800107c:	f001 faf4 	bl	8002668 <HAL_RCC_DeInit>

  SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <start_up_firmware_update+0x50>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <start_up_firmware_update+0x50>)
 8001086:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800108a:	6253      	str	r3, [r2, #36]	; 0x24
  __set_MSP(*((volatile uint32_t*) ADDRESS_FIRMWARE_APPLICATION));
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <start_up_firmware_update+0x54>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f383 8808 	msr	MSP, r3
}
 8001098:	bf00      	nop
  uint32_t u32JumpAddress = *( (volatile uint32_t*) (ADDRESS_FIRMWARE_APPLICATION + 4) );
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <start_up_firmware_update+0x58>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
  void (*reset_handler) (void) = (void *) u32JumpAddress;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	60bb      	str	r3, [r7, #8]
  reset_handler();
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4798      	blx	r3
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000124 	.word	0x20000124
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	08008000 	.word	0x08008000
 80010bc:	08008004 	.word	0x08008004

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fa66 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f80c 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 f8d0 	bl	8001270 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d0:	f000 f8a4 	bl	800121c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010d4:	f000 f878 	bl	80011c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_up_bootloader();
 80010d8:	f7ff ff64 	bl	8000fa4 <start_up_bootloader>
  start_up_firmware_update();
 80010dc:	f7ff ffc2 	bl	8001064 <start_up_firmware_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0x20>
	...

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2234      	movs	r2, #52	; 0x34
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 ff18 	bl	8003f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <SystemClock_Config+0xdc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <SystemClock_Config+0xdc>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <SystemClock_Config+0xdc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SystemClock_Config+0xe0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <SystemClock_Config+0xe0>)
 800112e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <SystemClock_Config+0xe0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001158:	23b4      	movs	r3, #180	; 0xb4
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fb73 	bl	8002858 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001178:	f000 f8a2 	bl	80012c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800117c:	f000 feda 	bl	8001f34 <HAL_PWREx_EnableOverDrive>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001186:	f000 f89b 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001196:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2105      	movs	r1, #5
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 ff13 	bl	8001fd4 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011b4:	f000 f884 	bl	80012c0 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART1_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 8001200:	f001 fdc8 	bl	8002d94 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f859 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000124 	.word	0x20000124
 8001218:	40011000 	.word	0x40011000

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART2_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART2_UART_Init+0x4c>)
 8001254:	f001 fd9e 	bl	8002d94 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f82f 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000168 	.word	0x20000168
 800126c:	40004400 	.word	0x40004400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_GPIO_Init+0x4c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <MX_GPIO_Init+0x4c>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_GPIO_Init+0x4c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_GPIO_Init+0x4c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <MX_GPIO_Init+0x4c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_GPIO_Init+0x4c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <Error_Handler+0x8>
	...

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <HAL_UART_MspInit+0x108>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d135      	bne.n	80013aa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_UART_MspInit+0x10c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a38      	ldr	r2, [pc, #224]	; (8001428 <HAL_UART_MspInit+0x10c>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_UART_MspInit+0x10c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <HAL_UART_MspInit+0x10c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a31      	ldr	r2, [pc, #196]	; (8001428 <HAL_UART_MspInit+0x10c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_UART_MspInit+0x10c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001376:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001388:	2307      	movs	r3, #7
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4826      	ldr	r0, [pc, #152]	; (800142c <HAL_UART_MspInit+0x110>)
 8001394:	f000 fb46 	bl	8001a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2025      	movs	r0, #37	; 0x25
 800139e:	f000 fa6a 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a2:	2025      	movs	r0, #37	; 0x25
 80013a4:	f000 fa83 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a8:	e038      	b.n	800141c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <HAL_UART_MspInit+0x114>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d133      	bne.n	800141c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_UART_MspInit+0x10c>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ec:	230c      	movs	r3, #12
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fc:	2307      	movs	r3, #7
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <HAL_UART_MspInit+0x110>)
 8001408:	f000 fb0c 	bl	8001a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2026      	movs	r0, #38	; 0x26
 8001412:	f000 fa30 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001416:	2026      	movs	r0, #38	; 0x26
 8001418:	f000 fa49 	bl	80018ae <HAL_NVIC_EnableIRQ>
}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40011000 	.word	0x40011000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	40004400 	.word	0x40004400

08001434 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_UART_MspDeInit+0x5c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10e      	bne.n	8001464 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_UART_MspDeInit+0x60>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_UART_MspDeInit+0x60>)
 800144c:	f023 0310 	bic.w	r3, r3, #16
 8001450:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001452:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001456:	4810      	ldr	r0, [pc, #64]	; (8001498 <HAL_UART_MspDeInit+0x64>)
 8001458:	f000 fc78 	bl	8001d4c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800145c:	2025      	movs	r0, #37	; 0x25
 800145e:	f000 fa34 	bl	80018ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001462:	e011      	b.n	8001488 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_UART_MspDeInit+0x68>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10c      	bne.n	8001488 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_UART_MspDeInit+0x60>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_UART_MspDeInit+0x60>)
 8001474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800147a:	210c      	movs	r1, #12
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_UART_MspDeInit+0x64>)
 800147e:	f000 fc65 	bl	8001d4c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001482:	2026      	movs	r0, #38	; 0x26
 8001484:	f000 fa21 	bl	80018ca <HAL_NVIC_DisableIRQ>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40011000 	.word	0x40011000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40004400 	.word	0x40004400

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f8a4 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <USART1_IRQHandler+0x10>)
 80014fa:	f001 fd89 	bl	8003010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000124 	.word	0x20000124

08001508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART2_IRQHandler+0x10>)
 800150e:	f001 fd7f 	bl	8003010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000168 	.word	0x20000168

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156a:	f7ff ffd7 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f002 fcb7 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fda5 	bl	80010c0 <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001584:	08003f80 	.word	0x08003f80
  ldr r2, =_sbss
 8001588:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800158c:	200001b0 	.word	0x200001b0

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f94f 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fe80 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f975 	bl	80018e6 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f92f 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000004 	.word	0x20000004
 8001630:	2000000c 	.word	0x2000000c
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c
 800165c:	200001ac 	.word	0x200001ac

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200001ac 	.word	0x200001ac

08001678 <__NVIC_SetPriorityGrouping>:
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_DisableIRQ>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db12      	blt.n	8001750 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	490a      	ldr	r1, [pc, #40]	; (800175c <__NVIC_DisableIRQ+0x44>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	3320      	adds	r3, #32
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001744:	f3bf 8f4f 	dsb	sy
}
 8001748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174a:	f3bf 8f6f 	isb	sy
}
 800174e:	bf00      	nop
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff05 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff1a 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff0d 	bl	80016dc <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff1d 	bl	8001718 <__NVIC_DisableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ff94 	bl	800181c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff fea8 	bl	8001660 <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d008      	beq.n	8001930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e052      	b.n	80019d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0216 	bic.w	r2, r2, #22
 800193e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_DMA_Abort+0x62>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0208 	bic.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001980:	e013      	b.n	80019aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001982:	f7ff fe6d 	bl	8001660 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b05      	cmp	r3, #5
 800198e:	d90c      	bls.n	80019aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e015      	b.n	80019d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e4      	bne.n	8001982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	223f      	movs	r2, #63	; 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00c      	b.n	8001a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e165      	b.n	8001d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8154 	bne.w	8001d06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80ae 	beq.w	8001d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4f      	ldr	r2, [pc, #316]	; (8001d2c <HAL_GPIO_Init+0x308>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x216>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x310>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x212>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_GPIO_Init+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_GPIO_Init+0x318>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x20a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <HAL_GPIO_Init+0x31c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x206>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x202>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x21c>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f ae96 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e0c7      	b.n	8001ef8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	f040 80b7 	bne.w	8001ef2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d84:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <HAL_GPIO_DeInit+0x1c4>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a5a      	ldr	r2, [pc, #360]	; (8001f14 <HAL_GPIO_DeInit+0x1c8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d025      	beq.n	8001dfa <HAL_GPIO_DeInit+0xae>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a59      	ldr	r2, [pc, #356]	; (8001f18 <HAL_GPIO_DeInit+0x1cc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_DeInit+0xaa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_GPIO_DeInit+0x1d0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_DeInit+0xa6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_GPIO_DeInit+0x1d4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_DeInit+0xa2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <HAL_GPIO_DeInit+0x1d8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_DeInit+0x9e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_GPIO_DeInit+0x1dc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_DeInit+0x9a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_GPIO_DeInit+0x1e0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_DeInit+0x96>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_DeInit+0xb0>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d132      	bne.n	8001e72 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4946      	ldr	r1, [pc, #280]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4943      	ldr	r1, [pc, #268]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	493c      	ldr	r1, [pc, #240]	; (8001f30 <HAL_GPIO_DeInit+0x1e4>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_GPIO_DeInit+0x1c4>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	482a      	ldr	r0, [pc, #168]	; (8001f10 <HAL_GPIO_DeInit+0x1c4>)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	08d2      	lsrs	r2, r2, #3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2103      	movs	r1, #3
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f af34 	bls.w	8001d68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7ff fb7e 	bl	8001660 <HAL_GetTick>
 8001f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f66:	e009      	b.n	8001f7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f68:	f7ff fb7a 	bl	8001660 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f76:	d901      	bls.n	8001f7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e01f      	b.n	8001fbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f88:	d1ee      	bne.n	8001f68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f90:	f7ff fb66 	bl	8001660 <HAL_GetTick>
 8001f94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f96:	e009      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f98:	f7ff fb62 	bl	8001660 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa6:	d901      	bls.n	8001fac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e007      	b.n	8001fbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x98>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fb8:	d1ee      	bne.n	8001f98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	420e0040 	.word	0x420e0040
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	420e0044 	.word	0x420e0044

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff facc 	bl	8001660 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fac8 	bl	8001660 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f855 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fa2c 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	08003f58 	.word	0x08003f58
 8002198:	20000004 	.word	0x20000004
 800219c:	20000008 	.word	0x20000008

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08003f68 	.word	0x08003f68

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e4:	f7ff ffdc 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08003f68 	.word	0x08003f68

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b0ae      	sub	sp, #184	; 0xb8
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222e:	4bcb      	ldr	r3, [pc, #812]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b0c      	cmp	r3, #12
 8002238:	f200 8206 	bhi.w	8002648 <HAL_RCC_GetSysClockFreq+0x440>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <HAL_RCC_GetSysClockFreq+0x3c>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002279 	.word	0x08002279
 8002248:	08002649 	.word	0x08002649
 800224c:	08002649 	.word	0x08002649
 8002250:	08002649 	.word	0x08002649
 8002254:	08002281 	.word	0x08002281
 8002258:	08002649 	.word	0x08002649
 800225c:	08002649 	.word	0x08002649
 8002260:	08002649 	.word	0x08002649
 8002264:	08002289 	.word	0x08002289
 8002268:	08002649 	.word	0x08002649
 800226c:	08002649 	.word	0x08002649
 8002270:	08002649 	.word	0x08002649
 8002274:	08002479 	.word	0x08002479
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4bb9      	ldr	r3, [pc, #740]	; (8002560 <HAL_RCC_GetSysClockFreq+0x358>)
 800227a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800227e:	e1e7      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002280:	4bb8      	ldr	r3, [pc, #736]	; (8002564 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002286:	e1e3      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002288:	4bb4      	ldr	r3, [pc, #720]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4bb1      	ldr	r3, [pc, #708]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d071      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4bae      	ldr	r3, [pc, #696]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80022b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022c6:	4622      	mov	r2, r4
 80022c8:	462b      	mov	r3, r5
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d8:	0150      	lsls	r0, r2, #5
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4621      	mov	r1, r4
 80022e0:	1a51      	subs	r1, r2, r1
 80022e2:	6439      	str	r1, [r7, #64]	; 0x40
 80022e4:	4629      	mov	r1, r5
 80022e6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80022f8:	4649      	mov	r1, r9
 80022fa:	018b      	lsls	r3, r1, #6
 80022fc:	4641      	mov	r1, r8
 80022fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002302:	4641      	mov	r1, r8
 8002304:	018a      	lsls	r2, r1, #6
 8002306:	4641      	mov	r1, r8
 8002308:	1a51      	subs	r1, r2, r1
 800230a:	63b9      	str	r1, [r7, #56]	; 0x38
 800230c:	4649      	mov	r1, r9
 800230e:	eb63 0301 	sbc.w	r3, r3, r1
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002320:	4649      	mov	r1, r9
 8002322:	00cb      	lsls	r3, r1, #3
 8002324:	4641      	mov	r1, r8
 8002326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800232a:	4641      	mov	r1, r8
 800232c:	00ca      	lsls	r2, r1, #3
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	4603      	mov	r3, r0
 8002334:	4622      	mov	r2, r4
 8002336:	189b      	adds	r3, r3, r2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
 800233a:	462b      	mov	r3, r5
 800233c:	460a      	mov	r2, r1
 800233e:	eb42 0303 	adc.w	r3, r2, r3
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002350:	4629      	mov	r1, r5
 8002352:	024b      	lsls	r3, r1, #9
 8002354:	4621      	mov	r1, r4
 8002356:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800235a:	4621      	mov	r1, r4
 800235c:	024a      	lsls	r2, r1, #9
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800236c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002370:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002374:	f7fd ff46 	bl	8000204 <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002382:	e067      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	2200      	movs	r2, #0
 800238c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002390:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239c:	67bb      	str	r3, [r7, #120]	; 0x78
 800239e:	2300      	movs	r3, #0
 80023a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023a6:	4622      	mov	r2, r4
 80023a8:	462b      	mov	r3, r5
 80023aa:	f04f 0000 	mov.w	r0, #0
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	0159      	lsls	r1, r3, #5
 80023b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b8:	0150      	lsls	r0, r2, #5
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4621      	mov	r1, r4
 80023c0:	1a51      	subs	r1, r2, r1
 80023c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80023c4:	4629      	mov	r1, r5
 80023c6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023d8:	4649      	mov	r1, r9
 80023da:	018b      	lsls	r3, r1, #6
 80023dc:	4641      	mov	r1, r8
 80023de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023e2:	4641      	mov	r1, r8
 80023e4:	018a      	lsls	r2, r1, #6
 80023e6:	4641      	mov	r1, r8
 80023e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ec:	4649      	mov	r1, r9
 80023ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002406:	4692      	mov	sl, r2
 8002408:	469b      	mov	fp, r3
 800240a:	4623      	mov	r3, r4
 800240c:	eb1a 0303 	adds.w	r3, sl, r3
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	462b      	mov	r3, r5
 8002414:	eb4b 0303 	adc.w	r3, fp, r3
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002426:	4629      	mov	r1, r5
 8002428:	028b      	lsls	r3, r1, #10
 800242a:	4621      	mov	r1, r4
 800242c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002430:	4621      	mov	r1, r4
 8002432:	028a      	lsls	r2, r1, #10
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800243c:	2200      	movs	r2, #0
 800243e:	673b      	str	r3, [r7, #112]	; 0x70
 8002440:	677a      	str	r2, [r7, #116]	; 0x74
 8002442:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002446:	f7fd fedd 	bl	8000204 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800246a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002476:	e0eb      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002478:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d06b      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_GetSysClockFreq+0x354>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	2200      	movs	r2, #0
 8002498:	66bb      	str	r3, [r7, #104]	; 0x68
 800249a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800249c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a2:	663b      	str	r3, [r7, #96]	; 0x60
 80024a4:	2300      	movs	r3, #0
 80024a6:	667b      	str	r3, [r7, #100]	; 0x64
 80024a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024ac:	4622      	mov	r2, r4
 80024ae:	462b      	mov	r3, r5
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	0159      	lsls	r1, r3, #5
 80024ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024be:	0150      	lsls	r0, r2, #5
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4621      	mov	r1, r4
 80024c6:	1a51      	subs	r1, r2, r1
 80024c8:	61b9      	str	r1, [r7, #24]
 80024ca:	4629      	mov	r1, r5
 80024cc:	eb63 0301 	sbc.w	r3, r3, r1
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024de:	4659      	mov	r1, fp
 80024e0:	018b      	lsls	r3, r1, #6
 80024e2:	4651      	mov	r1, sl
 80024e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024e8:	4651      	mov	r1, sl
 80024ea:	018a      	lsls	r2, r1, #6
 80024ec:	4651      	mov	r1, sl
 80024ee:	ebb2 0801 	subs.w	r8, r2, r1
 80024f2:	4659      	mov	r1, fp
 80024f4:	eb63 0901 	sbc.w	r9, r3, r1
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002504:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002508:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800250c:	4690      	mov	r8, r2
 800250e:	4699      	mov	r9, r3
 8002510:	4623      	mov	r3, r4
 8002512:	eb18 0303 	adds.w	r3, r8, r3
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	462b      	mov	r3, r5
 800251a:	eb49 0303 	adc.w	r3, r9, r3
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800252c:	4629      	mov	r1, r5
 800252e:	024b      	lsls	r3, r1, #9
 8002530:	4621      	mov	r1, r4
 8002532:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002536:	4621      	mov	r1, r4
 8002538:	024a      	lsls	r2, r1, #9
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002542:	2200      	movs	r2, #0
 8002544:	65bb      	str	r3, [r7, #88]	; 0x58
 8002546:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002548:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800254c:	f7fd fe5a 	bl	8000204 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800255a:	e065      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x420>
 800255c:	40023800 	.word	0x40023800
 8002560:	00f42400 	.word	0x00f42400
 8002564:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_GetSysClockFreq+0x458>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	2200      	movs	r2, #0
 8002570:	4618      	mov	r0, r3
 8002572:	4611      	mov	r1, r2
 8002574:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002578:	653b      	str	r3, [r7, #80]	; 0x50
 800257a:	2300      	movs	r3, #0
 800257c:	657b      	str	r3, [r7, #84]	; 0x54
 800257e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002582:	4642      	mov	r2, r8
 8002584:	464b      	mov	r3, r9
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002594:	0150      	lsls	r0, r2, #5
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4641      	mov	r1, r8
 800259c:	1a51      	subs	r1, r2, r1
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	4649      	mov	r1, r9
 80025a2:	eb63 0301 	sbc.w	r3, r3, r1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025b4:	4659      	mov	r1, fp
 80025b6:	018b      	lsls	r3, r1, #6
 80025b8:	4651      	mov	r1, sl
 80025ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025be:	4651      	mov	r1, sl
 80025c0:	018a      	lsls	r2, r1, #6
 80025c2:	4651      	mov	r1, sl
 80025c4:	1a54      	subs	r4, r2, r1
 80025c6:	4659      	mov	r1, fp
 80025c8:	eb63 0501 	sbc.w	r5, r3, r1
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	00eb      	lsls	r3, r5, #3
 80025d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025da:	00e2      	lsls	r2, r4, #3
 80025dc:	4614      	mov	r4, r2
 80025de:	461d      	mov	r5, r3
 80025e0:	4643      	mov	r3, r8
 80025e2:	18e3      	adds	r3, r4, r3
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	464b      	mov	r3, r9
 80025e8:	eb45 0303 	adc.w	r3, r5, r3
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fa:	4629      	mov	r1, r5
 80025fc:	028b      	lsls	r3, r1, #10
 80025fe:	4621      	mov	r1, r4
 8002600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002604:	4621      	mov	r1, r4
 8002606:	028a      	lsls	r2, r1, #10
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002610:	2200      	movs	r2, #0
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
 8002614:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002616:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800261a:	f7fd fdf3 	bl	8000204 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4613      	mov	r3, r2
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_GetSysClockFreq+0x458>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0f1b      	lsrs	r3, r3, #28
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800263a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002646:	e003      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetSysClockFreq+0x45c>)
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800264e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002654:	4618      	mov	r0, r3
 8002656:	37b8      	adds	r7, #184	; 0xb8
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400

08002668 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800266e:	f7fe fff7 	bl	8001660 <HAL_GetTick>
 8002672:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002674:	4b72      	ldr	r3, [pc, #456]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a71      	ldr	r2, [pc, #452]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe ffed 	bl	8001660 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0d0      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002694:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80026a0:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a66      	ldr	r2, [pc, #408]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026ac:	f7fe ffd8 	bl	8001660 <HAL_GetTick>
 80026b0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ba:	f7fe ffd1 	bl	8001660 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b2      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80026d0:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026dc:	f7fe ffc0 	bl	8001660 <HAL_GetTick>
 80026e0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80026e8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80026ec:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe ffb6 	bl	8001660 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e099      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800270e:	f7fe ffa7 	bl	8001660 <HAL_GetTick>
 8002712:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800271a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe ff9d 	bl	8001660 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e080      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002740:	f7fe ff8e 	bl	8001660 <HAL_GetTick>
 8002744:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800274c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002750:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002754:	f7fe ff84 	bl	8001660 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e067      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002772:	f7fe ff75 	bl	8001660 <HAL_GetTick>
 8002776:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002786:	f7fe ff6b 	bl	8001660 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e04e      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_RCC_DeInit+0x1dc>)
 80027a8:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80027aa:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_RCC_DeInit+0x1dc>)
 80027ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027b4:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_RCC_DeInit+0x1e0>)
 80027b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a20      	ldr	r2, [pc, #128]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027c0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80027c4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027e4:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80027e8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 80027fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002800:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_RCC_DeInit+0x1d8>)
 8002814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002818:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_DeInit+0x1e4>)
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_RCC_DeInit+0x1e8>)
 800281e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_DeInit+0x1ec>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fed7 	bl	80015d8 <HAL_InitTick>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002834:	2300      	movs	r3, #0
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	24003010 	.word	0x24003010
 8002848:	04003010 	.word	0x04003010
 800284c:	20000004 	.word	0x20000004
 8002850:	00f42400 	.word	0x00f42400
 8002854:	20000008 	.word	0x20000008

08002858 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e28d      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8083 	beq.w	800297e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002878:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b04      	cmp	r3, #4
 8002882:	d019      	beq.n	80028b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002884:	4b91      	ldr	r3, [pc, #580]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800288c:	2b08      	cmp	r3, #8
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002890:	4b8e      	ldr	r3, [pc, #568]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b8b      	ldr	r3, [pc, #556]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x124>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e25a      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x90>
 80028da:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7b      	ldr	r2, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xcc>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xb4>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xcc>
 800290c:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6e      	ldr	r2, [pc, #440]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fe98 	bl	8001660 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fe94 	bl	8001660 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e21f      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xdc>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fe84 	bl	8001660 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fe80 	bl	8001660 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e20b      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x104>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x186>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1d3      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4937      	ldr	r1, [pc, #220]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x278>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fe2d 	bl	8001660 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fe29 	bl	8001660 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1b4      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x278>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fe0c 	bl	8001660 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fe08 	bl	8001660 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e193      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fdec 	bl	8001660 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fde8 	bl	8001660 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e173      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x234>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fdd5 	bl	8001660 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fdd1 	bl	8001660 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d907      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e15c      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b8a      	ldr	r3, [pc, #552]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ea      	bne.n	8002aba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8097 	beq.w	8002c20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b83      	ldr	r3, [pc, #524]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b7c      	ldr	r3, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a75      	ldr	r2, [pc, #468]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fd91 	bl	8001660 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fe fd8d 	bl	8001660 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e118      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x31e>
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x358>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x340>
 8002b7e:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x358>
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fd52 	bl	8001660 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fd4e 	bl	8001660 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0d7      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x368>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe fd3c 	bl	8001660 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe fd38 	bl	8001660 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0c1      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80ad 	beq.w	8002d84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d060      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d145      	bne.n	8002cca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fd0c 	bl	8001660 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fd08 	bl	8001660 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e093      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fcdd 	bl	8001660 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe fcd9 	bl	8001660 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e064      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x452>
 8002cc8:	e05c      	b.n	8002d84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fcc6 	bl	8001660 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fcc2 	bl	8001660 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e04d      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x480>
 8002cf6:	e045      	b.n	8002d84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_RCC_OscConfig+0x538>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d129      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d122      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d119      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e03f      	b.n	8002e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe faae 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fe0d 	bl	80039f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e021      	b.n	8002e84 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e56:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe faeb 	bl	8001434 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d17c      	bne.n	8002fa6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x2c>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e075      	b.n	8002fa8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Transmit+0x3e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e06e      	b.n	8002fa8 <HAL_UART_Transmit+0x11c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2221      	movs	r2, #33	; 0x21
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fbbe 	bl	8001660 <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d108      	bne.n	8002f0e <HAL_UART_Transmit+0x82>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e003      	b.n	8002f16 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f1e:	e02a      	b.n	8002f76 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb1e 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e036      	b.n	8002fa8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	3302      	adds	r3, #2
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	e007      	b.n	8002f68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1cf      	bne.n	8002f20 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 faee 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e006      	b.n	8002fa8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d11d      	bne.n	8003006 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_UART_Receive_IT+0x26>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e016      	b.n	8003008 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Receive_IT+0x38>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e00f      	b.n	8003008 <HAL_UART_Receive_IT+0x58>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fb23 	bl	8003648 <UART_Start_Receive_IT>
 8003002:	4603      	mov	r3, r0
 8003004:	e000      	b.n	8003008 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b0ba      	sub	sp, #232	; 0xe8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800304e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_UART_IRQHandler+0x66>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc07 	bl	8003882 <UART_Receive_IT>
      return;
 8003074:	e256      	b.n	8003524 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80de 	beq.w	800323c <HAL_UART_IRQHandler+0x22c>
 8003080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80d1 	beq.w	800323c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_UART_IRQHandler+0xae>
 80030a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_UART_IRQHandler+0xd2>
 80030ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0202 	orr.w	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_UART_IRQHandler+0xf6>
 80030ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d011      	beq.n	8003136 <HAL_UART_IRQHandler+0x126>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 81ed 	beq.w	800351a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_UART_IRQHandler+0x14e>
 800314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb92 	bl	8003882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_UART_IRQHandler+0x17a>
 8003182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04f      	beq.n	800322a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa9a 	bl	80036c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d141      	bne.n	8003222 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3314      	adds	r3, #20
 80031c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1d9      	bne.n	800319e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d013      	beq.n	800321a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a7d      	ldr	r2, [pc, #500]	; (80033ec <HAL_UART_IRQHandler+0x3dc>)
 80031f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fbed 	bl	80019de <HAL_DMA_Abort_IT>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	e00e      	b.n	8003238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f990 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00a      	b.n	8003238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f98c 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e006      	b.n	8003238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f988 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003236:	e170      	b.n	800351a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	bf00      	nop
    return;
 800323a:	e16e      	b.n	800351a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 814a 	bne.w	80034da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8143 	beq.w	80034da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 813c 	beq.w	80034da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	f040 80b4 	bne.w	80033f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003294:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8140 	beq.w	800351e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032a6:	429a      	cmp	r2, r3
 80032a8:	f080 8139 	bcs.w	800351e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032be:	f000 8088 	beq.w	80033d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1d9      	bne.n	80032c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3314      	adds	r3, #20
 8003314:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800331e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003332:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003336:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800333a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e1      	bne.n	800330e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800336e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003370:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003374:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800337c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e3      	bne.n	800334a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e3      	bne.n	8003390 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fa96 	bl	80018fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8b6 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033e8:	e099      	b.n	800351e <HAL_UART_IRQHandler+0x50e>
 80033ea:	bf00      	nop
 80033ec:	0800378b 	.word	0x0800378b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 808b 	beq.w	8003522 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800340c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8086 	beq.w	8003522 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800342c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800343a:	647a      	str	r2, [r7, #68]	; 0x44
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e3      	bne.n	8003416 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	623b      	str	r3, [r7, #32]
   return(result);
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003472:	633a      	str	r2, [r7, #48]	; 0x30
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e3      	bne.n	800344e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0310 	bic.w	r3, r3, #16
 80034aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034b8:	61fa      	str	r2, [r7, #28]
 80034ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	617b      	str	r3, [r7, #20]
   return(result);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e3      	bne.n	8003494 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f83e 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034d8:	e023      	b.n	8003522 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_UART_IRQHandler+0x4ea>
 80034e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f95d 	bl	80037b2 <UART_Transmit_IT>
    return;
 80034f8:	e014      	b.n	8003524 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <HAL_UART_IRQHandler+0x514>
 8003506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f99d 	bl	8003852 <UART_EndTransmit_IT>
    return;
 8003518:	e004      	b.n	8003524 <HAL_UART_IRQHandler+0x514>
    return;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <HAL_UART_IRQHandler+0x514>
      return;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_UART_IRQHandler+0x514>
      return;
 8003522:	bf00      	nop
  }
}
 8003524:	37e8      	adds	r7, #232	; 0xe8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop

0800352c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b090      	sub	sp, #64	; 0x40
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e050      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d04c      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 800358c:	f7fe f868 	bl	8001660 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003598:	429a      	cmp	r2, r3
 800359a:	d241      	bcs.n	8003620 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035bc:	637a      	str	r2, [r7, #52]	; 0x34
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	613b      	str	r3, [r7, #16]
   return(result);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035f0:	623a      	str	r2, [r7, #32]
 80035f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	6a3a      	ldr	r2, [r7, #32]
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e00f      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d09f      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3740      	adds	r7, #64	; 0x40
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	88fa      	ldrh	r2, [r7, #6]
 8003660:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	88fa      	ldrh	r2, [r7, #6]
 8003666:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2222      	movs	r2, #34	; 0x22
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	; 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ec:	643a      	str	r2, [r7, #64]	; 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	647b      	str	r3, [r7, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	; 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fecb 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b21      	cmp	r3, #33	; 0x21
 80037c4:	d13e      	bne.n	8003844 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d114      	bne.n	80037fa <UART_Transmit_IT+0x48>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	621a      	str	r2, [r3, #32]
 80037f8:	e008      	b.n	800380c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6211      	str	r1, [r2, #32]
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29b      	uxth	r3, r3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4619      	mov	r1, r3
 800381a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10f      	bne.n	8003840 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fe5a 	bl	800352c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08c      	sub	sp, #48	; 0x30
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b22      	cmp	r3, #34	; 0x22
 8003894:	f040 80ab 	bne.w	80039ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d117      	bne.n	80038d2 <UART_Receive_IT+0x50>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	1c9a      	adds	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
 80038d0:	e026      	b.n	8003920 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d007      	beq.n	80038f6 <UART_Receive_IT+0x74>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <UART_Receive_IT+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e008      	b.n	8003916 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003930:	2b00      	cmp	r3, #0
 8003932:	d15a      	bne.n	80039ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0220 	bic.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d135      	bne.n	80039e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	613b      	str	r3, [r7, #16]
   return(result);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	623a      	str	r2, [r7, #32]
 800399c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d10a      	bne.n	80039d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fdbb 	bl	8003554 <HAL_UARTEx_RxEventCallback>
 80039de:	e002      	b.n	80039e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fc ff83 	bl	80008ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e002      	b.n	80039f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3730      	adds	r7, #48	; 0x30
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b0c0      	sub	sp, #256	; 0x100
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	68d9      	ldr	r1, [r3, #12]
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	ea40 0301 	orr.w	r3, r0, r1
 8003a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a50:	f021 010c 	bic.w	r1, r1, #12
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	6999      	ldr	r1, [r3, #24]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	ea40 0301 	orr.w	r3, r0, r1
 8003a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <UART_SetConfig+0x2cc>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d005      	beq.n	8003a98 <UART_SetConfig+0xa0>
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <UART_SetConfig+0x2d0>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d104      	bne.n	8003aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe fba2 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aa0:	e003      	b.n	8003aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7fe fb89 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab4:	f040 810c 	bne.w	8003cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ada:	4621      	mov	r1, r4
 8003adc:	eb12 0801 	adds.w	r8, r2, r1
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb43 0901 	adc.w	r9, r3, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	eb18 0303 	adds.w	r3, r8, r3
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b08:	462b      	mov	r3, r5
 8003b0a:	eb49 0303 	adc.w	r3, r9, r3
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b26:	460b      	mov	r3, r1
 8003b28:	18db      	adds	r3, r3, r3
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	eb42 0303 	adc.w	r3, r2, r3
 8003b32:	657b      	str	r3, [r7, #84]	; 0x54
 8003b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b3c:	f7fc fb62 	bl	8000204 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	011c      	lsls	r4, r3, #4
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b70:	4641      	mov	r1, r8
 8003b72:	eb12 0a01 	adds.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb43 0b01 	adc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b90:	4692      	mov	sl, r2
 8003b92:	469b      	mov	fp, r3
 8003b94:	4643      	mov	r3, r8
 8003b96:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	18db      	adds	r3, r3, r3
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bd2:	f7fc fb17 	bl	8000204 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003bde:	fba3 2301 	umull	r2, r3, r3, r1
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2264      	movs	r2, #100	; 0x64
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	1acb      	subs	r3, r1, r3
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	1891      	adds	r1, r2, r2
 8003c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c1c:	415b      	adcs	r3, r3
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c24:	4641      	mov	r1, r8
 8003c26:	1851      	adds	r1, r2, r1
 8003c28:	6339      	str	r1, [r7, #48]	; 0x30
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	414b      	adcs	r3, r1
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	00cb      	lsls	r3, r1, #3
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c46:	4651      	mov	r1, sl
 8003c48:	00ca      	lsls	r2, r1, #3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4642      	mov	r2, r8
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c58:	464b      	mov	r3, r9
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	eb42 0303 	adc.w	r3, r2, r3
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c8e:	f7fc fab9 	bl	8000204 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	2164      	movs	r1, #100	; 0x64
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	3332      	adds	r3, #50	; 0x32
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <UART_SetConfig+0x2d4>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	f003 0207 	and.w	r2, r3, #7
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4422      	add	r2, r4
 8003cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc0:	e105      	b.n	8003ece <UART_SetConfig+0x4d6>
 8003cc2:	bf00      	nop
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40011400 	.word	0x40011400
 8003ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	6239      	str	r1, [r7, #32]
 8003cea:	415b      	adcs	r3, r3
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	1854      	adds	r4, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0501 	adc.w	r5, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	00eb      	lsls	r3, r5, #3
 8003d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0a:	00e2      	lsls	r2, r4, #3
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4643      	mov	r3, r8
 8003d12:	18e3      	adds	r3, r4, r3
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d18:	464b      	mov	r3, r9
 8003d1a:	eb45 0303 	adc.w	r3, r5, r3
 8003d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d3e:	4629      	mov	r1, r5
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d48:	4621      	mov	r1, r4
 8003d4a:	008a      	lsls	r2, r1, #2
 8003d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d50:	f7fc fa58 	bl	8000204 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b60      	ldr	r3, [pc, #384]	; (8003edc <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	61b9      	str	r1, [r7, #24]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6139      	str	r1, [r7, #16]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db8:	464b      	mov	r3, r9
 8003dba:	460a      	mov	r2, r1
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ddc:	4649      	mov	r1, r9
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de6:	4641      	mov	r1, r8
 8003de8:	008a      	lsls	r2, r1, #2
 8003dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dee:	f7fc fa09 	bl	8000204 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <UART_SetConfig+0x4e4>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	3332      	adds	r3, #50	; 0x32
 8003e0a:	4a34      	ldr	r2, [pc, #208]	; (8003edc <UART_SetConfig+0x4e4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e16:	441c      	add	r4, r3
 8003e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e20:	677a      	str	r2, [r7, #116]	; 0x74
 8003e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e26:	4642      	mov	r2, r8
 8003e28:	464b      	mov	r3, r9
 8003e2a:	1891      	adds	r1, r2, r2
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e36:	4641      	mov	r1, r8
 8003e38:	1851      	adds	r1, r2, r1
 8003e3a:	6039      	str	r1, [r7, #0]
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	414b      	adcs	r3, r1
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e4e:	4659      	mov	r1, fp
 8003e50:	00cb      	lsls	r3, r1, #3
 8003e52:	4651      	mov	r1, sl
 8003e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e58:	4651      	mov	r1, sl
 8003e5a:	00ca      	lsls	r2, r1, #3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	4642      	mov	r2, r8
 8003e64:	189b      	adds	r3, r3, r2
 8003e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e68:	464b      	mov	r3, r9
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	eb42 0303 	adc.w	r3, r2, r3
 8003e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	4641      	mov	r1, r8
 8003e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e94:	4641      	mov	r1, r8
 8003e96:	008a      	lsls	r2, r1, #2
 8003e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e9c:	f7fc f9b2 	bl	8000204 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <UART_SetConfig+0x4e4>)
 8003ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2164      	movs	r1, #100	; 0x64
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	3332      	adds	r3, #50	; 0x32
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <UART_SetConfig+0x4e4>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	f003 020f 	and.w	r2, r3, #15
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4422      	add	r2, r4
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eda:	bf00      	nop
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4d0d      	ldr	r5, [pc, #52]	; (8003f18 <__libc_init_array+0x38>)
 8003ee4:	4c0d      	ldr	r4, [pc, #52]	; (8003f1c <__libc_init_array+0x3c>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	2600      	movs	r6, #0
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	4d0b      	ldr	r5, [pc, #44]	; (8003f20 <__libc_init_array+0x40>)
 8003ef2:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <__libc_init_array+0x44>)
 8003ef4:	f000 f820 	bl	8003f38 <_init>
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	2600      	movs	r6, #0
 8003efe:	42a6      	cmp	r6, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f08:	4798      	blx	r3
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f12:	4798      	blx	r3
 8003f14:	3601      	adds	r6, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	08003f78 	.word	0x08003f78
 8003f1c:	08003f78 	.word	0x08003f78
 8003f20:	08003f78 	.word	0x08003f78
 8003f24:	08003f7c 	.word	0x08003f7c

08003f28 <memset>:
 8003f28:	4402      	add	r2, r0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d100      	bne.n	8003f32 <memset+0xa>
 8003f30:	4770      	bx	lr
 8003f32:	f803 1b01 	strb.w	r1, [r3], #1
 8003f36:	e7f9      	b.n	8003f2c <memset+0x4>

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
