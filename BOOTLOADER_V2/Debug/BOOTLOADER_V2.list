
BOOTLOADER_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000074  08004f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004f74  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a2  00000000  00000000  0002bda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d07  00000000  00000000  0002eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf0c  00000000  00000000  00050bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c94e5  00000000  00000000  0005dae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126fc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002338  00000000  00000000  00127018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004ea8 	.word	0x08004ea8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08004ea8 	.word	0x08004ea8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <app_ota_write_flash_memory>:
volatile uint32_t address_write_flash;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void app_ota_write_flash_memory(app_ota_hex_form_data_t *hex_data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint8_t  data_count, i;
  uint8_t  counter_index       = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint16_t data_write_flash[8] = { 0 };
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  switch (hex_data->record_type)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	2b05      	cmp	r3, #5
 800052a:	f000 809a 	beq.w	8000662 <app_ota_write_flash_memory+0x15a>
 800052e:	2b05      	cmp	r3, #5
 8000530:	f300 8099 	bgt.w	8000666 <app_ota_write_flash_memory+0x15e>
 8000534:	2b00      	cmp	r3, #0
 8000536:	d015      	beq.n	8000564 <app_ota_write_flash_memory+0x5c>
 8000538:	2b04      	cmp	r3, #4
 800053a:	f040 8094 	bne.w	8000666 <app_ota_write_flash_memory+0x15e>
  {
  case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
  {
    uint32_t address = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
    address |= hex_data->data[0] << 8 | hex_data->data[1];
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7952      	ldrb	r2, [r2, #5]
 800054c:	4313      	orrs	r3, r2
 800054e:	461a      	mov	r2, r3
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	4313      	orrs	r3, r2
 8000554:	623b      	str	r3, [r7, #32]
    /* Address save firmware update */
    address_write_flash = 0x08000000 | (address << 16);
 8000556:	6a3b      	ldr	r3, [r7, #32]
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800055e:	4a44      	ldr	r2, [pc, #272]	; (8000670 <app_ota_write_flash_memory+0x168>)
 8000560:	6013      	str	r3, [r2, #0]
    break;
 8000562:	e081      	b.n	8000668 <app_ota_write_flash_memory+0x160>
    break;
  }
  case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
  {
    /* get character count */
    data_count = hex_data->byte_count;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	77fb      	strb	r3, [r7, #31]
    size_data_firmware += data_count;
 800056a:	7ffa      	ldrb	r2, [r7, #31]
 800056c:	4b41      	ldr	r3, [pc, #260]	; (8000674 <app_ota_write_flash_memory+0x16c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4413      	add	r3, r2
 8000572:	4a40      	ldr	r2, [pc, #256]	; (8000674 <app_ota_write_flash_memory+0x16c>)
 8000574:	6013      	str	r3, [r2, #0]

    /* set full address */
    address_write_flash = address_write_flash & 0xFFFF0000;
 8000576:	4b3e      	ldr	r3, [pc, #248]	; (8000670 <app_ota_write_flash_memory+0x168>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	041b      	lsls	r3, r3, #16
 800057e:	4a3c      	ldr	r2, [pc, #240]	; (8000670 <app_ota_write_flash_memory+0x168>)
 8000580:	6013      	str	r3, [r2, #0]
    address_write_flash = address_write_flash | (hex_data->address[0] << 8) | (hex_data->address[1]);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	461a      	mov	r2, r3
 800058a:	4b39      	ldr	r3, [pc, #228]	; (8000670 <app_ota_write_flash_memory+0x168>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4313      	orrs	r3, r2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7892      	ldrb	r2, [r2, #2]
 8000594:	4313      	orrs	r3, r2
 8000596:	4a36      	ldr	r2, [pc, #216]	; (8000670 <app_ota_write_flash_memory+0x168>)
 8000598:	6013      	str	r3, [r2, #0]

    /* check address wite flash data */
    if (address_write_flash < ADDRESS_FIRMWARE_APPLICATION)
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <app_ota_write_flash_memory+0x168>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a36      	ldr	r2, [pc, #216]	; (8000678 <app_ota_write_flash_memory+0x170>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d203      	bcs.n	80005ac <app_ota_write_flash_memory+0xa4>
    {
      address_write_flash = 0;
 80005a4:	4b32      	ldr	r3, [pc, #200]	; (8000670 <app_ota_write_flash_memory+0x168>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e05d      	b.n	8000668 <app_ota_write_flash_memory+0x160>
      return;
    }

    /* get the data of the record */
    for (i = 0; i < data_count; i += 2)
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005b2:	e021      	b.n	80005f8 <app_ota_write_flash_memory+0xf0>
    {
      data_write_flash[counter_index] = (hex_data->data[i + 1] << 8) | (hex_data->data[i]);
 80005b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005b8:	3301      	adds	r3, #1
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	440b      	add	r3, r1
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005d8:	b292      	uxth	r2, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	3328      	adds	r3, #40	; 0x28
 80005de:	443b      	add	r3, r7
 80005e0:	f823 2c1c 	strh.w	r2, [r3, #-28]
      counter_index++;
 80005e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005e8:	3301      	adds	r3, #1
 80005ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < data_count; i += 2)
 80005ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f2:	3302      	adds	r3, #2
 80005f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80005fc:	7ffb      	ldrb	r3, [r7, #31]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d3d8      	bcc.n	80005b4 <app_ota_write_flash_memory+0xac>
    }

    /* count data old or even */
    if (data_count % 2 != 0)
 8000602:	7ffb      	ldrb	r3, [r7, #31]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01d      	beq.n	800064a <app_ota_write_flash_memory+0x142>
    {
      data_write_flash[counter_index] = 0xFF00 | (hex_data->data[data_count - 1]);
 800060e:	7ffb      	ldrb	r3, [r7, #31]
 8000610:	3b01      	subs	r3, #1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	b21b      	sxth	r3, r3
 800061a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800061e:	b21a      	sxth	r2, r3
 8000620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000624:	b292      	uxth	r2, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	3328      	adds	r3, #40	; 0x28
 800062a:	443b      	add	r3, r7
 800062c:	f823 2c1c 	strh.w	r2, [r3, #-28]
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4 + 1);
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <app_ota_write_flash_memory+0x168>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	7ffb      	ldrb	r3, [r7, #31]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3301      	adds	r3, #1
 800063c:	461a      	mov	r2, r3
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	f000 fc66 	bl	8000f14 <bsp_flash_write>
    }
    else
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
    break;
 8000648:	e00e      	b.n	8000668 <app_ota_write_flash_memory+0x160>
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <app_ota_write_flash_memory+0x168>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	7ffb      	ldrb	r3, [r7, #31]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	f000 fc5a 	bl	8000f14 <bsp_flash_write>
    break;
 8000660:	e002      	b.n	8000668 <app_ota_write_flash_memory+0x160>
    break;
 8000662:	bf00      	nop
 8000664:	e000      	b.n	8000668 <app_ota_write_flash_memory+0x160>
  }
  default: break;
 8000666:	bf00      	nop
  }
}
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c
 8000674:	20000098 	.word	0x20000098
 8000678:	08008000 	.word	0x08008000

0800067c <app_ota_start_up_bootloader>:

void app_ota_start_up_bootloader(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  bsp_uart_init();
 8000682:	f000 fce3 	bl	800104c <bsp_uart_init>

  uint32_t time_last = HAL_GetTick();
 8000686:	f001 f94b 	bl	8001920 <HAL_GetTick>
 800068a:	60b8      	str	r0, [r7, #8]
  /* wait for update firmware */
  while (HAL_GetTick() - time_last < 3000)
 800068c:	e03d      	b.n	800070a <app_ota_start_up_bootloader+0x8e>
  {
    if (flag_ota_update == TRUE && flag_size_flash == TRUE)
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <app_ota_start_up_bootloader+0xac>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d139      	bne.n	800070a <app_ota_start_up_bootloader+0x8e>
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <app_ota_start_up_bootloader+0xb0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d135      	bne.n	800070a <app_ota_start_up_bootloader+0x8e>
    {
      flag_earse_ok = FALSE;
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <app_ota_start_up_bootloader+0xb4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
      /* caculation number sector */
      uint8_t start_sector  = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION);
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <app_ota_start_up_bootloader+0xb8>)
 80006a6:	f000 faf3 	bl	8000c90 <bsp_get_sector_from_address>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73fb      	strb	r3, [r7, #15]
      uint8_t end_sector    = bsp_get_sector_from_address(ADDRESS_FIRMWARE_APPLICATION + size_current);
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <app_ota_start_up_bootloader+0xbc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fae8 	bl	8000c90 <bsp_get_sector_from_address>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
      uint8_t number_sector = end_sector - start_sector + 1;
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	71bb      	strb	r3, [r7, #6]

      /* erase sector for write data */
      for (uint8_t i = 0; i < number_sector; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	73bb      	strb	r3, [r7, #14]
 80006d4:	e00d      	b.n	80006f2 <app_ota_start_up_bootloader+0x76>
      {
        bsp_flash_erase(bsp_get_address_from_sector(start_sector));
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fb53 	bl	8000d84 <bsp_get_address_from_sector>
 80006de:	4603      	mov	r3, r0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fb9b 	bl	8000e1c <bsp_flash_erase>
        start_sector++;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	3301      	adds	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
      for (uint8_t i = 0; i < number_sector; i++)
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
 80006ee:	3301      	adds	r3, #1
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	7bba      	ldrb	r2, [r7, #14]
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d3ed      	bcc.n	80006d6 <app_ota_start_up_bootloader+0x5a>
      }
      flag_earse_ok = TRUE;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <app_ota_start_up_bootloader+0xb4>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
      while (flag_ota_complete == FALSE)
 8000700:	bf00      	nop
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <app_ota_start_up_bootloader+0xc0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0fb      	beq.n	8000702 <app_ota_start_up_bootloader+0x86>
  while (HAL_GetTick() - time_last < 3000)
 800070a:	f001 f909 	bl	8001920 <HAL_GetTick>
 800070e:	4602      	mov	r2, r0
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000718:	4293      	cmp	r3, r2
 800071a:	d9b8      	bls.n	800068e <app_ota_start_up_bootloader+0x12>
      {
      }
    }
  }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090
 800072c:	20000091 	.word	0x20000091
 8000730:	20000093 	.word	0x20000093
 8000734:	08008000 	.word	0x08008000
 8000738:	20000094 	.word	0x20000094
 800073c:	20000092 	.word	0x20000092

08000740 <app_ota_jump_to_firmware>:

void app_ota_jump_to_firmware(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  bsp_uart_deinit_peripheral();
 8000746:	f000 fccf 	bl	80010e8 <bsp_uart_deinit_peripheral>
  HAL_RCC_DeInit();
 800074a:	f002 fd25 	bl	8003198 <HAL_RCC_DeInit>

  SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <app_ota_jump_to_firmware+0x40>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <app_ota_jump_to_firmware+0x40>)
 8000754:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24
  __set_MSP(*((volatile uint32_t *) ADDRESS_FIRMWARE_APPLICATION));
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <app_ota_jump_to_firmware+0x44>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f383 8808 	msr	MSP, r3
}
 8000766:	bf00      	nop
  uint32_t jump_address       = *((volatile uint32_t *) (ADDRESS_FIRMWARE_APPLICATION + 4));
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <app_ota_jump_to_firmware+0x48>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  void (*reset_handler)(void) = (void *) jump_address;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reset_handler();
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4798      	blx	r3
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	08008000 	.word	0x08008000
 8000788:	08008004 	.word	0x08008004

0800078c <app_ota_parse_element>:

void app_ota_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 800078c:	b480      	push	{r7}
 800078e:	b08f      	sub	sp, #60	; 0x3c
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	71fb      	strb	r3, [r7, #7]
  uint8_t count_array = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t buffer_temp[32];

  /* convert data string to data hex and save to des buffer*/
  for (uint8_t count = 0U; count < length; count++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80007a6:	e05f      	b.n	8000868 <app_ota_parse_element+0xdc>
  {
    if (buff[count] >= '0' && buff[count] <= '9')
 80007a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b2f      	cmp	r3, #47	; 0x2f
 80007b4:	d914      	bls.n	80007e0 <app_ota_parse_element+0x54>
 80007b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b39      	cmp	r3, #57	; 0x39
 80007c2:	d80d      	bhi.n	80007e0 <app_ota_parse_element+0x54>
      buffer_temp[count] = buff[count] - 48;
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007d2:	3a30      	subs	r2, #48	; 0x30
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	3338      	adds	r3, #56	; 0x38
 80007d8:	443b      	add	r3, r7
 80007da:	f803 2c24 	strb.w	r2, [r3, #-36]
 80007de:	e01a      	b.n	8000816 <app_ota_parse_element+0x8a>
    else if (buff[count] >= 'A' && buff[count] <= 'F')
 80007e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b40      	cmp	r3, #64	; 0x40
 80007ec:	d942      	bls.n	8000874 <app_ota_parse_element+0xe8>
 80007ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b46      	cmp	r3, #70	; 0x46
 80007fa:	d83b      	bhi.n	8000874 <app_ota_parse_element+0xe8>
      buffer_temp[count] = buff[count] - 65 + 10;
 80007fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	4413      	add	r3, r2
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800080a:	3a37      	subs	r2, #55	; 0x37
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	3338      	adds	r3, #56	; 0x38
 8000810:	443b      	add	r3, r7
 8000812:	f803 2c24 	strb.w	r2, [r3, #-36]
    else
      return;
    if (count % 2 != 0)
 8000816:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d01c      	beq.n	800085e <app_ota_parse_element+0xd2>
    {
      des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 8000824:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000828:	3b01      	subs	r3, #1
 800082a:	3338      	adds	r3, #56	; 0x38
 800082c:	443b      	add	r3, r7
 800082e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	b25a      	sxtb	r2, r3
 8000836:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800083a:	3338      	adds	r3, #56	; 0x38
 800083c:	443b      	add	r3, r7
 800083e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b259      	sxtb	r1, r3
 8000848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	b2ca      	uxtb	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
      count_array++;
 8000854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000858:	3301      	adds	r3, #1
 800085a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (uint8_t count = 0U; count < length; count++)
 800085e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000862:	3301      	adds	r3, #1
 8000864:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000868:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	429a      	cmp	r2, r3
 8000870:	d39a      	bcc.n	80007a8 <app_ota_parse_element+0x1c>
 8000872:	e000      	b.n	8000876 <app_ota_parse_element+0xea>
      return;
 8000874:	bf00      	nop
    }
  }
}
 8000876:	373c      	adds	r7, #60	; 0x3c
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <app_ota_handle_data_receive>:

uint8_t app_ota_handle_data_receive(app_ota_hex_form_data_t *hex_data, uint8_t *data, uint16_t size)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	4613      	mov	r3, r2
 800088c:	80fb      	strh	r3, [r7, #6]
  uint8_t                   cal_check_sum = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  app_ota_field_hex_files_t state         = START_CODE;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t                   buffer_save_data_hex[16];

  /* parse string to hex form data hex */
  for (uint8_t count = 0; count < size; count++)
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008a0:	e0e4      	b.n	8000a6c <app_ota_handle_data_receive+0x1ec>
  {
    switch (state)
 80008a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	f200 80d9 	bhi.w	8000a5e <app_ota_handle_data_receive+0x1de>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <app_ota_handle_data_receive+0x34>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008d1 	.word	0x080008d1
 80008b8:	080008eb 	.word	0x080008eb
 80008bc:	08000913 	.word	0x08000913
 80008c0:	08000941 	.word	0x08000941
 80008c4:	08000969 	.word	0x08000969
 80008c8:	080009cf 	.word	0x080009cf
 80008cc:	080009f1 	.word	0x080009f1
    {
    case START_CODE:
    {
      if (data[count] != ':')
 80008d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b3a      	cmp	r3, #58	; 0x3a
 80008dc:	d001      	beq.n	80008e2 <app_ota_handle_data_receive+0x62>
        return STATE_ERRORS;
 80008de:	2300      	movs	r3, #0
 80008e0:	e0cc      	b.n	8000a7c <app_ota_handle_data_receive+0x1fc>
      else
        state = BYTE_COUNT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80008e8:	e0bb      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case BYTE_COUNT:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 80008ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	18d1      	adds	r1, r2, r3
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2202      	movs	r2, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff47 	bl	800078c <app_ota_parse_element>
      hex_data->byte_count = buffer_save_data_hex[0];
 80008fe:	7d3a      	ldrb	r2, [r7, #20]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	701a      	strb	r2, [r3, #0]
      count                = 2U;
 8000904:	2302      	movs	r3, #2
 8000906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = ADDRESS;
 800090a:	2302      	movs	r3, #2
 800090c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8000910:	e0a7      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case ADDRESS:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 4U);
 8000912:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	18d1      	adds	r1, r2, r3
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2204      	movs	r2, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff33 	bl	800078c <app_ota_parse_element>
      hex_data->address[0] = buffer_save_data_hex[0];
 8000926:	7d3a      	ldrb	r2, [r7, #20]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	705a      	strb	r2, [r3, #1]
      hex_data->address[1] = buffer_save_data_hex[1];
 800092c:	7d7a      	ldrb	r2, [r7, #21]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	709a      	strb	r2, [r3, #2]
      count                = 6U;
 8000932:	2306      	movs	r3, #6
 8000934:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = RECORD_TYPE;
 8000938:	2303      	movs	r3, #3
 800093a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 800093e:	e090      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case RECORD_TYPE:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 8000940:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	18d1      	adds	r1, r2, r3
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2202      	movs	r2, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff1c 	bl	800078c <app_ota_parse_element>
      hex_data->record_type = buffer_save_data_hex[0];
 8000954:	7d3a      	ldrb	r2, [r7, #20]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	70da      	strb	r2, [r3, #3]
      count                 = 8U;
 800095a:	2308      	movs	r3, #8
 800095c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                 = DATA;
 8000960:	2304      	movs	r3, #4
 8000962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8000966:	e07c      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case DATA:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], (hex_data->byte_count * 2U));
 8000968:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	18d1      	adds	r1, r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff05 	bl	800078c <app_ota_parse_element>
      for (count = 0; count < hex_data->byte_count; count++)
 8000982:	2300      	movs	r3, #0
 8000984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000988:	e010      	b.n	80009ac <app_ota_handle_data_receive+0x12c>
      {
        hex_data->data[count] = buffer_save_data_hex[count];
 800098a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800098e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000992:	3228      	adds	r2, #40	; 0x28
 8000994:	443a      	add	r2, r7
 8000996:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	460a      	mov	r2, r1
 80009a0:	711a      	strb	r2, [r3, #4]
      for (count = 0; count < hex_data->byte_count; count++)
 80009a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009a6:	3301      	adds	r3, #1
 80009a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3e8      	bcc.n	800098a <app_ota_handle_data_receive+0x10a>
      }
      count = 8U + (hex_data->byte_count * 2U);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state = CHECKSUM;
 80009c6:	2305      	movs	r3, #5
 80009c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80009cc:	e049      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case CHECKSUM:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 80009ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	18d1      	adds	r1, r2, r3
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2202      	movs	r2, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fed5 	bl	800078c <app_ota_parse_element>
      hex_data->check_sum = buffer_save_data_hex[0];
 80009e2:	7d3a      	ldrb	r2, [r7, #20]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	751a      	strb	r2, [r3, #20]
      state               = DONE;
 80009e8:	2306      	movs	r3, #6
 80009ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80009ee:	e038      	b.n	8000a62 <app_ota_handle_data_receive+0x1e2>
    }
    case DONE:
    {
      /* check sum data hex */
      cal_check_sum = hex_data->byte_count + hex_data->address[0] + hex_data->address[1] + hex_data->record_type;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4413      	add	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	4413      	add	r3, r2
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	78db      	ldrb	r3, [r3, #3]
 8000a08:	4413      	add	r3, r2
 8000a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a14:	e00e      	b.n	8000a34 <app_ota_handle_data_receive+0x1b4>
      {
        cal_check_sum += hex_data->data[count];
 8000a16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	791a      	ldrb	r2, [r3, #4]
 8000a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a24:	4413      	add	r3, r2
 8000a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 8000a2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3ea      	bcc.n	8000a16 <app_ota_handle_data_receive+0x196>
      }
      cal_check_sum = ~cal_check_sum + 1U;
 8000a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a44:	425b      	negs	r3, r3
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (cal_check_sum == hex_data->check_sum)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	7d1b      	ldrb	r3, [r3, #20]
 8000a4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d101      	bne.n	8000a5a <app_ota_handle_data_receive+0x1da>
        return STATE_NO_ERRORS;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e010      	b.n	8000a7c <app_ota_handle_data_receive+0x1fc>
      else
        return STATE_ERRORS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e00e      	b.n	8000a7c <app_ota_handle_data_receive+0x1fc>
    }
    default: return STATE_ERRORS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e00c      	b.n	8000a7c <app_ota_handle_data_receive+0x1fc>
  for (uint8_t count = 0; count < size; count++)
 8000a62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a66:	3301      	adds	r3, #1
 8000a68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	88fa      	ldrh	r2, [r7, #6]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f63f af14 	bhi.w	80008a2 <app_ota_handle_data_receive+0x22>
    }
  }
  return STATE_ERRORS;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <app_ota_handle_data_receive_dma>:

void app_ota_handle_data_receive_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	80fb      	strh	r3, [r7, #6]
  app_ota_hex_form_data_t hex_data;
  uint8_t                *buff = data;
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (buff[0])
 8000a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	3b3a      	subs	r3, #58	; 0x3a
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	f200 80c2 	bhi.w	8000c26 <app_ota_handle_data_receive_dma+0x1a2>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <app_ota_handle_data_receive_dma+0x24>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000bc1 	.word	0x08000bc1
 8000aac:	08000c27 	.word	0x08000c27
 8000ab0:	08000c27 	.word	0x08000c27
 8000ab4:	08000c27 	.word	0x08000c27
 8000ab8:	08000c27 	.word	0x08000c27
 8000abc:	08000c27 	.word	0x08000c27
 8000ac0:	08000c27 	.word	0x08000c27
 8000ac4:	08000c27 	.word	0x08000c27
 8000ac8:	08000c27 	.word	0x08000c27
 8000acc:	08000c27 	.word	0x08000c27
 8000ad0:	08000c27 	.word	0x08000c27
 8000ad4:	08000c27 	.word	0x08000c27
 8000ad8:	08000c27 	.word	0x08000c27
 8000adc:	08000c27 	.word	0x08000c27
 8000ae0:	08000c27 	.word	0x08000c27
 8000ae4:	08000c27 	.word	0x08000c27
 8000ae8:	08000c27 	.word	0x08000c27
 8000aec:	08000c27 	.word	0x08000c27
 8000af0:	08000c27 	.word	0x08000c27
 8000af4:	08000c27 	.word	0x08000c27
 8000af8:	08000c27 	.word	0x08000c27
 8000afc:	08000c27 	.word	0x08000c27
 8000b00:	08000c27 	.word	0x08000c27
 8000b04:	08000c27 	.word	0x08000c27
 8000b08:	08000c27 	.word	0x08000c27
 8000b0c:	08000b3d 	.word	0x08000b3d
 8000b10:	08000c27 	.word	0x08000c27
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000c27 	.word	0x08000c27
 8000b1c:	08000c27 	.word	0x08000c27
 8000b20:	08000ba9 	.word	0x08000ba9
 8000b24:	08000c27 	.word	0x08000c27
 8000b28:	08000c17 	.word	0x08000c17
  {
  /* flag ota update */
  case APP_OTA_UPDATE_FW:
  {
    flag_ota_update = TRUE;
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <app_ota_handle_data_receive_dma+0x1b8>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
    /* send confirm character */
    bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000b32:	4943      	ldr	r1, [pc, #268]	; (8000c40 <app_ota_handle_data_receive_dma+0x1bc>)
 8000b34:	4843      	ldr	r0, [pc, #268]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000b36:	f000 faa3 	bl	8001080 <bsp_uart_printf>
    break;
 8000b3a:	e077      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
  }
  /* flag check size flash memory */
  case APP_OTA_CHECK_SIZE_FLASH:
  {
    size_current  = 0;
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <app_ota_handle_data_receive_dma+0x1c4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
    uint8_t index = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (buff[index] != '\n')
 8000b48:	e014      	b.n	8000b74 <app_ota_handle_data_receive_dma+0xf0>
    {
      size_current = size_current * 10 + (buff[index] - 48);
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <app_ota_handle_data_receive_dma+0x1c4>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	440b      	add	r3, r1
 8000b64:	3b30      	subs	r3, #48	; 0x30
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <app_ota_handle_data_receive_dma+0x1c4>)
 8000b68:	6013      	str	r3, [r2, #0]
      index++;
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (buff[index] != '\n')
 8000b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	d1e3      	bne.n	8000b4a <app_ota_handle_data_receive_dma+0xc6>
    }
    if (size_current > max_size_flash)
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <app_ota_handle_data_receive_dma+0x1c4>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <app_ota_handle_data_receive_dma+0x1c8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d904      	bls.n	8000b98 <app_ota_handle_data_receive_dma+0x114>
      /* send char cancel update because over size flash memory */
      bsp_uart_printf(USART_UD, APP_OTA_CANCEL_UPDATE);
 8000b8e:	4930      	ldr	r1, [pc, #192]	; (8000c50 <app_ota_handle_data_receive_dma+0x1cc>)
 8000b90:	482c      	ldr	r0, [pc, #176]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000b92:	f000 fa75 	bl	8001080 <bsp_uart_printf>
    {
      /* send confirm character */
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
      flag_size_flash = TRUE;
    }
    break;
 8000b96:	e049      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000b98:	4929      	ldr	r1, [pc, #164]	; (8000c40 <app_ota_handle_data_receive_dma+0x1bc>)
 8000b9a:	482a      	ldr	r0, [pc, #168]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000b9c:	f000 fa70 	bl	8001080 <bsp_uart_printf>
      flag_size_flash = TRUE;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <app_ota_handle_data_receive_dma+0x1d0>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
    break;
 8000ba6:	e041      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
  }
  /* flag ota start */
  case APP_OTA_UPDATE_START:
  {
    if (flag_earse_ok == TRUE)
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <app_ota_handle_data_receive_dma+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d13c      	bne.n	8000c2a <app_ota_handle_data_receive_dma+0x1a6>
    {
      flag_earse_ok = FALSE;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <app_ota_handle_data_receive_dma+0x1d4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
      /* send confirm character */
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000bb6:	4922      	ldr	r1, [pc, #136]	; (8000c40 <app_ota_handle_data_receive_dma+0x1bc>)
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000bba:	f000 fa61 	bl	8001080 <bsp_uart_printf>
    }
    break;
 8000bbe:	e034      	b.n	8000c2a <app_ota_handle_data_receive_dma+0x1a6>
  }
  /* ota data received */
  case ':':
  {
    /* check data correct ? */
    if ((app_ota_handle_data_receive(&hex_data, buff, size) == STATE_NO_ERRORS) && flag_ota_update && flag_size_flash)
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe59 	bl	8000880 <app_ota_handle_data_receive>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d11a      	bne.n	8000c0a <app_ota_handle_data_receive_dma+0x186>
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <app_ota_handle_data_receive_dma+0x1b8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d016      	beq.n	8000c0a <app_ota_handle_data_receive_dma+0x186>
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <app_ota_handle_data_receive_dma+0x1d0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d012      	beq.n	8000c0a <app_ota_handle_data_receive_dma+0x186>
    {
      /* write data receive to flash memory */
      app_ota_write_flash_memory(&hex_data);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fc8d 	bl	8000508 <app_ota_write_flash_memory>
      if (!address_write_flash)
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <app_ota_handle_data_receive_dma+0x1d8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <app_ota_handle_data_receive_dma+0x17c>
        /* address write memory errors */
        bsp_uart_printf(USART_UD, APP_OTA_CANCEL_UPDATE);
 8000bf6:	4916      	ldr	r1, [pc, #88]	; (8000c50 <app_ota_handle_data_receive_dma+0x1cc>)
 8000bf8:	4812      	ldr	r0, [pc, #72]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000bfa:	f000 fa41 	bl	8001080 <bsp_uart_printf>
      if (!address_write_flash)
 8000bfe:	e009      	b.n	8000c14 <app_ota_handle_data_receive_dma+0x190>
      else
        /* data write successful */
        bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <app_ota_handle_data_receive_dma+0x1bc>)
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000c04:	f000 fa3c 	bl	8001080 <bsp_uart_printf>
      if (!address_write_flash)
 8000c08:	e004      	b.n	8000c14 <app_ota_handle_data_receive_dma+0x190>
    }
    else
      /* data receive miss or error */
      bsp_uart_printf(USART_UD, APP_OTA_RESEND_DATA);
 8000c0a:	4915      	ldr	r1, [pc, #84]	; (8000c60 <app_ota_handle_data_receive_dma+0x1dc>)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000c0e:	f000 fa37 	bl	8001080 <bsp_uart_printf>
    break;
 8000c12:	e00b      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
 8000c14:	e00a      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
  }
  /* flag ota firmware update complete */
  case APP_OTA_UPDATE_FW_COMPLETE:
  {
    flag_ota_complete = TRUE;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <app_ota_handle_data_receive_dma+0x1e0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
    /* send confirm character */
    bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <app_ota_handle_data_receive_dma+0x1bc>)
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <app_ota_handle_data_receive_dma+0x1c0>)
 8000c20:	f000 fa2e 	bl	8001080 <bsp_uart_printf>
    break;
 8000c24:	e002      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
  }
  default: break;
 8000c26:	bf00      	nop
 8000c28:	e000      	b.n	8000c2c <app_ota_handle_data_receive_dma+0x1a8>
    break;
 8000c2a:	bf00      	nop
  }
  free(buff);
 8000c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c2e:	f004 f8d1 	bl	8004dd4 <free>
}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000090 	.word	0x20000090
 8000c40:	08004ec0 	.word	0x08004ec0
 8000c44:	20000114 	.word	0x20000114
 8000c48:	20000094 	.word	0x20000094
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	08004ec4 	.word	0x08004ec4
 8000c54:	20000091 	.word	0x20000091
 8000c58:	20000093 	.word	0x20000093
 8000c5c:	2000009c 	.word	0x2000009c
 8000c60:	08004ec8 	.word	0x08004ec8
 8000c64:	20000092 	.word	0x20000092

08000c68 <bsp_flash_unlock>:

#define KEY1 (uint32_t) 0x45670123
#define KEY2 (uint32_t) 0xCDEF89AB

void bsp_flash_unlock(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  FLASH->KEYR = KEY1;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <bsp_flash_unlock+0x1c>)
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <bsp_flash_unlock+0x20>)
 8000c70:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = KEY2;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <bsp_flash_unlock+0x1c>)
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <bsp_flash_unlock+0x24>)
 8000c76:	605a      	str	r2, [r3, #4]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00
 8000c88:	45670123 	.word	0x45670123
 8000c8c:	cdef89ab 	.word	0xcdef89ab

08000c90 <bsp_get_sector_from_address>:

uint8_t bsp_get_sector_from_address(uint32_t start_address)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint8_t sector_number = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
  if ((start_address >= 0x08000000) && (start_address < 0x08003FFF))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ca2:	d306      	bcc.n	8000cb2 <bsp_get_sector_from_address+0x22>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <bsp_get_sector_from_address+0xc8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d802      	bhi.n	8000cb2 <bsp_get_sector_from_address+0x22>
    sector_number = BSP_FLASH_SECTOR_0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e04b      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08004000) && (start_address < 0x08007FFF))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <bsp_get_sector_from_address+0xcc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d306      	bcc.n	8000cc8 <bsp_get_sector_from_address+0x38>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <bsp_get_sector_from_address+0xd0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d802      	bhi.n	8000cc8 <bsp_get_sector_from_address+0x38>
    sector_number = BSP_FLASH_SECTOR_1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e040      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08008000) && (start_address < 0x0800BFFF))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <bsp_get_sector_from_address+0xd4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d306      	bcc.n	8000cde <bsp_get_sector_from_address+0x4e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <bsp_get_sector_from_address+0xd8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d802      	bhi.n	8000cde <bsp_get_sector_from_address+0x4e>
    sector_number = BSP_FLASH_SECTOR_2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e035      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x0800C000) && (start_address < 0x0800FFFF))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <bsp_get_sector_from_address+0xdc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d306      	bcc.n	8000cf4 <bsp_get_sector_from_address+0x64>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <bsp_get_sector_from_address+0xe0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d202      	bcs.n	8000cf4 <bsp_get_sector_from_address+0x64>
    sector_number = BSP_FLASH_SECTOR_3;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e02a      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08010000) && (start_address < 0x0801FFFF))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <bsp_get_sector_from_address+0xe0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d906      	bls.n	8000d0a <bsp_get_sector_from_address+0x7a>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <bsp_get_sector_from_address+0xe4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d202      	bcs.n	8000d0a <bsp_get_sector_from_address+0x7a>
    sector_number = BSP_FLASH_SECTOR_4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e01f      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08020000) && (start_address < 0x0803FFFF))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <bsp_get_sector_from_address+0xe4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d906      	bls.n	8000d20 <bsp_get_sector_from_address+0x90>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <bsp_get_sector_from_address+0xe8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d202      	bcs.n	8000d20 <bsp_get_sector_from_address+0x90>
    sector_number = BSP_FLASH_SECTOR_5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e014      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08040000) && (start_address < 0x0805FFFF))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <bsp_get_sector_from_address+0xe8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d906      	bls.n	8000d36 <bsp_get_sector_from_address+0xa6>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <bsp_get_sector_from_address+0xec>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d202      	bcs.n	8000d36 <bsp_get_sector_from_address+0xa6>
    sector_number = BSP_FLASH_SECTOR_6;
 8000d30:	2306      	movs	r3, #6
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e009      	b.n	8000d4a <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08060000) && (start_address < 0x0807FFFF))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <bsp_get_sector_from_address+0xec>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d905      	bls.n	8000d4a <bsp_get_sector_from_address+0xba>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <bsp_get_sector_from_address+0xf0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d201      	bcs.n	8000d4a <bsp_get_sector_from_address+0xba>
    sector_number = BSP_FLASH_SECTOR_7;
 8000d46:	2307      	movs	r3, #7
 8000d48:	73fb      	strb	r3, [r7, #15]
  return sector_number;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	08003ffe 	.word	0x08003ffe
 8000d5c:	08004000 	.word	0x08004000
 8000d60:	08007ffe 	.word	0x08007ffe
 8000d64:	08008000 	.word	0x08008000
 8000d68:	0800bffe 	.word	0x0800bffe
 8000d6c:	0800c000 	.word	0x0800c000
 8000d70:	0800ffff 	.word	0x0800ffff
 8000d74:	0801ffff 	.word	0x0801ffff
 8000d78:	0803ffff 	.word	0x0803ffff
 8000d7c:	0805ffff 	.word	0x0805ffff
 8000d80:	0807ffff 	.word	0x0807ffff

08000d84 <bsp_get_address_from_sector>:

uint32_t bsp_get_address_from_sector(uint8_t sector_number)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t address_sector = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  if (sector_number == BSP_FLASH_SECTOR_0)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d103      	bne.n	8000da0 <bsp_get_address_from_sector+0x1c>
    address_sector = 0x08000000;
 8000d98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	e028      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_1)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d102      	bne.n	8000dac <bsp_get_address_from_sector+0x28>
    address_sector = 0x08004000;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <bsp_get_address_from_sector+0x7c>)
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e022      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_2)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d102      	bne.n	8000db8 <bsp_get_address_from_sector+0x34>
    address_sector = 0x08008000;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <bsp_get_address_from_sector+0x80>)
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e01c      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_3)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d102      	bne.n	8000dc4 <bsp_get_address_from_sector+0x40>
    address_sector = 0x0800C000;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <bsp_get_address_from_sector+0x84>)
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e016      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_4)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d102      	bne.n	8000dd0 <bsp_get_address_from_sector+0x4c>
    address_sector = 0x08010000;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <bsp_get_address_from_sector+0x88>)
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e010      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_5)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d102      	bne.n	8000ddc <bsp_get_address_from_sector+0x58>
    address_sector = 0x08020000;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <bsp_get_address_from_sector+0x8c>)
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e00a      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_6)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d102      	bne.n	8000de8 <bsp_get_address_from_sector+0x64>
    address_sector = 0x08040000;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <bsp_get_address_from_sector+0x90>)
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e004      	b.n	8000df2 <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_7)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d101      	bne.n	8000df2 <bsp_get_address_from_sector+0x6e>
    address_sector = 0x08060000;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <bsp_get_address_from_sector+0x94>)
 8000df0:	60fb      	str	r3, [r7, #12]
  return address_sector;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	08004000 	.word	0x08004000
 8000e04:	08008000 	.word	0x08008000
 8000e08:	0800c000 	.word	0x0800c000
 8000e0c:	08010000 	.word	0x08010000
 8000e10:	08020000 	.word	0x08020000
 8000e14:	08040000 	.word	0x08040000
 8000e18:	08060000 	.word	0x08060000

08000e1c <bsp_flash_erase>:

bsp_flash_status_t bsp_flash_erase(uint32_t start_address)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8000e24:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e28:	60fb      	str	r3, [r7, #12]
  /* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000e2a:	e007      	b.n	8000e3c <bsp_flash_erase+0x20>
  {
    if (--time_out == 0x00)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <bsp_flash_erase+0x20>
    {
      return bsp_flash_status_errors;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e064      	b.n	8000f06 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d102      	bne.n	8000e50 <bsp_flash_erase+0x34>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1ed      	bne.n	8000e2c <bsp_flash_erase+0x10>
    }
  }
  /* Wating for Bsy bit */
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5c:	d101      	bne.n	8000e62 <bsp_flash_erase+0x46>
  {
    bsp_flash_unlock();
 8000e5e:	f7ff ff03 	bl	8000c68 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6c:	6113      	str	r3, [r2, #16]
  /* Set the SER bit in the FLASH_CR register */
  FLASH->CR |= FLASH_CR_SER;
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6113      	str	r3, [r2, #16]
  /* Program the FLASH_CR register to select a sector_number to erase */
  FLASH->CR |= bsp_get_sector_from_address(start_address) << 3;
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff08 	bl	8000c90 <bsp_get_sector_from_address>
 8000e80:	4603      	mov	r3, r0
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6113      	str	r3, [r2, #16]
  /* Set the STRT bit in the FLASH CR register */
  FLASH->CR |= FLASH_CR_STRT;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6113      	str	r3, [r2, #16]
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 8000e9c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ea0:	60fb      	str	r3, [r7, #12]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000ea2:	e007      	b.n	8000eb4 <bsp_flash_erase+0x98>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <bsp_flash_erase+0x98>
    {
      return bsp_flash_status_errors;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e028      	b.n	8000f06 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d102      	bne.n	8000ec8 <bsp_flash_erase+0xac>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1ed      	bne.n	8000ea4 <bsp_flash_erase+0x88>
    }
  }
  /* Check FLASH End of Operation flag  */
  if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <bsp_flash_erase+0xc4>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR &= ~FLASH_FLAG_EOP;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	60d3      	str	r3, [r2, #12]
  }
  /* Clear SER bit in the FLASH_CR register */
  FLASH->CR &= FLASH_CR_SER;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	6113      	str	r3, [r2, #16]
  /* Clear STRT bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_STRT;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <bsp_flash_erase+0xf4>)
 8000efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f02:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <bsp_flash_write>:

bsp_flash_status_t bsp_flash_write(volatile uint32_t start_address, uint32_t *buffer_write, uint32_t length)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t count    = 0u;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8000f24:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f28:	613b      	str	r3, [r7, #16]
  /* Check input parameters */
  if ((buffer_write == 0u) || (length == 0u))
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <bsp_flash_write+0x22>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <bsp_flash_write+0x36>
  {
    return bsp_flash_status_errors;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e05d      	b.n	8000ff6 <bsp_flash_write+0xe2>
  }
  /* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <bsp_flash_write+0x36>
    {
      return bsp_flash_status_errors;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e055      	b.n	8000ff6 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <bsp_flash_write+0xec>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f56:	d102      	bne.n	8000f5e <bsp_flash_write+0x4a>
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1ed      	bne.n	8000f3a <bsp_flash_write+0x26>
    }
  }
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <bsp_flash_write+0xec>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f6a:	d101      	bne.n	8000f70 <bsp_flash_write+0x5c>
  {
    bsp_flash_unlock();
 8000f6c:	f7ff fe7c 	bl	8000c68 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <bsp_flash_write+0xec>)
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <bsp_flash_write+0xec>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6113      	str	r3, [r2, #16]
  /* Write FLASH CR_PG to 1 */
  FLASH->CR |= FLASH_CR_PG;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <bsp_flash_write+0xec>)
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <bsp_flash_write+0xec>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6113      	str	r3, [r2, #16]
  /* Perform word write at the desired address */
  for (count = 0; count < length; count++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00c      	b.n	8000fa8 <bsp_flash_write+0x94>
  {
    *(__IO uint32_t *) (start_address + count * 4u) = *(uint32_t *) (buffer_write + count);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	0091      	lsls	r1, r2, #2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	440a      	add	r2, r1
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6013      	str	r3, [r2, #0]
  for (count = 0; count < length; count++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3ee      	bcc.n	8000f8e <bsp_flash_write+0x7a>
  }
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 8000fb0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fb4:	613b      	str	r3, [r7, #16]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000fb6:	e007      	b.n	8000fc8 <bsp_flash_write+0xb4>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <bsp_flash_write+0xb4>
    {
      return bsp_flash_status_errors;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e016      	b.n	8000ff6 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <bsp_flash_write+0xec>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d102      	bne.n	8000fdc <bsp_flash_write+0xc8>
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ed      	bne.n	8000fb8 <bsp_flash_write+0xa4>
    }
  }
  /* Clear PG bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_PG;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <bsp_flash_write+0xec>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <bsp_flash_write+0xec>)
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <bsp_flash_write+0xec>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <bsp_flash_write+0xec>)
 8000fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff2:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db12      	blt.n	800103c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <__NVIC_DisableIRQ+0x44>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	3320      	adds	r3, #32
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001030:	f3bf 8f4f 	dsb	sy
}
 8001034:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001036:	f3bf 8f6f 	isb	sy
}
 800103a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <bsp_uart_init>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bsp_uart_init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Init UART */
  buffer_save_data_handle = rx_buffer;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <bsp_uart_init+0x20>)
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <bsp_uart_init+0x24>)
 8001054:	601a      	str	r2, [r3, #0]
  bsp_uart_dma_unregister_callback(&hdma_usart1_rx, HAL_DMA_XFER_HALFCPLT_CB_ID);
 8001056:	2101      	movs	r1, #1
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <bsp_uart_init+0x28>)
 800105a:	f000 f836 	bl	80010ca <bsp_uart_dma_unregister_callback>
  /* receive data uart dma */
  bsp_uart_receive_to_idle_dma(&huart1, data_receive_dma, RX_BUFFER_SIZE);
 800105e:	2232      	movs	r2, #50	; 0x32
 8001060:	4905      	ldr	r1, [pc, #20]	; (8001078 <bsp_uart_init+0x2c>)
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <bsp_uart_init+0x30>)
 8001064:	f000 f81b 	bl	800109e <bsp_uart_receive_to_idle_dma>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000010c 	.word	0x2000010c
 8001070:	200000d8 	.word	0x200000d8
 8001074:	2000019c 	.word	0x2000019c
 8001078:	200000a4 	.word	0x200000a4
 800107c:	20000114 	.word	0x20000114

08001080 <bsp_uart_printf>:

void bsp_uart_printf(UART_HandleTypeDef *huart, uint8_t *string)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, string, sizeof(string), TIME_OUT_TRANSMIT_UART);
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2204      	movs	r2, #4
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f002 fc93 	bl	80039bc <HAL_UART_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <bsp_uart_receive_to_idle_dma>:

void bsp_uart_receive_to_idle_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(huart, data, size))
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f002 fd14 	bl	8003ae0 <HAL_UARTEx_ReceiveToIdle_DMA>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <bsp_uart_receive_to_idle_dma+0x24>
  {
    Error_Handler();
 80010be:	f000 fa2d 	bl	800151c <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <bsp_uart_dma_unregister_callback>:

void bsp_uart_dma_unregister_callback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	70fb      	strb	r3, [r7, #3]
  HAL_DMA_UnRegisterCallback(hdma, CallbackID);
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 f8f0 	bl	80022c0 <HAL_DMA_UnRegisterCallback>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <bsp_uart_deinit_peripheral>:

void bsp_uart_deinit_peripheral(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(USART1_IRQn);
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f7ff ff89 	bl	8001004 <__NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
 80010f2:	203a      	movs	r0, #58	; 0x3a
 80010f4:	f000 fd49 	bl	8001b8a <HAL_NVIC_DisableIRQ>

  HAL_UART_DeInit(&huart1);
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <bsp_uart_deinit_peripheral+0x28>)
 80010fa:	f002 fc30 	bl	800395e <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <bsp_uart_deinit_peripheral+0x2c>)
 8001100:	f002 fc2d 	bl	800395e <HAL_UART_DeInit>
  HAL_DMA_DeInit(&hdma_usart1_rx);
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <bsp_uart_deinit_peripheral+0x30>)
 8001106:	f000 fe09 	bl	8001d1c <HAL_DMA_DeInit>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000114 	.word	0x20000114
 8001114:	20000158 	.word	0x20000158
 8001118:	2000019c 	.word	0x2000019c

0800111c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	; 0x58
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
  uint16_t number_char_receive;
  uint8_t  check_data_full[50];

  /* read data receive from dma */
  if ((huart->Instance == USART1))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a63      	ldr	r2, [pc, #396]	; (80012bc <HAL_UARTEx_RxEventCallback+0x1a0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	f040 80c1 	bne.w	80012b6 <HAL_UARTEx_RxEventCallback+0x19a>
  {
    static uint16_t old_pos = 0;
    uint16_t        i;

    /* check data when dma transfer complete */
    if (g_flag_cplt_dma)
 8001134:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d031      	beq.n	80011a0 <HAL_UARTEx_RxEventCallback+0x84>
    {
      g_flag_cplt_dma = FALSE;
 800113c:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < size - old_pos; i++)
 8001142:	2300      	movs	r3, #0
 8001144:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001148:	e012      	b.n	8001170 <HAL_UARTEx_RxEventCallback+0x54>
      {
        check_data_full[i] = data_receive_dma[old_pos + i];
 800114a:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001154:	441a      	add	r2, r3
 8001156:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800115a:	495b      	ldr	r1, [pc, #364]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800115c:	5c8a      	ldrb	r2, [r1, r2]
 800115e:	3358      	adds	r3, #88	; 0x58
 8001160:	443b      	add	r3, r7
 8001162:	f803 2c38 	strb.w	r2, [r3, #-56]
      for (i = 0; i < size - old_pos; i++)
 8001166:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800116a:	3301      	adds	r3, #1
 800116c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001170:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4953      	ldr	r1, [pc, #332]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001178:	8809      	ldrh	r1, [r1, #0]
 800117a:	1a5b      	subs	r3, r3, r1
 800117c:	429a      	cmp	r2, r3
 800117e:	dbe4      	blt.n	800114a <HAL_UARTEx_RxEventCallback+0x2e>
      }
      app_ota_hex_form_data_t hex_data;
      /* check data form correct */
      if (app_ota_handle_data_receive(&hex_data, check_data_full, size - old_pos) == STATE_ERRORS)
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0120 	add.w	r1, r7, #32
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fb74 	bl	8000880 <app_ota_handle_data_receive>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 808b 	beq.w	80012b6 <HAL_UARTEx_RxEventCallback+0x19a>
        return;
    }

    /* check if new data */
    if (size != old_pos)
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	f000 8082 	beq.w	80012b0 <HAL_UARTEx_RxEventCallback+0x194>
    {
      /* check wraps around index data */
      if (size > old_pos)
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d923      	bls.n	80011fe <HAL_UARTEx_RxEventCallback+0xe2>
      {
        number_char_receive = size - old_pos;
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        for (i = 0; i < number_char_receive; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80011c8:	e012      	b.n	80011f0 <HAL_UARTEx_RxEventCallback+0xd4>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011d4:	441a      	add	r2, r3
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1b0>)
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011de:	440b      	add	r3, r1
 80011e0:	4939      	ldr	r1, [pc, #228]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80011e2:	5c8a      	ldrb	r2, [r1, r2]
 80011e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 80011e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80011f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80011f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d3e6      	bcc.n	80011ca <HAL_UARTEx_RxEventCallback+0xae>
 80011fc:	e046      	b.n	800128c <HAL_UARTEx_RxEventCallback+0x170>
        }
      }
      else
      {
        number_char_receive = RX_BUFFER_SIZE - old_pos;
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001206:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        for (i = 0; i < number_char_receive; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001210:	e012      	b.n	8001238 <HAL_UARTEx_RxEventCallback+0x11c>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800121c:	441a      	add	r2, r3
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001226:	440b      	add	r3, r1
 8001228:	4927      	ldr	r1, [pc, #156]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 800122e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001232:	3301      	adds	r3, #1
 8001234:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001238:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800123c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001240:	429a      	cmp	r2, r3
 8001242:	d3e6      	bcc.n	8001212 <HAL_UARTEx_RxEventCallback+0xf6>
        }
        if (size > 0)
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d020      	beq.n	800128c <HAL_UARTEx_RxEventCallback+0x170>
        {
          for (i = 0; i < size; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001250:	e011      	b.n	8001276 <HAL_UARTEx_RxEventCallback+0x15a>
          {
            /* read data from buffer dma */
            buffer_save_data_handle[number_char_receive + i] = data_receive_dma[i];
 8001252:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 800125e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8001262:	4401      	add	r1, r0
 8001264:	440b      	add	r3, r1
 8001266:	4918      	ldr	r1, [pc, #96]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001268:	5c8a      	ldrb	r2, [r1, r2]
 800126a:	701a      	strb	r2, [r3, #0]
          for (i = 0; i < size; i++)
 800126c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001270:	3301      	adds	r3, #1
 8001272:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001276:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3e8      	bcc.n	8001252 <HAL_UARTEx_RxEventCallback+0x136>
          }
          number_char_receive += size;
 8001280:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	4413      	add	r3, r2
 8001288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }
      }

#ifdef DEBUG
      bsp_uart_printf(&huart2, buffer_save_data_handle);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1b0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001294:	f7ff fef4 	bl	8001080 <bsp_uart_printf>
      bsp_uart_printf(&huart2, (uint8_t *) "\n");
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800129c:	f7ff fef0 	bl	8001080 <bsp_uart_printf>
#endif
      /* handle data read */
      app_ota_handle_data_receive_dma(huart, buffer_save_data_handle, number_char_receive);
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1b0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fbea 	bl	8000a84 <app_ota_handle_data_receive_dma>
    }
    old_pos = size;
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	8013      	strh	r3, [r2, #0]
  }
}
 80012b6:	3758      	adds	r7, #88	; 0x58
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40011000 	.word	0x40011000
 80012c0:	200000a0 	.word	0x200000a0
 80012c4:	20000110 	.word	0x20000110
 80012c8:	200000a4 	.word	0x200000a4
 80012cc:	2000010c 	.word	0x2000010c
 80012d0:	20000158 	.word	0x20000158
 80012d4:	08004ecc 	.word	0x08004ecc

080012d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 faba 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f80e 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 f8f2 	bl	80014cc <MX_GPIO_Init>
  MX_DMA_Init();
 80012e8:	f000 f8d0 	bl	800148c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012ec:	f000 f87a 	bl	80013e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012f0:	f000 f8a2 	bl	8001438 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  app_ota_start_up_bootloader();
 80012f4:	f7ff f9c2 	bl	800067c <app_ota_start_up_bootloader>
  app_ota_jump_to_firmware();
 80012f8:	f7ff fa22 	bl	8000740 <app_ota_jump_to_firmware>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <main+0x24>
	...

08001300 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	; 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2234      	movs	r2, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fd68 	bl	8004de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <SystemClock_Config+0xdc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <SystemClock_Config+0xdc>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <SystemClock_Config+0xdc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <SystemClock_Config+0xe0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <SystemClock_Config+0xe0>)
 800134a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <SystemClock_Config+0xe0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM            = 8;
 8001370:	2308      	movs	r3, #8
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN            = 180;
 8001374:	23b4      	movs	r3, #180	; 0xb4
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ            = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR            = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fffd 	bl	8003388 <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001394:	f000 f8c2 	bl	800151c <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001398:	f001 fb64 	bl	8002a64 <HAL_PWREx_EnableOverDrive>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013a2:	f000 f8bb 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a6:	230f      	movs	r3, #15
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	2105      	movs	r1, #5
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fb9d 	bl	8002b04 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013d0:	f000 f8a4 	bl	800151c <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3750      	adds	r7, #80	; 0x50
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f002 fa52 	bl	80038c4 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f879 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000114 	.word	0x20000114
 8001434:	40011000 	.word	0x40011000

08001438 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART2_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x4c>)
 8001470:	f002 fa28 	bl	80038c4 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f84f 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000158 	.word	0x20000158
 8001488:	40004400 	.word	0x40004400

0800148c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_DMA_Init+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <MX_DMA_Init+0x3c>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_DMA_Init+0x3c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	203a      	movs	r0, #58	; 0x3a
 80014b4:	f000 fb3f 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b8:	203a      	movs	r0, #58	; 0x3a
 80014ba:	f000 fb58 	bl	8001b6e <HAL_NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_GPIO_Init+0x4c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <MX_GPIO_Init+0x4c>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_GPIO_Init+0x4c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_GPIO_Init+0x4c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <MX_GPIO_Init+0x4c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_GPIO_Init+0x4c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_MspInit+0x4c>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_MspInit+0x4c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d164      	bne.n	8001664 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	483a      	ldr	r0, [pc, #232]	; (80016d8 <HAL_UART_MspInit+0x160>)
 80015f0:	f000 ffb0 	bl	8002554 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_UART_MspInit+0x164>)
 80015f6:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_UART_MspInit+0x168>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_UART_MspInit+0x164>)
 80015fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_UART_MspInit+0x164>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_UART_MspInit+0x164>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HAL_UART_MspInit+0x164>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001636:	4829      	ldr	r0, [pc, #164]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001638:	f000 fac2 	bl	8001bc0 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001642:	f7ff ff6b 	bl	800151c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_UART_MspInit+0x164>)
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
 800164c:	4a23      	ldr	r2, [pc, #140]	; (80016dc <HAL_UART_MspInit+0x164>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2025      	movs	r0, #37	; 0x25
 8001658:	f000 fa6d 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800165c:	2025      	movs	r0, #37	; 0x25
 800165e:	f000 fa86 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001662:	e030      	b.n	80016c6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_UART_MspInit+0x16c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a6:	230c      	movs	r3, #12
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x160>)
 80016c2:	f000 ff47 	bl	8002554 <HAL_GPIO_Init>
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	; 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	2000019c 	.word	0x2000019c
 80016e0:	40026440 	.word	0x40026440
 80016e4:	40004400 	.word	0x40004400

080016e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_UART_MspDeInit+0x60>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d113      	bne.n	8001722 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_UART_MspDeInit+0x64>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_UART_MspDeInit+0x64>)
 8001700:	f023 0310 	bic.w	r3, r3, #16
 8001704:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001706:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <HAL_UART_MspDeInit+0x68>)
 800170c:	f001 f8b6 	bl	800287c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fb01 	bl	8001d1c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800171a:	2025      	movs	r0, #37	; 0x25
 800171c:	f000 fa35 	bl	8001b8a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001720:	e00e      	b.n	8001740 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_UART_MspDeInit+0x6c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d109      	bne.n	8001740 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_UART_MspDeInit+0x64>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_UART_MspDeInit+0x64>)
 8001732:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001738:	210c      	movs	r1, #12
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspDeInit+0x68>)
 800173c:	f001 f89e 	bl	800287c <HAL_GPIO_DeInit>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40011000 	.word	0x40011000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000
 8001754:	40004400 	.word	0x40004400

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f8a8 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USART1_IRQHandler+0x10>)
 80017b2:	f002 f9fb 	bl	8003bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000114 	.word	0x20000114

080017c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <DMA2_Stream2_IRQHandler+0x14>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017ca:	4803      	ldr	r0, [pc, #12]	; (80017d8 <DMA2_Stream2_IRQHandler+0x18>)
 80017cc:	f000 fbee 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200000a0 	.word	0x200000a0
 80017d8:	2000019c 	.word	0x2000019c

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182a:	f7ff ffd7 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f003 faad 	bl	8004d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fd51 	bl	80012d8 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001844:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 8001848:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800184c:	20000208 	.word	0x20000208

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f94f 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fe4e 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f975 	bl	8001ba6 <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f92f 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000004 	.word	0x20000004
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	20000008 	.word	0x20000008

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000000c 	.word	0x2000000c
 800191c:	200001fc 	.word	0x200001fc

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200001fc 	.word	0x200001fc

08001938 <__NVIC_SetPriorityGrouping>:
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_DisableIRQ>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db12      	blt.n	8001a10 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	490a      	ldr	r1, [pc, #40]	; (8001a1c <__NVIC_DisableIRQ+0x44>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	3320      	adds	r3, #32
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a04:	f3bf 8f4f 	dsb	sy
}
 8001a08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a0a:	f3bf 8f6f 	isb	sy
}
 8001a0e:	bf00      	nop
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff05 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff1a 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff8e 	bl	8001a74 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff0d 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff1d 	bl	80019d8 <__NVIC_DisableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff94 	bl	8001adc <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fea8 	bl	8001920 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e099      	b.n	8001d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfc:	e00f      	b.n	8001c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfe:	f7ff fe8f 	bl	8001920 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d908      	bls.n	8001c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e078      	b.n	8001d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e8      	bne.n	8001bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_DMA_Init+0x158>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d107      	bne.n	8001c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4313      	orrs	r3, r2
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d117      	bne.n	8001ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fbc9 	bl	800245c <DMA_CheckFifoParam>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e016      	b.n	8001d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fb80 	bl	80023f0 <DMA_CalcBaseAndBitshift>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	223f      	movs	r2, #63	; 0x3f
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	f010803f 	.word	0xf010803f

08001d1c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e050      	b.n	8001dd0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e048      	b.n	8001dd0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2221      	movs	r2, #33	; 0x21
 8001d7c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fb36 	bl	80023f0 <DMA_CalcBaseAndBitshift>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	223f      	movs	r2, #63	; 0x3f
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Start_IT+0x26>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e040      	b.n	8001e80 <HAL_DMA_Start_IT+0xa8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d12f      	bne.n	8001e72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fab4 	bl	8002394 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0216 	orr.w	r2, r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0208 	orr.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e005      	b.n	8001e7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e96:	f7ff fd43 	bl	8001920 <HAL_GetTick>
 8001e9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e052      	b.n	8001f60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0216 	bic.w	r2, r2, #22
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_DMA_Abort+0x62>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0a:	e013      	b.n	8001f34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0c:	f7ff fd08 	bl	8001920 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d90c      	bls.n	8001f34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e015      	b.n	8001f60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e4      	bne.n	8001f0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00c      	b.n	8001fa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_DMA_IRQHandler+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8e      	ldr	r2, [pc, #568]	; (80021f8 <HAL_DMA_IRQHandler+0x24c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808f 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e079      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02c      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
 80021f2:	bf00      	nop
 80021f4:	20000004 	.word	0x20000004
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d307      	bcc.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f2      	bne.n	8002278 <HAL_DMA_IRQHandler+0x2cc>
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_DMA_UnRegisterCallback+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e053      	b.n	8002386 <HAL_DMA_UnRegisterCallback+0xc6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d142      	bne.n	8002378 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d83c      	bhi.n	8002372 <HAL_DMA_UnRegisterCallback+0xb2>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_DMA_UnRegisterCallback+0x40>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	0800231d 	.word	0x0800231d
 8002304:	08002325 	.word	0x08002325
 8002308:	0800232d 	.word	0x0800232d
 800230c:	08002335 	.word	0x08002335
 8002310:	0800233d 	.word	0x0800233d
 8002314:	08002345 	.word	0x08002345
 8002318:	0800234d 	.word	0x0800234d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002322:	e02b      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800232a:	e027      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002332:	e023      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800233a:	e01f      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002342:	e01b      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800234a:	e017      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002370:	e004      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      break;
 8002376:	e001      	b.n	800237c <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d108      	bne.n	80023d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023d2:	e007      	b.n	80023e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3b10      	subs	r3, #16
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <DMA_CalcBaseAndBitshift+0x64>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <DMA_CalcBaseAndBitshift+0x68>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d909      	bls.n	8002432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	; 0x58
 8002430:	e007      	b.n	8002442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	aaaaaaab 	.word	0xaaaaaaab
 8002458:	08004ee8 	.word	0x08004ee8

0800245c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d856      	bhi.n	800252a <DMA_CheckFifoParam+0xce>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <DMA_CheckFifoParam+0x28>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a7 	.word	0x080024a7
 800248c:	08002495 	.word	0x08002495
 8002490:	0800252b 	.word	0x0800252b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d046      	beq.n	800252e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e043      	b.n	800252e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ae:	d140      	bne.n	8002532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e03d      	b.n	8002532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024be:	d121      	bne.n	8002504 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d837      	bhi.n	8002536 <DMA_CheckFifoParam+0xda>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <DMA_CheckFifoParam+0x70>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e3 	.word	0x080024e3
 80024d4:	080024dd 	.word	0x080024dd
 80024d8:	080024f5 	.word	0x080024f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      break;
 80024e0:	e030      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e022      	b.n	800253a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002502:	e01c      	b.n	800253e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d903      	bls.n	8002512 <DMA_CheckFifoParam+0xb6>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d003      	beq.n	8002518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002510:	e018      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e015      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e00b      	b.n	8002542 <DMA_CheckFifoParam+0xe6>
      break;
 800252a:	bf00      	nop
 800252c:	e00a      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e008      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e006      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e004      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;   
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
    }
  } 
  
  return status; 
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e165      	b.n	800283c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8154 	bne.w	8002836 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80ae 	beq.w	8002836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_GPIO_Init+0x300>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_GPIO_Init+0x304>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x308>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x30c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x310>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x314>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x318>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x20a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x31c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x206>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_GPIO_Init+0x320>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x202>
 8002752:	2306      	movs	r3, #6
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002756:	2307      	movs	r3, #7
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x21c>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_GPIO_Init+0x304>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_GPIO_Init+0x324>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_GPIO_Init+0x324>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_GPIO_Init+0x324>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f ae96 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40021400 	.word	0x40021400
 8002874:	40021800 	.word	0x40021800
 8002878:	40013c00 	.word	0x40013c00

0800287c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e0c7      	b.n	8002a28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002898:	2201      	movs	r2, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	f040 80b7 	bne.w	8002a22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028b4:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <HAL_GPIO_DeInit+0x1c4>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_GPIO_DeInit+0x1c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_DeInit+0xae>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a59      	ldr	r2, [pc, #356]	; (8002a48 <HAL_GPIO_DeInit+0x1cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_DeInit+0xaa>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a58      	ldr	r2, [pc, #352]	; (8002a4c <HAL_GPIO_DeInit+0x1d0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_DeInit+0xa6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_DeInit+0x1d4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_DeInit+0xa2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_DeInit+0x1d8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_DeInit+0x9e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_GPIO_DeInit+0x1dc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_DeInit+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_DeInit+0x1e0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_DeInit+0x96>
 800290e:	2306      	movs	r3, #6
 8002910:	e00c      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 8002912:	2307      	movs	r3, #7
 8002914:	e00a      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 8002916:	2305      	movs	r3, #5
 8002918:	e008      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 800291a:	2304      	movs	r3, #4
 800291c:	e006      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 800291e:	2303      	movs	r3, #3
 8002920:	e004      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 8002922:	2302      	movs	r3, #2
 8002924:	e002      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_GPIO_DeInit+0xb0>
 800292a:	2300      	movs	r3, #0
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	f002 0203 	and.w	r2, r2, #3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4093      	lsls	r3, r2
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	d132      	bne.n	80029a2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	4946      	ldr	r1, [pc, #280]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 8002946:	4013      	ands	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	4943      	ldr	r1, [pc, #268]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 8002954:	4013      	ands	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 8002962:	4013      	ands	r3, r2
 8002964:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002966:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	493c      	ldr	r1, [pc, #240]	; (8002a60 <HAL_GPIO_DeInit+0x1e4>)
 8002970:	4013      	ands	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_GPIO_DeInit+0x1c4>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	43da      	mvns	r2, r3
 8002994:	482a      	ldr	r0, [pc, #168]	; (8002a40 <HAL_GPIO_DeInit+0x1c4>)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	400a      	ands	r2, r1
 800299c:	3302      	adds	r3, #2
 800299e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2103      	movs	r1, #3
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	08d2      	lsrs	r2, r2, #3
 80029d8:	4019      	ands	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2103      	movs	r1, #3
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	2101      	movs	r1, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2103      	movs	r1, #3
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f af34 	bls.w	8002898 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40013c00 	.word	0x40013c00

08002a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7fe ff46 	bl	8001920 <HAL_GetTick>
 8002a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a96:	e009      	b.n	8002aac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a98:	f7fe ff42 	bl	8001920 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa6:	d901      	bls.n	8002aac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e01f      	b.n	8002aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_PWREx_EnableOverDrive+0x98>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7fe ff2e 	bl	8001920 <HAL_GetTick>
 8002ac4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ac6:	e009      	b.n	8002adc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac8:	f7fe ff2a 	bl	8001920 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad6:	d901      	bls.n	8002adc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e007      	b.n	8002aec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_PWREx_EnableOverDrive+0x98>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	420e0040 	.word	0x420e0040
 8002afc:	40007000 	.word	0x40007000
 8002b00:	420e0044 	.word	0x420e0044

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0cc      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d90c      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b8      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	494d      	ldr	r1, [pc, #308]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d044      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d119      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e067      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4934      	ldr	r1, [pc, #208]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7fe fe94 	bl	8001920 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7fe fe90 	bl	8001920 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e04f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d20c      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e032      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8a:	f000 f855 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	490a      	ldr	r1, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fdf4 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08004ed0 	.word	0x08004ed0
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff0 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08004ee0 	.word	0x08004ee0

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffdc 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08004ee0 	.word	0x08004ee0

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b0ae      	sub	sp, #184	; 0xb8
 8002d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5e:	4bcb      	ldr	r3, [pc, #812]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	f200 8206 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x440>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08003179 	.word	0x08003179
 8002d7c:	08003179 	.word	0x08003179
 8002d80:	08003179 	.word	0x08003179
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08003179 	.word	0x08003179
 8002d8c:	08003179 	.word	0x08003179
 8002d90:	08003179 	.word	0x08003179
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08003179 	.word	0x08003179
 8002d9c:	08003179 	.word	0x08003179
 8002da0:	08003179 	.word	0x08003179
 8002da4:	08002fa9 	.word	0x08002fa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4bb9      	ldr	r3, [pc, #740]	; (8003090 <HAL_RCC_GetSysClockFreq+0x358>)
 8002daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dae:	e1e7      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4bb8      	ldr	r3, [pc, #736]	; (8003094 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002db6:	e1e3      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db8:	4bb4      	ldr	r3, [pc, #720]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc4:	4bb1      	ldr	r3, [pc, #708]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d071      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4bae      	ldr	r3, [pc, #696]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ddc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4621      	mov	r1, r4
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	6439      	str	r1, [r7, #64]	; 0x40
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e28:	4649      	mov	r1, r9
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4641      	mov	r1, r8
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4641      	mov	r1, r8
 8002e38:	1a51      	subs	r1, r2, r1
 8002e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e50:	4649      	mov	r1, r9
 8002e52:	00cb      	lsls	r3, r1, #3
 8002e54:	4641      	mov	r1, r8
 8002e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	00ca      	lsls	r2, r1, #3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	4622      	mov	r2, r4
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	eb42 0303 	adc.w	r3, r2, r3
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e80:	4629      	mov	r1, r5
 8002e82:	024b      	lsls	r3, r1, #9
 8002e84:	4621      	mov	r1, r4
 8002e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	024a      	lsls	r2, r1, #9
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ea0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ea4:	f7fd f9ae 	bl	8000204 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb2:	e067      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb4:	4b75      	ldr	r3, [pc, #468]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ece:	2300      	movs	r3, #0
 8002ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ed2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f08:	4649      	mov	r1, r9
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4641      	mov	r1, r8
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4641      	mov	r1, r8
 8002f18:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f36:	4692      	mov	sl, r2
 8002f38:	469b      	mov	fp, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	462b      	mov	r3, r5
 8002f44:	eb4b 0303 	adc.w	r3, fp, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f56:	4629      	mov	r1, r5
 8002f58:	028b      	lsls	r3, r1, #10
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f60:	4621      	mov	r1, r4
 8002f62:	028a      	lsls	r2, r1, #10
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f70:	677a      	str	r2, [r7, #116]	; 0x74
 8002f72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f76:	f7fd f945 	bl	8000204 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4613      	mov	r3, r2
 8002f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fa6:	e0eb      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa8:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb4:	4b35      	ldr	r3, [pc, #212]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d06b      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	f04f 0000 	mov.w	r0, #0
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	0159      	lsls	r1, r3, #5
 8002fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fee:	0150      	lsls	r0, r2, #5
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	1a51      	subs	r1, r2, r1
 8002ff8:	61b9      	str	r1, [r7, #24]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800300e:	4659      	mov	r1, fp
 8003010:	018b      	lsls	r3, r1, #6
 8003012:	4651      	mov	r1, sl
 8003014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003018:	4651      	mov	r1, sl
 800301a:	018a      	lsls	r2, r1, #6
 800301c:	4651      	mov	r1, sl
 800301e:	ebb2 0801 	subs.w	r8, r2, r1
 8003022:	4659      	mov	r1, fp
 8003024:	eb63 0901 	sbc.w	r9, r3, r1
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003034:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003038:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303c:	4690      	mov	r8, r2
 800303e:	4699      	mov	r9, r3
 8003040:	4623      	mov	r3, r4
 8003042:	eb18 0303 	adds.w	r3, r8, r3
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	462b      	mov	r3, r5
 800304a:	eb49 0303 	adc.w	r3, r9, r3
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800305c:	4629      	mov	r1, r5
 800305e:	024b      	lsls	r3, r1, #9
 8003060:	4621      	mov	r1, r4
 8003062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003066:	4621      	mov	r1, r4
 8003068:	024a      	lsls	r2, r1, #9
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003072:	2200      	movs	r2, #0
 8003074:	65bb      	str	r3, [r7, #88]	; 0x58
 8003076:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003078:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800307c:	f7fd f8c2 	bl	8000204 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800308a:	e065      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x420>
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400
 8003094:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_GetSysClockFreq+0x458>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	4611      	mov	r1, r2
 80030a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a8:	653b      	str	r3, [r7, #80]	; 0x50
 80030aa:	2300      	movs	r3, #0
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
 80030ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030b2:	4642      	mov	r2, r8
 80030b4:	464b      	mov	r3, r9
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	0159      	lsls	r1, r3, #5
 80030c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c4:	0150      	lsls	r0, r2, #5
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4641      	mov	r1, r8
 80030cc:	1a51      	subs	r1, r2, r1
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	4649      	mov	r1, r9
 80030d2:	eb63 0301 	sbc.w	r3, r3, r1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030e4:	4659      	mov	r1, fp
 80030e6:	018b      	lsls	r3, r1, #6
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ee:	4651      	mov	r1, sl
 80030f0:	018a      	lsls	r2, r1, #6
 80030f2:	4651      	mov	r1, sl
 80030f4:	1a54      	subs	r4, r2, r1
 80030f6:	4659      	mov	r1, fp
 80030f8:	eb63 0501 	sbc.w	r5, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	464b      	mov	r3, r9
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312a:	4629      	mov	r1, r5
 800312c:	028b      	lsls	r3, r1, #10
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003134:	4621      	mov	r1, r4
 8003136:	028a      	lsls	r2, r1, #10
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003140:	2200      	movs	r2, #0
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
 8003144:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003146:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800314a:	f7fd f85b 	bl	8000204 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4613      	mov	r3, r2
 8003154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCC_GetSysClockFreq+0x458>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0f1b      	lsrs	r3, r3, #28
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800316a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003176:	e003      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_GetSysClockFreq+0x45c>)
 800317a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800317e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003184:	4618      	mov	r0, r3
 8003186:	37b8      	adds	r7, #184	; 0xb8
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400

08003198 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800319e:	f7fe fbbf 	bl	8001920 <HAL_GetTick>
 80031a2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80031a4:	4b72      	ldr	r3, [pc, #456]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a71      	ldr	r2, [pc, #452]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fe fbb5 	bl	8001920 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0d0      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031c4:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80031d0:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a66      	ldr	r2, [pc, #408]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031dc:	f7fe fba0 	bl	8001920 <HAL_GetTick>
 80031e0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ea:	f7fe fb99 	bl	8001920 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0b2      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003200:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800320c:	f7fe fb88 	bl	8001920 <HAL_GetTick>
 8003210:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003212:	4b57      	ldr	r3, [pc, #348]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a56      	ldr	r2, [pc, #344]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003218:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800321c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fb7e 	bl	8001920 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e099      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800323e:	f7fe fb6f 	bl	8001920 <HAL_GetTick>
 8003242:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 800324a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fb65 	bl	8001920 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e080      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003270:	f7fe fb56 	bl	8001920 <HAL_GetTick>
 8003274:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 800327c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003280:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003284:	f7fe fb4c 	bl	8001920 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e067      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003296:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80032a2:	f7fe fb3d 	bl	8001920 <HAL_GetTick>
 80032a6:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a30      	ldr	r2, [pc, #192]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b6:	f7fe fb33 	bl	8001920 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e04e      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_RCC_DeInit+0x1dc>)
 80032d8:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_RCC_DeInit+0x1dc>)
 80032de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_RCC_DeInit+0x1e0>)
 80032e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032f0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80032f4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 80032fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003300:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800330c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003314:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003318:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a14      	ldr	r2, [pc, #80]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003324:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 800332c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003330:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_RCC_DeInit+0x1d8>)
 8003344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003348:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_DeInit+0x1e4>)
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_DeInit+0x1e8>)
 800334e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCC_DeInit+0x1ec>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fa9f 	bl	8001898 <HAL_InitTick>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003364:	2300      	movs	r3, #0
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	24003010 	.word	0x24003010
 8003378:	04003010 	.word	0x04003010
 800337c:	20000004 	.word	0x20000004
 8003380:	00f42400 	.word	0x00f42400
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e28d      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8083 	beq.w	80034ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a8:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d019      	beq.n	80033e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033c0:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d00c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d112      	bne.n	8003400 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e6:	d10b      	bne.n	8003400 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d05b      	beq.n	80034ac <HAL_RCC_OscConfig+0x124>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d157      	bne.n	80034ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e25a      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x90>
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e01d      	b.n	8003454 <HAL_RCC_OscConfig+0xcc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0xb4>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0xcc>
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6e      	ldr	r2, [pc, #440]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6b      	ldr	r2, [pc, #428]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa60 	bl	8001920 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fa5c 	bl	8001920 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e21f      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0xdc>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fa4c 	bl	8001920 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fa48 	bl	8001920 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e20b      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x104>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06f      	beq.n	800359a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d017      	beq.n	80034f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d105      	bne.n	80034de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x186>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1d3      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x278>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe f9f5 	bl	8001920 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353a:	f7fe f9f1 	bl	8001920 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1b4      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4925      	ldr	r1, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x278>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe f9d4 	bl	8001920 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357c:	f7fe f9d0 	bl	8001920 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e193      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fe f9b4 	bl	8001920 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fe f9b0 	bl	8001920 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e173      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x234>
 80035da:	e01b      	b.n	8003614 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fe f99d 	bl	8001920 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	e00e      	b.n	8003608 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe f999 	bl	8001920 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d907      	bls.n	8003608 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e15c      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ea      	bne.n	80035ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b83      	ldr	r3, [pc, #524]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b7f      	ldr	r3, [pc, #508]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a7e      	ldr	r2, [pc, #504]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b79      	ldr	r3, [pc, #484]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe f959 	bl	8001920 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe f955 	bl	8001920 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e118      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x31e>
 8003698:	4b66      	ldr	r3, [pc, #408]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x340>
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b57      	ldr	r3, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe f91a 	bl	8001920 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fe f916 	bl	8001920 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0d7      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x368>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe f904 	bl	8001920 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe f900 	bl	8001920 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0c1      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80ad 	beq.w	80038b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d060      	beq.n	8003828 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d145      	bne.n	80037fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe f8d4 	bl	8001920 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe f8d0 	bl	8001920 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e093      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	491b      	ldr	r1, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe f8a5 	bl	8001920 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe f8a1 	bl	8001920 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e064      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x452>
 80037f8:	e05c      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe f88e 	bl	8001920 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe f88a 	bl	8001920 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e04d      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x480>
 8003826:	e045      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e040      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCC_OscConfig+0x538>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d030      	beq.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d129      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d122      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	d119      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d10f      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e03f      	b.n	8003956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fe44 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 ffcb 	bl	80048a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e021      	b.n	80039b4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003986:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd fead 	bl	80016e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d17c      	bne.n	8003ad6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Transmit+0x2c>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e075      	b.n	8003ad8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit+0x3e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e06e      	b.n	8003ad8 <HAL_UART_Transmit+0x11c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2221      	movs	r2, #33	; 0x21
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a10:	f7fd ff86 	bl	8001920 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d108      	bne.n	8003a3e <HAL_UART_Transmit+0x82>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e003      	b.n	8003a46 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a4e:	e02a      	b.n	8003aa6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fc54 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e036      	b.n	8003ad8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	3302      	adds	r3, #2
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e007      	b.n	8003a98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1cf      	bne.n	8003a50 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc24 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e006      	b.n	8003ad8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d152      	bne.n	8003ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e04b      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e044      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fc59 	bl	80043e4 <UART_Start_Receive_DMA>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d12c      	bne.n	8003b9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d125      	bne.n	8003b94 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b80:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6a39      	ldr	r1, [r7, #32]
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b92:	e002      	b.n	8003b9a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b9e:	e000      	b.n	8003ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3730      	adds	r7, #48	; 0x30
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0ba      	sub	sp, #232	; 0xe8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd8f 	bl	800472e <UART_Receive_IT>
      return;
 8003c10:	e256      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80de 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
 8003c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80d1 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
 8003c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
 8003c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d011      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0208 	orr.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 81ed 	beq.w	80040b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fd1a 	bl	800472e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_UART_IRQHandler+0x17a>
 8003d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04f      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fc22 	bl	8004570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d141      	bne.n	8003dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d9      	bne.n	8003d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a7d      	ldr	r2, [pc, #500]	; (8003f88 <HAL_UART_IRQHandler+0x3dc>)
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f8e4 	bl	8001f68 <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00e      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9a4 	bl	8004104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9a0 	bl	8004104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f99c 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dd2:	e170      	b.n	80040b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	bf00      	nop
    return;
 8003dd6:	e16e      	b.n	80040b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 814a 	bne.w	8004076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8143 	beq.w	8004076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 813c 	beq.w	8004076 <HAL_UART_IRQHandler+0x4ca>
  {
	 __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	f040 80b4 	bne.w	8003f8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8140 	beq.w	80040ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e42:	429a      	cmp	r2, r3
 8003e44:	f080 8139 	bcs.w	80040ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5a:	f000 8088 	beq.w	8003f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1d9      	bne.n	8003e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e1      	bne.n	8003eaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd ff8d 	bl	8001e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd f8cc 	bl	800111c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f84:	e099      	b.n	80040ba <HAL_UART_IRQHandler+0x50e>
 8003f86:	bf00      	nop
 8003f88:	08004637 	.word	0x08004637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 808b 	beq.w	80040be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8086 	beq.w	80040be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e3      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400e:	633a      	str	r2, [r7, #48]	; 0x30
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004054:	61fa      	str	r2, [r7, #28]
 8004056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	617b      	str	r3, [r7, #20]
   return(result);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e3      	bne.n	8004030 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd f854 	bl	800111c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004074:	e023      	b.n	80040be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_UART_IRQHandler+0x4ea>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fae5 	bl	800465e <UART_Transmit_IT>
    return;
 8004094:	e014      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00e      	beq.n	80040c0 <HAL_UART_IRQHandler+0x514>
 80040a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb25 	bl	80046fe <UART_EndTransmit_IT>
    return;
 80040b4:	e004      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
    return;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_UART_IRQHandler+0x514>
      return;
 80040be:	bf00      	nop
  }
}
 80040c0:	37e8      	adds	r7, #232	; 0xe8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop

080040c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b09c      	sub	sp, #112	; 0x70
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d172      	bne.n	800421a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004136:	2200      	movs	r2, #0
 8004138:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800414a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004150:	66bb      	str	r3, [r7, #104]	; 0x68
 8004152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800415a:	65ba      	str	r2, [r7, #88]	; 0x58
 800415c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	667b      	str	r3, [r7, #100]	; 0x64
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800418e:	647a      	str	r2, [r7, #68]	; 0x44
 8004190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	623b      	str	r3, [r7, #32]
   return(result);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041c2:	633a      	str	r2, [r7, #48]	; 0x30
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d119      	bne.n	800421a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f023 0310 	bic.w	r3, r3, #16
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	617b      	str	r3, [r7, #20]
   return(result);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	2b01      	cmp	r3, #1
 8004220:	d106      	bne.n	8004230 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004224:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004226:	4619      	mov	r1, r3
 8004228:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800422a:	f7fc ff77 	bl	800111c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800422e:	e002      	b.n	8004236 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004230:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004232:	f7ff ff53 	bl	80040dc <HAL_UART_RxCpltCallback>
}
 8004236:	bf00      	nop
 8004238:	3770      	adds	r7, #112	; 0x70
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	4619      	mov	r1, r3
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7fc ff5c 	bl	800111c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004264:	e002      	b.n	800426c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff ff42 	bl	80040f0 <HAL_UART_RxHalfCpltCallback>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b21      	cmp	r3, #33	; 0x21
 80042a6:	d108      	bne.n	80042ba <UART_DMAError+0x46>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042b4:	68b8      	ldr	r0, [r7, #8]
 80042b6:	f000 f933 	bl	8004520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b22      	cmp	r3, #34	; 0x22
 80042da:	d108      	bne.n	80042ee <UART_DMAError+0x7a>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f941 	bl	8004570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0210 	orr.w	r2, r3, #16
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fa:	68b8      	ldr	r0, [r7, #8]
 80042fc:	f7ff ff02 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	; 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e050      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d04c      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fd fafa 	bl	8001920 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	d241      	bcs.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	623a      	str	r2, [r7, #32]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e00f      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d09f      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3740      	adds	r7, #64	; 0x40
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b098      	sub	sp, #96	; 0x60
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2222      	movs	r2, #34	; 0x22
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4a40      	ldr	r2, [pc, #256]	; (8004514 <UART_Start_Receive_DMA+0x130>)
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <UART_Start_Receive_DMA+0x134>)
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	4a3e      	ldr	r2, [pc, #248]	; (800451c <UART_Start_Receive_DMA+0x138>)
 8004422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	f7fd fcc8 	bl	8001dd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	65bb      	str	r3, [r7, #88]	; 0x58
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800448e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	657b      	str	r3, [r7, #84]	; 0x54
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044f6:	627a      	str	r2, [r7, #36]	; 0x24
 80044f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	61fb      	str	r3, [r7, #28]
   return(result);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3760      	adds	r7, #96	; 0x60
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08004119 	.word	0x08004119
 8004518:	0800423f 	.word	0x0800423f
 800451c:	08004275 	.word	0x08004275

08004520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	60bb      	str	r3, [r7, #8]
   return(result);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	61ba      	str	r2, [r7, #24]
 800454a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	613b      	str	r3, [r7, #16]
   return(result);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004564:	bf00      	nop
 8004566:	3724      	adds	r7, #36	; 0x24
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b095      	sub	sp, #84	; 0x54
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004598:	643a      	str	r2, [r7, #64]	; 0x40
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800459e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d119      	bne.n	800461c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004608:	61ba      	str	r2, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800462a:	bf00      	nop
 800462c:	3754      	adds	r7, #84	; 0x54
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff fd57 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b21      	cmp	r3, #33	; 0x21
 8004670:	d13e      	bne.n	80046f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d114      	bne.n	80046a6 <UART_Transmit_IT+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]
 80046a4:	e008      	b.n	80046b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6211      	str	r1, [r2, #32]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fcd2 	bl	80040c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08c      	sub	sp, #48	; 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	; 0x22
 8004740:	f040 80ab 	bne.w	800489a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d117      	bne.n	800477e <UART_Receive_IT+0x50>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	b29a      	uxth	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
 800477c:	e026      	b.n	80047cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d007      	beq.n	80047a2 <UART_Receive_IT+0x74>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <UART_Receive_IT+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e008      	b.n	80047c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15a      	bne.n	8004896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0220 	bic.w	r2, r2, #32
 80047ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	2b01      	cmp	r3, #1
 800481e:	d135      	bne.n	800488c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f023 0310 	bic.w	r3, r3, #16
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	623a      	str	r2, [r7, #32]
 8004848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	61bb      	str	r3, [r7, #24]
   return(result);
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e5      	bne.n	8004826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d10a      	bne.n	800487e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fc49 	bl	800111c <HAL_UARTEx_RxEventCallback>
 800488a:	e002      	b.n	8004892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fc25 	bl	80040dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e002      	b.n	800489c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3730      	adds	r7, #48	; 0x30
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a8:	b0c0      	sub	sp, #256	; 0x100
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	ea40 0301 	orr.w	r3, r0, r1
 80048cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048fc:	f021 010c 	bic.w	r1, r1, #12
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800490a:	430b      	orrs	r3, r1
 800490c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	6999      	ldr	r1, [r3, #24]
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	ea40 0301 	orr.w	r3, r0, r1
 800492a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b8f      	ldr	r3, [pc, #572]	; (8004b70 <UART_SetConfig+0x2cc>)
 8004934:	429a      	cmp	r2, r3
 8004936:	d005      	beq.n	8004944 <UART_SetConfig+0xa0>
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b8d      	ldr	r3, [pc, #564]	; (8004b74 <UART_SetConfig+0x2d0>)
 8004940:	429a      	cmp	r2, r3
 8004942:	d104      	bne.n	800494e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe f9e4 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8004948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800494c:	e003      	b.n	8004956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800494e:	f7fe f9cb 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8004952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004960:	f040 810c 	bne.w	8004b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004968:	2200      	movs	r2, #0
 800496a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800496e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	1891      	adds	r1, r2, r2
 800497c:	65b9      	str	r1, [r7, #88]	; 0x58
 800497e:	415b      	adcs	r3, r3
 8004980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004986:	4621      	mov	r1, r4
 8004988:	eb12 0801 	adds.w	r8, r2, r1
 800498c:	4629      	mov	r1, r5
 800498e:	eb43 0901 	adc.w	r9, r3, r1
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a6:	4690      	mov	r8, r2
 80049a8:	4699      	mov	r9, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	eb18 0303 	adds.w	r3, r8, r3
 80049b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049b4:	462b      	mov	r3, r5
 80049b6:	eb49 0303 	adc.w	r3, r9, r3
 80049ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049d2:	460b      	mov	r3, r1
 80049d4:	18db      	adds	r3, r3, r3
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
 80049d8:	4613      	mov	r3, r2
 80049da:	eb42 0303 	adc.w	r3, r2, r3
 80049de:	657b      	str	r3, [r7, #84]	; 0x54
 80049e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049e8:	f7fb fc0c 	bl	8000204 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <UART_SetConfig+0x2d4>)
 80049f2:	fba3 2302 	umull	r2, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	011c      	lsls	r4, r3, #4
 80049fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	1891      	adds	r1, r2, r2
 8004a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a14:	415b      	adcs	r3, r3
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a22:	4649      	mov	r1, r9
 8004a24:	eb43 0b01 	adc.w	fp, r3, r1
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a3c:	4692      	mov	sl, r2
 8004a3e:	469b      	mov	fp, r3
 8004a40:	4643      	mov	r3, r8
 8004a42:	eb1a 0303 	adds.w	r3, sl, r3
 8004a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	18db      	adds	r3, r3, r3
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6e:	4613      	mov	r3, r2
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
 8004a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a7e:	f7fb fbc1 	bl	8000204 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <UART_SetConfig+0x2d4>)
 8004a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2264      	movs	r2, #100	; 0x64
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	1acb      	subs	r3, r1, r3
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <UART_SetConfig+0x2d4>)
 8004aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aac:	441c      	add	r4, r3
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ae8:	4659      	mov	r1, fp
 8004aea:	00cb      	lsls	r3, r1, #3
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af2:	4651      	mov	r1, sl
 8004af4:	00ca      	lsls	r2, r1, #3
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4642      	mov	r2, r8
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b24:	460b      	mov	r3, r1
 8004b26:	18db      	adds	r3, r3, r3
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b3a:	f7fb fb63 	bl	8000204 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <UART_SetConfig+0x2d4>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	; 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <UART_SetConfig+0x2d4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 0207 	and.w	r2, r3, #7
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4422      	add	r2, r4
 8004b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b6c:	e105      	b.n	8004d7a <UART_SetConfig+0x4d6>
 8004b6e:	bf00      	nop
 8004b70:	40011000 	.word	0x40011000
 8004b74:	40011400 	.word	0x40011400
 8004b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b8e:	4642      	mov	r2, r8
 8004b90:	464b      	mov	r3, r9
 8004b92:	1891      	adds	r1, r2, r2
 8004b94:	6239      	str	r1, [r7, #32]
 8004b96:	415b      	adcs	r3, r3
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	1854      	adds	r4, r2, r1
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	eb43 0501 	adc.w	r5, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	eb45 0303 	adc.w	r3, r5, r3
 8004bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bea:	4629      	mov	r1, r5
 8004bec:	008b      	lsls	r3, r1, #2
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	008a      	lsls	r2, r1, #2
 8004bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bfc:	f7fb fb02 	bl	8000204 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4b60      	ldr	r3, [pc, #384]	; (8004d88 <UART_SetConfig+0x4e4>)
 8004c06:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	011c      	lsls	r4, r3, #4
 8004c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	1891      	adds	r1, r2, r2
 8004c26:	61b9      	str	r1, [r7, #24]
 8004c28:	415b      	adcs	r3, r3
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c30:	4641      	mov	r1, r8
 8004c32:	1851      	adds	r1, r2, r1
 8004c34:	6139      	str	r1, [r7, #16]
 8004c36:	4649      	mov	r1, r9
 8004c38:	414b      	adcs	r3, r1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c48:	4659      	mov	r1, fp
 8004c4a:	00cb      	lsls	r3, r1, #3
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c52:	4651      	mov	r1, sl
 8004c54:	00ca      	lsls	r2, r1, #3
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c64:	464b      	mov	r3, r9
 8004c66:	460a      	mov	r2, r1
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c88:	4649      	mov	r1, r9
 8004c8a:	008b      	lsls	r3, r1, #2
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c92:	4641      	mov	r1, r8
 8004c94:	008a      	lsls	r2, r1, #2
 8004c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c9a:	f7fb fab3 	bl	8000204 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <UART_SetConfig+0x4e4>)
 8004ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	2164      	movs	r1, #100	; 0x64
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	3332      	adds	r3, #50	; 0x32
 8004cb6:	4a34      	ldr	r2, [pc, #208]	; (8004d88 <UART_SetConfig+0x4e4>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc2:	441c      	add	r4, r3
 8004cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc8:	2200      	movs	r2, #0
 8004cca:	673b      	str	r3, [r7, #112]	; 0x70
 8004ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8004cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cd2:	4642      	mov	r2, r8
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	1891      	adds	r1, r2, r2
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	415b      	adcs	r3, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	1851      	adds	r1, r2, r1
 8004ce6:	6039      	str	r1, [r7, #0]
 8004ce8:	4649      	mov	r1, r9
 8004cea:	414b      	adcs	r3, r1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	00cb      	lsls	r3, r1, #3
 8004cfe:	4651      	mov	r1, sl
 8004d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d04:	4651      	mov	r1, sl
 8004d06:	00ca      	lsls	r2, r1, #3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4642      	mov	r2, r8
 8004d10:	189b      	adds	r3, r3, r2
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d14:	464b      	mov	r3, r9
 8004d16:	460a      	mov	r2, r1
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	663b      	str	r3, [r7, #96]	; 0x60
 8004d28:	667a      	str	r2, [r7, #100]	; 0x64
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d36:	4649      	mov	r1, r9
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d40:	4641      	mov	r1, r8
 8004d42:	008a      	lsls	r2, r1, #2
 8004d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d48:	f7fb fa5c 	bl	8000204 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 1302 	umull	r1, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2164      	movs	r1, #100	; 0x64
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	3332      	adds	r3, #50	; 0x32
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <UART_SetConfig+0x4e4>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4422      	add	r2, r4
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d80:	46bd      	mov	sp, r7
 8004d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d86:	bf00      	nop
 8004d88:	51eb851f 	.word	0x51eb851f

08004d8c <__libc_init_array>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4d0d      	ldr	r5, [pc, #52]	; (8004dc4 <__libc_init_array+0x38>)
 8004d90:	4c0d      	ldr	r4, [pc, #52]	; (8004dc8 <__libc_init_array+0x3c>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	2600      	movs	r6, #0
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d109      	bne.n	8004db0 <__libc_init_array+0x24>
 8004d9c:	4d0b      	ldr	r5, [pc, #44]	; (8004dcc <__libc_init_array+0x40>)
 8004d9e:	4c0c      	ldr	r4, [pc, #48]	; (8004dd0 <__libc_init_array+0x44>)
 8004da0:	f000 f882 	bl	8004ea8 <_init>
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	2600      	movs	r6, #0
 8004daa:	42a6      	cmp	r6, r4
 8004dac:	d105      	bne.n	8004dba <__libc_init_array+0x2e>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db4:	4798      	blx	r3
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7ee      	b.n	8004d98 <__libc_init_array+0xc>
 8004dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbe:	4798      	blx	r3
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	e7f2      	b.n	8004daa <__libc_init_array+0x1e>
 8004dc4:	08004ef8 	.word	0x08004ef8
 8004dc8:	08004ef8 	.word	0x08004ef8
 8004dcc:	08004ef8 	.word	0x08004ef8
 8004dd0:	08004efc 	.word	0x08004efc

08004dd4 <free>:
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <free+0xc>)
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f000 b80b 	b.w	8004df4 <_free_r>
 8004dde:	bf00      	nop
 8004de0:	20000010 	.word	0x20000010

08004de4 <memset>:
 8004de4:	4402      	add	r2, r0
 8004de6:	4603      	mov	r3, r0
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d100      	bne.n	8004dee <memset+0xa>
 8004dec:	4770      	bx	lr
 8004dee:	f803 1b01 	strb.w	r1, [r3], #1
 8004df2:	e7f9      	b.n	8004de8 <memset+0x4>

08004df4 <_free_r>:
 8004df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d044      	beq.n	8004e84 <_free_r+0x90>
 8004dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfe:	9001      	str	r0, [sp, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f1a1 0404 	sub.w	r4, r1, #4
 8004e06:	bfb8      	it	lt
 8004e08:	18e4      	addlt	r4, r4, r3
 8004e0a:	f000 f83f 	bl	8004e8c <__malloc_lock>
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <_free_r+0x94>)
 8004e10:	9801      	ldr	r0, [sp, #4]
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	b933      	cbnz	r3, 8004e24 <_free_r+0x30>
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e20:	f000 b83a 	b.w	8004e98 <__malloc_unlock>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x46>
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf01      	itttt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	1949      	addeq	r1, r1, r5
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	e7ed      	b.n	8004e16 <_free_r+0x22>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x50>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x46>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1855      	adds	r5, r2, r1
 8004e48:	42a5      	cmp	r5, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x70>
 8004e4c:	6824      	ldr	r4, [r4, #0]
 8004e4e:	4421      	add	r1, r4
 8004e50:	1854      	adds	r4, r2, r1
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1e0      	bne.n	8004e1a <_free_r+0x26>
 8004e58:	681c      	ldr	r4, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	6053      	str	r3, [r2, #4]
 8004e5e:	4421      	add	r1, r4
 8004e60:	6011      	str	r1, [r2, #0]
 8004e62:	e7da      	b.n	8004e1a <_free_r+0x26>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x78>
 8004e66:	230c      	movs	r3, #12
 8004e68:	6003      	str	r3, [r0, #0]
 8004e6a:	e7d6      	b.n	8004e1a <_free_r+0x26>
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	1961      	adds	r1, r4, r5
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf04      	itt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	bf04      	itt	eq
 8004e7c:	1949      	addeq	r1, r1, r5
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	6054      	str	r4, [r2, #4]
 8004e82:	e7ca      	b.n	8004e1a <_free_r+0x26>
 8004e84:	b003      	add	sp, #12
 8004e86:	bd30      	pop	{r4, r5, pc}
 8004e88:	20000200 	.word	0x20000200

08004e8c <__malloc_lock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__malloc_lock+0x8>)
 8004e8e:	f000 b809 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	20000204 	.word	0x20000204

08004e98 <__malloc_unlock>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__malloc_unlock+0x8>)
 8004e9a:	f000 b804 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20000204 	.word	0x20000204

08004ea4 <__retarget_lock_acquire_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_release_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <_init>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr

08004eb4 <_fini>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr
