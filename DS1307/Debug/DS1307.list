
DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fdc  08003fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08004054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004054  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beb4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  0002bf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a9f  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e567  00000000  00000000  000508ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb147  00000000  00000000  0005ee66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  0012a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f18 	.word	0x08003f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003f18 	.word	0x08003f18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <bsp_ds1307_bcd_to_bin>:
*/

#include "bsp_ds1307.h"

uint8_t bsp_ds1307_bcd_to_bin(uint8_t bcd)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint8_t dec = 10 * (bcd >> 4);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	091b      	lsrs	r3, r3, #4
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
  dec += bcd & 0x0F;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	4413      	add	r3, r2
 80005da:	73fb      	strb	r3, [r7, #15]
  return dec;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <bsp_ds1307_write_reg>:
  /* Return */
  return high << 4 | low;
}

bsp_ds1307_status_t bsp_ds1307_write_reg(uint8_t reg_write, uint8_t data_write)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2] = { reg_write, data_write };
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	733b      	strb	r3, [r7, #12]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	737b      	strb	r3, [r7, #13]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data, 2, BSP_DS1307_TIME_OUT) == HAL_OK)
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2302      	movs	r3, #2
 8000610:	21d0      	movs	r1, #208	; 0xd0
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <bsp_ds1307_write_reg+0x40>)
 8000614:	f001 f86a 	bl	80016ec <HAL_I2C_Master_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <bsp_ds1307_write_reg+0x36>
    return bsp_ds1307_success;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <bsp_ds1307_write_reg+0x38>
  else
    return bsp_ds1307_error;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000008c 	.word	0x2000008c

08000630 <bsp_ds1307_read_multi_reg>:
  else
    return bsp_ds1307_error;
}

bsp_ds1307_status_t bsp_ds1307_read_multi_reg(uint8_t reg_read, uint8_t *data_read, uint8_t size)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, &reg_read, 1, BSP_DS1307_TIME_OUT) != HAL_OK)
 8000640:	1dfa      	adds	r2, r7, #7
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	21d0      	movs	r1, #208	; 0xd0
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <bsp_ds1307_read_multi_reg+0x54>)
 800064e:	f001 f84d 	bl	80016ec <HAL_I2C_Master_Transmit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <bsp_ds1307_read_multi_reg+0x2c>
    return bsp_ds1307_error;
 8000658:	2300      	movs	r3, #0
 800065a:	e00f      	b.n	800067c <bsp_ds1307_read_multi_reg+0x4c>
  if (HAL_I2C_Master_Receive(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data_read, size, BSP_DS1307_TIME_OUT) == HAL_OK)
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	b29b      	uxth	r3, r3
 8000660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <bsp_ds1307_read_multi_reg+0x54>)
 800066c:	f001 f93c 	bl	80018e8 <HAL_I2C_Master_Receive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <bsp_ds1307_read_multi_reg+0x4a>
    return bsp_ds1307_success;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <bsp_ds1307_read_multi_reg+0x4c>
  else
    return bsp_ds1307_error;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000008c 	.word	0x2000008c

08000688 <bsp_ds1307_read_reg>:

bsp_ds1307_status_t bsp_ds1307_read_reg(uint8_t reg_read, uint8_t *data_read)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Master_Transmit(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, &reg_read, 1, BSP_DS1307_TIME_OUT) != HAL_OK)
 8000694:	1dfa      	adds	r2, r7, #7
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	21d0      	movs	r1, #208	; 0xd0
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <bsp_ds1307_read_reg+0x50>)
 80006a2:	f001 f823 	bl	80016ec <HAL_I2C_Master_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <bsp_ds1307_read_reg+0x28>
    return bsp_ds1307_error;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e00e      	b.n	80006ce <bsp_ds1307_read_reg+0x46>
  if (HAL_I2C_Master_Receive(BSP_I2C_NUMBER, BSP_I2C_ADDRESS, data_read, 1, BSP_DS1307_TIME_OUT) == HAL_OK)
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	21d0      	movs	r1, #208	; 0xd0
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <bsp_ds1307_read_reg+0x50>)
 80006be:	f001 f913 	bl	80018e8 <HAL_I2C_Master_Receive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <bsp_ds1307_read_reg+0x44>
    return bsp_ds1307_success;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <bsp_ds1307_read_reg+0x46>
  else
    return bsp_ds1307_error;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <bsp_ds1307_init>:

bsp_ds1307_status_t bsp_ds1307_init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  uint8_t reg_data = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
  bsp_ds1307_read_reg(BSP_DS1307_SECONDS, &reg_data);
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	4619      	mov	r1, r3
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ffcc 	bl	8000688 <bsp_ds1307_read_reg>
  return bsp_ds1307_write_reg(BSP_DS1307_SECONDS, 0 | (reg_data & 0x7f));
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff76 	bl	80005ec <bsp_ds1307_write_reg>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <bsp_ds1307_get_time>:
  }
  return bsp_ds1307_error;
}

bsp_ds1307_status_t bsp_ds1307_get_time(uint8_t *data_time)
{
 800070a:	b590      	push	{r4, r7, lr}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  bsp_ds1307_read_multi_reg(BSP_DS1307_SECONDS, data_time, 7);
 8000712:	2207      	movs	r2, #7
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff ff8a 	bl	8000630 <bsp_ds1307_read_multi_reg>
  data_time[0] = bsp_ds1307_bcd_to_bin(data_time[0] & 0x7F);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff44 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	701a      	strb	r2, [r3, #0]
  data_time[1] = bsp_ds1307_bcd_to_bin(data_time[1]);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	1c5c      	adds	r4, r3, #1
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff ff38 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000744:	4603      	mov	r3, r0
 8000746:	7023      	strb	r3, [r4, #0]
  data_time[2] = bsp_ds1307_bcd_to_bin(data_time[2] & 0x3F);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3302      	adds	r3, #2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1c9c      	adds	r4, r3, #2
 8000758:	4610      	mov	r0, r2
 800075a:	f7ff ff2b 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 800075e:	4603      	mov	r3, r0
 8000760:	7023      	strb	r3, [r4, #0]
  data_time[3] = bsp_ds1307_bcd_to_bin(data_time[3]);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3303      	adds	r3, #3
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1cdc      	adds	r4, r3, #3
 800076c:	4610      	mov	r0, r2
 800076e:	f7ff ff21 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000772:	4603      	mov	r3, r0
 8000774:	7023      	strb	r3, [r4, #0]
  data_time[4] = bsp_ds1307_bcd_to_bin(data_time[4]);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3304      	adds	r3, #4
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1d1c      	adds	r4, r3, #4
 8000780:	4610      	mov	r0, r2
 8000782:	f7ff ff17 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 8000786:	4603      	mov	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
  data_time[5] = bsp_ds1307_bcd_to_bin(data_time[5]);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3305      	adds	r3, #5
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1d5c      	adds	r4, r3, #5
 8000794:	4610      	mov	r0, r2
 8000796:	f7ff ff0d 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 800079a:	4603      	mov	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
  data_time[6] = bsp_ds1307_bcd_to_bin(data_time[6]);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3306      	adds	r3, #6
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1d9c      	adds	r4, r3, #6
 80007a8:	4610      	mov	r0, r2
 80007aa:	f7ff ff03 	bl	80005b4 <bsp_ds1307_bcd_to_bin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	7023      	strb	r3, [r4, #0]
  return bsp_ds1307_success;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <bsp_ds1307_set_output_sqw>:
  bsp_ds1307_read_reg(BSP_DS1307_SECONDS, &reg_data);
  return bsp_ds1307_write_reg(BSP_DS1307_SECONDS, value | (reg_data & 0x3F));
}

bsp_ds1307_status_t bsp_ds1307_set_output_sqw(bsp_output_sqw_t out_sqw)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_data = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
  bsp_ds1307_read_reg(BSP_DS1307_CONTROL, &reg_data);
 80007ca:	f107 030f 	add.w	r3, r7, #15
 80007ce:	4619      	mov	r1, r3
 80007d0:	2007      	movs	r0, #7
 80007d2:	f7ff ff59 	bl	8000688 <bsp_ds1307_read_reg>
  return bsp_ds1307_write_reg(BSP_DS1307_CONTROL, out_sqw | (reg_data & 0xFC));
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f023 0303 	bic.w	r3, r3, #3
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fefd 	bl	80005ec <bsp_ds1307_write_reg>
 80007f2:	4603      	mov	r3, r0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <bsp_ds1307_config_swq>:

bsp_ds1307_status_t bsp_ds1307_config_swq(uint8_t mode)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_data = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  bsp_ds1307_read_reg(BSP_DS1307_CONTROL, &reg_data);
 800080a:	f107 030f 	add.w	r3, r7, #15
 800080e:	4619      	mov	r1, r3
 8000810:	2007      	movs	r0, #7
 8000812:	f7ff ff39 	bl	8000688 <bsp_ds1307_read_reg>
  return bsp_ds1307_write_reg(BSP_DS1307_CONTROL, (mode ? mode << 4 : 0) | (reg_data & 0xEF));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <bsp_ds1307_config_swq+0x28>
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b25b      	sxtb	r3, r3
 8000822:	e000      	b.n	8000826 <bsp_ds1307_config_swq+0x2a>
 8000824:	2300      	movs	r3, #0
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	b252      	sxtb	r2, r2
 800082a:	f022 0210 	bic.w	r2, r2, #16
 800082e:	b252      	sxtb	r2, r2
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	2007      	movs	r0, #7
 800083a:	f7ff fed7 	bl	80005ec <bsp_ds1307_write_reg>
 800083e:	4603      	mov	r3, r0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <drv_ds1307_init>:
*/

#include "driver_ds1307.h"

drv_ds1307_status_t drv_ds1307_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  return bsp_ds1307_init();
 800084c:	f7ff ff46 	bl	80006dc <bsp_ds1307_init>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}

08000856 <drv_ds1307_get_time>:
{
  return bsp_ds1307_check_device();
}

drv_ds1307_status_t drv_ds1307_get_time(drv_ds1307_time_t *time)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  uint8_t data_time[7] = { 0 };
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2100      	movs	r1, #0
 8000868:	460a      	mov	r2, r1
 800086a:	801a      	strh	r2, [r3, #0]
 800086c:	460a      	mov	r2, r1
 800086e:	709a      	strb	r2, [r3, #2]
  if (bsp_ds1307_get_time(data_time) != bsp_ds1307_success)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff48 	bl	800070a <bsp_ds1307_get_time>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d001      	beq.n	8000884 <drv_ds1307_get_time+0x2e>
    return drv_ds1307_error;
 8000880:	2300      	movs	r3, #0
 8000882:	e015      	b.n	80008b0 <drv_ds1307_get_time+0x5a>
  time->seconds = data_time[0];
 8000884:	7a3a      	ldrb	r2, [r7, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	701a      	strb	r2, [r3, #0]
  time->minutes = data_time[1];
 800088a:	7a7a      	ldrb	r2, [r7, #9]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	705a      	strb	r2, [r3, #1]
  time->hours   = data_time[2];
 8000890:	7aba      	ldrb	r2, [r7, #10]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	709a      	strb	r2, [r3, #2]
  time->day     = data_time[3];
 8000896:	7afa      	ldrb	r2, [r7, #11]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	70da      	strb	r2, [r3, #3]
  time->date    = data_time[4];
 800089c:	7b3a      	ldrb	r2, [r7, #12]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	711a      	strb	r2, [r3, #4]
  time->month   = data_time[5];
 80008a2:	7b7a      	ldrb	r2, [r7, #13]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	715a      	strb	r2, [r3, #5]
  time->year    = data_time[6];
 80008a8:	7bba      	ldrb	r2, [r7, #14]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	719a      	strb	r2, [r3, #6]
  return drv_ds1307_success;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <drv_ds1307_set_out_32768Hz>:
{
  return bsp_ds1307_set_output_sqw(bsp_ds1307_output_sqw_8192Hz);
}

drv_ds1307_status_t drv_ds1307_set_out_32768Hz(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  return bsp_ds1307_set_output_sqw(bsp_ds1307_output_sqw_32768Hz);
 80008bc:	2003      	movs	r0, #3
 80008be:	f7ff ff7d 	bl	80007bc <bsp_ds1307_set_output_sqw>
 80008c2:	4603      	mov	r3, r0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <drv_ds1307_enable_swq>:

drv_ds1307_status_t drv_ds1307_enable_swq(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  return bsp_ds1307_config_swq(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff ff95 	bl	80007fc <bsp_ds1307_config_swq>
 80008d2:	4603      	mov	r3, r0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b087      	sub	sp, #28
 80008dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 fab1 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f867 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 f91d 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ea:	f000 f8c3 	bl	8000a74 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008ee:	f000 f8ef 	bl	8000ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  drv_ds1307_init();
 80008f2:	f7ff ffa9 	bl	8000848 <drv_ds1307_init>

  time.seconds = 0;
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <main+0xc8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  time.minutes = 18;
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <main+0xc8>)
 80008fe:	2212      	movs	r2, #18
 8000900:	705a      	strb	r2, [r3, #1]
  time.hours = 11;
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0xc8>)
 8000904:	220b      	movs	r2, #11
 8000906:	709a      	strb	r2, [r3, #2]
  time.day = 6;
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <main+0xc8>)
 800090a:	2206      	movs	r2, #6
 800090c:	70da      	strb	r2, [r3, #3]
  time.date = 11;
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <main+0xc8>)
 8000910:	220b      	movs	r2, #11
 8000912:	711a      	strb	r2, [r3, #4]
  time.month = 8;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <main+0xc8>)
 8000916:	2208      	movs	r2, #8
 8000918:	715a      	strb	r2, [r3, #5]
  time.year = 23;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <main+0xc8>)
 800091c:	2217      	movs	r2, #23
 800091e:	719a      	strb	r2, [r3, #6]

  drv_ds1307_set_out_32768Hz();
 8000920:	f7ff ffca 	bl	80008b8 <drv_ds1307_set_out_32768Hz>
  drv_ds1307_enable_swq();
 8000924:	f7ff ffd0 	bl	80008c8 <drv_ds1307_enable_swq>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (drv_ds1307_get_time(&time) == drv_ds1307_error)
 8000928:	481d      	ldr	r0, [pc, #116]	; (80009a0 <main+0xc8>)
 800092a:	f7ff ff94 	bl	8000856 <drv_ds1307_get_time>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10a      	bne.n	800094a <main+0x72>
    {
      HAL_UART_Transmit(&huart2, (uint8_t *) "Error\r\n", 7, 100);
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	2207      	movs	r2, #7
 8000938:	491a      	ldr	r1, [pc, #104]	; (80009a4 <main+0xcc>)
 800093a:	481b      	ldr	r0, [pc, #108]	; (80009a8 <main+0xd0>)
 800093c:	f002 fad7 	bl	8002eee <HAL_UART_Transmit>
      HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f000 faf0 	bl	8000f28 <HAL_Delay>
 8000948:	e7ee      	b.n	8000928 <main+0x50>
    }
    else
    {
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d\r\n", time.hours, time.minutes, time.seconds, time.day, time.date, time.month, time.year);
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0xc8>)
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	461d      	mov	r5, r3
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <main+0xc8>)
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	461e      	mov	r6, r3
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <main+0xc8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <main+0xc8>)
 800095e:	78db      	ldrb	r3, [r3, #3]
 8000960:	4619      	mov	r1, r3
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <main+0xc8>)
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <main+0xc8>)
 800096a:	795b      	ldrb	r3, [r3, #5]
 800096c:	461c      	mov	r4, r3
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0xc8>)
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	9304      	str	r3, [sp, #16]
 8000974:	9403      	str	r4, [sp, #12]
 8000976:	9002      	str	r0, [sp, #8]
 8000978:	9101      	str	r1, [sp, #4]
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	4633      	mov	r3, r6
 800097e:	462a      	mov	r2, r5
 8000980:	490a      	ldr	r1, [pc, #40]	; (80009ac <main+0xd4>)
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <main+0xd8>)
 8000984:	f002 fe5a 	bl	800363c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <main+0xd8>)
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <main+0xd0>)
 8000990:	f002 faad 	bl	8002eee <HAL_UART_Transmit>
      HAL_Delay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f000 fac6 	bl	8000f28 <HAL_Delay>
    if (drv_ds1307_get_time(&time) == drv_ds1307_error)
 800099c:	e7c4      	b.n	8000928 <main+0x50>
 800099e:	bf00      	nop
 80009a0:	20000124 	.word	0x20000124
 80009a4:	08003f30 	.word	0x08003f30
 80009a8:	200000e0 	.word	0x200000e0
 80009ac:	08003f38 	.word	0x08003f38
 80009b0:	2000012c 	.word	0x2000012c

080009b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2234      	movs	r2, #52	; 0x34
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fe32 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <SystemClock_Config+0xb8>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <SystemClock_Config+0xb8>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <SystemClock_Config+0xb8>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SystemClock_Config+0xbc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <SystemClock_Config+0xbc>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <SystemClock_Config+0xbc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 ff75 	bl	8002918 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a34:	f000 f8ac 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fc9c 	bl	8002390 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a5e:	f000 f897 	bl	8000b90 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	; 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance             = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f000 fcd7 	bl	8001464 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f868 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000008c 	.word	0x2000008c
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f002 f9a4 	bl	8002e54 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f83d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_I2C_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12b      	bne.n	8000c66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	23c0      	movs	r3, #192	; 0xc0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <HAL_I2C_MspInit+0x8c>)
 8000c46:	f000 fa79 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x8c>)
 8000cf2:	f000 fa23 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8c6 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f002 fc22 	bl	80035d8 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000190 	.word	0x20000190
 8000dc8:	200001a8 	.word	0x200001a8

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 fbe1 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fd59 	bl	80008d8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e34:	08003fe4 	.word	0x08003fe4
  ldr r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e3c:	200001a8 	.word	0x200001a8

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f931 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe90 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000194 	.word	0x20000194

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000194 	.word	0x20000194

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e165      	b.n	8001424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8154 	bne.w	800141e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80ae 	beq.w	800141e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x300>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a5c      	ldr	r2, [pc, #368]	; (800143c <HAL_GPIO_Init+0x300>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <HAL_GPIO_Init+0x300>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_GPIO_Init+0x304>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x308>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x30c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x310>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x20a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x206>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x202>
 800133a:	2306      	movs	r3, #6
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800133e:	2307      	movs	r3, #7
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x304>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_GPIO_Init+0x324>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_GPIO_Init+0x324>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x324>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_GPIO_Init+0x324>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae96 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e12b      	b.n	80016ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fbae 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2224      	movs	r2, #36	; 0x24
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c8:	f001 f854 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a81      	ldr	r2, [pc, #516]	; (80016d8 <HAL_I2C_Init+0x274>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d807      	bhi.n	80014e8 <HAL_I2C_Init+0x84>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a80      	ldr	r2, [pc, #512]	; (80016dc <HAL_I2C_Init+0x278>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e006      	b.n	80014f6 <HAL_I2C_Init+0x92>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a7d      	ldr	r2, [pc, #500]	; (80016e0 <HAL_I2C_Init+0x27c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf94      	ite	ls
 80014f0:	2301      	movls	r3, #1
 80014f2:	2300      	movhi	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0e7      	b.n	80016ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4a78      	ldr	r2, [pc, #480]	; (80016e4 <HAL_I2C_Init+0x280>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9b      	lsrs	r3, r3, #18
 8001508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <HAL_I2C_Init+0x274>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d802      	bhi.n	8001538 <HAL_I2C_Init+0xd4>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	e009      	b.n	800154c <HAL_I2C_Init+0xe8>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4a69      	ldr	r2, [pc, #420]	; (80016e8 <HAL_I2C_Init+0x284>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	3301      	adds	r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800155e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	495c      	ldr	r1, [pc, #368]	; (80016d8 <HAL_I2C_Init+0x274>)
 8001568:	428b      	cmp	r3, r1
 800156a:	d819      	bhi.n	80015a0 <HAL_I2C_Init+0x13c>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1e59      	subs	r1, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fbb1 f3f3 	udiv	r3, r1, r3
 800157a:	1c59      	adds	r1, r3, #1
 800157c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001580:	400b      	ands	r3, r1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00a      	beq.n	800159c <HAL_I2C_Init+0x138>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e59      	subs	r1, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fbb1 f3f3 	udiv	r3, r1, r3
 8001594:	3301      	adds	r3, #1
 8001596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159a:	e051      	b.n	8001640 <HAL_I2C_Init+0x1dc>
 800159c:	2304      	movs	r3, #4
 800159e:	e04f      	b.n	8001640 <HAL_I2C_Init+0x1dc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <HAL_I2C_Init+0x168>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e012      	b.n	80015f2 <HAL_I2C_Init+0x18e>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	0099      	lsls	r1, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Init+0x196>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e022      	b.n	8001640 <HAL_I2C_Init+0x1dc>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10e      	bne.n	8001620 <HAL_I2C_Init+0x1bc>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1e58      	subs	r0, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6859      	ldr	r1, [r3, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	440b      	add	r3, r1
 8001610:	fbb0 f3f3 	udiv	r3, r0, r3
 8001614:	3301      	adds	r3, #1
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161e:	e00f      	b.n	8001640 <HAL_I2C_Init+0x1dc>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e58      	subs	r0, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	0099      	lsls	r1, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	fbb0 f3f3 	udiv	r3, r0, r3
 8001636:	3301      	adds	r3, #1
 8001638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	6809      	ldr	r1, [r1, #0]
 8001644:	4313      	orrs	r3, r2
 8001646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800166e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6911      	ldr	r1, [r2, #16]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68d2      	ldr	r2, [r2, #12]
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	430b      	orrs	r3, r1
 8001682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	000186a0 	.word	0x000186a0
 80016dc:	001e847f 	.word	0x001e847f
 80016e0:	003d08ff 	.word	0x003d08ff
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	10624dd3 	.word	0x10624dd3

080016ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	817b      	strh	r3, [r7, #10]
 80016fc:	4613      	mov	r3, r2
 80016fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fc06 	bl	8000f10 <HAL_GetTick>
 8001704:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b20      	cmp	r3, #32
 8001710:	f040 80e0 	bne.w	80018d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2319      	movs	r3, #25
 800171a:	2201      	movs	r2, #1
 800171c:	4970      	ldr	r1, [pc, #448]	; (80018e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fc58 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	e0d3      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2C_Master_Transmit+0x50>
 8001738:	2302      	movs	r3, #2
 800173a:	e0cc      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d007      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2221      	movs	r2, #33	; 0x21
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2210      	movs	r2, #16
 800177e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4a50      	ldr	r2, [pc, #320]	; (80018e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017a4:	8979      	ldrh	r1, [r7, #10]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fac2 	bl	8001d34 <I2C_MasterRequestWrite>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e08d      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017d0:	e066      	b.n	80018a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	6a39      	ldr	r1, [r7, #32]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fcd2 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d107      	bne.n	80017fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06b      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b04      	cmp	r3, #4
 800183a:	d11b      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x188>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d017      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	6a39      	ldr	r1, [r7, #32]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 fcc2 	bl	8002202 <I2C_WaitOnBTFFlagUntilTimeout>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00d      	beq.n	80018a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2b04      	cmp	r3, #4
 800188a:	d107      	bne.n	800189c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e01a      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d194      	bne.n	80017d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	00100002 	.word	0x00100002
 80018e4:	ffff0000 	.word	0xffff0000

080018e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	817b      	strh	r3, [r7, #10]
 80018f8:	4613      	mov	r3, r2
 80018fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fb08 	bl	8000f10 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	f040 820b 	bne.w	8001d26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2319      	movs	r3, #25
 8001916:	2201      	movs	r2, #1
 8001918:	497c      	ldr	r1, [pc, #496]	; (8001b0c <HAL_I2C_Master_Receive+0x224>)
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fb5a 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	e1fe      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_I2C_Master_Receive+0x50>
 8001934:	2302      	movs	r3, #2
 8001936:	e1f7      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d007      	beq.n	800195e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2222      	movs	r2, #34	; 0x22
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2210      	movs	r2, #16
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	893a      	ldrh	r2, [r7, #8]
 800198e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_I2C_Master_Receive+0x228>)
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019a0:	8979      	ldrh	r1, [r7, #10]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fa46 	bl	8001e38 <I2C_MasterRequestRead>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1b8      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d113      	bne.n	80019e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e18c      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11b      	bne.n	8001a26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e16c      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d11b      	bne.n	8001a66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	e14c      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a8c:	e138      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	f200 80f1 	bhi.w	8001c7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d123      	bne.n	8001ae8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fbed 	bl	8002284 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e139      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae6:	e10b      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d14e      	bne.n	8001b8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	2200      	movs	r2, #0
 8001af8:	4906      	ldr	r1, [pc, #24]	; (8001b14 <HAL_I2C_Master_Receive+0x22c>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fa6a 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e10e      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
 8001b0a:	bf00      	nop
 8001b0c:	00100002 	.word	0x00100002
 8001b10:	ffff0000 	.word	0xffff0000
 8001b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b8c:	e0b8      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b94:	2200      	movs	r2, #0
 8001b96:	4966      	ldr	r1, [pc, #408]	; (8001d30 <HAL_I2C_Master_Receive+0x448>)
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fa1b 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0bf      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	494f      	ldr	r1, [pc, #316]	; (8001d30 <HAL_I2C_Master_Receive+0x448>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f9ed 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e091      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c78:	e042      	b.n	8001d00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fb00 	bl	8002284 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e04c      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d118      	bne.n	8001d00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f aec2 	bne.w	8001a8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	00010004 	.word	0x00010004

08001d34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	460b      	mov	r3, r1
 8001d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d006      	beq.n	8001d5e <I2C_MasterRequestWrite+0x2a>
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d003      	beq.n	8001d5e <I2C_MasterRequestWrite+0x2a>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d5c:	d108      	bne.n	8001d70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e00b      	b.n	8001d88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	2b12      	cmp	r3, #18
 8001d76:	d107      	bne.n	8001d88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f91d 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dae:	d103      	bne.n	8001db8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e035      	b.n	8001e28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc4:	d108      	bne.n	8001dd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	e01b      	b.n	8001e10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dd8:	897b      	ldrh	r3, [r7, #10]
 8001dda:	11db      	asrs	r3, r3, #7
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 0306 	and.w	r3, r3, #6
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f063 030f 	orn	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <I2C_MasterRequestWrite+0xfc>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f943 	bl	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e010      	b.n	8001e28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <I2C_MasterRequestWrite+0x100>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f933 	bl	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	00010008 	.word	0x00010008
 8001e34:	00010002 	.word	0x00010002

08001e38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d006      	beq.n	8001e72 <I2C_MasterRequestRead+0x3a>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <I2C_MasterRequestRead+0x3a>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b11      	cmp	r3, #17
 8001e8a:	d107      	bne.n	8001e9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f893 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec2:	d103      	bne.n	8001ecc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e079      	b.n	8001fc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e05f      	b.n	8001fac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030f 	orn	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4930      	ldr	r1, [pc, #192]	; (8001fcc <I2C_MasterRequestRead+0x194>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f8b9 	bl	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e054      	b.n	8001fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4929      	ldr	r1, [pc, #164]	; (8001fd0 <I2C_MasterRequestRead+0x198>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f8a9 	bl	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e044      	b.n	8001fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f831 	bl	8001fd4 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f86:	d103      	bne.n	8001f90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e017      	b.n	8001fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f94:	897b      	ldrh	r3, [r7, #10]
 8001f96:	11db      	asrs	r3, r3, #7
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 0306 	and.w	r3, r3, #6
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f063 030e 	orn	r3, r3, #14
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <I2C_MasterRequestRead+0x198>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f865 	bl	8002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	00010008 	.word	0x00010008
 8001fd0:	00010002 	.word	0x00010002

08001fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe4:	e025      	b.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d021      	beq.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7fe ff8f 	bl	8000f10 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e023      	b.n	800207a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10d      	bne.n	8002058 <I2C_WaitOnFlagUntilTimeout+0x84>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	e00c      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d0b6      	beq.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002090:	e051      	b.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	d123      	bne.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e046      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d021      	beq.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7fe ff0d 	bl	8000f10 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d116      	bne.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0220 	orr.w	r2, r3, #32
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e020      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d10c      	bne.n	800215a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4013      	ands	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e00b      	b.n	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	43da      	mvns	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d18d      	bne.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218c:	e02d      	b.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8ce 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e02d      	b.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d021      	beq.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7fe feb3 	bl	8000f10 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d116      	bne.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e007      	b.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d1ca      	bne.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800220e:	e02d      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f88d 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e02d      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d021      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002228:	f7fe fe72 	bl	8000f10 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	d302      	bcc.n	800223e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d1ca      	bne.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002290:	e042      	b.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b10      	cmp	r3, #16
 800229e:	d119      	bne.n	80022d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0210 	mvn.w	r2, #16
 80022a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e029      	b.n	8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe fe1c 	bl	8000f10 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d1b5      	bne.n	8002292 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d11b      	bne.n	8002380 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002350:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe fd46 	bl	8000f10 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fd42 	bl	8000f10 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f855 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fca6 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08003f88 	.word	0x08003f88
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a9b      	lsrs	r3, r3, #10
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	08003f98 	.word	0x08003f98

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a0:	f7ff ffdc 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0b5b      	lsrs	r3, r3, #13
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08003f98 	.word	0x08003f98

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b0a6      	sub	sp, #152	; 0x98
 80025ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ea:	4bc8      	ldr	r3, [pc, #800]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	f200 817e 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x330>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002635 	.word	0x08002635
 8002604:	080028f5 	.word	0x080028f5
 8002608:	080028f5 	.word	0x080028f5
 800260c:	080028f5 	.word	0x080028f5
 8002610:	0800263d 	.word	0x0800263d
 8002614:	080028f5 	.word	0x080028f5
 8002618:	080028f5 	.word	0x080028f5
 800261c:	080028f5 	.word	0x080028f5
 8002620:	08002645 	.word	0x08002645
 8002624:	080028f5 	.word	0x080028f5
 8002628:	080028f5 	.word	0x080028f5
 800262c:	080028f5 	.word	0x080028f5
 8002630:	080027af 	.word	0x080027af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4bb6      	ldr	r3, [pc, #728]	; (8002910 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800263a:	e15f      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263c:	4bb5      	ldr	r3, [pc, #724]	; (8002914 <HAL_RCC_GetSysClockFreq+0x350>)
 800263e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002642:	e15b      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002644:	4bb1      	ldr	r3, [pc, #708]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002650:	4bae      	ldr	r3, [pc, #696]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d031      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4bab      	ldr	r3, [pc, #684]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	66bb      	str	r3, [r7, #104]	; 0x68
 8002666:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266e:	663b      	str	r3, [r7, #96]	; 0x60
 8002670:	2300      	movs	r3, #0
 8002672:	667b      	str	r3, [r7, #100]	; 0x64
 8002674:	4ba7      	ldr	r3, [pc, #668]	; (8002914 <HAL_RCC_GetSysClockFreq+0x350>)
 8002676:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800267a:	462a      	mov	r2, r5
 800267c:	fb03 f202 	mul.w	r2, r3, r2
 8002680:	2300      	movs	r3, #0
 8002682:	4621      	mov	r1, r4
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	4aa2      	ldr	r2, [pc, #648]	; (8002914 <HAL_RCC_GetSysClockFreq+0x350>)
 800268c:	4621      	mov	r1, r4
 800268e:	fba1 1202 	umull	r1, r2, r1, r2
 8002692:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002694:	460a      	mov	r2, r1
 8002696:	67ba      	str	r2, [r7, #120]	; 0x78
 8002698:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800269a:	4413      	add	r3, r2
 800269c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800269e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a2:	2200      	movs	r2, #0
 80026a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80026a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80026b0:	f7fd fdfe 	bl	80002b0 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026be:	e064      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	4b92      	ldr	r3, [pc, #584]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	2200      	movs	r2, #0
 80026c8:	653b      	str	r3, [r7, #80]	; 0x50
 80026ca:	657a      	str	r2, [r7, #84]	; 0x54
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	2300      	movs	r3, #0
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80026dc:	4622      	mov	r2, r4
 80026de:	462b      	mov	r3, r5
 80026e0:	f04f 0000 	mov.w	r0, #0
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	0159      	lsls	r1, r3, #5
 80026ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ee:	0150      	lsls	r0, r2, #5
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4621      	mov	r1, r4
 80026f6:	1a51      	subs	r1, r2, r1
 80026f8:	6139      	str	r1, [r7, #16]
 80026fa:	4629      	mov	r1, r5
 80026fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800270e:	4659      	mov	r1, fp
 8002710:	018b      	lsls	r3, r1, #6
 8002712:	4651      	mov	r1, sl
 8002714:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002718:	4651      	mov	r1, sl
 800271a:	018a      	lsls	r2, r1, #6
 800271c:	4651      	mov	r1, sl
 800271e:	ebb2 0801 	subs.w	r8, r2, r1
 8002722:	4659      	mov	r1, fp
 8002724:	eb63 0901 	sbc.w	r9, r3, r1
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002734:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002738:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273c:	4690      	mov	r8, r2
 800273e:	4699      	mov	r9, r3
 8002740:	4623      	mov	r3, r4
 8002742:	eb18 0303 	adds.w	r3, r8, r3
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	462b      	mov	r3, r5
 800274a:	eb49 0303 	adc.w	r3, r9, r3
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800275c:	4629      	mov	r1, r5
 800275e:	028b      	lsls	r3, r1, #10
 8002760:	4621      	mov	r1, r4
 8002762:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002766:	4621      	mov	r1, r4
 8002768:	028a      	lsls	r2, r1, #10
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002772:	2200      	movs	r2, #0
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
 8002776:	647a      	str	r2, [r7, #68]	; 0x44
 8002778:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800277c:	f7fd fd98 	bl	80002b0 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	3301      	adds	r3, #1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800279c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80027ac:	e0a6      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02a      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	2200      	movs	r2, #0
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d8:	2100      	movs	r1, #0
 80027da:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <HAL_RCC_GetSysClockFreq+0x350>)
 80027dc:	fb03 f201 	mul.w	r2, r3, r1
 80027e0:	2300      	movs	r3, #0
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_RCC_GetSysClockFreq+0x350>)
 80027ea:	fba0 1202 	umull	r1, r2, r0, r2
 80027ee:	677a      	str	r2, [r7, #116]	; 0x74
 80027f0:	460a      	mov	r2, r1
 80027f2:	673a      	str	r2, [r7, #112]	; 0x70
 80027f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027f6:	4413      	add	r3, r2
 80027f8:	677b      	str	r3, [r7, #116]	; 0x74
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fe:	2200      	movs	r2, #0
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
 8002802:	637a      	str	r2, [r7, #52]	; 0x34
 8002804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002808:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800280c:	f7fd fd50 	bl	80002b0 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800281a:	e05b      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	2200      	movs	r2, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
 8002826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0159      	lsls	r1, r3, #5
 8002846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284a:	0150      	lsls	r0, r2, #5
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4641      	mov	r1, r8
 8002852:	ebb2 0a01 	subs.w	sl, r2, r1
 8002856:	4649      	mov	r1, r9
 8002858:	eb63 0b01 	sbc.w	fp, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800286c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002870:	ebb2 040a 	subs.w	r4, r2, sl
 8002874:	eb63 050b 	sbc.w	r5, r3, fp
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028bc:	2200      	movs	r2, #0
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	61fa      	str	r2, [r7, #28]
 80028c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c6:	f7fd fcf3 	bl	80002b0 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4613      	mov	r3, r2
 80028d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_GetSysClockFreq+0x348>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0f1b      	lsrs	r3, r3, #28
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80028e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028f2:	e003      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002900:	4618      	mov	r0, r3
 8002902:	3798      	adds	r7, #152	; 0x98
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	017d7840 	.word	0x017d7840

08002918 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e28d      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8083 	beq.w	8002a3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002938:	4b94      	ldr	r3, [pc, #592]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d019      	beq.n	8002978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002944:	4b91      	ldr	r3, [pc, #580]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800294c:	2b08      	cmp	r3, #8
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002950:	4b8e      	ldr	r3, [pc, #568]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b8b      	ldr	r3, [pc, #556]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b88      	ldr	r3, [pc, #544]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b84      	ldr	r3, [pc, #528]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x124>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e25a      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x90>
 800299a:	4b7c      	ldr	r3, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xcc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0xb4>
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a72      	ldr	r2, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xcc>
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6e      	ldr	r2, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6b      	ldr	r2, [pc, #428]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa90 	bl	8000f10 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fa8c 	bl	8000f10 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e21f      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xdc>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa7c 	bl	8000f10 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa78 	bl	8000f10 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e20b      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x104>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06f      	beq.n	8002b2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d017      	beq.n	8002a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a56:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d105      	bne.n	8002a6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x186>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1d3      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_RCC_OscConfig+0x278>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fa25 	bl	8000f10 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fa21 	bl	8000f10 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1b4      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4925      	ldr	r1, [pc, #148]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x278>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fa04 	bl	8000f10 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fa00 	bl	8000f10 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e193      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe f9e4 	bl	8000f10 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe f9e0 	bl	8000f10 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e173      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x234>
 8002b6a:	e01b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe f9cd 	bl	8000f10 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe f9c9 	bl	8000f10 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e15c      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470000 	.word	0x42470000
 8002b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b8a      	ldr	r3, [pc, #552]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8097 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a7e      	ldr	r2, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <HAL_RCC_OscConfig+0x4b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x4b0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x4b0>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe f989 	bl	8000f10 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe f985 	bl	8000f10 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e118      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <HAL_RCC_OscConfig+0x4b0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x31e>
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x358>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x340>
 8002c3e:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0x358>
 8002c58:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a59      	ldr	r2, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
 8002c64:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe f94a 	bl	8000f10 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe f946 	bl	8000f10 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0d7      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ee      	beq.n	8002c80 <HAL_RCC_OscConfig+0x368>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f934 	bl	8000f10 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe f930 	bl	8000f10 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0c1      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ee      	bne.n	8002cac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80ad 	beq.w	8002e44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d060      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d145      	bne.n	8002d8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x4b4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe f904 	bl	8000f10 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f900 	bl	8000f10 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e093      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	071b      	lsls	r3, r3, #28
 8002d56:	491b      	ldr	r1, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4b4>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe f8d5 	bl	8000f10 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe f8d1 	bl	8000f10 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e064      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x452>
 8002d88:	e05c      	b.n	8002e44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCC_OscConfig+0x4b4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe f8be 	bl	8000f10 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe f8ba 	bl	8000f10 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e04d      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x480>
 8002db6:	e045      	b.n	8002e44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e040      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_RCC_OscConfig+0x538>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d030      	beq.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d129      	bne.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d122      	bne.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d119      	bne.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d10f      	bne.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e03f      	b.n	8002ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fefe 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f929 	bl	80030f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d17c      	bne.n	8003008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_UART_Transmit+0x2c>
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e075      	b.n	800300a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Transmit+0x3e>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e06e      	b.n	800300a <HAL_UART_Transmit+0x11c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2221      	movs	r2, #33	; 0x21
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f42:	f7fd ffe5 	bl	8000f10 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d108      	bne.n	8002f70 <HAL_UART_Transmit+0x82>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e003      	b.n	8002f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f80:	e02a      	b.n	8002fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f840 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e036      	b.n	800300a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e007      	b.n	8002fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1cf      	bne.n	8002f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f810 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b090      	sub	sp, #64	; 0x40
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	e050      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d04c      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
 8003032:	f7fd ff6d 	bl	8000f10 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800303e:	429a      	cmp	r2, r3
 8003040:	d241      	bcs.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003062:	637a      	str	r2, [r7, #52]	; 0x34
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e5      	bne.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	613b      	str	r3, [r7, #16]
   return(result);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003096:	623a      	str	r2, [r7, #32]
 8003098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	69f9      	ldr	r1, [r7, #28]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00f      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d09f      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3740      	adds	r7, #64	; 0x40
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b0c0      	sub	sp, #256	; 0x100
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	ea40 0301 	orr.w	r3, r0, r1
 8003118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	431a      	orrs	r2, r3
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003148:	f021 010c 	bic.w	r1, r1, #12
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003156:	430b      	orrs	r3, r1
 8003158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	6999      	ldr	r1, [r3, #24]
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	ea40 0301 	orr.w	r3, r0, r1
 8003176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b8f      	ldr	r3, [pc, #572]	; (80033bc <UART_SetConfig+0x2cc>)
 8003180:	429a      	cmp	r2, r3
 8003182:	d005      	beq.n	8003190 <UART_SetConfig+0xa0>
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <UART_SetConfig+0x2d0>)
 800318c:	429a      	cmp	r2, r3
 800318e:	d104      	bne.n	800319a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff fa04 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003198:	e003      	b.n	80031a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800319a:	f7ff f9eb 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 800319e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ac:	f040 810c 	bne.w	80033c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	1891      	adds	r1, r2, r2
 80031c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ca:	415b      	adcs	r3, r3
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031d2:	4621      	mov	r1, r4
 80031d4:	eb12 0801 	adds.w	r8, r2, r1
 80031d8:	4629      	mov	r1, r5
 80031da:	eb43 0901 	adc.w	r9, r3, r1
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f2:	4690      	mov	r8, r2
 80031f4:	4699      	mov	r9, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	eb18 0303 	adds.w	r3, r8, r3
 80031fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003200:	462b      	mov	r3, r5
 8003202:	eb49 0303 	adc.w	r3, r9, r3
 8003206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800321a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800321e:	460b      	mov	r3, r1
 8003220:	18db      	adds	r3, r3, r3
 8003222:	653b      	str	r3, [r7, #80]	; 0x50
 8003224:	4613      	mov	r3, r2
 8003226:	eb42 0303 	adc.w	r3, r2, r3
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
 800322c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003234:	f7fd f83c 	bl	80002b0 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <UART_SetConfig+0x2d4>)
 800323e:	fba3 2302 	umull	r2, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	011c      	lsls	r4, r3, #4
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003260:	415b      	adcs	r3, r3
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003268:	4641      	mov	r1, r8
 800326a:	eb12 0a01 	adds.w	sl, r2, r1
 800326e:	4649      	mov	r1, r9
 8003270:	eb43 0b01 	adc.w	fp, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003288:	4692      	mov	sl, r2
 800328a:	469b      	mov	fp, r3
 800328c:	4643      	mov	r3, r8
 800328e:	eb1a 0303 	adds.w	r3, sl, r3
 8003292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003296:	464b      	mov	r3, r9
 8003298:	eb4b 0303 	adc.w	r3, fp, r3
 800329c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032b4:	460b      	mov	r3, r1
 80032b6:	18db      	adds	r3, r3, r3
 80032b8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ba:	4613      	mov	r3, r2
 80032bc:	eb42 0303 	adc.w	r3, r2, r3
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
 80032c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ca:	f7fc fff1 	bl	80002b0 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <UART_SetConfig+0x2d4>)
 80032d6:	fba3 2301 	umull	r2, r3, r3, r1
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2264      	movs	r2, #100	; 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	1acb      	subs	r3, r1, r3
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <UART_SetConfig+0x2d4>)
 80032ec:	fba3 2302 	umull	r2, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032f8:	441c      	add	r4, r3
 80032fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	1891      	adds	r1, r2, r2
 8003312:	63b9      	str	r1, [r7, #56]	; 0x38
 8003314:	415b      	adcs	r3, r3
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800331c:	4641      	mov	r1, r8
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6339      	str	r1, [r7, #48]	; 0x30
 8003322:	4649      	mov	r1, r9
 8003324:	414b      	adcs	r3, r1
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003334:	4659      	mov	r1, fp
 8003336:	00cb      	lsls	r3, r1, #3
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	4651      	mov	r1, sl
 8003340:	00ca      	lsls	r2, r1, #3
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	4603      	mov	r3, r0
 8003348:	4642      	mov	r2, r8
 800334a:	189b      	adds	r3, r3, r2
 800334c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003350:	464b      	mov	r3, r9
 8003352:	460a      	mov	r2, r1
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800336c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003370:	460b      	mov	r3, r1
 8003372:	18db      	adds	r3, r3, r3
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	4613      	mov	r3, r2
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003386:	f7fc ff93 	bl	80002b0 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <UART_SetConfig+0x2d4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <UART_SetConfig+0x2d4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 0207 	and.w	r2, r3, #7
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4422      	add	r2, r4
 80033b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033b8:	e105      	b.n	80035c6 <UART_SetConfig+0x4d6>
 80033ba:	bf00      	nop
 80033bc:	40011000 	.word	0x40011000
 80033c0:	40011400 	.word	0x40011400
 80033c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033cc:	2200      	movs	r2, #0
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	1891      	adds	r1, r2, r2
 80033e0:	6239      	str	r1, [r7, #32]
 80033e2:	415b      	adcs	r3, r3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ea:	4641      	mov	r1, r8
 80033ec:	1854      	adds	r4, r2, r1
 80033ee:	4649      	mov	r1, r9
 80033f0:	eb43 0501 	adc.w	r5, r3, r1
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	00eb      	lsls	r3, r5, #3
 80033fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003402:	00e2      	lsls	r2, r4, #3
 8003404:	4614      	mov	r4, r2
 8003406:	461d      	mov	r5, r3
 8003408:	4643      	mov	r3, r8
 800340a:	18e3      	adds	r3, r4, r3
 800340c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003410:	464b      	mov	r3, r9
 8003412:	eb45 0303 	adc.w	r3, r5, r3
 8003416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003436:	4629      	mov	r1, r5
 8003438:	008b      	lsls	r3, r1, #2
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003440:	4621      	mov	r1, r4
 8003442:	008a      	lsls	r2, r1, #2
 8003444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003448:	f7fc ff32 	bl	80002b0 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <UART_SetConfig+0x4e4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	61b9      	str	r1, [r7, #24]
 8003474:	415b      	adcs	r3, r3
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6139      	str	r1, [r7, #16]
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034b0:	464b      	mov	r3, r9
 80034b2:	460a      	mov	r2, r1
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034d4:	4649      	mov	r1, r9
 80034d6:	008b      	lsls	r3, r1, #2
 80034d8:	4641      	mov	r1, r8
 80034da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034de:	4641      	mov	r1, r8
 80034e0:	008a      	lsls	r2, r1, #2
 80034e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034e6:	f7fc fee3 	bl	80002b0 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <UART_SetConfig+0x4e4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <UART_SetConfig+0x4e4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350e:	441c      	add	r4, r3
 8003510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003514:	2200      	movs	r2, #0
 8003516:	673b      	str	r3, [r7, #112]	; 0x70
 8003518:	677a      	str	r2, [r7, #116]	; 0x74
 800351a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800351e:	4642      	mov	r2, r8
 8003520:	464b      	mov	r3, r9
 8003522:	1891      	adds	r1, r2, r2
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	415b      	adcs	r3, r3
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800352e:	4641      	mov	r1, r8
 8003530:	1851      	adds	r1, r2, r1
 8003532:	6039      	str	r1, [r7, #0]
 8003534:	4649      	mov	r1, r9
 8003536:	414b      	adcs	r3, r1
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003546:	4659      	mov	r1, fp
 8003548:	00cb      	lsls	r3, r1, #3
 800354a:	4651      	mov	r1, sl
 800354c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003550:	4651      	mov	r1, sl
 8003552:	00ca      	lsls	r2, r1, #3
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	4603      	mov	r3, r0
 800355a:	4642      	mov	r2, r8
 800355c:	189b      	adds	r3, r3, r2
 800355e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003560:	464b      	mov	r3, r9
 8003562:	460a      	mov	r2, r1
 8003564:	eb42 0303 	adc.w	r3, r2, r3
 8003568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	663b      	str	r3, [r7, #96]	; 0x60
 8003574:	667a      	str	r2, [r7, #100]	; 0x64
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003582:	4649      	mov	r1, r9
 8003584:	008b      	lsls	r3, r1, #2
 8003586:	4641      	mov	r1, r8
 8003588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800358c:	4641      	mov	r1, r8
 800358e:	008a      	lsls	r2, r1, #2
 8003590:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003594:	f7fc fe8c 	bl	80002b0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <UART_SetConfig+0x4e4>)
 800359e:	fba3 1302 	umull	r1, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2164      	movs	r1, #100	; 0x64
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	3332      	adds	r3, #50	; 0x32
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <UART_SetConfig+0x4e4>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4422      	add	r2, r4
 80035c4:	609a      	str	r2, [r3, #8]
}
 80035c6:	bf00      	nop
 80035c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <__errno>:
 80035d8:	4b01      	ldr	r3, [pc, #4]	; (80035e0 <__errno+0x8>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4d0d      	ldr	r5, [pc, #52]	; (800361c <__libc_init_array+0x38>)
 80035e8:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ea:	1b64      	subs	r4, r4, r5
 80035ec:	10a4      	asrs	r4, r4, #2
 80035ee:	2600      	movs	r6, #0
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	4d0b      	ldr	r5, [pc, #44]	; (8003624 <__libc_init_array+0x40>)
 80035f6:	4c0c      	ldr	r4, [pc, #48]	; (8003628 <__libc_init_array+0x44>)
 80035f8:	f000 fc8e 	bl	8003f18 <_init>
 80035fc:	1b64      	subs	r4, r4, r5
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	2600      	movs	r6, #0
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f855 3b04 	ldr.w	r3, [r5], #4
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f855 3b04 	ldr.w	r3, [r5], #4
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08003fdc 	.word	0x08003fdc
 8003620:	08003fdc 	.word	0x08003fdc
 8003624:	08003fdc 	.word	0x08003fdc
 8003628:	08003fe0 	.word	0x08003fe0

0800362c <memset>:
 800362c:	4402      	add	r2, r0
 800362e:	4603      	mov	r3, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <siprintf>:
 800363c:	b40e      	push	{r1, r2, r3}
 800363e:	b500      	push	{lr}
 8003640:	b09c      	sub	sp, #112	; 0x70
 8003642:	ab1d      	add	r3, sp, #116	; 0x74
 8003644:	9002      	str	r0, [sp, #8]
 8003646:	9006      	str	r0, [sp, #24]
 8003648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800364c:	4809      	ldr	r0, [pc, #36]	; (8003674 <siprintf+0x38>)
 800364e:	9107      	str	r1, [sp, #28]
 8003650:	9104      	str	r1, [sp, #16]
 8003652:	4909      	ldr	r1, [pc, #36]	; (8003678 <siprintf+0x3c>)
 8003654:	f853 2b04 	ldr.w	r2, [r3], #4
 8003658:	9105      	str	r1, [sp, #20]
 800365a:	6800      	ldr	r0, [r0, #0]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	a902      	add	r1, sp, #8
 8003660:	f000 f868 	bl	8003734 <_svfiprintf_r>
 8003664:	9b02      	ldr	r3, [sp, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	b01c      	add	sp, #112	; 0x70
 800366c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003670:	b003      	add	sp, #12
 8003672:	4770      	bx	lr
 8003674:	2000000c 	.word	0x2000000c
 8003678:	ffff0208 	.word	0xffff0208

0800367c <__ssputs_r>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	688e      	ldr	r6, [r1, #8]
 8003682:	429e      	cmp	r6, r3
 8003684:	4682      	mov	sl, r0
 8003686:	460c      	mov	r4, r1
 8003688:	4690      	mov	r8, r2
 800368a:	461f      	mov	r7, r3
 800368c:	d838      	bhi.n	8003700 <__ssputs_r+0x84>
 800368e:	898a      	ldrh	r2, [r1, #12]
 8003690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003694:	d032      	beq.n	80036fc <__ssputs_r+0x80>
 8003696:	6825      	ldr	r5, [r4, #0]
 8003698:	6909      	ldr	r1, [r1, #16]
 800369a:	eba5 0901 	sub.w	r9, r5, r1
 800369e:	6965      	ldr	r5, [r4, #20]
 80036a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036a8:	3301      	adds	r3, #1
 80036aa:	444b      	add	r3, r9
 80036ac:	106d      	asrs	r5, r5, #1
 80036ae:	429d      	cmp	r5, r3
 80036b0:	bf38      	it	cc
 80036b2:	461d      	movcc	r5, r3
 80036b4:	0553      	lsls	r3, r2, #21
 80036b6:	d531      	bpl.n	800371c <__ssputs_r+0xa0>
 80036b8:	4629      	mov	r1, r5
 80036ba:	f000 fb63 	bl	8003d84 <_malloc_r>
 80036be:	4606      	mov	r6, r0
 80036c0:	b950      	cbnz	r0, 80036d8 <__ssputs_r+0x5c>
 80036c2:	230c      	movs	r3, #12
 80036c4:	f8ca 3000 	str.w	r3, [sl]
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ce:	81a3      	strh	r3, [r4, #12]
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d8:	6921      	ldr	r1, [r4, #16]
 80036da:	464a      	mov	r2, r9
 80036dc:	f000 fabe 	bl	8003c5c <memcpy>
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	6126      	str	r6, [r4, #16]
 80036ee:	6165      	str	r5, [r4, #20]
 80036f0:	444e      	add	r6, r9
 80036f2:	eba5 0509 	sub.w	r5, r5, r9
 80036f6:	6026      	str	r6, [r4, #0]
 80036f8:	60a5      	str	r5, [r4, #8]
 80036fa:	463e      	mov	r6, r7
 80036fc:	42be      	cmp	r6, r7
 80036fe:	d900      	bls.n	8003702 <__ssputs_r+0x86>
 8003700:	463e      	mov	r6, r7
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	4632      	mov	r2, r6
 8003706:	4641      	mov	r1, r8
 8003708:	f000 fab6 	bl	8003c78 <memmove>
 800370c:	68a3      	ldr	r3, [r4, #8]
 800370e:	1b9b      	subs	r3, r3, r6
 8003710:	60a3      	str	r3, [r4, #8]
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	4433      	add	r3, r6
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	2000      	movs	r0, #0
 800371a:	e7db      	b.n	80036d4 <__ssputs_r+0x58>
 800371c:	462a      	mov	r2, r5
 800371e:	f000 fba5 	bl	8003e6c <_realloc_r>
 8003722:	4606      	mov	r6, r0
 8003724:	2800      	cmp	r0, #0
 8003726:	d1e1      	bne.n	80036ec <__ssputs_r+0x70>
 8003728:	6921      	ldr	r1, [r4, #16]
 800372a:	4650      	mov	r0, sl
 800372c:	f000 fabe 	bl	8003cac <_free_r>
 8003730:	e7c7      	b.n	80036c2 <__ssputs_r+0x46>
	...

08003734 <_svfiprintf_r>:
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	4698      	mov	r8, r3
 800373a:	898b      	ldrh	r3, [r1, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	b09d      	sub	sp, #116	; 0x74
 8003740:	4607      	mov	r7, r0
 8003742:	460d      	mov	r5, r1
 8003744:	4614      	mov	r4, r2
 8003746:	d50e      	bpl.n	8003766 <_svfiprintf_r+0x32>
 8003748:	690b      	ldr	r3, [r1, #16]
 800374a:	b963      	cbnz	r3, 8003766 <_svfiprintf_r+0x32>
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	f000 fb19 	bl	8003d84 <_malloc_r>
 8003752:	6028      	str	r0, [r5, #0]
 8003754:	6128      	str	r0, [r5, #16]
 8003756:	b920      	cbnz	r0, 8003762 <_svfiprintf_r+0x2e>
 8003758:	230c      	movs	r3, #12
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	e0d1      	b.n	8003906 <_svfiprintf_r+0x1d2>
 8003762:	2340      	movs	r3, #64	; 0x40
 8003764:	616b      	str	r3, [r5, #20]
 8003766:	2300      	movs	r3, #0
 8003768:	9309      	str	r3, [sp, #36]	; 0x24
 800376a:	2320      	movs	r3, #32
 800376c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003770:	f8cd 800c 	str.w	r8, [sp, #12]
 8003774:	2330      	movs	r3, #48	; 0x30
 8003776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003920 <_svfiprintf_r+0x1ec>
 800377a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800377e:	f04f 0901 	mov.w	r9, #1
 8003782:	4623      	mov	r3, r4
 8003784:	469a      	mov	sl, r3
 8003786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378a:	b10a      	cbz	r2, 8003790 <_svfiprintf_r+0x5c>
 800378c:	2a25      	cmp	r2, #37	; 0x25
 800378e:	d1f9      	bne.n	8003784 <_svfiprintf_r+0x50>
 8003790:	ebba 0b04 	subs.w	fp, sl, r4
 8003794:	d00b      	beq.n	80037ae <_svfiprintf_r+0x7a>
 8003796:	465b      	mov	r3, fp
 8003798:	4622      	mov	r2, r4
 800379a:	4629      	mov	r1, r5
 800379c:	4638      	mov	r0, r7
 800379e:	f7ff ff6d 	bl	800367c <__ssputs_r>
 80037a2:	3001      	adds	r0, #1
 80037a4:	f000 80aa 	beq.w	80038fc <_svfiprintf_r+0x1c8>
 80037a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037aa:	445a      	add	r2, fp
 80037ac:	9209      	str	r2, [sp, #36]	; 0x24
 80037ae:	f89a 3000 	ldrb.w	r3, [sl]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80a2 	beq.w	80038fc <_svfiprintf_r+0x1c8>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f04f 32ff 	mov.w	r2, #4294967295
 80037be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c2:	f10a 0a01 	add.w	sl, sl, #1
 80037c6:	9304      	str	r3, [sp, #16]
 80037c8:	9307      	str	r3, [sp, #28]
 80037ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ce:	931a      	str	r3, [sp, #104]	; 0x68
 80037d0:	4654      	mov	r4, sl
 80037d2:	2205      	movs	r2, #5
 80037d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d8:	4851      	ldr	r0, [pc, #324]	; (8003920 <_svfiprintf_r+0x1ec>)
 80037da:	f7fc fd19 	bl	8000210 <memchr>
 80037de:	9a04      	ldr	r2, [sp, #16]
 80037e0:	b9d8      	cbnz	r0, 800381a <_svfiprintf_r+0xe6>
 80037e2:	06d0      	lsls	r0, r2, #27
 80037e4:	bf44      	itt	mi
 80037e6:	2320      	movmi	r3, #32
 80037e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ec:	0711      	lsls	r1, r2, #28
 80037ee:	bf44      	itt	mi
 80037f0:	232b      	movmi	r3, #43	; 0x2b
 80037f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f6:	f89a 3000 	ldrb.w	r3, [sl]
 80037fa:	2b2a      	cmp	r3, #42	; 0x2a
 80037fc:	d015      	beq.n	800382a <_svfiprintf_r+0xf6>
 80037fe:	9a07      	ldr	r2, [sp, #28]
 8003800:	4654      	mov	r4, sl
 8003802:	2000      	movs	r0, #0
 8003804:	f04f 0c0a 	mov.w	ip, #10
 8003808:	4621      	mov	r1, r4
 800380a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800380e:	3b30      	subs	r3, #48	; 0x30
 8003810:	2b09      	cmp	r3, #9
 8003812:	d94e      	bls.n	80038b2 <_svfiprintf_r+0x17e>
 8003814:	b1b0      	cbz	r0, 8003844 <_svfiprintf_r+0x110>
 8003816:	9207      	str	r2, [sp, #28]
 8003818:	e014      	b.n	8003844 <_svfiprintf_r+0x110>
 800381a:	eba0 0308 	sub.w	r3, r0, r8
 800381e:	fa09 f303 	lsl.w	r3, r9, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	9304      	str	r3, [sp, #16]
 8003826:	46a2      	mov	sl, r4
 8003828:	e7d2      	b.n	80037d0 <_svfiprintf_r+0x9c>
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	1d19      	adds	r1, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	9103      	str	r1, [sp, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfbb      	ittet	lt
 8003836:	425b      	neglt	r3, r3
 8003838:	f042 0202 	orrlt.w	r2, r2, #2
 800383c:	9307      	strge	r3, [sp, #28]
 800383e:	9307      	strlt	r3, [sp, #28]
 8003840:	bfb8      	it	lt
 8003842:	9204      	strlt	r2, [sp, #16]
 8003844:	7823      	ldrb	r3, [r4, #0]
 8003846:	2b2e      	cmp	r3, #46	; 0x2e
 8003848:	d10c      	bne.n	8003864 <_svfiprintf_r+0x130>
 800384a:	7863      	ldrb	r3, [r4, #1]
 800384c:	2b2a      	cmp	r3, #42	; 0x2a
 800384e:	d135      	bne.n	80038bc <_svfiprintf_r+0x188>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	9203      	str	r2, [sp, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	bfb8      	it	lt
 800385c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003860:	3402      	adds	r4, #2
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003930 <_svfiprintf_r+0x1fc>
 8003868:	7821      	ldrb	r1, [r4, #0]
 800386a:	2203      	movs	r2, #3
 800386c:	4650      	mov	r0, sl
 800386e:	f7fc fccf 	bl	8000210 <memchr>
 8003872:	b140      	cbz	r0, 8003886 <_svfiprintf_r+0x152>
 8003874:	2340      	movs	r3, #64	; 0x40
 8003876:	eba0 000a 	sub.w	r0, r0, sl
 800387a:	fa03 f000 	lsl.w	r0, r3, r0
 800387e:	9b04      	ldr	r3, [sp, #16]
 8003880:	4303      	orrs	r3, r0
 8003882:	3401      	adds	r4, #1
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388a:	4826      	ldr	r0, [pc, #152]	; (8003924 <_svfiprintf_r+0x1f0>)
 800388c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003890:	2206      	movs	r2, #6
 8003892:	f7fc fcbd 	bl	8000210 <memchr>
 8003896:	2800      	cmp	r0, #0
 8003898:	d038      	beq.n	800390c <_svfiprintf_r+0x1d8>
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <_svfiprintf_r+0x1f4>)
 800389c:	bb1b      	cbnz	r3, 80038e6 <_svfiprintf_r+0x1b2>
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	3307      	adds	r3, #7
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	3308      	adds	r3, #8
 80038a8:	9303      	str	r3, [sp, #12]
 80038aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ac:	4433      	add	r3, r6
 80038ae:	9309      	str	r3, [sp, #36]	; 0x24
 80038b0:	e767      	b.n	8003782 <_svfiprintf_r+0x4e>
 80038b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80038b6:	460c      	mov	r4, r1
 80038b8:	2001      	movs	r0, #1
 80038ba:	e7a5      	b.n	8003808 <_svfiprintf_r+0xd4>
 80038bc:	2300      	movs	r3, #0
 80038be:	3401      	adds	r4, #1
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 0c0a 	mov.w	ip, #10
 80038c8:	4620      	mov	r0, r4
 80038ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038ce:	3a30      	subs	r2, #48	; 0x30
 80038d0:	2a09      	cmp	r2, #9
 80038d2:	d903      	bls.n	80038dc <_svfiprintf_r+0x1a8>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0c5      	beq.n	8003864 <_svfiprintf_r+0x130>
 80038d8:	9105      	str	r1, [sp, #20]
 80038da:	e7c3      	b.n	8003864 <_svfiprintf_r+0x130>
 80038dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e0:	4604      	mov	r4, r0
 80038e2:	2301      	movs	r3, #1
 80038e4:	e7f0      	b.n	80038c8 <_svfiprintf_r+0x194>
 80038e6:	ab03      	add	r3, sp, #12
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	462a      	mov	r2, r5
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <_svfiprintf_r+0x1f8>)
 80038ee:	a904      	add	r1, sp, #16
 80038f0:	4638      	mov	r0, r7
 80038f2:	f3af 8000 	nop.w
 80038f6:	1c42      	adds	r2, r0, #1
 80038f8:	4606      	mov	r6, r0
 80038fa:	d1d6      	bne.n	80038aa <_svfiprintf_r+0x176>
 80038fc:	89ab      	ldrh	r3, [r5, #12]
 80038fe:	065b      	lsls	r3, r3, #25
 8003900:	f53f af2c 	bmi.w	800375c <_svfiprintf_r+0x28>
 8003904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003906:	b01d      	add	sp, #116	; 0x74
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	ab03      	add	r3, sp, #12
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	462a      	mov	r2, r5
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <_svfiprintf_r+0x1f8>)
 8003914:	a904      	add	r1, sp, #16
 8003916:	4638      	mov	r0, r7
 8003918:	f000 f87a 	bl	8003a10 <_printf_i>
 800391c:	e7eb      	b.n	80038f6 <_svfiprintf_r+0x1c2>
 800391e:	bf00      	nop
 8003920:	08003fa0 	.word	0x08003fa0
 8003924:	08003faa 	.word	0x08003faa
 8003928:	00000000 	.word	0x00000000
 800392c:	0800367d 	.word	0x0800367d
 8003930:	08003fa6 	.word	0x08003fa6

08003934 <_printf_common>:
 8003934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	4616      	mov	r6, r2
 800393a:	4699      	mov	r9, r3
 800393c:	688a      	ldr	r2, [r1, #8]
 800393e:	690b      	ldr	r3, [r1, #16]
 8003940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003944:	4293      	cmp	r3, r2
 8003946:	bfb8      	it	lt
 8003948:	4613      	movlt	r3, r2
 800394a:	6033      	str	r3, [r6, #0]
 800394c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003950:	4607      	mov	r7, r0
 8003952:	460c      	mov	r4, r1
 8003954:	b10a      	cbz	r2, 800395a <_printf_common+0x26>
 8003956:	3301      	adds	r3, #1
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	0699      	lsls	r1, r3, #26
 800395e:	bf42      	ittt	mi
 8003960:	6833      	ldrmi	r3, [r6, #0]
 8003962:	3302      	addmi	r3, #2
 8003964:	6033      	strmi	r3, [r6, #0]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d106      	bne.n	800397c <_printf_common+0x48>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	6832      	ldr	r2, [r6, #0]
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	42ab      	cmp	r3, r5
 800397a:	dc26      	bgt.n	80039ca <_printf_common+0x96>
 800397c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003980:	1e13      	subs	r3, r2, #0
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	bf18      	it	ne
 8003986:	2301      	movne	r3, #1
 8003988:	0692      	lsls	r2, r2, #26
 800398a:	d42b      	bmi.n	80039e4 <_printf_common+0xb0>
 800398c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003990:	4649      	mov	r1, r9
 8003992:	4638      	mov	r0, r7
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d01e      	beq.n	80039d8 <_printf_common+0xa4>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	68e5      	ldr	r5, [r4, #12]
 800399e:	6832      	ldr	r2, [r6, #0]
 80039a0:	f003 0306 	and.w	r3, r3, #6
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	bf08      	it	eq
 80039a8:	1aad      	subeq	r5, r5, r2
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	6922      	ldr	r2, [r4, #16]
 80039ae:	bf0c      	ite	eq
 80039b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b4:	2500      	movne	r5, #0
 80039b6:	4293      	cmp	r3, r2
 80039b8:	bfc4      	itt	gt
 80039ba:	1a9b      	subgt	r3, r3, r2
 80039bc:	18ed      	addgt	r5, r5, r3
 80039be:	2600      	movs	r6, #0
 80039c0:	341a      	adds	r4, #26
 80039c2:	42b5      	cmp	r5, r6
 80039c4:	d11a      	bne.n	80039fc <_printf_common+0xc8>
 80039c6:	2000      	movs	r0, #0
 80039c8:	e008      	b.n	80039dc <_printf_common+0xa8>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4652      	mov	r2, sl
 80039ce:	4649      	mov	r1, r9
 80039d0:	4638      	mov	r0, r7
 80039d2:	47c0      	blx	r8
 80039d4:	3001      	adds	r0, #1
 80039d6:	d103      	bne.n	80039e0 <_printf_common+0xac>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e0:	3501      	adds	r5, #1
 80039e2:	e7c6      	b.n	8003972 <_printf_common+0x3e>
 80039e4:	18e1      	adds	r1, r4, r3
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	2030      	movs	r0, #48	; 0x30
 80039ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ee:	4422      	add	r2, r4
 80039f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039f8:	3302      	adds	r3, #2
 80039fa:	e7c7      	b.n	800398c <_printf_common+0x58>
 80039fc:	2301      	movs	r3, #1
 80039fe:	4622      	mov	r2, r4
 8003a00:	4649      	mov	r1, r9
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	3001      	adds	r0, #1
 8003a08:	d0e6      	beq.n	80039d8 <_printf_common+0xa4>
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	e7d9      	b.n	80039c2 <_printf_common+0x8e>
	...

08003a10 <_printf_i>:
 8003a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	7e0f      	ldrb	r7, [r1, #24]
 8003a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a18:	2f78      	cmp	r7, #120	; 0x78
 8003a1a:	4691      	mov	r9, r2
 8003a1c:	4680      	mov	r8, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	469a      	mov	sl, r3
 8003a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a26:	d807      	bhi.n	8003a38 <_printf_i+0x28>
 8003a28:	2f62      	cmp	r7, #98	; 0x62
 8003a2a:	d80a      	bhi.n	8003a42 <_printf_i+0x32>
 8003a2c:	2f00      	cmp	r7, #0
 8003a2e:	f000 80d8 	beq.w	8003be2 <_printf_i+0x1d2>
 8003a32:	2f58      	cmp	r7, #88	; 0x58
 8003a34:	f000 80a3 	beq.w	8003b7e <_printf_i+0x16e>
 8003a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a40:	e03a      	b.n	8003ab8 <_printf_i+0xa8>
 8003a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a46:	2b15      	cmp	r3, #21
 8003a48:	d8f6      	bhi.n	8003a38 <_printf_i+0x28>
 8003a4a:	a101      	add	r1, pc, #4	; (adr r1, 8003a50 <_printf_i+0x40>)
 8003a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a50:	08003aa9 	.word	0x08003aa9
 8003a54:	08003abd 	.word	0x08003abd
 8003a58:	08003a39 	.word	0x08003a39
 8003a5c:	08003a39 	.word	0x08003a39
 8003a60:	08003a39 	.word	0x08003a39
 8003a64:	08003a39 	.word	0x08003a39
 8003a68:	08003abd 	.word	0x08003abd
 8003a6c:	08003a39 	.word	0x08003a39
 8003a70:	08003a39 	.word	0x08003a39
 8003a74:	08003a39 	.word	0x08003a39
 8003a78:	08003a39 	.word	0x08003a39
 8003a7c:	08003bc9 	.word	0x08003bc9
 8003a80:	08003aed 	.word	0x08003aed
 8003a84:	08003bab 	.word	0x08003bab
 8003a88:	08003a39 	.word	0x08003a39
 8003a8c:	08003a39 	.word	0x08003a39
 8003a90:	08003beb 	.word	0x08003beb
 8003a94:	08003a39 	.word	0x08003a39
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003a39 	.word	0x08003a39
 8003aa0:	08003a39 	.word	0x08003a39
 8003aa4:	08003bb3 	.word	0x08003bb3
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	602a      	str	r2, [r5, #0]
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0a3      	b.n	8003c04 <_printf_i+0x1f4>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	6829      	ldr	r1, [r5, #0]
 8003ac0:	0606      	lsls	r6, r0, #24
 8003ac2:	f101 0304 	add.w	r3, r1, #4
 8003ac6:	d50a      	bpl.n	8003ade <_printf_i+0xce>
 8003ac8:	680e      	ldr	r6, [r1, #0]
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	da03      	bge.n	8003ad8 <_printf_i+0xc8>
 8003ad0:	232d      	movs	r3, #45	; 0x2d
 8003ad2:	4276      	negs	r6, r6
 8003ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad8:	485e      	ldr	r0, [pc, #376]	; (8003c54 <_printf_i+0x244>)
 8003ada:	230a      	movs	r3, #10
 8003adc:	e019      	b.n	8003b12 <_printf_i+0x102>
 8003ade:	680e      	ldr	r6, [r1, #0]
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ae6:	bf18      	it	ne
 8003ae8:	b236      	sxthne	r6, r6
 8003aea:	e7ef      	b.n	8003acc <_printf_i+0xbc>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	1d19      	adds	r1, r3, #4
 8003af2:	6029      	str	r1, [r5, #0]
 8003af4:	0601      	lsls	r1, r0, #24
 8003af6:	d501      	bpl.n	8003afc <_printf_i+0xec>
 8003af8:	681e      	ldr	r6, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <_printf_i+0xf2>
 8003afc:	0646      	lsls	r6, r0, #25
 8003afe:	d5fb      	bpl.n	8003af8 <_printf_i+0xe8>
 8003b00:	881e      	ldrh	r6, [r3, #0]
 8003b02:	4854      	ldr	r0, [pc, #336]	; (8003c54 <_printf_i+0x244>)
 8003b04:	2f6f      	cmp	r7, #111	; 0x6f
 8003b06:	bf0c      	ite	eq
 8003b08:	2308      	moveq	r3, #8
 8003b0a:	230a      	movne	r3, #10
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b12:	6865      	ldr	r5, [r4, #4]
 8003b14:	60a5      	str	r5, [r4, #8]
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	bfa2      	ittt	ge
 8003b1a:	6821      	ldrge	r1, [r4, #0]
 8003b1c:	f021 0104 	bicge.w	r1, r1, #4
 8003b20:	6021      	strge	r1, [r4, #0]
 8003b22:	b90e      	cbnz	r6, 8003b28 <_printf_i+0x118>
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	d04d      	beq.n	8003bc4 <_printf_i+0x1b4>
 8003b28:	4615      	mov	r5, r2
 8003b2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b32:	5dc7      	ldrb	r7, [r0, r7]
 8003b34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b38:	4637      	mov	r7, r6
 8003b3a:	42bb      	cmp	r3, r7
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	d9f4      	bls.n	8003b2a <_printf_i+0x11a>
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d10b      	bne.n	8003b5c <_printf_i+0x14c>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	07de      	lsls	r6, r3, #31
 8003b48:	d508      	bpl.n	8003b5c <_printf_i+0x14c>
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	6861      	ldr	r1, [r4, #4]
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	bfde      	ittt	le
 8003b52:	2330      	movle	r3, #48	; 0x30
 8003b54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b5c:	1b52      	subs	r2, r2, r5
 8003b5e:	6122      	str	r2, [r4, #16]
 8003b60:	f8cd a000 	str.w	sl, [sp]
 8003b64:	464b      	mov	r3, r9
 8003b66:	aa03      	add	r2, sp, #12
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f7ff fee2 	bl	8003934 <_printf_common>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d14c      	bne.n	8003c0e <_printf_i+0x1fe>
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	b004      	add	sp, #16
 8003b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7e:	4835      	ldr	r0, [pc, #212]	; (8003c54 <_printf_i+0x244>)
 8003b80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b84:	6829      	ldr	r1, [r5, #0]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b8c:	6029      	str	r1, [r5, #0]
 8003b8e:	061d      	lsls	r5, r3, #24
 8003b90:	d514      	bpl.n	8003bbc <_printf_i+0x1ac>
 8003b92:	07df      	lsls	r7, r3, #31
 8003b94:	bf44      	itt	mi
 8003b96:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9a:	6023      	strmi	r3, [r4, #0]
 8003b9c:	b91e      	cbnz	r6, 8003ba6 <_printf_i+0x196>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	f023 0320 	bic.w	r3, r3, #32
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	e7b0      	b.n	8003b0c <_printf_i+0xfc>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	f043 0320 	orr.w	r3, r3, #32
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	2378      	movs	r3, #120	; 0x78
 8003bb4:	4828      	ldr	r0, [pc, #160]	; (8003c58 <_printf_i+0x248>)
 8003bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bba:	e7e3      	b.n	8003b84 <_printf_i+0x174>
 8003bbc:	0659      	lsls	r1, r3, #25
 8003bbe:	bf48      	it	mi
 8003bc0:	b2b6      	uxthmi	r6, r6
 8003bc2:	e7e6      	b.n	8003b92 <_printf_i+0x182>
 8003bc4:	4615      	mov	r5, r2
 8003bc6:	e7bb      	b.n	8003b40 <_printf_i+0x130>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	6826      	ldr	r6, [r4, #0]
 8003bcc:	6961      	ldr	r1, [r4, #20]
 8003bce:	1d18      	adds	r0, r3, #4
 8003bd0:	6028      	str	r0, [r5, #0]
 8003bd2:	0635      	lsls	r5, r6, #24
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	d501      	bpl.n	8003bdc <_printf_i+0x1cc>
 8003bd8:	6019      	str	r1, [r3, #0]
 8003bda:	e002      	b.n	8003be2 <_printf_i+0x1d2>
 8003bdc:	0670      	lsls	r0, r6, #25
 8003bde:	d5fb      	bpl.n	8003bd8 <_printf_i+0x1c8>
 8003be0:	8019      	strh	r1, [r3, #0]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	4615      	mov	r5, r2
 8003be8:	e7ba      	b.n	8003b60 <_printf_i+0x150>
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	602a      	str	r2, [r5, #0]
 8003bf0:	681d      	ldr	r5, [r3, #0]
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7fc fb0a 	bl	8000210 <memchr>
 8003bfc:	b108      	cbz	r0, 8003c02 <_printf_i+0x1f2>
 8003bfe:	1b40      	subs	r0, r0, r5
 8003c00:	6060      	str	r0, [r4, #4]
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	2300      	movs	r3, #0
 8003c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c0c:	e7a8      	b.n	8003b60 <_printf_i+0x150>
 8003c0e:	6923      	ldr	r3, [r4, #16]
 8003c10:	462a      	mov	r2, r5
 8003c12:	4649      	mov	r1, r9
 8003c14:	4640      	mov	r0, r8
 8003c16:	47d0      	blx	sl
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d0ab      	beq.n	8003b74 <_printf_i+0x164>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	079b      	lsls	r3, r3, #30
 8003c20:	d413      	bmi.n	8003c4a <_printf_i+0x23a>
 8003c22:	68e0      	ldr	r0, [r4, #12]
 8003c24:	9b03      	ldr	r3, [sp, #12]
 8003c26:	4298      	cmp	r0, r3
 8003c28:	bfb8      	it	lt
 8003c2a:	4618      	movlt	r0, r3
 8003c2c:	e7a4      	b.n	8003b78 <_printf_i+0x168>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4632      	mov	r2, r6
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	47d0      	blx	sl
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d09b      	beq.n	8003b74 <_printf_i+0x164>
 8003c3c:	3501      	adds	r5, #1
 8003c3e:	68e3      	ldr	r3, [r4, #12]
 8003c40:	9903      	ldr	r1, [sp, #12]
 8003c42:	1a5b      	subs	r3, r3, r1
 8003c44:	42ab      	cmp	r3, r5
 8003c46:	dcf2      	bgt.n	8003c2e <_printf_i+0x21e>
 8003c48:	e7eb      	b.n	8003c22 <_printf_i+0x212>
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	f104 0619 	add.w	r6, r4, #25
 8003c50:	e7f5      	b.n	8003c3e <_printf_i+0x22e>
 8003c52:	bf00      	nop
 8003c54:	08003fb1 	.word	0x08003fb1
 8003c58:	08003fc2 	.word	0x08003fc2

08003c5c <memcpy>:
 8003c5c:	440a      	add	r2, r1
 8003c5e:	4291      	cmp	r1, r2
 8003c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c64:	d100      	bne.n	8003c68 <memcpy+0xc>
 8003c66:	4770      	bx	lr
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c72:	4291      	cmp	r1, r2
 8003c74:	d1f9      	bne.n	8003c6a <memcpy+0xe>
 8003c76:	bd10      	pop	{r4, pc}

08003c78 <memmove>:
 8003c78:	4288      	cmp	r0, r1
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	eb01 0402 	add.w	r4, r1, r2
 8003c80:	d902      	bls.n	8003c88 <memmove+0x10>
 8003c82:	4284      	cmp	r4, r0
 8003c84:	4623      	mov	r3, r4
 8003c86:	d807      	bhi.n	8003c98 <memmove+0x20>
 8003c88:	1e43      	subs	r3, r0, #1
 8003c8a:	42a1      	cmp	r1, r4
 8003c8c:	d008      	beq.n	8003ca0 <memmove+0x28>
 8003c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c96:	e7f8      	b.n	8003c8a <memmove+0x12>
 8003c98:	4402      	add	r2, r0
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	428a      	cmp	r2, r1
 8003c9e:	d100      	bne.n	8003ca2 <memmove+0x2a>
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003caa:	e7f7      	b.n	8003c9c <memmove+0x24>

08003cac <_free_r>:
 8003cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cae:	2900      	cmp	r1, #0
 8003cb0:	d044      	beq.n	8003d3c <_free_r+0x90>
 8003cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb6:	9001      	str	r0, [sp, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f1a1 0404 	sub.w	r4, r1, #4
 8003cbe:	bfb8      	it	lt
 8003cc0:	18e4      	addlt	r4, r4, r3
 8003cc2:	f000 f913 	bl	8003eec <__malloc_lock>
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <_free_r+0x94>)
 8003cc8:	9801      	ldr	r0, [sp, #4]
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	b933      	cbnz	r3, 8003cdc <_free_r+0x30>
 8003cce:	6063      	str	r3, [r4, #4]
 8003cd0:	6014      	str	r4, [r2, #0]
 8003cd2:	b003      	add	sp, #12
 8003cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cd8:	f000 b90e 	b.w	8003ef8 <__malloc_unlock>
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	d908      	bls.n	8003cf2 <_free_r+0x46>
 8003ce0:	6825      	ldr	r5, [r4, #0]
 8003ce2:	1961      	adds	r1, r4, r5
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	bf01      	itttt	eq
 8003ce8:	6819      	ldreq	r1, [r3, #0]
 8003cea:	685b      	ldreq	r3, [r3, #4]
 8003cec:	1949      	addeq	r1, r1, r5
 8003cee:	6021      	streq	r1, [r4, #0]
 8003cf0:	e7ed      	b.n	8003cce <_free_r+0x22>
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b10b      	cbz	r3, 8003cfc <_free_r+0x50>
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d9fa      	bls.n	8003cf2 <_free_r+0x46>
 8003cfc:	6811      	ldr	r1, [r2, #0]
 8003cfe:	1855      	adds	r5, r2, r1
 8003d00:	42a5      	cmp	r5, r4
 8003d02:	d10b      	bne.n	8003d1c <_free_r+0x70>
 8003d04:	6824      	ldr	r4, [r4, #0]
 8003d06:	4421      	add	r1, r4
 8003d08:	1854      	adds	r4, r2, r1
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	d1e0      	bne.n	8003cd2 <_free_r+0x26>
 8003d10:	681c      	ldr	r4, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	6053      	str	r3, [r2, #4]
 8003d16:	4421      	add	r1, r4
 8003d18:	6011      	str	r1, [r2, #0]
 8003d1a:	e7da      	b.n	8003cd2 <_free_r+0x26>
 8003d1c:	d902      	bls.n	8003d24 <_free_r+0x78>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	6003      	str	r3, [r0, #0]
 8003d22:	e7d6      	b.n	8003cd2 <_free_r+0x26>
 8003d24:	6825      	ldr	r5, [r4, #0]
 8003d26:	1961      	adds	r1, r4, r5
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	bf04      	itt	eq
 8003d2c:	6819      	ldreq	r1, [r3, #0]
 8003d2e:	685b      	ldreq	r3, [r3, #4]
 8003d30:	6063      	str	r3, [r4, #4]
 8003d32:	bf04      	itt	eq
 8003d34:	1949      	addeq	r1, r1, r5
 8003d36:	6021      	streq	r1, [r4, #0]
 8003d38:	6054      	str	r4, [r2, #4]
 8003d3a:	e7ca      	b.n	8003cd2 <_free_r+0x26>
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bd30      	pop	{r4, r5, pc}
 8003d40:	20000198 	.word	0x20000198

08003d44 <sbrk_aligned>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4e0e      	ldr	r6, [pc, #56]	; (8003d80 <sbrk_aligned+0x3c>)
 8003d48:	460c      	mov	r4, r1
 8003d4a:	6831      	ldr	r1, [r6, #0]
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	b911      	cbnz	r1, 8003d56 <sbrk_aligned+0x12>
 8003d50:	f000 f8bc 	bl	8003ecc <_sbrk_r>
 8003d54:	6030      	str	r0, [r6, #0]
 8003d56:	4621      	mov	r1, r4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f8b7 	bl	8003ecc <_sbrk_r>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	d00a      	beq.n	8003d78 <sbrk_aligned+0x34>
 8003d62:	1cc4      	adds	r4, r0, #3
 8003d64:	f024 0403 	bic.w	r4, r4, #3
 8003d68:	42a0      	cmp	r0, r4
 8003d6a:	d007      	beq.n	8003d7c <sbrk_aligned+0x38>
 8003d6c:	1a21      	subs	r1, r4, r0
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 f8ac 	bl	8003ecc <_sbrk_r>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d101      	bne.n	8003d7c <sbrk_aligned+0x38>
 8003d78:	f04f 34ff 	mov.w	r4, #4294967295
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	2000019c 	.word	0x2000019c

08003d84 <_malloc_r>:
 8003d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d88:	1ccd      	adds	r5, r1, #3
 8003d8a:	f025 0503 	bic.w	r5, r5, #3
 8003d8e:	3508      	adds	r5, #8
 8003d90:	2d0c      	cmp	r5, #12
 8003d92:	bf38      	it	cc
 8003d94:	250c      	movcc	r5, #12
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	4607      	mov	r7, r0
 8003d9a:	db01      	blt.n	8003da0 <_malloc_r+0x1c>
 8003d9c:	42a9      	cmp	r1, r5
 8003d9e:	d905      	bls.n	8003dac <_malloc_r+0x28>
 8003da0:	230c      	movs	r3, #12
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	2600      	movs	r6, #0
 8003da6:	4630      	mov	r0, r6
 8003da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dac:	4e2e      	ldr	r6, [pc, #184]	; (8003e68 <_malloc_r+0xe4>)
 8003dae:	f000 f89d 	bl	8003eec <__malloc_lock>
 8003db2:	6833      	ldr	r3, [r6, #0]
 8003db4:	461c      	mov	r4, r3
 8003db6:	bb34      	cbnz	r4, 8003e06 <_malloc_r+0x82>
 8003db8:	4629      	mov	r1, r5
 8003dba:	4638      	mov	r0, r7
 8003dbc:	f7ff ffc2 	bl	8003d44 <sbrk_aligned>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	d14d      	bne.n	8003e62 <_malloc_r+0xde>
 8003dc6:	6834      	ldr	r4, [r6, #0]
 8003dc8:	4626      	mov	r6, r4
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	d140      	bne.n	8003e50 <_malloc_r+0xcc>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	eb04 0803 	add.w	r8, r4, r3
 8003dd8:	f000 f878 	bl	8003ecc <_sbrk_r>
 8003ddc:	4580      	cmp	r8, r0
 8003dde:	d13a      	bne.n	8003e56 <_malloc_r+0xd2>
 8003de0:	6821      	ldr	r1, [r4, #0]
 8003de2:	3503      	adds	r5, #3
 8003de4:	1a6d      	subs	r5, r5, r1
 8003de6:	f025 0503 	bic.w	r5, r5, #3
 8003dea:	3508      	adds	r5, #8
 8003dec:	2d0c      	cmp	r5, #12
 8003dee:	bf38      	it	cc
 8003df0:	250c      	movcc	r5, #12
 8003df2:	4629      	mov	r1, r5
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7ff ffa5 	bl	8003d44 <sbrk_aligned>
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d02b      	beq.n	8003e56 <_malloc_r+0xd2>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	442b      	add	r3, r5
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	e00e      	b.n	8003e24 <_malloc_r+0xa0>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	1b52      	subs	r2, r2, r5
 8003e0a:	d41e      	bmi.n	8003e4a <_malloc_r+0xc6>
 8003e0c:	2a0b      	cmp	r2, #11
 8003e0e:	d916      	bls.n	8003e3e <_malloc_r+0xba>
 8003e10:	1961      	adds	r1, r4, r5
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	6025      	str	r5, [r4, #0]
 8003e16:	bf18      	it	ne
 8003e18:	6059      	strne	r1, [r3, #4]
 8003e1a:	6863      	ldr	r3, [r4, #4]
 8003e1c:	bf08      	it	eq
 8003e1e:	6031      	streq	r1, [r6, #0]
 8003e20:	5162      	str	r2, [r4, r5]
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	4638      	mov	r0, r7
 8003e26:	f104 060b 	add.w	r6, r4, #11
 8003e2a:	f000 f865 	bl	8003ef8 <__malloc_unlock>
 8003e2e:	f026 0607 	bic.w	r6, r6, #7
 8003e32:	1d23      	adds	r3, r4, #4
 8003e34:	1af2      	subs	r2, r6, r3
 8003e36:	d0b6      	beq.n	8003da6 <_malloc_r+0x22>
 8003e38:	1b9b      	subs	r3, r3, r6
 8003e3a:	50a3      	str	r3, [r4, r2]
 8003e3c:	e7b3      	b.n	8003da6 <_malloc_r+0x22>
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	bf0c      	ite	eq
 8003e44:	6032      	streq	r2, [r6, #0]
 8003e46:	605a      	strne	r2, [r3, #4]
 8003e48:	e7ec      	b.n	8003e24 <_malloc_r+0xa0>
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	6864      	ldr	r4, [r4, #4]
 8003e4e:	e7b2      	b.n	8003db6 <_malloc_r+0x32>
 8003e50:	4634      	mov	r4, r6
 8003e52:	6876      	ldr	r6, [r6, #4]
 8003e54:	e7b9      	b.n	8003dca <_malloc_r+0x46>
 8003e56:	230c      	movs	r3, #12
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f000 f84c 	bl	8003ef8 <__malloc_unlock>
 8003e60:	e7a1      	b.n	8003da6 <_malloc_r+0x22>
 8003e62:	6025      	str	r5, [r4, #0]
 8003e64:	e7de      	b.n	8003e24 <_malloc_r+0xa0>
 8003e66:	bf00      	nop
 8003e68:	20000198 	.word	0x20000198

08003e6c <_realloc_r>:
 8003e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e70:	4680      	mov	r8, r0
 8003e72:	4614      	mov	r4, r2
 8003e74:	460e      	mov	r6, r1
 8003e76:	b921      	cbnz	r1, 8003e82 <_realloc_r+0x16>
 8003e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	f7ff bf81 	b.w	8003d84 <_malloc_r>
 8003e82:	b92a      	cbnz	r2, 8003e90 <_realloc_r+0x24>
 8003e84:	f7ff ff12 	bl	8003cac <_free_r>
 8003e88:	4625      	mov	r5, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e90:	f000 f838 	bl	8003f04 <_malloc_usable_size_r>
 8003e94:	4284      	cmp	r4, r0
 8003e96:	4607      	mov	r7, r0
 8003e98:	d802      	bhi.n	8003ea0 <_realloc_r+0x34>
 8003e9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e9e:	d812      	bhi.n	8003ec6 <_realloc_r+0x5a>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	f7ff ff6e 	bl	8003d84 <_malloc_r>
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d0ed      	beq.n	8003e8a <_realloc_r+0x1e>
 8003eae:	42bc      	cmp	r4, r7
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	bf28      	it	cs
 8003eb6:	463a      	movcs	r2, r7
 8003eb8:	f7ff fed0 	bl	8003c5c <memcpy>
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f7ff fef4 	bl	8003cac <_free_r>
 8003ec4:	e7e1      	b.n	8003e8a <_realloc_r+0x1e>
 8003ec6:	4635      	mov	r5, r6
 8003ec8:	e7df      	b.n	8003e8a <_realloc_r+0x1e>
	...

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d06      	ldr	r5, [pc, #24]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fc ff42 	bl	8000d60 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200001a0 	.word	0x200001a0

08003eec <__malloc_lock>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__malloc_lock+0x8>)
 8003eee:	f000 b811 	b.w	8003f14 <__retarget_lock_acquire_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200001a4 	.word	0x200001a4

08003ef8 <__malloc_unlock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__malloc_unlock+0x8>)
 8003efa:	f000 b80c 	b.w	8003f16 <__retarget_lock_release_recursive>
 8003efe:	bf00      	nop
 8003f00:	200001a4 	.word	0x200001a4

08003f04 <_malloc_usable_size_r>:
 8003f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f08:	1f18      	subs	r0, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfbc      	itt	lt
 8003f0e:	580b      	ldrlt	r3, [r1, r0]
 8003f10:	18c0      	addlt	r0, r0, r3
 8003f12:	4770      	bx	lr

08003f14 <__retarget_lock_acquire_recursive>:
 8003f14:	4770      	bx	lr

08003f16 <__retarget_lock_release_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
