
BOOTLOADER_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08004f98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004f98  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c08c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d4  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022013  00000000  00000000  0002f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6d4  00000000  00000000  00051403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b36  00000000  00000000  0005ead7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012860d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  00128660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cc8 	.word	0x08004cc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004cc8 	.word	0x08004cc8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <app_ota_write_flash_memory>:
volatile uint32_t address_write_flash;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void app_ota_write_flash_memory(app_ota_hex_form_data_t *hex_data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint8_t  data_count, i;
  uint8_t  counter_index       = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint16_t data_write_flash[8] = { 0 };
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

  switch (hex_data->record_type)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	f000 809a 	beq.w	800071e <app_ota_write_flash_memory+0x15a>
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	f300 8099 	bgt.w	8000722 <app_ota_write_flash_memory+0x15e>
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d015      	beq.n	8000620 <app_ota_write_flash_memory+0x5c>
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	f040 8094 	bne.w	8000722 <app_ota_write_flash_memory+0x15e>
  {
  case 4: /* Extended Linear Address Record: used to identify the extended linear address  */
  {
    uint32_t address = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
    address |= hex_data->data[0] << 8 | hex_data->data[1];
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7952      	ldrb	r2, [r2, #5]
 8000608:	4313      	orrs	r3, r2
 800060a:	461a      	mov	r2, r3
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	4313      	orrs	r3, r2
 8000610:	623b      	str	r3, [r7, #32]
    /* Address save firmware update */
    address_write_flash = 0x08000000 | (address << 16);
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	041b      	lsls	r3, r3, #16
 8000616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800061a:	4a44      	ldr	r2, [pc, #272]	; (800072c <app_ota_write_flash_memory+0x168>)
 800061c:	6013      	str	r3, [r2, #0]
    break;
 800061e:	e081      	b.n	8000724 <app_ota_write_flash_memory+0x160>
    break;
  }
  case 0: /* Data Rrecord: used to record data, most records of HEX files are data records */
  {
    /* get character count */
    data_count = hex_data->byte_count;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	77fb      	strb	r3, [r7, #31]
    size_data_firmware += data_count;
 8000626:	7ffa      	ldrb	r2, [r7, #31]
 8000628:	4b41      	ldr	r3, [pc, #260]	; (8000730 <app_ota_write_flash_memory+0x16c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4413      	add	r3, r2
 800062e:	4a40      	ldr	r2, [pc, #256]	; (8000730 <app_ota_write_flash_memory+0x16c>)
 8000630:	6013      	str	r3, [r2, #0]

    /* set full address */
    address_write_flash = address_write_flash & 0xFFFF0000;
 8000632:	4b3e      	ldr	r3, [pc, #248]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	0c1b      	lsrs	r3, r3, #16
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4a3c      	ldr	r2, [pc, #240]	; (800072c <app_ota_write_flash_memory+0x168>)
 800063c:	6013      	str	r3, [r2, #0]
    address_write_flash = address_write_flash | (hex_data->address[0] << 8) | (hex_data->address[1]);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	461a      	mov	r2, r3
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4313      	orrs	r3, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7892      	ldrb	r2, [r2, #2]
 8000650:	4313      	orrs	r3, r2
 8000652:	4a36      	ldr	r2, [pc, #216]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000654:	6013      	str	r3, [r2, #0]

    /* check address wite flash data */
    if (address_write_flash < ADDRESS_FIRMWARE_APPLICATION)
 8000656:	4b35      	ldr	r3, [pc, #212]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <app_ota_write_flash_memory+0x170>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d203      	bcs.n	8000668 <app_ota_write_flash_memory+0xa4>
    {
      address_write_flash = 0;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	e05d      	b.n	8000724 <app_ota_write_flash_memory+0x160>
      return;
    }

    /* get the data of the record */
    for (i = 0; i < data_count; i += 2)
 8000668:	2300      	movs	r3, #0
 800066a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800066e:	e021      	b.n	80006b4 <app_ota_write_flash_memory+0xf0>
    {
      data_write_flash[counter_index] = (hex_data->data[i + 1] << 8) | (hex_data->data[i]);
 8000670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000674:	3301      	adds	r3, #1
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21a      	sxth	r2, r3
 8000680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	440b      	add	r3, r1
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21a      	sxth	r2, r3
 8000690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000694:	b292      	uxth	r2, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	3328      	adds	r3, #40	; 0x28
 800069a:	443b      	add	r3, r7
 800069c:	f823 2c1c 	strh.w	r2, [r3, #-28]
      counter_index++;
 80006a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006a4:	3301      	adds	r3, #1
 80006a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < data_count; i += 2)
 80006aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006ae:	3302      	adds	r3, #2
 80006b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3d8      	bcc.n	8000670 <app_ota_write_flash_memory+0xac>
    }

    /* count data old or even */
    if (data_count % 2 != 0)
 80006be:	7ffb      	ldrb	r3, [r7, #31]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d01d      	beq.n	8000706 <app_ota_write_flash_memory+0x142>
    {
      data_write_flash[counter_index] = 0xFF00 | (hex_data->data[data_count - 1]);
 80006ca:	7ffb      	ldrb	r3, [r7, #31]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	f063 03ff 	orn	r3, r3, #255	; 0xff
 80006da:	b21a      	sxth	r2, r3
 80006dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006e0:	b292      	uxth	r2, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	3328      	adds	r3, #40	; 0x28
 80006e6:	443b      	add	r3, r7
 80006e8:	f823 2c1c 	strh.w	r2, [r3, #-28]
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4 + 1);
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <app_ota_write_flash_memory+0x168>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	461a      	mov	r2, r3
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	f000 fd2e 	bl	8001160 <bsp_flash_write>
    }
    else
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
    break;
 8000704:	e00e      	b.n	8000724 <app_ota_write_flash_memory+0x160>
      bsp_flash_write(address_write_flash, (uint32_t *) data_write_flash, data_count / 4);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <app_ota_write_flash_memory+0x168>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	7ffb      	ldrb	r3, [r7, #31]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	f000 fd22 	bl	8001160 <bsp_flash_write>
    break;
 800071c:	e002      	b.n	8000724 <app_ota_write_flash_memory+0x160>
    break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <app_ota_write_flash_memory+0x160>
  }
  default: break;
 8000722:	bf00      	nop
  }
}
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000a0 	.word	0x200000a0
 8000730:	2000009c 	.word	0x2000009c
 8000734:	08008000 	.word	0x08008000

08000738 <app_ota_parse_element>:
  void (*reset_handler)(void) = (void *) jump_address;
  reset_handler();
}

void app_ota_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 8000738:	b480      	push	{r7}
 800073a:	b08f      	sub	sp, #60	; 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	71fb      	strb	r3, [r7, #7]
  uint8_t count_array = 0U;
 8000746:	2300      	movs	r3, #0
 8000748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t buffer_temp[32];

  /* convert data string to data hex and save to des buffer*/
  for (uint8_t count = 0U; count < length; count++)
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000752:	e05f      	b.n	8000814 <app_ota_parse_element+0xdc>
  {
    if (buff[count] >= '0' && buff[count] <= '9')
 8000754:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b2f      	cmp	r3, #47	; 0x2f
 8000760:	d914      	bls.n	800078c <app_ota_parse_element+0x54>
 8000762:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b39      	cmp	r3, #57	; 0x39
 800076e:	d80d      	bhi.n	800078c <app_ota_parse_element+0x54>
      buffer_temp[count] = buff[count] - 48;
 8000770:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	4413      	add	r3, r2
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800077e:	3a30      	subs	r2, #48	; 0x30
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	3338      	adds	r3, #56	; 0x38
 8000784:	443b      	add	r3, r7
 8000786:	f803 2c24 	strb.w	r2, [r3, #-36]
 800078a:	e01a      	b.n	80007c2 <app_ota_parse_element+0x8a>
    else if (buff[count] >= 'A' && buff[count] <= 'F')
 800078c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b40      	cmp	r3, #64	; 0x40
 8000798:	d942      	bls.n	8000820 <app_ota_parse_element+0xe8>
 800079a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b46      	cmp	r3, #70	; 0x46
 80007a6:	d83b      	bhi.n	8000820 <app_ota_parse_element+0xe8>
      buffer_temp[count] = buff[count] - 65 + 10;
 80007a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007b6:	3a37      	subs	r2, #55	; 0x37
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	3338      	adds	r3, #56	; 0x38
 80007bc:	443b      	add	r3, r7
 80007be:	f803 2c24 	strb.w	r2, [r3, #-36]
    else
      return;
    if (count % 2 != 0)
 80007c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01c      	beq.n	800080a <app_ota_parse_element+0xd2>
    {
      des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 80007d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007d4:	3b01      	subs	r3, #1
 80007d6:	3338      	adds	r3, #56	; 0x38
 80007d8:	443b      	add	r3, r7
 80007da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007e6:	3338      	adds	r3, #56	; 0x38
 80007e8:	443b      	add	r3, r7
 80007ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b259      	sxtb	r1, r3
 80007f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	b2ca      	uxtb	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
      count_array++;
 8000800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000804:	3301      	adds	r3, #1
 8000806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (uint8_t count = 0U; count < length; count++)
 800080a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800080e:	3301      	adds	r3, #1
 8000810:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000814:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	429a      	cmp	r2, r3
 800081c:	d39a      	bcc.n	8000754 <app_ota_parse_element+0x1c>
 800081e:	e000      	b.n	8000822 <app_ota_parse_element+0xea>
      return;
 8000820:	bf00      	nop
    }
  }
}
 8000822:	373c      	adds	r7, #60	; 0x3c
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <app_ota_handle_data_receive>:

uint8_t app_ota_handle_data_receive(app_ota_hex_form_data_t *hex_data, uint8_t *data, uint16_t size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	80fb      	strh	r3, [r7, #6]
  uint8_t                   cal_check_sum = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  app_ota_field_hex_files_t state         = START_CODE;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t                   buffer_save_data_hex[16];

  /* parse string to hex form data hex */
  for (uint8_t count = 0; count < size; count++)
 8000846:	2300      	movs	r3, #0
 8000848:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800084c:	e0e4      	b.n	8000a18 <app_ota_handle_data_receive+0x1ec>
  {
    switch (state)
 800084e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000852:	2b06      	cmp	r3, #6
 8000854:	f200 80d9 	bhi.w	8000a0a <app_ota_handle_data_receive+0x1de>
 8000858:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <app_ota_handle_data_receive+0x34>)
 800085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085e:	bf00      	nop
 8000860:	0800087d 	.word	0x0800087d
 8000864:	08000897 	.word	0x08000897
 8000868:	080008bf 	.word	0x080008bf
 800086c:	080008ed 	.word	0x080008ed
 8000870:	08000915 	.word	0x08000915
 8000874:	0800097b 	.word	0x0800097b
 8000878:	0800099d 	.word	0x0800099d
    {
    case START_CODE:
    {
      if (data[count] != ':')
 800087c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b3a      	cmp	r3, #58	; 0x3a
 8000888:	d001      	beq.n	800088e <app_ota_handle_data_receive+0x62>
        return STATE_ERRORS;
 800088a:	2300      	movs	r3, #0
 800088c:	e0cc      	b.n	8000a28 <app_ota_handle_data_receive+0x1fc>
      else
        state = BYTE_COUNT;
 800088e:	2301      	movs	r3, #1
 8000890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8000894:	e0bb      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case BYTE_COUNT:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 8000896:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	18d1      	adds	r1, r2, r3
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2202      	movs	r2, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff47 	bl	8000738 <app_ota_parse_element>
      hex_data->byte_count = buffer_save_data_hex[0];
 80008aa:	7d3a      	ldrb	r2, [r7, #20]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	701a      	strb	r2, [r3, #0]
      count                = 2U;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = ADDRESS;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80008bc:	e0a7      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case ADDRESS:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 4U);
 80008be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	18d1      	adds	r1, r2, r3
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2204      	movs	r2, #4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff33 	bl	8000738 <app_ota_parse_element>
      hex_data->address[0] = buffer_save_data_hex[0];
 80008d2:	7d3a      	ldrb	r2, [r7, #20]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	705a      	strb	r2, [r3, #1]
      hex_data->address[1] = buffer_save_data_hex[1];
 80008d8:	7d7a      	ldrb	r2, [r7, #21]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	709a      	strb	r2, [r3, #2]
      count                = 6U;
 80008de:	2306      	movs	r3, #6
 80008e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                = RECORD_TYPE;
 80008e4:	2303      	movs	r3, #3
 80008e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 80008ea:	e090      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case RECORD_TYPE:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 80008ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	18d1      	adds	r1, r2, r3
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2202      	movs	r2, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff1c 	bl	8000738 <app_ota_parse_element>
      hex_data->record_type = buffer_save_data_hex[0];
 8000900:	7d3a      	ldrb	r2, [r7, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	70da      	strb	r2, [r3, #3]
      count                 = 8U;
 8000906:	2308      	movs	r3, #8
 8000908:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state                 = DATA;
 800090c:	2304      	movs	r3, #4
 800090e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8000912:	e07c      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case DATA:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], (hex_data->byte_count * 2U));
 8000914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff05 	bl	8000738 <app_ota_parse_element>
      for (count = 0; count < hex_data->byte_count; count++)
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000934:	e010      	b.n	8000958 <app_ota_handle_data_receive+0x12c>
      {
        hex_data->data[count] = buffer_save_data_hex[count];
 8000936:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800093a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800093e:	3228      	adds	r2, #40	; 0x28
 8000940:	443a      	add	r2, r7
 8000942:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	460a      	mov	r2, r1
 800094c:	711a      	strb	r2, [r3, #4]
      for (count = 0; count < hex_data->byte_count; count++)
 800094e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000952:	3301      	adds	r3, #1
 8000954:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000960:	429a      	cmp	r2, r3
 8000962:	d3e8      	bcc.n	8000936 <app_ota_handle_data_receive+0x10a>
      }
      count = 8U + (hex_data->byte_count * 2U);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3304      	adds	r3, #4
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      state = CHECKSUM;
 8000972:	2305      	movs	r3, #5
 8000974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 8000978:	e049      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case CHECKSUM:
    {
      app_ota_parse_element(buffer_save_data_hex, &data[count], 2U);
 800097a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	18d1      	adds	r1, r2, r3
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2202      	movs	r2, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fed5 	bl	8000738 <app_ota_parse_element>
      hex_data->check_sum = buffer_save_data_hex[0];
 800098e:	7d3a      	ldrb	r2, [r7, #20]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	751a      	strb	r2, [r3, #20]
      state               = DONE;
 8000994:	2306      	movs	r3, #6
 8000996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      break;
 800099a:	e038      	b.n	8000a0e <app_ota_handle_data_receive+0x1e2>
    }
    case DONE:
    {
      /* check sum data hex */
      cal_check_sum = hex_data->byte_count + hex_data->address[0] + hex_data->address[1] + hex_data->record_type;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	78db      	ldrb	r3, [r3, #3]
 80009b4:	4413      	add	r3, r2
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80009c0:	e00e      	b.n	80009e0 <app_ota_handle_data_receive+0x1b4>
      {
        cal_check_sum += hex_data->data[count];
 80009c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	791a      	ldrb	r2, [r3, #4]
 80009cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009d0:	4413      	add	r3, r2
 80009d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      for (count = 0; count < hex_data->byte_count; count++)
 80009d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009da:	3301      	adds	r3, #1
 80009dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d3ea      	bcc.n	80009c2 <app_ota_handle_data_receive+0x196>
      }
      cal_check_sum = ~cal_check_sum + 1U;
 80009ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009f0:	425b      	negs	r3, r3
 80009f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (cal_check_sum == hex_data->check_sum)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	7d1b      	ldrb	r3, [r3, #20]
 80009fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d101      	bne.n	8000a06 <app_ota_handle_data_receive+0x1da>
        return STATE_NO_ERRORS;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e010      	b.n	8000a28 <app_ota_handle_data_receive+0x1fc>
      else
        return STATE_ERRORS;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e00e      	b.n	8000a28 <app_ota_handle_data_receive+0x1fc>
    }
    default: return STATE_ERRORS;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e00c      	b.n	8000a28 <app_ota_handle_data_receive+0x1fc>
  for (uint8_t count = 0; count < size; count++)
 8000a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a12:	3301      	adds	r3, #1
 8000a14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f63f af14 	bhi.w	800084e <app_ota_handle_data_receive+0x22>
    }
  }
  return STATE_ERRORS;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <app_ota_communication>:

void app_ota_communication(uint8_t choose, uint8_t *data, uint16_t size)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	80bb      	strh	r3, [r7, #4]
  switch (choose)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	f200 8099 	bhi.w	8000b7c <app_ota_communication+0x14c>
 8000a4a:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <app_ota_communication+0x20>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000ad1 	.word	0x08000ad1
 8000a58:	08000b37 	.word	0x08000b37
 8000a5c:	08000b47 	.word	0x08000b47
 8000a60:	08000b51 	.word	0x08000b51
 8000a64:	08000b5b 	.word	0x08000b5b
  {
  case APP_OTA_READ_FLASH:
  {
    /* code */
    char    TX[20] = { 0 };
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
    uint8_t data_convert[4];
    app_ota_parse_element(data_convert, &data[4], 8);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	1d19      	adds	r1, r3, #4
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2208      	movs	r2, #8
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe57 	bl	8000738 <app_ota_parse_element>
    uint32_t address_read  = (data_convert[0] << 24) | (data_convert[1] << 16) | (data_convert[2] << 8) | (data_convert[3]);
 8000a8a:	7d3b      	ldrb	r3, [r7, #20]
 8000a8c:	061a      	lsls	r2, r3, #24
 8000a8e:	7d7b      	ldrb	r3, [r7, #21]
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	431a      	orrs	r2, r3
 8000a94:	7dbb      	ldrb	r3, [r7, #22]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	7dfa      	ldrb	r2, [r7, #23]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t address_value = *(uint32_t *) address_read;
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sprintf(TX, "Address value: %lx\r\n", address_value);
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	4938      	ldr	r1, [pc, #224]	; (8000b90 <app_ota_communication+0x160>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fd8c 	bl	80045cc <siprintf>
    bsp_uart_printf_len(USART_UD, (uint8_t *) TX, strlen(TX));
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fba9 	bl	8000210 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4832      	ldr	r0, [pc, #200]	; (8000b94 <app_ota_communication+0x164>)
 8000aca:	f000 fbd5 	bl	8001278 <bsp_uart_printf_len>
    break;
 8000ace:	e05a      	b.n	8000b86 <app_ota_communication+0x156>
  }
  case APP_OTA_WRITE_FLASH:
  {
    /* code */
    uint8_t data_convert[4];
    app_ota_parse_element(data_convert, &data[4], 8);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	1d19      	adds	r1, r3, #4
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe2c 	bl	8000738 <app_ota_parse_element>
    uint32_t address_write = (data_convert[0] << 24) | (data_convert[1] << 16) | (data_convert[2] << 8) | (data_convert[3]);
 8000ae0:	7c3b      	ldrb	r3, [r7, #16]
 8000ae2:	061a      	lsls	r2, r3, #24
 8000ae4:	7c7b      	ldrb	r3, [r7, #17]
 8000ae6:	041b      	lsls	r3, r3, #16
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	7cbb      	ldrb	r3, [r7, #18]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	4313      	orrs	r3, r2
 8000af0:	7cfa      	ldrb	r2, [r7, #19]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
    app_ota_parse_element(data_convert, &data[15], 8);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	f103 010f 	add.w	r1, r3, #15
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2208      	movs	r2, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe18 	bl	8000738 <app_ota_parse_element>
    uint32_t value = (data_convert[0] << 24) | (data_convert[1] << 16) | (data_convert[2] << 8) | (data_convert[3]);
 8000b08:	7c3b      	ldrb	r3, [r7, #16]
 8000b0a:	061a      	lsls	r2, r3, #24
 8000b0c:	7c7b      	ldrb	r3, [r7, #17]
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	431a      	orrs	r2, r3
 8000b12:	7cbb      	ldrb	r3, [r7, #18]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	4313      	orrs	r3, r2
 8000b18:	7cfa      	ldrb	r2, [r7, #19]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
    bsp_flash_write(address_write, &value, 1);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b28:	f000 fb1a 	bl	8001160 <bsp_flash_write>
    bsp_uart_printf(USART_UD, (uint8_t *) "Write flash memory\r\n");
 8000b2c:	491a      	ldr	r1, [pc, #104]	; (8000b98 <app_ota_communication+0x168>)
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <app_ota_communication+0x164>)
 8000b30:	f000 fb8e 	bl	8001250 <bsp_uart_printf>
    break;
 8000b34:	e027      	b.n	8000b86 <app_ota_communication+0x156>
  }
  case APP_OTA_EXECUTE_APPLICATION_USER:
  {
    /* code */
    bsp_uart_printf(USART_UD, (uint8_t *) "Go To The Application Code\r\n");
 8000b36:	4919      	ldr	r1, [pc, #100]	; (8000b9c <app_ota_communication+0x16c>)
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <app_ota_communication+0x164>)
 8000b3a:	f000 fb89 	bl	8001250 <bsp_uart_printf>
    flag_ota_check_infor = FALSE;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <app_ota_communication+0x170>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    break;
 8000b44:	e01f      	b.n	8000b86 <app_ota_communication+0x156>
  }
  case APP_OTA_GET_BOOTLOADER_VERSION:
  {
    /* code */
    bsp_uart_printf(USART_UD, (uint8_t *) "BOOOTLOADER STM32446RET6 V1.0\r\n");
 8000b46:	4917      	ldr	r1, [pc, #92]	; (8000ba4 <app_ota_communication+0x174>)
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <app_ota_communication+0x164>)
 8000b4a:	f000 fb81 	bl	8001250 <bsp_uart_printf>
    break;
 8000b4e:	e01a      	b.n	8000b86 <app_ota_communication+0x156>
  }
  case APP_OTA_GET_DEVICE_INFORMATION:
  {
    /* code */
    bsp_uart_printf(USART_UD, (uint8_t *) "STM32446RET6 FLASH: 512KB, RAM: 128KB\r\n");
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <app_ota_communication+0x178>)
 8000b52:	4810      	ldr	r0, [pc, #64]	; (8000b94 <app_ota_communication+0x164>)
 8000b54:	f000 fb7c 	bl	8001250 <bsp_uart_printf>
    break;
 8000b58:	e015      	b.n	8000b86 <app_ota_communication+0x156>
  }
  case APP_OTA_ERASE_SECTOR_DEVICE:
  {
    /* code */
    bsp_flash_erase(bsp_get_address_from_sector(data[2] - 48));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3b30      	subs	r3, #48	; 0x30
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa33 	bl	8000fd0 <bsp_get_address_from_sector>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fa7b 	bl	8001068 <bsp_flash_erase>
    bsp_uart_printf(USART_UD, (uint8_t *) "Erase sector done !!!\r\n");
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <app_ota_communication+0x17c>)
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <app_ota_communication+0x164>)
 8000b76:	f000 fb6b 	bl	8001250 <bsp_uart_printf>
    break;
 8000b7a:	e004      	b.n	8000b86 <app_ota_communication+0x156>
  }
  default:
  {
    bsp_uart_printf(USART_UD, (uint8_t *) "Error !!!\r\n");
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <app_ota_communication+0x180>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <app_ota_communication+0x164>)
 8000b80:	f000 fb66 	bl	8001250 <bsp_uart_printf>
    break;
 8000b84:	bf00      	nop
  }
  }
}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08004ce0 	.word	0x08004ce0
 8000b94:	200000e4 	.word	0x200000e4
 8000b98:	08004cf8 	.word	0x08004cf8
 8000b9c:	08004d10 	.word	0x08004d10
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	08004d30 	.word	0x08004d30
 8000ba8:	08004d50 	.word	0x08004d50
 8000bac:	08004d78 	.word	0x08004d78
 8000bb0:	08004d90 	.word	0x08004d90

08000bb4 <app_ota_show_function>:

void app_ota_show_function(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  flag_ota_check_infor = TRUE;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <app_ota_show_function+0x50>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
  bsp_uart_printf(USART_UD, (uint8_t *) "\r========== Main Menu ==========\r\n");
 8000bbe:	4912      	ldr	r1, [pc, #72]	; (8000c08 <app_ota_show_function+0x54>)
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <app_ota_show_function+0x58>)
 8000bc2:	f000 fb45 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     1. Read Flash Memory \r\n");
 8000bc6:	4912      	ldr	r1, [pc, #72]	; (8000c10 <app_ota_show_function+0x5c>)
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <app_ota_show_function+0x58>)
 8000bca:	f000 fb41 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     2. Write Flash Memory \r\n");
 8000bce:	4911      	ldr	r1, [pc, #68]	; (8000c14 <app_ota_show_function+0x60>)
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <app_ota_show_function+0x58>)
 8000bd2:	f000 fb3d 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     3. Execute The Application Code \r\n");
 8000bd6:	4910      	ldr	r1, [pc, #64]	; (8000c18 <app_ota_show_function+0x64>)
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <app_ota_show_function+0x58>)
 8000bda:	f000 fb39 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     4. Get Bootloader Version \r\n");
 8000bde:	490f      	ldr	r1, [pc, #60]	; (8000c1c <app_ota_show_function+0x68>)
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <app_ota_show_function+0x58>)
 8000be2:	f000 fb35 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     5. Get Device Information \r\n");
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <app_ota_show_function+0x6c>)
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <app_ota_show_function+0x58>)
 8000bea:	f000 fb31 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "     6. Erase Sector Device \r\n");
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <app_ota_show_function+0x70>)
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <app_ota_show_function+0x58>)
 8000bf2:	f000 fb2d 	bl	8001250 <bsp_uart_printf>
  bsp_uart_printf(USART_UD, (uint8_t *) "=============================\r\n");
 8000bf6:	490c      	ldr	r1, [pc, #48]	; (8000c28 <app_ota_show_function+0x74>)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <app_ota_show_function+0x58>)
 8000bfa:	f000 fb29 	bl	8001250 <bsp_uart_printf>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000094 	.word	0x20000094
 8000c08:	08004d9c 	.word	0x08004d9c
 8000c0c:	200000e4 	.word	0x200000e4
 8000c10:	08004dc0 	.word	0x08004dc0
 8000c14:	08004de0 	.word	0x08004de0
 8000c18:	08004e00 	.word	0x08004e00
 8000c1c:	08004e28 	.word	0x08004e28
 8000c20:	08004e4c 	.word	0x08004e4c
 8000c24:	08004e70 	.word	0x08004e70
 8000c28:	08004e90 	.word	0x08004e90

08000c2c <app_ota_handle_data_receive_dma>:

void app_ota_handle_data_receive_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	4613      	mov	r3, r2
 8000c38:	80fb      	strh	r3, [r7, #6]
  app_ota_hex_form_data_t hex_data;
  uint8_t                *buff = data;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (buff[0])
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3b3a      	subs	r3, #58	; 0x3a
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	f200 8113 	bhi.w	8000e70 <app_ota_handle_data_receive_dma+0x244>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <app_ota_handle_data_receive_dma+0x24>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000e0b 	.word	0x08000e0b
 8000c54:	08000e71 	.word	0x08000e71
 8000c58:	08000e71 	.word	0x08000e71
 8000c5c:	08000e71 	.word	0x08000e71
 8000c60:	08000e71 	.word	0x08000e71
 8000c64:	08000e71 	.word	0x08000e71
 8000c68:	08000e71 	.word	0x08000e71
 8000c6c:	08000e71 	.word	0x08000e71
 8000c70:	08000e71 	.word	0x08000e71
 8000c74:	08000e71 	.word	0x08000e71
 8000c78:	08000e71 	.word	0x08000e71
 8000c7c:	08000e71 	.word	0x08000e71
 8000c80:	08000cd5 	.word	0x08000cd5
 8000c84:	08000e71 	.word	0x08000e71
 8000c88:	08000e71 	.word	0x08000e71
 8000c8c:	08000e71 	.word	0x08000e71
 8000c90:	08000e71 	.word	0x08000e71
 8000c94:	08000e71 	.word	0x08000e71
 8000c98:	08000e71 	.word	0x08000e71
 8000c9c:	08000e71 	.word	0x08000e71
 8000ca0:	08000e71 	.word	0x08000e71
 8000ca4:	08000e71 	.word	0x08000e71
 8000ca8:	08000e71 	.word	0x08000e71
 8000cac:	08000e71 	.word	0x08000e71
 8000cb0:	08000e71 	.word	0x08000e71
 8000cb4:	08000d87 	.word	0x08000d87
 8000cb8:	08000e71 	.word	0x08000e71
 8000cbc:	08000d77 	.word	0x08000d77
 8000cc0:	08000e71 	.word	0x08000e71
 8000cc4:	08000e71 	.word	0x08000e71
 8000cc8:	08000df3 	.word	0x08000df3
 8000ccc:	08000e71 	.word	0x08000e71
 8000cd0:	08000e61 	.word	0x08000e61
  {
  /* flag ota update */
  case APP_OTA_COMMUNICATION:
  {
    /* send confirm character */
    if (buff[1] == 'S')
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b53      	cmp	r3, #83	; 0x53
 8000cdc:	d102      	bne.n	8000ce4 <app_ota_handle_data_receive_dma+0xb8>
      app_ota_show_function();
 8000cde:	f7ff ff69 	bl	8000bb4 <app_ota_show_function>
      app_ota_communication(4, buff, size);
    else if (buff[1] == '5')
      app_ota_communication(5, buff, size);
    else if (buff[1] == '6')
      app_ota_communication(6, buff, size);
    break;
 8000ce2:	e0c7      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '1')
 8000ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b31      	cmp	r3, #49	; 0x31
 8000cec:	d106      	bne.n	8000cfc <app_ota_handle_data_receive_dma+0xd0>
      app_ota_communication(1, buff, size);
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff fe9b 	bl	8000a30 <app_ota_communication>
    break;
 8000cfa:	e0bb      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '2')
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	3301      	adds	r3, #1
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b32      	cmp	r3, #50	; 0x32
 8000d04:	d106      	bne.n	8000d14 <app_ota_handle_data_receive_dma+0xe8>
      app_ota_communication(2, buff, size);
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff fe8f 	bl	8000a30 <app_ota_communication>
    break;
 8000d12:	e0af      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '3')
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	3301      	adds	r3, #1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b33      	cmp	r3, #51	; 0x33
 8000d1c:	d106      	bne.n	8000d2c <app_ota_handle_data_receive_dma+0x100>
      app_ota_communication(3, buff, size);
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	461a      	mov	r2, r3
 8000d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d24:	2003      	movs	r0, #3
 8000d26:	f7ff fe83 	bl	8000a30 <app_ota_communication>
    break;
 8000d2a:	e0a3      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '4')
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	3301      	adds	r3, #1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b34      	cmp	r3, #52	; 0x34
 8000d34:	d106      	bne.n	8000d44 <app_ota_handle_data_receive_dma+0x118>
      app_ota_communication(4, buff, size);
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f7ff fe77 	bl	8000a30 <app_ota_communication>
    break;
 8000d42:	e097      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '5')
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	3301      	adds	r3, #1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b35      	cmp	r3, #53	; 0x35
 8000d4c:	d106      	bne.n	8000d5c <app_ota_handle_data_receive_dma+0x130>
      app_ota_communication(5, buff, size);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	461a      	mov	r2, r3
 8000d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d54:	2005      	movs	r0, #5
 8000d56:	f7ff fe6b 	bl	8000a30 <app_ota_communication>
    break;
 8000d5a:	e08b      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
    else if (buff[1] == '6')
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	3301      	adds	r3, #1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b36      	cmp	r3, #54	; 0x36
 8000d64:	f040 8086 	bne.w	8000e74 <app_ota_handle_data_receive_dma+0x248>
      app_ota_communication(6, buff, size);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d6e:	2006      	movs	r0, #6
 8000d70:	f7ff fe5e 	bl	8000a30 <app_ota_communication>
    break;
 8000d74:	e07e      	b.n	8000e74 <app_ota_handle_data_receive_dma+0x248>
  }
  /* flag ota update */
  case APP_OTA_UPDATE_FW:
  {
    flag_ota_update = TRUE;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <app_ota_handle_data_receive_dma+0x25c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
    /* send confirm character */
    bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000d7c:	4943      	ldr	r1, [pc, #268]	; (8000e8c <app_ota_handle_data_receive_dma+0x260>)
 8000d7e:	4844      	ldr	r0, [pc, #272]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000d80:	f000 fa66 	bl	8001250 <bsp_uart_printf>
    break;
 8000d84:	e079      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
  }
  /* flag check size flash memory */
  case APP_OTA_CHECK_SIZE_FLASH:
  {
    size_current  = 0;
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <app_ota_handle_data_receive_dma+0x268>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
    uint8_t index = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (buff[index] != '\n')
 8000d92:	e014      	b.n	8000dbe <app_ota_handle_data_receive_dma+0x192>
    {
      size_current = size_current * 10 + (buff[index] - 48);
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <app_ota_handle_data_receive_dma+0x268>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	440b      	add	r3, r1
 8000dae:	3b30      	subs	r3, #48	; 0x30
 8000db0:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <app_ota_handle_data_receive_dma+0x268>)
 8000db2:	6013      	str	r3, [r2, #0]
      index++;
 8000db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db8:	3301      	adds	r3, #1
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (buff[index] != '\n')
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	d1e3      	bne.n	8000d94 <app_ota_handle_data_receive_dma+0x168>
    }
    if (size_current > max_size_flash)
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <app_ota_handle_data_receive_dma+0x268>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <app_ota_handle_data_receive_dma+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d904      	bls.n	8000de2 <app_ota_handle_data_receive_dma+0x1b6>
      /* send char cancel update because over size flash memory */
      bsp_uart_printf(USART_UD, APP_OTA_CANCEL_UPDATE);
 8000dd8:	4930      	ldr	r1, [pc, #192]	; (8000e9c <app_ota_handle_data_receive_dma+0x270>)
 8000dda:	482d      	ldr	r0, [pc, #180]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000ddc:	f000 fa38 	bl	8001250 <bsp_uart_printf>
    {
      /* send confirm character */
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
      flag_size_flash = TRUE;
    }
    break;
 8000de0:	e04b      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000de2:	492a      	ldr	r1, [pc, #168]	; (8000e8c <app_ota_handle_data_receive_dma+0x260>)
 8000de4:	482a      	ldr	r0, [pc, #168]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000de6:	f000 fa33 	bl	8001250 <bsp_uart_printf>
      flag_size_flash = TRUE;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <app_ota_handle_data_receive_dma+0x274>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
    break;
 8000df0:	e043      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
  }
  /* flag ota start */
  case APP_OTA_UPDATE_START:
  {
    if (flag_earse_ok == TRUE)
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <app_ota_handle_data_receive_dma+0x278>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d13e      	bne.n	8000e78 <app_ota_handle_data_receive_dma+0x24c>
    {
      flag_earse_ok = FALSE;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <app_ota_handle_data_receive_dma+0x278>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
      /* send confirm character */
      bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000e00:	4922      	ldr	r1, [pc, #136]	; (8000e8c <app_ota_handle_data_receive_dma+0x260>)
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000e04:	f000 fa24 	bl	8001250 <bsp_uart_printf>
    }
    break;
 8000e08:	e036      	b.n	8000e78 <app_ota_handle_data_receive_dma+0x24c>
  }
  /* ota data received */
  case APP_OTA_RECEIVE_DATA:
  {
    /* check data correct ? */
    if ((app_ota_handle_data_receive(&hex_data, buff, size) == STATE_NO_ERRORS) && flag_ota_update && flag_size_flash)
 8000e0a:	88fa      	ldrh	r2, [r7, #6]
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd0a 	bl	800082c <app_ota_handle_data_receive>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d11a      	bne.n	8000e54 <app_ota_handle_data_receive_dma+0x228>
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <app_ota_handle_data_receive_dma+0x25c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d016      	beq.n	8000e54 <app_ota_handle_data_receive_dma+0x228>
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <app_ota_handle_data_receive_dma+0x274>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d012      	beq.n	8000e54 <app_ota_handle_data_receive_dma+0x228>
    {
      /* write data receive to flash memory */
      app_ota_write_flash_memory(&hex_data);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fbc6 	bl	80005c4 <app_ota_write_flash_memory>
      if (!address_write_flash)
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <app_ota_handle_data_receive_dma+0x27c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <app_ota_handle_data_receive_dma+0x21e>
        /* address write memory errors */
        bsp_uart_printf(USART_UD, APP_OTA_CANCEL_UPDATE);
 8000e40:	4916      	ldr	r1, [pc, #88]	; (8000e9c <app_ota_handle_data_receive_dma+0x270>)
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000e44:	f000 fa04 	bl	8001250 <bsp_uart_printf>
      if (!address_write_flash)
 8000e48:	e009      	b.n	8000e5e <app_ota_handle_data_receive_dma+0x232>
      else
        /* data write successful */
        bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000e4a:	4910      	ldr	r1, [pc, #64]	; (8000e8c <app_ota_handle_data_receive_dma+0x260>)
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000e4e:	f000 f9ff 	bl	8001250 <bsp_uart_printf>
      if (!address_write_flash)
 8000e52:	e004      	b.n	8000e5e <app_ota_handle_data_receive_dma+0x232>
    }
    else
      /* data receive miss or error */
      bsp_uart_printf(USART_UD, APP_OTA_RESEND_DATA);
 8000e54:	4915      	ldr	r1, [pc, #84]	; (8000eac <app_ota_handle_data_receive_dma+0x280>)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000e58:	f000 f9fa 	bl	8001250 <bsp_uart_printf>
    break;
 8000e5c:	e00d      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
 8000e5e:	e00c      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
  }
  /* flag ota firmware update complete */
  case APP_OTA_UPDATE_FW_COMPLETE:
  {
    flag_ota_complete = TRUE;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <app_ota_handle_data_receive_dma+0x284>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
    /* send confirm character */
    bsp_uart_printf(USART_UD, APP_OTA_READ_CONFIRM_CHAR);
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <app_ota_handle_data_receive_dma+0x260>)
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <app_ota_handle_data_receive_dma+0x264>)
 8000e6a:	f000 f9f1 	bl	8001250 <bsp_uart_printf>
    break;
 8000e6e:	e004      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
  }
  default: break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
    break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <app_ota_handle_data_receive_dma+0x24e>
    break;
 8000e78:	bf00      	nop
  }
  free(buff);
 8000e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e7c:	f003 faa6 	bl	80043cc <free>
}
 8000e80:	bf00      	nop
 8000e82:	3730      	adds	r7, #48	; 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000090 	.word	0x20000090
 8000e8c:	08004eb0 	.word	0x08004eb0
 8000e90:	200000e4 	.word	0x200000e4
 8000e94:	20000098 	.word	0x20000098
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	08004eb4 	.word	0x08004eb4
 8000ea0:	20000091 	.word	0x20000091
 8000ea4:	20000093 	.word	0x20000093
 8000ea8:	200000a0 	.word	0x200000a0
 8000eac:	08004eb8 	.word	0x08004eb8
 8000eb0:	20000092 	.word	0x20000092

08000eb4 <bsp_flash_unlock>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_flash_unlock(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  FLASH->KEYR = KEY1;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <bsp_flash_unlock+0x1c>)
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <bsp_flash_unlock+0x20>)
 8000ebc:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = KEY2;
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <bsp_flash_unlock+0x1c>)
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <bsp_flash_unlock+0x24>)
 8000ec2:	605a      	str	r2, [r3, #4]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00
 8000ed4:	45670123 	.word	0x45670123
 8000ed8:	cdef89ab 	.word	0xcdef89ab

08000edc <bsp_get_sector_from_address>:

uint8_t bsp_get_sector_from_address(uint32_t start_address)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint8_t sector_number = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  if ((start_address >= 0x08000000) && (start_address < 0x08003FFF))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000eee:	d306      	bcc.n	8000efe <bsp_get_sector_from_address+0x22>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <bsp_get_sector_from_address+0xc8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d802      	bhi.n	8000efe <bsp_get_sector_from_address+0x22>
    sector_number = BSP_FLASH_SECTOR_0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e04b      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08004000) && (start_address < 0x08007FFF))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <bsp_get_sector_from_address+0xcc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d306      	bcc.n	8000f14 <bsp_get_sector_from_address+0x38>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a28      	ldr	r2, [pc, #160]	; (8000fac <bsp_get_sector_from_address+0xd0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d802      	bhi.n	8000f14 <bsp_get_sector_from_address+0x38>
    sector_number = BSP_FLASH_SECTOR_1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e040      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08008000) && (start_address < 0x0800BFFF))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <bsp_get_sector_from_address+0xd4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d306      	bcc.n	8000f2a <bsp_get_sector_from_address+0x4e>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <bsp_get_sector_from_address+0xd8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d802      	bhi.n	8000f2a <bsp_get_sector_from_address+0x4e>
    sector_number = BSP_FLASH_SECTOR_2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e035      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x0800C000) && (start_address < 0x0800FFFF))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <bsp_get_sector_from_address+0xdc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d306      	bcc.n	8000f40 <bsp_get_sector_from_address+0x64>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <bsp_get_sector_from_address+0xe0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d202      	bcs.n	8000f40 <bsp_get_sector_from_address+0x64>
    sector_number = BSP_FLASH_SECTOR_3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e02a      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08010000) && (start_address < 0x0801FFFF))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <bsp_get_sector_from_address+0xe0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d906      	bls.n	8000f56 <bsp_get_sector_from_address+0x7a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <bsp_get_sector_from_address+0xe4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d202      	bcs.n	8000f56 <bsp_get_sector_from_address+0x7a>
    sector_number = BSP_FLASH_SECTOR_4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e01f      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08020000) && (start_address < 0x0803FFFF))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <bsp_get_sector_from_address+0xe4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d906      	bls.n	8000f6c <bsp_get_sector_from_address+0x90>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <bsp_get_sector_from_address+0xe8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d202      	bcs.n	8000f6c <bsp_get_sector_from_address+0x90>
    sector_number = BSP_FLASH_SECTOR_5;
 8000f66:	2305      	movs	r3, #5
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e014      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08040000) && (start_address < 0x0805FFFF))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <bsp_get_sector_from_address+0xe8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d906      	bls.n	8000f82 <bsp_get_sector_from_address+0xa6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <bsp_get_sector_from_address+0xec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d202      	bcs.n	8000f82 <bsp_get_sector_from_address+0xa6>
    sector_number = BSP_FLASH_SECTOR_6;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e009      	b.n	8000f96 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08060000) && (start_address < 0x0807FFFF))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <bsp_get_sector_from_address+0xec>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d905      	bls.n	8000f96 <bsp_get_sector_from_address+0xba>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <bsp_get_sector_from_address+0xf0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d201      	bcs.n	8000f96 <bsp_get_sector_from_address+0xba>
    sector_number = BSP_FLASH_SECTOR_7;
 8000f92:	2307      	movs	r3, #7
 8000f94:	73fb      	strb	r3, [r7, #15]
  return sector_number;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08003ffe 	.word	0x08003ffe
 8000fa8:	08004000 	.word	0x08004000
 8000fac:	08007ffe 	.word	0x08007ffe
 8000fb0:	08008000 	.word	0x08008000
 8000fb4:	0800bffe 	.word	0x0800bffe
 8000fb8:	0800c000 	.word	0x0800c000
 8000fbc:	0800ffff 	.word	0x0800ffff
 8000fc0:	0801ffff 	.word	0x0801ffff
 8000fc4:	0803ffff 	.word	0x0803ffff
 8000fc8:	0805ffff 	.word	0x0805ffff
 8000fcc:	0807ffff 	.word	0x0807ffff

08000fd0 <bsp_get_address_from_sector>:

uint32_t bsp_get_address_from_sector(uint8_t sector_number)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t address_sector = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  if (sector_number == BSP_FLASH_SECTOR_0)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <bsp_get_address_from_sector+0x1c>
    address_sector = 0x08000000;
 8000fe4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e028      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_1)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <bsp_get_address_from_sector+0x28>
    address_sector = 0x08004000;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <bsp_get_address_from_sector+0x7c>)
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e022      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_2)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d102      	bne.n	8001004 <bsp_get_address_from_sector+0x34>
    address_sector = 0x08008000;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <bsp_get_address_from_sector+0x80>)
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e01c      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_3)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d102      	bne.n	8001010 <bsp_get_address_from_sector+0x40>
    address_sector = 0x0800C000;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <bsp_get_address_from_sector+0x84>)
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e016      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_4)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d102      	bne.n	800101c <bsp_get_address_from_sector+0x4c>
    address_sector = 0x08010000;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <bsp_get_address_from_sector+0x88>)
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e010      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_5)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d102      	bne.n	8001028 <bsp_get_address_from_sector+0x58>
    address_sector = 0x08020000;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <bsp_get_address_from_sector+0x8c>)
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00a      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_6)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b06      	cmp	r3, #6
 800102c:	d102      	bne.n	8001034 <bsp_get_address_from_sector+0x64>
    address_sector = 0x08040000;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <bsp_get_address_from_sector+0x90>)
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e004      	b.n	800103e <bsp_get_address_from_sector+0x6e>
  else if (sector_number == BSP_FLASH_SECTOR_7)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b07      	cmp	r3, #7
 8001038:	d101      	bne.n	800103e <bsp_get_address_from_sector+0x6e>
    address_sector = 0x08060000;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <bsp_get_address_from_sector+0x94>)
 800103c:	60fb      	str	r3, [r7, #12]
  return address_sector;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	08004000 	.word	0x08004000
 8001050:	08008000 	.word	0x08008000
 8001054:	0800c000 	.word	0x0800c000
 8001058:	08010000 	.word	0x08010000
 800105c:	08020000 	.word	0x08020000
 8001060:	08040000 	.word	0x08040000
 8001064:	08060000 	.word	0x08060000

08001068 <bsp_flash_erase>:

bsp_flash_status_t bsp_flash_erase(uint32_t start_address)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8001070:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001074:	60fb      	str	r3, [r7, #12]
  /* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001076:	e007      	b.n	8001088 <bsp_flash_erase+0x20>
  {
    if (--time_out == 0x00)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3b01      	subs	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <bsp_flash_erase+0x20>
    {
      return bsp_flash_status_errors;
 8001084:	2300      	movs	r3, #0
 8001086:	e064      	b.n	8001152 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <bsp_flash_erase+0xf4>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d102      	bne.n	800109c <bsp_flash_erase+0x34>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ed      	bne.n	8001078 <bsp_flash_erase+0x10>
    }
  }
  /* Wating for Bsy bit */
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <bsp_flash_erase+0xf4>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010a8:	d101      	bne.n	80010ae <bsp_flash_erase+0x46>
  {
    bsp_flash_unlock();
 80010aa:	f7ff ff03 	bl	8000eb4 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <bsp_flash_erase+0xf4>)
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	4a2a      	ldr	r2, [pc, #168]	; (800115c <bsp_flash_erase+0xf4>)
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b8:	6113      	str	r3, [r2, #16]
  /* Set the SER bit in the FLASH_CR register */
  FLASH->CR |= FLASH_CR_SER;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <bsp_flash_erase+0xf4>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <bsp_flash_erase+0xf4>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6113      	str	r3, [r2, #16]
  /* Program the FLASH_CR register to select a sector_number to erase */
  FLASH->CR |= bsp_get_sector_from_address(start_address) << 3;
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff08 	bl	8000edc <bsp_get_sector_from_address>
 80010cc:	4603      	mov	r3, r0
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <bsp_flash_erase+0xf4>)
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <bsp_flash_erase+0xf4>)
 80010d8:	430b      	orrs	r3, r1
 80010da:	6113      	str	r3, [r2, #16]
  /* Set the STRT bit in the FLASH CR register */
  FLASH->CR |= FLASH_CR_STRT;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <bsp_flash_erase+0xf4>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <bsp_flash_erase+0xf4>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6113      	str	r3, [r2, #16]
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 80010e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010ec:	60fb      	str	r3, [r7, #12]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80010ee:	e007      	b.n	8001100 <bsp_flash_erase+0x98>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <bsp_flash_erase+0x98>
    {
      return bsp_flash_status_errors;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e028      	b.n	8001152 <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <bsp_flash_erase+0xf4>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d102      	bne.n	8001114 <bsp_flash_erase+0xac>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ed      	bne.n	80010f0 <bsp_flash_erase+0x88>
    }
  }
  /* Check FLASH End of Operation flag  */
  if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <bsp_flash_erase+0xf4>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <bsp_flash_erase+0xc4>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR &= ~FLASH_FLAG_EOP;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <bsp_flash_erase+0xf4>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <bsp_flash_erase+0xf4>)
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	60d3      	str	r3, [r2, #12]
  }
  /* Clear SER bit in the FLASH_CR register */
  FLASH->CR &= FLASH_CR_SER;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <bsp_flash_erase+0xf4>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <bsp_flash_erase+0xf4>)
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	6113      	str	r3, [r2, #16]
  /* Clear STRT bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_STRT;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <bsp_flash_erase+0xf4>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <bsp_flash_erase+0xf4>)
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <bsp_flash_erase+0xf4>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <bsp_flash_erase+0xf4>)
 800114a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114e:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <bsp_flash_write>:

bsp_flash_status_t bsp_flash_write(volatile uint32_t start_address, uint32_t *buffer_write, uint32_t length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t count    = 0u;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 8001170:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001174:	613b      	str	r3, [r7, #16]
  /* Check input parameters */
  if ((buffer_write == 0u) || (length == 0u))
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <bsp_flash_write+0x22>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <bsp_flash_write+0x36>
  {
    return bsp_flash_status_errors;
 8001182:	2300      	movs	r3, #0
 8001184:	e05d      	b.n	8001242 <bsp_flash_write+0xe2>
  }
  /* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3b01      	subs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <bsp_flash_write+0x36>
    {
      return bsp_flash_status_errors;
 8001192:	2300      	movs	r3, #0
 8001194:	e055      	b.n	8001242 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <bsp_flash_write+0xec>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a2:	d102      	bne.n	80011aa <bsp_flash_write+0x4a>
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ed      	bne.n	8001186 <bsp_flash_write+0x26>
    }
  }
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <bsp_flash_write+0xec>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011b6:	d101      	bne.n	80011bc <bsp_flash_write+0x5c>
  {
    bsp_flash_unlock();
 80011b8:	f7ff fe7c 	bl	8000eb4 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <bsp_flash_write+0xec>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <bsp_flash_write+0xec>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6113      	str	r3, [r2, #16]
  /* Write FLASH CR_PG to 1 */
  FLASH->CR |= FLASH_CR_PG;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <bsp_flash_write+0xec>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <bsp_flash_write+0xec>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6113      	str	r3, [r2, #16]
  /* Perform word write at the desired address */
  for (count = 0; count < length; count++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00c      	b.n	80011f4 <bsp_flash_write+0x94>
  {
    *(__IO uint32_t *) (start_address + count * 4u) = *(uint32_t *) (buffer_write + count);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	0091      	lsls	r1, r2, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	440a      	add	r2, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6013      	str	r3, [r2, #0]
  for (count = 0; count < length; count++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d3ee      	bcc.n	80011da <bsp_flash_write+0x7a>
  }
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 80011fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001200:	613b      	str	r3, [r7, #16]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001202:	e007      	b.n	8001214 <bsp_flash_write+0xb4>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	3b01      	subs	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <bsp_flash_write+0xb4>
    {
      return bsp_flash_status_errors;
 8001210:	2300      	movs	r3, #0
 8001212:	e016      	b.n	8001242 <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <bsp_flash_write+0xec>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d102      	bne.n	8001228 <bsp_flash_write+0xc8>
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1ed      	bne.n	8001204 <bsp_flash_write+0xa4>
    }
  }
  /* Clear PG bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_PG;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <bsp_flash_write+0xec>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <bsp_flash_write+0xec>)
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <bsp_flash_write+0xec>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <bsp_flash_write+0xec>)
 800123a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123e:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <bsp_uart_printf>:
  bsp_uart_receive_to_idle_dma(&huart1, data_receive_dma, RX_BUFFER_SIZE);
  buffer_save_data_handle = rx_buffer;
}

void bsp_uart_printf(UART_HandleTypeDef *huart, uint8_t *string)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, string, strlen((char*) string), TIME_OUT_TRANSMIT_UART);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7fe ffd8 	bl	8000210 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 f8c9 	bl	8003402 <HAL_UART_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bsp_uart_printf_len>:

void bsp_uart_printf_len(UART_HandleTypeDef *huart, uint8_t *string, uint16_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	80fb      	strh	r3, [r7, #6]
  HAL_UART_Transmit(huart, string, len, TIME_OUT_TRANSMIT_UART);
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f002 f8b7 	bl	8003402 <HAL_UART_Transmit>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_UARTEx_RxEventCallback>:
  HAL_UART_DeInit(&huart2);
  HAL_DMA_DeInit(&hdma_usart1_rx);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b096      	sub	sp, #88	; 0x58
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  uint16_t number_char_receive;
  uint8_t  check_data_full[50];

  /* read data receive from dma */
  if ((huart->Instance == USART1))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	f040 80c5 	bne.w	800143e <HAL_UARTEx_RxEventCallback+0x1a2>
  {
    static uint16_t old_pos = 0;
    uint16_t        i;

    /* check data when dma transfer complete */
    if (g_flag_cplt_dma)
 80012b4:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d031      	beq.n	8001320 <HAL_UARTEx_RxEventCallback+0x84>
    {
      g_flag_cplt_dma = FALSE;
 80012bc:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < size - old_pos; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80012c8:	e012      	b.n	80012f0 <HAL_UARTEx_RxEventCallback+0x54>
      {
        check_data_full[i] = data_receive_dma[old_pos + i];
 80012ca:	4b60      	ldr	r3, [pc, #384]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80012d4:	441a      	add	r2, r3
 80012d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80012da:	495d      	ldr	r1, [pc, #372]	; (8001450 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80012dc:	5c8a      	ldrb	r2, [r1, r2]
 80012de:	3358      	adds	r3, #88	; 0x58
 80012e0:	443b      	add	r3, r7
 80012e2:	f803 2c38 	strb.w	r2, [r3, #-56]
      for (i = 0; i < size - old_pos; i++)
 80012e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80012ea:	3301      	adds	r3, #1
 80012ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80012f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4955      	ldr	r1, [pc, #340]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 80012f8:	8809      	ldrh	r1, [r1, #0]
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbe4      	blt.n	80012ca <HAL_UARTEx_RxEventCallback+0x2e>
      }
      app_ota_hex_form_data_t hex_data;
      /* check data form correct */
      if (app_ota_handle_data_receive(&hex_data, check_data_full, size - old_pos) == STATE_ERRORS)
 8001300:	4b52      	ldr	r3, [pc, #328]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	f107 0120 	add.w	r1, r7, #32
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fa8a 	bl	800082c <app_ota_handle_data_receive>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 808f 	beq.w	800143e <HAL_UARTEx_RxEventCallback+0x1a2>
        return;
    }

    /* check if new data */
    if (size != old_pos)
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	429a      	cmp	r2, r3
 8001328:	f000 8086 	beq.w	8001438 <HAL_UARTEx_RxEventCallback+0x19c>
    {
      /* check wraps around index data */
      if (size > old_pos)
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	887a      	ldrh	r2, [r7, #2]
 8001332:	429a      	cmp	r2, r3
 8001334:	d923      	bls.n	800137e <HAL_UARTEx_RxEventCallback+0xe2>
      {
        number_char_receive = size - old_pos;
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        for (i = 0; i < number_char_receive; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001348:	e012      	b.n	8001370 <HAL_UARTEx_RxEventCallback+0xd4>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001354:	441a      	add	r2, r3
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800135e:	440b      	add	r3, r1
 8001360:	493b      	ldr	r1, [pc, #236]	; (8001450 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001362:	5c8a      	ldrb	r2, [r1, r2]
 8001364:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 8001366:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800136a:	3301      	adds	r3, #1
 800136c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001370:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001374:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001378:	429a      	cmp	r2, r3
 800137a:	d3e6      	bcc.n	800134a <HAL_UARTEx_RxEventCallback+0xae>
 800137c:	e046      	b.n	800140c <HAL_UARTEx_RxEventCallback+0x170>
        }
      }
      else
      {
        number_char_receive = RX_BUFFER_SIZE - old_pos;
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001386:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        for (i = 0; i < number_char_receive; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001390:	e012      	b.n	80013b8 <HAL_UARTEx_RxEventCallback+0x11c>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800139c:	441a      	add	r2, r3
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80013a6:	440b      	add	r3, r1
 80013a8:	4929      	ldr	r1, [pc, #164]	; (8001450 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80013aa:	5c8a      	ldrb	r2, [r1, r2]
 80013ac:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 80013ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80013b2:	3301      	adds	r3, #1
 80013b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80013b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80013bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3e6      	bcc.n	8001392 <HAL_UARTEx_RxEventCallback+0xf6>
        }
        if (size > 0)
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d020      	beq.n	800140c <HAL_UARTEx_RxEventCallback+0x170>
        {
          for (i = 0; i < size; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80013d0:	e011      	b.n	80013f6 <HAL_UARTEx_RxEventCallback+0x15a>
          {
            /* read data from buffer dma */
            buffer_save_data_handle[number_char_receive + i] = data_receive_dma[i];
 80013d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 80013de:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80013e2:	4401      	add	r1, r0
 80013e4:	440b      	add	r3, r1
 80013e6:	491a      	ldr	r1, [pc, #104]	; (8001450 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80013e8:	5c8a      	ldrb	r2, [r1, r2]
 80013ea:	701a      	strb	r2, [r3, #0]
          for (i = 0; i < size; i++)
 80013ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80013f0:	3301      	adds	r3, #1
 80013f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80013f6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3e8      	bcc.n	80013d2 <HAL_UARTEx_RxEventCallback+0x136>
          }
          number_char_receive += size;
 8001400:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	4413      	add	r3, r2
 8001408:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }
      }

	#ifdef DEBUG
      HAL_UART_Transmit(&huart2, buffer_save_data_handle, number_char_receive, 100);
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001418:	f001 fff3 	bl	8003402 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", 2, 100);
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2202      	movs	r2, #2
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001424:	f001 ffed 	bl	8003402 <HAL_UART_Transmit>
	#endif
      /* handle data read */
      app_ota_handle_data_receive_dma(huart, buffer_save_data_handle, number_char_receive);
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fbfa 	bl	8000c2c <app_ota_handle_data_receive_dma>
    }
    old_pos = size;
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	8013      	strh	r3, [r2, #0]
  }
}
 800143e:	3758      	adds	r7, #88	; 0x58
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40011000 	.word	0x40011000
 8001448:	200000a4 	.word	0x200000a4
 800144c:	200000e0 	.word	0x200000e0
 8001450:	200000a8 	.word	0x200000a8
 8001454:	200000dc 	.word	0x200000dc
 8001458:	20000128 	.word	0x20000128
 800145c:	08004ebc 	.word	0x08004ebc

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f000 fab4 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f80a 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 f8ee 	bl	800164c <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f000 f8cc 	bl	800160c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001474:	f000 f876 	bl	8001564 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001478:	f000 f89e 	bl	80015b8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147c:	e7fe      	b.n	800147c <main+0x1c>
	...

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2234      	movs	r2, #52	; 0x34
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f002 ffa4 	bl	80043dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <SystemClock_Config+0xdc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a2b      	ldr	r2, [pc, #172]	; (800155c <SystemClock_Config+0xdc>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <SystemClock_Config+0xdc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SystemClock_Config+0xe0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <SystemClock_Config+0xe0>)
 80014ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SystemClock_Config+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014dc:	2301      	movs	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f0:	2304      	movs	r3, #4
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014f4:	23b4      	movs	r3, #180	; 0xb4
 80014f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fc8f 	bl	8002e2c <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001514:	f000 f8c2 	bl	800169c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001518:	f001 f8ee 	bl	80026f8 <HAL_PWREx_EnableOverDrive>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001522:	f000 f8bb 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001532:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2105      	movs	r1, #5
 8001544:	4618      	mov	r0, r3
 8001546:	f001 f927 	bl	8002798 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001550:	f000 f8a4 	bl	800169c <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3750      	adds	r7, #80	; 0x50
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART1_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART1_UART_Init+0x4c>)
 800159c:	f001 fee4 	bl	8003368 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 f879 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000e4 	.word	0x200000e4
 80015b4:	40011000 	.word	0x40011000

080015b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART2_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f001 feba 	bl	8003368 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f000 f84f 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000128 	.word	0x20000128
 8001608:	40004400 	.word	0x40004400

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_DMA_Init+0x3c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <MX_DMA_Init+0x3c>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_DMA_Init+0x3c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	203a      	movs	r0, #58	; 0x3a
 8001634:	f000 fb19 	bl	8001c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001638:	203a      	movs	r0, #58	; 0x3a
 800163a:	f000 fb32 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_GPIO_Init+0x4c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <MX_GPIO_Init+0x4c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_GPIO_Init+0x4c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_GPIO_Init+0x4c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <MX_GPIO_Init+0x4c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_GPIO_Init+0x4c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a4e      	ldr	r2, [pc, #312]	; (8001850 <HAL_UART_MspInit+0x158>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d164      	bne.n	80017e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_UART_MspInit+0x15c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_UART_MspInit+0x15c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a45      	ldr	r2, [pc, #276]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001752:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001764:	2307      	movs	r3, #7
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	483a      	ldr	r0, [pc, #232]	; (8001858 <HAL_UART_MspInit+0x160>)
 8001770:	f000 fe2e 	bl	80023d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_UART_MspInit+0x164>)
 8001776:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <HAL_UART_MspInit+0x168>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_UART_MspInit+0x164>)
 800177c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001780:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_UART_MspInit+0x164>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_UART_MspInit+0x164>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_UART_MspInit+0x164>)
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_UART_MspInit+0x164>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_UART_MspInit+0x164>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_UART_MspInit+0x164>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_UART_MspInit+0x164>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_UART_MspInit+0x164>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017b6:	4829      	ldr	r0, [pc, #164]	; (800185c <HAL_UART_MspInit+0x164>)
 80017b8:	f000 fa8e 	bl	8001cd8 <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017c2:	f7ff ff6b 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_UART_MspInit+0x164>)
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_UART_MspInit+0x164>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2025      	movs	r0, #37	; 0x25
 80017d8:	f000 fa47 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017dc:	2025      	movs	r0, #37	; 0x25
 80017de:	f000 fa60 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e2:	e030      	b.n	8001846 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_UART_MspInit+0x16c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12b      	bne.n	8001846 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_UART_MspInit+0x15c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_UART_MspInit+0x15c>)
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_UART_MspInit+0x15c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_UART_MspInit+0x15c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001826:	230c      	movs	r3, #12
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001836:	2307      	movs	r3, #7
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_UART_MspInit+0x160>)
 8001842:	f000 fdc5 	bl	80023d0 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40011000 	.word	0x40011000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	2000016c 	.word	0x2000016c
 8001860:	40026440 	.word	0x40026440
 8001864:	40004400 	.word	0x40004400

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f000 f8de 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <USART1_IRQHandler+0x10>)
 80018c2:	f001 fe31 	bl	8003528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200000e4 	.word	0x200000e4

080018d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <DMA2_Stream2_IRQHandler+0x14>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <DMA2_Stream2_IRQHandler+0x18>)
 80018dc:	f000 fb3c 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200000a4 	.word	0x200000a4
 80018e8:	2000016c 	.word	0x2000016c

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f002 fd2c 	bl	8004378 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20020000 	.word	0x20020000
 800194c:	00000400 	.word	0x00000400
 8001950:	200001cc 	.word	0x200001cc
 8001954:	200001e8 	.word	0x200001e8

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f002 fceb 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fd57 	bl	8001460 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019c0:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 80019c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019c8:	200001e4 	.word	0x200001e4

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f92b 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fe50 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f943 	bl	8001cbe <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f90b 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000008 	.word	0x20000008

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	200001d0 	.word	0x200001d0

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200001d0 	.word	0x200001d0

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff feda 	bl	8001a9c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e099      	b.n	8001e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	e00f      	b.n	8001d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d16:	f7ff fec1 	bl	8001a9c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d908      	bls.n	8001d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e078      	b.n	8001e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e8      	bne.n	8001d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_DMA_Init+0x158>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0307 	bic.w	r3, r3, #7
 8001db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d117      	bne.n	8001dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa7b 	bl	80022d8 <DMA_CheckFifoParam>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001df6:	2301      	movs	r3, #1
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa32 	bl	800226c <DMA_CalcBaseAndBitshift>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	f010803f 	.word	0xf010803f

08001e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e42:	f7ff fe2b 	bl	8001a9c <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e052      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_Abort+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	e013      	b.n	8001ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb8:	f7ff fdf0 	bl	8001a9c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e015      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e4      	bne.n	8001eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	223f      	movs	r2, #63	; 0x3f
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_DMA_IRQHandler+0x248>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_DMA_IRQHandler+0x24c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808f 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8087 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07e      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e079      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02c      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
 800219e:	bf00      	nop
 80021a0:	20000004 	.word	0x20000004
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e01e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d307      	bcc.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_DMA_IRQHandler+0x2cc>
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3b10      	subs	r3, #16
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <DMA_CalcBaseAndBitshift+0x64>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d909      	bls.n	80022ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	1d1a      	adds	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58
 80022ac:	e007      	b.n	80022be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	aaaaaaab 	.word	0xaaaaaaab
 80022d4:	08004ed8 	.word	0x08004ed8

080022d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11f      	bne.n	8002332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d856      	bhi.n	80023a6 <DMA_CheckFifoParam+0xce>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <DMA_CheckFifoParam+0x28>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	08002323 	.word	0x08002323
 8002308:	08002311 	.word	0x08002311
 800230c:	080023a7 	.word	0x080023a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d046      	beq.n	80023aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e043      	b.n	80023aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800232a:	d140      	bne.n	80023ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002330:	e03d      	b.n	80023ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233a:	d121      	bne.n	8002380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d837      	bhi.n	80023b2 <DMA_CheckFifoParam+0xda>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <DMA_CheckFifoParam+0x70>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	0800235f 	.word	0x0800235f
 8002350:	08002359 	.word	0x08002359
 8002354:	08002371 	.word	0x08002371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e030      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d025      	beq.n	80023b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236e:	e022      	b.n	80023b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002378:	d11f      	bne.n	80023ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800237e:	e01c      	b.n	80023ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d903      	bls.n	800238e <DMA_CheckFifoParam+0xb6>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d003      	beq.n	8002394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800238c:	e018      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      break;
 8002392:	e015      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e00b      	b.n	80023be <DMA_CheckFifoParam+0xe6>
      break;
 80023a6:	bf00      	nop
 80023a8:	e00a      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
 80023ac:	e008      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ae:	bf00      	nop
 80023b0:	e006      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
 80023b4:	e004      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023b6:	bf00      	nop
 80023b8:	e002      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
    }
  } 
  
  return status; 
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e165      	b.n	80026b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8154 	bne.w	80026b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	2b02      	cmp	r3, #2
 8002420:	d130      	bne.n	8002484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b03      	cmp	r3, #3
 800248e:	d017      	beq.n	80024c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d123      	bne.n	8002514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80ae 	beq.w	80026b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_GPIO_Init+0x300>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b5a      	ldr	r3, [pc, #360]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_GPIO_Init+0x304>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <HAL_GPIO_Init+0x308>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x21a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	; (80026dc <HAL_GPIO_Init+0x30c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x216>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4d      	ldr	r2, [pc, #308]	; (80026e0 <HAL_GPIO_Init+0x310>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x212>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	; (80026e4 <HAL_GPIO_Init+0x314>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <HAL_GPIO_Init+0x318>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x20a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	; (80026ec <HAL_GPIO_Init+0x31c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x206>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a49      	ldr	r2, [pc, #292]	; (80026f0 <HAL_GPIO_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x202>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d2:	2307      	movs	r3, #7
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_GPIO_Init+0x304>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a31      	ldr	r2, [pc, #196]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_GPIO_Init+0x324>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae96 	bls.w	80023ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_PWREx_EnableOverDrive+0x90>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_PWREx_EnableOverDrive+0x90>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_PWREx_EnableOverDrive+0x90>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_PWREx_EnableOverDrive+0x94>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002724:	f7ff f9ba 	bl	8001a9c <HAL_GetTick>
 8002728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800272a:	e009      	b.n	8002740 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272c:	f7ff f9b6 	bl	8001a9c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273a:	d901      	bls.n	8002740 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e01f      	b.n	8002780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_PWREx_EnableOverDrive+0x98>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d1ee      	bne.n	800272c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002754:	f7ff f9a2 	bl	8001a9c <HAL_GetTick>
 8002758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800275a:	e009      	b.n	8002770 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800275c:	f7ff f99e 	bl	8001a9c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276a:	d901      	bls.n	8002770 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e007      	b.n	8002780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_PWREx_EnableOverDrive+0x98>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800277c:	d1ee      	bne.n	800275c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	420e0040 	.word	0x420e0040
 8002790:	40007000 	.word	0x40007000
 8002794:	420e0044 	.word	0x420e0044

08002798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0cc      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d90c      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0b8      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	494d      	ldr	r1, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d044      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d119      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d003      	beq.n	8002856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002852:	2b03      	cmp	r3, #3
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e067      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4934      	ldr	r1, [pc, #208]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7ff f908 	bl	8001a9c <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7ff f904 	bl	8001a9c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e04f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d20c      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4916      	ldr	r1, [pc, #88]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490e      	ldr	r1, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291e:	f000 f855 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490a      	ldr	r1, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f868 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00
 8002954:	40023800 	.word	0x40023800
 8002958:	08004ec0 	.word	0x08004ec0
 800295c:	20000004 	.word	0x20000004
 8002960:	20000008 	.word	0x20000008

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	08004ed0 	.word	0x08004ed0

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029a8:	f7ff ffdc 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0b5b      	lsrs	r3, r3, #13
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08004ed0 	.word	0x08004ed0

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b0ae      	sub	sp, #184	; 0xb8
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f2:	4bcb      	ldr	r3, [pc, #812]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	f200 8206 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x440>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002e0d 	.word	0x08002e0d
 8002a10:	08002e0d 	.word	0x08002e0d
 8002a14:	08002e0d 	.word	0x08002e0d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002e0d 	.word	0x08002e0d
 8002a20:	08002e0d 	.word	0x08002e0d
 8002a24:	08002e0d 	.word	0x08002e0d
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002e0d 	.word	0x08002e0d
 8002a30:	08002e0d 	.word	0x08002e0d
 8002a34:	08002e0d 	.word	0x08002e0d
 8002a38:	08002c3d 	.word	0x08002c3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4bb9      	ldr	r3, [pc, #740]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a42:	e1e7      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4bb8      	ldr	r3, [pc, #736]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a4a:	e1e3      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4bb4      	ldr	r3, [pc, #720]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a58:	4bb1      	ldr	r3, [pc, #708]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d071      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	1a51      	subs	r1, r2, r1
 8002aa6:	6439      	str	r1, [r7, #64]	; 0x40
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002abc:	4649      	mov	r1, r9
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	018a      	lsls	r2, r1, #6
 8002aca:	4641      	mov	r1, r8
 8002acc:	1a51      	subs	r1, r2, r1
 8002ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4641      	mov	r1, r8
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4641      	mov	r1, r8
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4622      	mov	r2, r4
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	462b      	mov	r3, r5
 8002b00:	460a      	mov	r2, r1
 8002b02:	eb42 0303 	adc.w	r3, r2, r3
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b14:	4629      	mov	r1, r5
 8002b16:	024b      	lsls	r3, r1, #9
 8002b18:	4621      	mov	r1, r4
 8002b1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1e:	4621      	mov	r1, r4
 8002b20:	024a      	lsls	r2, r1, #9
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b38:	f7fd fbc2 	bl	80002c0 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b46:	e067      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b62:	2300      	movs	r3, #0
 8002b64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	f04f 0000 	mov.w	r0, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	0159      	lsls	r1, r3, #5
 8002b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7c:	0150      	lsls	r0, r2, #5
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4621      	mov	r1, r4
 8002b84:	1a51      	subs	r1, r2, r1
 8002b86:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b88:	4629      	mov	r1, r5
 8002b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	018b      	lsls	r3, r1, #6
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	018a      	lsls	r2, r1, #6
 8002baa:	4641      	mov	r1, r8
 8002bac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bca:	4692      	mov	sl, r2
 8002bcc:	469b      	mov	fp, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bea:	4629      	mov	r1, r5
 8002bec:	028b      	lsls	r3, r1, #10
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	028a      	lsls	r2, r1, #10
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c00:	2200      	movs	r2, #0
 8002c02:	673b      	str	r3, [r7, #112]	; 0x70
 8002c04:	677a      	str	r2, [r7, #116]	; 0x74
 8002c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c0a:	f7fd fb59 	bl	80002c0 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4613      	mov	r3, r2
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c3a:	e0eb      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d06b      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c54:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	663b      	str	r3, [r7, #96]	; 0x60
 8002c68:	2300      	movs	r3, #0
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c70:	4622      	mov	r2, r4
 8002c72:	462b      	mov	r3, r5
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	0159      	lsls	r1, r3, #5
 8002c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c82:	0150      	lsls	r0, r2, #5
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4621      	mov	r1, r4
 8002c8a:	1a51      	subs	r1, r2, r1
 8002c8c:	61b9      	str	r1, [r7, #24]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	eb63 0301 	sbc.w	r3, r3, r1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	018b      	lsls	r3, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cac:	4651      	mov	r1, sl
 8002cae:	018a      	lsls	r2, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	eb18 0303 	adds.w	r3, r8, r3
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	024b      	lsls	r3, r1, #9
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	024a      	lsls	r2, r1, #9
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d06:	2200      	movs	r2, #0
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d10:	f7fd fad6 	bl	80002c0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d1e:	e065      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x420>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	2200      	movs	r2, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	4611      	mov	r1, r2
 8002d38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d3e:	2300      	movs	r3, #0
 8002d40:	657b      	str	r3, [r7, #84]	; 0x54
 8002d42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d46:	4642      	mov	r2, r8
 8002d48:	464b      	mov	r3, r9
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4641      	mov	r1, r8
 8002d60:	1a51      	subs	r1, r2, r1
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	4649      	mov	r1, r9
 8002d66:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d82:	4651      	mov	r1, sl
 8002d84:	018a      	lsls	r2, r1, #6
 8002d86:	4651      	mov	r1, sl
 8002d88:	1a54      	subs	r4, r2, r1
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	eb63 0501 	sbc.w	r5, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	00eb      	lsls	r3, r5, #3
 8002d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9e:	00e2      	lsls	r2, r4, #3
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4643      	mov	r3, r8
 8002da6:	18e3      	adds	r3, r4, r3
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dde:	f7fd fa6f 	bl	80002c0 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4613      	mov	r3, r2
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0f1b      	lsrs	r3, r3, #28
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e0a:	e003      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	37b8      	adds	r7, #184	; 0xb8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400

08002e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e28d      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8083 	beq.w	8002f52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e4c:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d019      	beq.n	8002e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e58:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e64:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d00c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d112      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	4b84      	ldr	r3, [pc, #528]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x124>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d157      	bne.n	8002f50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e25a      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x90>
 8002eae:	4b7c      	ldr	r3, [pc, #496]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7b      	ldr	r2, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xcc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xb4>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xcc>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6b      	ldr	r2, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fdcc 	bl	8001a9c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fdc8 	bl	8001a9c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e21f      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xdc>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fdb8 	bl	8001a9c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fdb4 	bl	8001a9c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e20b      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x104>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06f      	beq.n	800303e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d017      	beq.n	8002f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x186>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1d3      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4937      	ldr	r1, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fd61 	bl	8001a9c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe fd5d 	bl	8001a9c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1b4      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4925      	ldr	r1, [pc, #148]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x278>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fd40 	bl	8001a9c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7fe fd3c 	bl	8001a9c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e193      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCC_OscConfig+0x27c>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe fd20 	bl	8001a9c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7fe fd1c 	bl	8001a9c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e173      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x274>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x234>
 800307e:	e01b      	b.n	80030b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x27c>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe fd09 	bl	8001a9c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e00e      	b.n	80030ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe fd05 	bl	8001a9c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d907      	bls.n	80030ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e15c      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	42470000 	.word	0x42470000
 80030a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b8a      	ldr	r3, [pc, #552]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ea      	bne.n	800308e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8097 	beq.w	80031f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b83      	ldr	r3, [pc, #524]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a7e      	ldr	r2, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b79      	ldr	r3, [pc, #484]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe fcc5 	bl	8001a9c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe fcc1 	bl	8001a9c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e118      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x4b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x31e>
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x358>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x340>
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a60      	ldr	r2, [pc, #384]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5d      	ldr	r2, [pc, #372]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x358>
 800316c:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a59      	ldr	r2, [pc, #356]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a56      	ldr	r2, [pc, #344]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fc86 	bl	8001a9c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fc82 	bl	8001a9c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0d7      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ee      	beq.n	8003194 <HAL_RCC_OscConfig+0x368>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe fc70 	bl	8001a9c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fc6c 	bl	8001a9c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0c1      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ad 	beq.w	8003358 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d060      	beq.n	80032cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d145      	bne.n	800329e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fc40 	bl	8001a9c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fc3c 	bl	8001a9c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e093      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	491b      	ldr	r1, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fc11 	bl	8001a9c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe fc0d 	bl	8001a9c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e064      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x452>
 800329c:	e05c      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x4b4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fbfa 	bl	8001a9c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fbf6 	bl	8001a9c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04d      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x480>
 80032ca:	e045      	b.n	8003358 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000
 80032e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_RCC_OscConfig+0x538>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d030      	beq.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d129      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d122      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331c:	4293      	cmp	r3, r2
 800331e:	d119      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d10f      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe f9b2 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fd6f 	bl	8003e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d17c      	bne.n	800351c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Transmit+0x2c>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e075      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x3e>
 800343c:	2302      	movs	r3, #2
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x11c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	; 0x21
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fe fb21 	bl	8001a9c <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x82>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003494:	e02a      	b.n	80034ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 faed 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e036      	b.n	800351e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cf      	bne.n	8003496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fabd 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b0ba      	sub	sp, #232	; 0xe8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_UART_IRQHandler+0x66>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fbc7 	bl	8003d1a <UART_Receive_IT>
      return;
 800358c:	e256      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800358e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80de 	beq.w	8003754 <HAL_UART_IRQHandler+0x22c>
 8003598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80d1 	beq.w	8003754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_UART_IRQHandler+0xae>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0201 	orr.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
 80035e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_UART_IRQHandler+0xf6>
 8003606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_UART_IRQHandler+0x126>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 81ed 	beq.w	8003a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_UART_IRQHandler+0x14e>
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fb52 	bl	8003d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_UART_IRQHandler+0x17a>
 800369a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04f      	beq.n	8003742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa5a 	bl	8003b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d141      	bne.n	800373a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1d9      	bne.n	80036b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <HAL_UART_IRQHandler+0x3dc>)
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fbfc 	bl	8001f14 <HAL_DMA_Abort_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e00e      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f99a 	bl	8003a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	e00a      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f996 	bl	8003a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e006      	b.n	8003750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f992 	bl	8003a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800374e:	e170      	b.n	8003a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	bf00      	nop
    return;
 8003752:	e16e      	b.n	8003a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 814a 	bne.w	80039f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8143 	beq.w	80039f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 813c 	beq.w	80039f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	f040 80b4 	bne.w	8003908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8140 	beq.w	8003a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037be:	429a      	cmp	r2, r3
 80037c0:	f080 8139 	bcs.w	8003a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	f000 8088 	beq.w	80038ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800380a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800381e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1d9      	bne.n	80037da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800384a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800384e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800385c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e1      	bne.n	8003826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800388c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e3      	bne.n	8003862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ba:	f023 0310 	bic.w	r3, r3, #16
 80038be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe faa5 	bl	8001e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fcce 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003900:	e099      	b.n	8003a36 <HAL_UART_IRQHandler+0x50e>
 8003902:	bf00      	nop
 8003904:	08003c23 	.word	0x08003c23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808b 	beq.w	8003a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8086 	beq.w	8003a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003952:	647a      	str	r2, [r7, #68]	; 0x44
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	623b      	str	r3, [r7, #32]
   return(result);
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800398a:	633a      	str	r2, [r7, #48]	; 0x30
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039d0:	61fa      	str	r2, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	617b      	str	r3, [r7, #20]
   return(result);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e3      	bne.n	80039ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fc56 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f0:	e023      	b.n	8003a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_UART_IRQHandler+0x4ea>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f91d 	bl	8003c4a <UART_Transmit_IT>
    return;
 8003a10:	e014      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <HAL_UART_IRQHandler+0x514>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f95d 	bl	8003cea <UART_EndTransmit_IT>
    return;
 8003a30:	e004      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
    return;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
      return;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_UART_IRQHandler+0x514>
      return;
 8003a3a:	bf00      	nop
  }
}
 8003a3c:	37e8      	adds	r7, #232	; 0xe8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	; 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	e050      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d04c      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa0:	f7fd fffc 	bl	8001a9c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d241      	bcs.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3314      	adds	r3, #20
 8003aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	613b      	str	r3, [r7, #16]
   return(result);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b04:	623a      	str	r2, [r7, #32]
 8003b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	69f9      	ldr	r1, [r7, #28]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e00f      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d09f      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3740      	adds	r7, #64	; 0x40
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b095      	sub	sp, #84	; 0x54
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b84:	643a      	str	r2, [r7, #64]	; 0x40
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d119      	bne.n	8003c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	647b      	str	r3, [r7, #68]	; 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf4:	61ba      	str	r2, [r7, #24]
 8003bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	613b      	str	r3, [r7, #16]
   return(result);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c16:	bf00      	nop
 8003c18:	3754      	adds	r7, #84	; 0x54
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ff15 	bl	8003a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b21      	cmp	r3, #33	; 0x21
 8003c5c:	d13e      	bne.n	8003cdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d114      	bne.n	8003c92 <UART_Transmit_IT+0x48>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d110      	bne.n	8003c92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	1c9a      	adds	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	621a      	str	r2, [r3, #32]
 8003c90:	e008      	b.n	8003ca4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6211      	str	r1, [r2, #32]
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fe9a 	bl	8003a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08c      	sub	sp, #48	; 0x30
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b22      	cmp	r3, #34	; 0x22
 8003d2c:	f040 80ab 	bne.w	8003e86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d38:	d117      	bne.n	8003d6a <UART_Receive_IT+0x50>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d113      	bne.n	8003d6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
 8003d68:	e026      	b.n	8003db8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d007      	beq.n	8003d8e <UART_Receive_IT+0x74>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <UART_Receive_IT+0x82>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e008      	b.n	8003dae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d15a      	bne.n	8003e82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0220 	bic.w	r2, r2, #32
 8003dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d135      	bne.n	8003e78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	613b      	str	r3, [r7, #16]
   return(result);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f023 0310 	bic.w	r3, r3, #16
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	623a      	str	r2, [r7, #32]
 8003e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d10a      	bne.n	8003e6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fd fa13 	bl	800129c <HAL_UARTEx_RxEventCallback>
 8003e76:	e002      	b.n	8003e7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fded 	bl	8003a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e002      	b.n	8003e88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3730      	adds	r7, #48	; 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e94:	b0c0      	sub	sp, #256	; 0x100
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	68d9      	ldr	r1, [r3, #12]
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	ea40 0301 	orr.w	r3, r0, r1
 8003eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ee8:	f021 010c 	bic.w	r1, r1, #12
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	6999      	ldr	r1, [r3, #24]
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	ea40 0301 	orr.w	r3, r0, r1
 8003f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b8f      	ldr	r3, [pc, #572]	; (800415c <UART_SetConfig+0x2cc>)
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d005      	beq.n	8003f30 <UART_SetConfig+0xa0>
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <UART_SetConfig+0x2d0>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d104      	bne.n	8003f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7fe fd38 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 8003f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f38:	e003      	b.n	8003f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3a:	f7fe fd1f 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	f040 810c 	bne.w	8004168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	1891      	adds	r1, r2, r2
 8003f68:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f6a:	415b      	adcs	r3, r3
 8003f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f72:	4621      	mov	r1, r4
 8003f74:	eb12 0801 	adds.w	r8, r2, r1
 8003f78:	4629      	mov	r1, r5
 8003f7a:	eb43 0901 	adc.w	r9, r3, r1
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f92:	4690      	mov	r8, r2
 8003f94:	4699      	mov	r9, r3
 8003f96:	4623      	mov	r3, r4
 8003f98:	eb18 0303 	adds.w	r3, r8, r3
 8003f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	eb49 0303 	adc.w	r3, r9, r3
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	18db      	adds	r3, r3, r3
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	eb42 0303 	adc.w	r3, r2, r3
 8003fca:	657b      	str	r3, [r7, #84]	; 0x54
 8003fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fd4:	f7fc f974 	bl	80002c0 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4b61      	ldr	r3, [pc, #388]	; (8004164 <UART_SetConfig+0x2d4>)
 8003fde:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	011c      	lsls	r4, r3, #4
 8003fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	1891      	adds	r1, r2, r2
 8003ffe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004000:	415b      	adcs	r3, r3
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004008:	4641      	mov	r1, r8
 800400a:	eb12 0a01 	adds.w	sl, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb43 0b01 	adc.w	fp, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004028:	4692      	mov	sl, r2
 800402a:	469b      	mov	fp, r3
 800402c:	4643      	mov	r3, r8
 800402e:	eb1a 0303 	adds.w	r3, sl, r3
 8004032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004036:	464b      	mov	r3, r9
 8004038:	eb4b 0303 	adc.w	r3, fp, r3
 800403c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004054:	460b      	mov	r3, r1
 8004056:	18db      	adds	r3, r3, r3
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
 800405a:	4613      	mov	r3, r2
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
 8004062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800406a:	f7fc f929 	bl	80002c0 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4611      	mov	r1, r2
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <UART_SetConfig+0x2d4>)
 8004076:	fba3 2301 	umull	r2, r3, r3, r1
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2264      	movs	r2, #100	; 0x64
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	1acb      	subs	r3, r1, r3
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <UART_SetConfig+0x2d4>)
 800408c:	fba3 2302 	umull	r2, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004098:	441c      	add	r4, r3
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040b4:	415b      	adcs	r3, r3
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040bc:	4641      	mov	r1, r8
 80040be:	1851      	adds	r1, r2, r1
 80040c0:	6339      	str	r1, [r7, #48]	; 0x30
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040d4:	4659      	mov	r1, fp
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4651      	mov	r1, sl
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4642      	mov	r2, r8
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040f0:	464b      	mov	r3, r9
 80040f2:	460a      	mov	r2, r1
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004108:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800410c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004110:	460b      	mov	r3, r1
 8004112:	18db      	adds	r3, r3, r3
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
 8004116:	4613      	mov	r3, r2
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004126:	f7fc f8cb 	bl	80002c0 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <UART_SetConfig+0x2d4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <UART_SetConfig+0x2d4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 0207 	and.w	r2, r3, #7
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4422      	add	r2, r4
 8004156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004158:	e105      	b.n	8004366 <UART_SetConfig+0x4d6>
 800415a:	bf00      	nop
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800417a:	4642      	mov	r2, r8
 800417c:	464b      	mov	r3, r9
 800417e:	1891      	adds	r1, r2, r2
 8004180:	6239      	str	r1, [r7, #32]
 8004182:	415b      	adcs	r3, r3
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
 8004186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800418a:	4641      	mov	r1, r8
 800418c:	1854      	adds	r4, r2, r1
 800418e:	4649      	mov	r1, r9
 8004190:	eb43 0501 	adc.w	r5, r3, r1
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041b0:	464b      	mov	r3, r9
 80041b2:	eb45 0303 	adc.w	r3, r5, r3
 80041b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041d6:	4629      	mov	r1, r5
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e0:	4621      	mov	r1, r4
 80041e2:	008a      	lsls	r2, r1, #2
 80041e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041e8:	f7fc f86a 	bl	80002c0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b60      	ldr	r3, [pc, #384]	; (8004374 <UART_SetConfig+0x4e4>)
 80041f2:	fba3 2302 	umull	r2, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	011c      	lsls	r4, r3, #4
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	61b9      	str	r1, [r7, #24]
 8004214:	415b      	adcs	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6139      	str	r1, [r7, #16]
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004250:	464b      	mov	r3, r9
 8004252:	460a      	mov	r2, r1
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	67bb      	str	r3, [r7, #120]	; 0x78
 8004266:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004274:	4649      	mov	r1, r9
 8004276:	008b      	lsls	r3, r1, #2
 8004278:	4641      	mov	r1, r8
 800427a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427e:	4641      	mov	r1, r8
 8004280:	008a      	lsls	r2, r1, #2
 8004282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004286:	f7fc f81b 	bl	80002c0 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b39      	ldr	r3, [pc, #228]	; (8004374 <UART_SetConfig+0x4e4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a34      	ldr	r2, [pc, #208]	; (8004374 <UART_SetConfig+0x4e4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ae:	441c      	add	r4, r3
 80042b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b4:	2200      	movs	r2, #0
 80042b6:	673b      	str	r3, [r7, #112]	; 0x70
 80042b8:	677a      	str	r2, [r7, #116]	; 0x74
 80042ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042be:	4642      	mov	r2, r8
 80042c0:	464b      	mov	r3, r9
 80042c2:	1891      	adds	r1, r2, r2
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	415b      	adcs	r3, r3
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ce:	4641      	mov	r1, r8
 80042d0:	1851      	adds	r1, r2, r1
 80042d2:	6039      	str	r1, [r7, #0]
 80042d4:	4649      	mov	r1, r9
 80042d6:	414b      	adcs	r3, r1
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e6:	4659      	mov	r1, fp
 80042e8:	00cb      	lsls	r3, r1, #3
 80042ea:	4651      	mov	r1, sl
 80042ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f0:	4651      	mov	r1, sl
 80042f2:	00ca      	lsls	r2, r1, #3
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	4603      	mov	r3, r0
 80042fa:	4642      	mov	r2, r8
 80042fc:	189b      	adds	r3, r3, r2
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004300:	464b      	mov	r3, r9
 8004302:	460a      	mov	r2, r1
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	663b      	str	r3, [r7, #96]	; 0x60
 8004314:	667a      	str	r2, [r7, #100]	; 0x64
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004322:	4649      	mov	r1, r9
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	4641      	mov	r1, r8
 8004328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432c:	4641      	mov	r1, r8
 800432e:	008a      	lsls	r2, r1, #2
 8004330:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004334:	f7fb ffc4 	bl	80002c0 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <UART_SetConfig+0x4e4>)
 800433e:	fba3 1302 	umull	r1, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2164      	movs	r1, #100	; 0x64
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	3332      	adds	r3, #50	; 0x32
 8004350:	4a08      	ldr	r2, [pc, #32]	; (8004374 <UART_SetConfig+0x4e4>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4422      	add	r2, r4
 8004364:	609a      	str	r2, [r3, #8]
}
 8004366:	bf00      	nop
 8004368:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800436c:	46bd      	mov	sp, r7
 800436e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004372:	bf00      	nop
 8004374:	51eb851f 	.word	0x51eb851f

08004378 <__errno>:
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <__errno+0x8>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000010 	.word	0x20000010

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4d0d      	ldr	r5, [pc, #52]	; (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438a:	1b64      	subs	r4, r4, r5
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2600      	movs	r6, #0
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4d0b      	ldr	r5, [pc, #44]	; (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	; (80043c8 <__libc_init_array+0x44>)
 8004398:	f000 fc96 	bl	8004cc8 <_init>
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2600      	movs	r6, #0
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	08004f1c 	.word	0x08004f1c
 80043c0:	08004f1c 	.word	0x08004f1c
 80043c4:	08004f1c 	.word	0x08004f1c
 80043c8:	08004f20 	.word	0x08004f20

080043cc <free>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <free+0xc>)
 80043ce:	4601      	mov	r1, r0
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f000 b80b 	b.w	80043ec <_free_r>
 80043d6:	bf00      	nop
 80043d8:	20000010 	.word	0x20000010

080043dc <memset>:
 80043dc:	4402      	add	r2, r0
 80043de:	4603      	mov	r3, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <_free_r>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d044      	beq.n	800447c <_free_r+0x90>
 80043f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f1a1 0404 	sub.w	r4, r1, #4
 80043fe:	bfb8      	it	lt
 8004400:	18e4      	addlt	r4, r4, r3
 8004402:	f000 f903 	bl	800460c <__malloc_lock>
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <_free_r+0x94>)
 8004408:	9801      	ldr	r0, [sp, #4]
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b933      	cbnz	r3, 800441c <_free_r+0x30>
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004418:	f000 b8fe 	b.w	8004618 <__malloc_unlock>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d908      	bls.n	8004432 <_free_r+0x46>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf01      	itttt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	e7ed      	b.n	800440e <_free_r+0x22>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x50>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x46>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x70>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1e0      	bne.n	8004412 <_free_r+0x26>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	4421      	add	r1, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	e7da      	b.n	8004412 <_free_r+0x26>
 800445c:	d902      	bls.n	8004464 <_free_r+0x78>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d6      	b.n	8004412 <_free_r+0x26>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7ca      	b.n	8004412 <_free_r+0x26>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	200001d4 	.word	0x200001d4

08004484 <sbrk_aligned>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4e0e      	ldr	r6, [pc, #56]	; (80044c0 <sbrk_aligned+0x3c>)
 8004488:	460c      	mov	r4, r1
 800448a:	6831      	ldr	r1, [r6, #0]
 800448c:	4605      	mov	r5, r0
 800448e:	b911      	cbnz	r1, 8004496 <sbrk_aligned+0x12>
 8004490:	f000 f88c 	bl	80045ac <_sbrk_r>
 8004494:	6030      	str	r0, [r6, #0]
 8004496:	4621      	mov	r1, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f887 	bl	80045ac <_sbrk_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d00a      	beq.n	80044b8 <sbrk_aligned+0x34>
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d007      	beq.n	80044bc <sbrk_aligned+0x38>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 f87c 	bl	80045ac <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d101      	bne.n	80044bc <sbrk_aligned+0x38>
 80044b8:	f04f 34ff 	mov.w	r4, #4294967295
 80044bc:	4620      	mov	r0, r4
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	200001d8 	.word	0x200001d8

080044c4 <_malloc_r>:
 80044c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	1ccd      	adds	r5, r1, #3
 80044ca:	f025 0503 	bic.w	r5, r5, #3
 80044ce:	3508      	adds	r5, #8
 80044d0:	2d0c      	cmp	r5, #12
 80044d2:	bf38      	it	cc
 80044d4:	250c      	movcc	r5, #12
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	4607      	mov	r7, r0
 80044da:	db01      	blt.n	80044e0 <_malloc_r+0x1c>
 80044dc:	42a9      	cmp	r1, r5
 80044de:	d905      	bls.n	80044ec <_malloc_r+0x28>
 80044e0:	230c      	movs	r3, #12
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	2600      	movs	r6, #0
 80044e6:	4630      	mov	r0, r6
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ec:	4e2e      	ldr	r6, [pc, #184]	; (80045a8 <_malloc_r+0xe4>)
 80044ee:	f000 f88d 	bl	800460c <__malloc_lock>
 80044f2:	6833      	ldr	r3, [r6, #0]
 80044f4:	461c      	mov	r4, r3
 80044f6:	bb34      	cbnz	r4, 8004546 <_malloc_r+0x82>
 80044f8:	4629      	mov	r1, r5
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ffc2 	bl	8004484 <sbrk_aligned>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	4604      	mov	r4, r0
 8004504:	d14d      	bne.n	80045a2 <_malloc_r+0xde>
 8004506:	6834      	ldr	r4, [r6, #0]
 8004508:	4626      	mov	r6, r4
 800450a:	2e00      	cmp	r6, #0
 800450c:	d140      	bne.n	8004590 <_malloc_r+0xcc>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	4631      	mov	r1, r6
 8004512:	4638      	mov	r0, r7
 8004514:	eb04 0803 	add.w	r8, r4, r3
 8004518:	f000 f848 	bl	80045ac <_sbrk_r>
 800451c:	4580      	cmp	r8, r0
 800451e:	d13a      	bne.n	8004596 <_malloc_r+0xd2>
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	3503      	adds	r5, #3
 8004524:	1a6d      	subs	r5, r5, r1
 8004526:	f025 0503 	bic.w	r5, r5, #3
 800452a:	3508      	adds	r5, #8
 800452c:	2d0c      	cmp	r5, #12
 800452e:	bf38      	it	cc
 8004530:	250c      	movcc	r5, #12
 8004532:	4629      	mov	r1, r5
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ffa5 	bl	8004484 <sbrk_aligned>
 800453a:	3001      	adds	r0, #1
 800453c:	d02b      	beq.n	8004596 <_malloc_r+0xd2>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	442b      	add	r3, r5
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	e00e      	b.n	8004564 <_malloc_r+0xa0>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	1b52      	subs	r2, r2, r5
 800454a:	d41e      	bmi.n	800458a <_malloc_r+0xc6>
 800454c:	2a0b      	cmp	r2, #11
 800454e:	d916      	bls.n	800457e <_malloc_r+0xba>
 8004550:	1961      	adds	r1, r4, r5
 8004552:	42a3      	cmp	r3, r4
 8004554:	6025      	str	r5, [r4, #0]
 8004556:	bf18      	it	ne
 8004558:	6059      	strne	r1, [r3, #4]
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	bf08      	it	eq
 800455e:	6031      	streq	r1, [r6, #0]
 8004560:	5162      	str	r2, [r4, r5]
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	4638      	mov	r0, r7
 8004566:	f104 060b 	add.w	r6, r4, #11
 800456a:	f000 f855 	bl	8004618 <__malloc_unlock>
 800456e:	f026 0607 	bic.w	r6, r6, #7
 8004572:	1d23      	adds	r3, r4, #4
 8004574:	1af2      	subs	r2, r6, r3
 8004576:	d0b6      	beq.n	80044e6 <_malloc_r+0x22>
 8004578:	1b9b      	subs	r3, r3, r6
 800457a:	50a3      	str	r3, [r4, r2]
 800457c:	e7b3      	b.n	80044e6 <_malloc_r+0x22>
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	42a3      	cmp	r3, r4
 8004582:	bf0c      	ite	eq
 8004584:	6032      	streq	r2, [r6, #0]
 8004586:	605a      	strne	r2, [r3, #4]
 8004588:	e7ec      	b.n	8004564 <_malloc_r+0xa0>
 800458a:	4623      	mov	r3, r4
 800458c:	6864      	ldr	r4, [r4, #4]
 800458e:	e7b2      	b.n	80044f6 <_malloc_r+0x32>
 8004590:	4634      	mov	r4, r6
 8004592:	6876      	ldr	r6, [r6, #4]
 8004594:	e7b9      	b.n	800450a <_malloc_r+0x46>
 8004596:	230c      	movs	r3, #12
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4638      	mov	r0, r7
 800459c:	f000 f83c 	bl	8004618 <__malloc_unlock>
 80045a0:	e7a1      	b.n	80044e6 <_malloc_r+0x22>
 80045a2:	6025      	str	r5, [r4, #0]
 80045a4:	e7de      	b.n	8004564 <_malloc_r+0xa0>
 80045a6:	bf00      	nop
 80045a8:	200001d4 	.word	0x200001d4

080045ac <_sbrk_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d06      	ldr	r5, [pc, #24]	; (80045c8 <_sbrk_r+0x1c>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	f7fd f998 	bl	80018ec <_sbrk>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_sbrk_r+0x1a>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_sbrk_r+0x1a>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200001dc 	.word	0x200001dc

080045cc <siprintf>:
 80045cc:	b40e      	push	{r1, r2, r3}
 80045ce:	b500      	push	{lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	ab1d      	add	r3, sp, #116	; 0x74
 80045d4:	9002      	str	r0, [sp, #8]
 80045d6:	9006      	str	r0, [sp, #24]
 80045d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045dc:	4809      	ldr	r0, [pc, #36]	; (8004604 <siprintf+0x38>)
 80045de:	9107      	str	r1, [sp, #28]
 80045e0:	9104      	str	r1, [sp, #16]
 80045e2:	4909      	ldr	r1, [pc, #36]	; (8004608 <siprintf+0x3c>)
 80045e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	a902      	add	r1, sp, #8
 80045f0:	f000 f874 	bl	80046dc <_svfiprintf_r>
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	b01c      	add	sp, #112	; 0x70
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b003      	add	sp, #12
 8004602:	4770      	bx	lr
 8004604:	20000010 	.word	0x20000010
 8004608:	ffff0208 	.word	0xffff0208

0800460c <__malloc_lock>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__malloc_lock+0x8>)
 800460e:	f000 baf9 	b.w	8004c04 <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	200001e0 	.word	0x200001e0

08004618 <__malloc_unlock>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__malloc_unlock+0x8>)
 800461a:	f000 baf4 	b.w	8004c06 <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	200001e0 	.word	0x200001e0

08004624 <__ssputs_r>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	688e      	ldr	r6, [r1, #8]
 800462a:	429e      	cmp	r6, r3
 800462c:	4682      	mov	sl, r0
 800462e:	460c      	mov	r4, r1
 8004630:	4690      	mov	r8, r2
 8004632:	461f      	mov	r7, r3
 8004634:	d838      	bhi.n	80046a8 <__ssputs_r+0x84>
 8004636:	898a      	ldrh	r2, [r1, #12]
 8004638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800463c:	d032      	beq.n	80046a4 <__ssputs_r+0x80>
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	6909      	ldr	r1, [r1, #16]
 8004642:	eba5 0901 	sub.w	r9, r5, r1
 8004646:	6965      	ldr	r5, [r4, #20]
 8004648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800464c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004650:	3301      	adds	r3, #1
 8004652:	444b      	add	r3, r9
 8004654:	106d      	asrs	r5, r5, #1
 8004656:	429d      	cmp	r5, r3
 8004658:	bf38      	it	cc
 800465a:	461d      	movcc	r5, r3
 800465c:	0553      	lsls	r3, r2, #21
 800465e:	d531      	bpl.n	80046c4 <__ssputs_r+0xa0>
 8004660:	4629      	mov	r1, r5
 8004662:	f7ff ff2f 	bl	80044c4 <_malloc_r>
 8004666:	4606      	mov	r6, r0
 8004668:	b950      	cbnz	r0, 8004680 <__ssputs_r+0x5c>
 800466a:	230c      	movs	r3, #12
 800466c:	f8ca 3000 	str.w	r3, [sl]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004680:	6921      	ldr	r1, [r4, #16]
 8004682:	464a      	mov	r2, r9
 8004684:	f000 fac0 	bl	8004c08 <memcpy>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800468e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	6126      	str	r6, [r4, #16]
 8004696:	6165      	str	r5, [r4, #20]
 8004698:	444e      	add	r6, r9
 800469a:	eba5 0509 	sub.w	r5, r5, r9
 800469e:	6026      	str	r6, [r4, #0]
 80046a0:	60a5      	str	r5, [r4, #8]
 80046a2:	463e      	mov	r6, r7
 80046a4:	42be      	cmp	r6, r7
 80046a6:	d900      	bls.n	80046aa <__ssputs_r+0x86>
 80046a8:	463e      	mov	r6, r7
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	4632      	mov	r2, r6
 80046ae:	4641      	mov	r1, r8
 80046b0:	f000 fab8 	bl	8004c24 <memmove>
 80046b4:	68a3      	ldr	r3, [r4, #8]
 80046b6:	1b9b      	subs	r3, r3, r6
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	4433      	add	r3, r6
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	2000      	movs	r0, #0
 80046c2:	e7db      	b.n	800467c <__ssputs_r+0x58>
 80046c4:	462a      	mov	r2, r5
 80046c6:	f000 fac7 	bl	8004c58 <_realloc_r>
 80046ca:	4606      	mov	r6, r0
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d1e1      	bne.n	8004694 <__ssputs_r+0x70>
 80046d0:	6921      	ldr	r1, [r4, #16]
 80046d2:	4650      	mov	r0, sl
 80046d4:	f7ff fe8a 	bl	80043ec <_free_r>
 80046d8:	e7c7      	b.n	800466a <__ssputs_r+0x46>
	...

080046dc <_svfiprintf_r>:
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	4698      	mov	r8, r3
 80046e2:	898b      	ldrh	r3, [r1, #12]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	b09d      	sub	sp, #116	; 0x74
 80046e8:	4607      	mov	r7, r0
 80046ea:	460d      	mov	r5, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	d50e      	bpl.n	800470e <_svfiprintf_r+0x32>
 80046f0:	690b      	ldr	r3, [r1, #16]
 80046f2:	b963      	cbnz	r3, 800470e <_svfiprintf_r+0x32>
 80046f4:	2140      	movs	r1, #64	; 0x40
 80046f6:	f7ff fee5 	bl	80044c4 <_malloc_r>
 80046fa:	6028      	str	r0, [r5, #0]
 80046fc:	6128      	str	r0, [r5, #16]
 80046fe:	b920      	cbnz	r0, 800470a <_svfiprintf_r+0x2e>
 8004700:	230c      	movs	r3, #12
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e0d1      	b.n	80048ae <_svfiprintf_r+0x1d2>
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	616b      	str	r3, [r5, #20]
 800470e:	2300      	movs	r3, #0
 8004710:	9309      	str	r3, [sp, #36]	; 0x24
 8004712:	2320      	movs	r3, #32
 8004714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004718:	f8cd 800c 	str.w	r8, [sp, #12]
 800471c:	2330      	movs	r3, #48	; 0x30
 800471e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048c8 <_svfiprintf_r+0x1ec>
 8004722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004726:	f04f 0901 	mov.w	r9, #1
 800472a:	4623      	mov	r3, r4
 800472c:	469a      	mov	sl, r3
 800472e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004732:	b10a      	cbz	r2, 8004738 <_svfiprintf_r+0x5c>
 8004734:	2a25      	cmp	r2, #37	; 0x25
 8004736:	d1f9      	bne.n	800472c <_svfiprintf_r+0x50>
 8004738:	ebba 0b04 	subs.w	fp, sl, r4
 800473c:	d00b      	beq.n	8004756 <_svfiprintf_r+0x7a>
 800473e:	465b      	mov	r3, fp
 8004740:	4622      	mov	r2, r4
 8004742:	4629      	mov	r1, r5
 8004744:	4638      	mov	r0, r7
 8004746:	f7ff ff6d 	bl	8004624 <__ssputs_r>
 800474a:	3001      	adds	r0, #1
 800474c:	f000 80aa 	beq.w	80048a4 <_svfiprintf_r+0x1c8>
 8004750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004752:	445a      	add	r2, fp
 8004754:	9209      	str	r2, [sp, #36]	; 0x24
 8004756:	f89a 3000 	ldrb.w	r3, [sl]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80a2 	beq.w	80048a4 <_svfiprintf_r+0x1c8>
 8004760:	2300      	movs	r3, #0
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800476a:	f10a 0a01 	add.w	sl, sl, #1
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	9307      	str	r3, [sp, #28]
 8004772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004776:	931a      	str	r3, [sp, #104]	; 0x68
 8004778:	4654      	mov	r4, sl
 800477a:	2205      	movs	r2, #5
 800477c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004780:	4851      	ldr	r0, [pc, #324]	; (80048c8 <_svfiprintf_r+0x1ec>)
 8004782:	f7fb fd4d 	bl	8000220 <memchr>
 8004786:	9a04      	ldr	r2, [sp, #16]
 8004788:	b9d8      	cbnz	r0, 80047c2 <_svfiprintf_r+0xe6>
 800478a:	06d0      	lsls	r0, r2, #27
 800478c:	bf44      	itt	mi
 800478e:	2320      	movmi	r3, #32
 8004790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004794:	0711      	lsls	r1, r2, #28
 8004796:	bf44      	itt	mi
 8004798:	232b      	movmi	r3, #43	; 0x2b
 800479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479e:	f89a 3000 	ldrb.w	r3, [sl]
 80047a2:	2b2a      	cmp	r3, #42	; 0x2a
 80047a4:	d015      	beq.n	80047d2 <_svfiprintf_r+0xf6>
 80047a6:	9a07      	ldr	r2, [sp, #28]
 80047a8:	4654      	mov	r4, sl
 80047aa:	2000      	movs	r0, #0
 80047ac:	f04f 0c0a 	mov.w	ip, #10
 80047b0:	4621      	mov	r1, r4
 80047b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b6:	3b30      	subs	r3, #48	; 0x30
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d94e      	bls.n	800485a <_svfiprintf_r+0x17e>
 80047bc:	b1b0      	cbz	r0, 80047ec <_svfiprintf_r+0x110>
 80047be:	9207      	str	r2, [sp, #28]
 80047c0:	e014      	b.n	80047ec <_svfiprintf_r+0x110>
 80047c2:	eba0 0308 	sub.w	r3, r0, r8
 80047c6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	46a2      	mov	sl, r4
 80047d0:	e7d2      	b.n	8004778 <_svfiprintf_r+0x9c>
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	1d19      	adds	r1, r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	9103      	str	r1, [sp, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfbb      	ittet	lt
 80047de:	425b      	neglt	r3, r3
 80047e0:	f042 0202 	orrlt.w	r2, r2, #2
 80047e4:	9307      	strge	r3, [sp, #28]
 80047e6:	9307      	strlt	r3, [sp, #28]
 80047e8:	bfb8      	it	lt
 80047ea:	9204      	strlt	r2, [sp, #16]
 80047ec:	7823      	ldrb	r3, [r4, #0]
 80047ee:	2b2e      	cmp	r3, #46	; 0x2e
 80047f0:	d10c      	bne.n	800480c <_svfiprintf_r+0x130>
 80047f2:	7863      	ldrb	r3, [r4, #1]
 80047f4:	2b2a      	cmp	r3, #42	; 0x2a
 80047f6:	d135      	bne.n	8004864 <_svfiprintf_r+0x188>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	9203      	str	r2, [sp, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	bfb8      	it	lt
 8004804:	f04f 33ff 	movlt.w	r3, #4294967295
 8004808:	3402      	adds	r4, #2
 800480a:	9305      	str	r3, [sp, #20]
 800480c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048d8 <_svfiprintf_r+0x1fc>
 8004810:	7821      	ldrb	r1, [r4, #0]
 8004812:	2203      	movs	r2, #3
 8004814:	4650      	mov	r0, sl
 8004816:	f7fb fd03 	bl	8000220 <memchr>
 800481a:	b140      	cbz	r0, 800482e <_svfiprintf_r+0x152>
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	eba0 000a 	sub.w	r0, r0, sl
 8004822:	fa03 f000 	lsl.w	r0, r3, r0
 8004826:	9b04      	ldr	r3, [sp, #16]
 8004828:	4303      	orrs	r3, r0
 800482a:	3401      	adds	r4, #1
 800482c:	9304      	str	r3, [sp, #16]
 800482e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004832:	4826      	ldr	r0, [pc, #152]	; (80048cc <_svfiprintf_r+0x1f0>)
 8004834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004838:	2206      	movs	r2, #6
 800483a:	f7fb fcf1 	bl	8000220 <memchr>
 800483e:	2800      	cmp	r0, #0
 8004840:	d038      	beq.n	80048b4 <_svfiprintf_r+0x1d8>
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <_svfiprintf_r+0x1f4>)
 8004844:	bb1b      	cbnz	r3, 800488e <_svfiprintf_r+0x1b2>
 8004846:	9b03      	ldr	r3, [sp, #12]
 8004848:	3307      	adds	r3, #7
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	3308      	adds	r3, #8
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004854:	4433      	add	r3, r6
 8004856:	9309      	str	r3, [sp, #36]	; 0x24
 8004858:	e767      	b.n	800472a <_svfiprintf_r+0x4e>
 800485a:	fb0c 3202 	mla	r2, ip, r2, r3
 800485e:	460c      	mov	r4, r1
 8004860:	2001      	movs	r0, #1
 8004862:	e7a5      	b.n	80047b0 <_svfiprintf_r+0xd4>
 8004864:	2300      	movs	r3, #0
 8004866:	3401      	adds	r4, #1
 8004868:	9305      	str	r3, [sp, #20]
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0c0a 	mov.w	ip, #10
 8004870:	4620      	mov	r0, r4
 8004872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004876:	3a30      	subs	r2, #48	; 0x30
 8004878:	2a09      	cmp	r2, #9
 800487a:	d903      	bls.n	8004884 <_svfiprintf_r+0x1a8>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0c5      	beq.n	800480c <_svfiprintf_r+0x130>
 8004880:	9105      	str	r1, [sp, #20]
 8004882:	e7c3      	b.n	800480c <_svfiprintf_r+0x130>
 8004884:	fb0c 2101 	mla	r1, ip, r1, r2
 8004888:	4604      	mov	r4, r0
 800488a:	2301      	movs	r3, #1
 800488c:	e7f0      	b.n	8004870 <_svfiprintf_r+0x194>
 800488e:	ab03      	add	r3, sp, #12
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	462a      	mov	r2, r5
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <_svfiprintf_r+0x1f8>)
 8004896:	a904      	add	r1, sp, #16
 8004898:	4638      	mov	r0, r7
 800489a:	f3af 8000 	nop.w
 800489e:	1c42      	adds	r2, r0, #1
 80048a0:	4606      	mov	r6, r0
 80048a2:	d1d6      	bne.n	8004852 <_svfiprintf_r+0x176>
 80048a4:	89ab      	ldrh	r3, [r5, #12]
 80048a6:	065b      	lsls	r3, r3, #25
 80048a8:	f53f af2c 	bmi.w	8004704 <_svfiprintf_r+0x28>
 80048ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ae:	b01d      	add	sp, #116	; 0x74
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	ab03      	add	r3, sp, #12
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	462a      	mov	r2, r5
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <_svfiprintf_r+0x1f8>)
 80048bc:	a904      	add	r1, sp, #16
 80048be:	4638      	mov	r0, r7
 80048c0:	f000 f87a 	bl	80049b8 <_printf_i>
 80048c4:	e7eb      	b.n	800489e <_svfiprintf_r+0x1c2>
 80048c6:	bf00      	nop
 80048c8:	08004ee0 	.word	0x08004ee0
 80048cc:	08004eea 	.word	0x08004eea
 80048d0:	00000000 	.word	0x00000000
 80048d4:	08004625 	.word	0x08004625
 80048d8:	08004ee6 	.word	0x08004ee6

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4699      	mov	r9, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfb8      	it	lt
 80048f0:	4613      	movlt	r3, r2
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f8:	4607      	mov	r7, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc26      	bgt.n	8004972 <_printf_common+0x96>
 8004924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004928:	1e13      	subs	r3, r2, #0
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d42b      	bmi.n	800498c <_printf_common+0xb0>
 8004934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004938:	4649      	mov	r1, r9
 800493a:	4638      	mov	r0, r7
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d01e      	beq.n	8004980 <_printf_common+0xa4>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	68e5      	ldr	r5, [r4, #12]
 8004946:	6832      	ldr	r2, [r6, #0]
 8004948:	f003 0306 	and.w	r3, r3, #6
 800494c:	2b04      	cmp	r3, #4
 800494e:	bf08      	it	eq
 8004950:	1aad      	subeq	r5, r5, r2
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	bf0c      	ite	eq
 8004958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800495c:	2500      	movne	r5, #0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfc4      	itt	gt
 8004962:	1a9b      	subgt	r3, r3, r2
 8004964:	18ed      	addgt	r5, r5, r3
 8004966:	2600      	movs	r6, #0
 8004968:	341a      	adds	r4, #26
 800496a:	42b5      	cmp	r5, r6
 800496c:	d11a      	bne.n	80049a4 <_printf_common+0xc8>
 800496e:	2000      	movs	r0, #0
 8004970:	e008      	b.n	8004984 <_printf_common+0xa8>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4649      	mov	r1, r9
 8004978:	4638      	mov	r0, r7
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d103      	bne.n	8004988 <_printf_common+0xac>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004988:	3501      	adds	r5, #1
 800498a:	e7c6      	b.n	800491a <_printf_common+0x3e>
 800498c:	18e1      	adds	r1, r4, r3
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	2030      	movs	r0, #48	; 0x30
 8004992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004996:	4422      	add	r2, r4
 8004998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a0:	3302      	adds	r3, #2
 80049a2:	e7c7      	b.n	8004934 <_printf_common+0x58>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4622      	mov	r2, r4
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0e6      	beq.n	8004980 <_printf_common+0xa4>
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7d9      	b.n	800496a <_printf_common+0x8e>
	...

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4691      	mov	r9, r2
 80049c4:	4680      	mov	r8, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	469a      	mov	sl, r3
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d8 	beq.w	8004b8a <_printf_i+0x1d2>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80a3 	beq.w	8004b26 <_printf_i+0x16e>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b71 	.word	0x08004b71
 8004a28:	08004a95 	.word	0x08004a95
 8004a2c:	08004b53 	.word	0x08004b53
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b93 	.word	0x08004b93
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b5b 	.word	0x08004b5b
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a3      	b.n	8004bac <_printf_i+0x1f4>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	f101 0304 	add.w	r3, r1, #4
 8004a6e:	d50a      	bpl.n	8004a86 <_printf_i+0xce>
 8004a70:	680e      	ldr	r6, [r1, #0]
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	2e00      	cmp	r6, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xc8>
 8004a78:	232d      	movs	r3, #45	; 0x2d
 8004a7a:	4276      	negs	r6, r6
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	485e      	ldr	r0, [pc, #376]	; (8004bfc <_printf_i+0x244>)
 8004a82:	230a      	movs	r3, #10
 8004a84:	e019      	b.n	8004aba <_printf_i+0x102>
 8004a86:	680e      	ldr	r6, [r1, #0]
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a8e:	bf18      	it	ne
 8004a90:	b236      	sxthne	r6, r6
 8004a92:	e7ef      	b.n	8004a74 <_printf_i+0xbc>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	6029      	str	r1, [r5, #0]
 8004a9c:	0601      	lsls	r1, r0, #24
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_i+0xec>
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <_printf_i+0xf2>
 8004aa4:	0646      	lsls	r6, r0, #25
 8004aa6:	d5fb      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004aa8:	881e      	ldrh	r6, [r3, #0]
 8004aaa:	4854      	ldr	r0, [pc, #336]	; (8004bfc <_printf_i+0x244>)
 8004aac:	2f6f      	cmp	r7, #111	; 0x6f
 8004aae:	bf0c      	ite	eq
 8004ab0:	2308      	moveq	r3, #8
 8004ab2:	230a      	movne	r3, #10
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aba:	6865      	ldr	r5, [r4, #4]
 8004abc:	60a5      	str	r5, [r4, #8]
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	bfa2      	ittt	ge
 8004ac2:	6821      	ldrge	r1, [r4, #0]
 8004ac4:	f021 0104 	bicge.w	r1, r1, #4
 8004ac8:	6021      	strge	r1, [r4, #0]
 8004aca:	b90e      	cbnz	r6, 8004ad0 <_printf_i+0x118>
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	d04d      	beq.n	8004b6c <_printf_i+0x1b4>
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8004ada:	5dc7      	ldrb	r7, [r0, r7]
 8004adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae0:	4637      	mov	r7, r6
 8004ae2:	42bb      	cmp	r3, r7
 8004ae4:	460e      	mov	r6, r1
 8004ae6:	d9f4      	bls.n	8004ad2 <_printf_i+0x11a>
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10b      	bne.n	8004b04 <_printf_i+0x14c>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07de      	lsls	r6, r3, #31
 8004af0:	d508      	bpl.n	8004b04 <_printf_i+0x14c>
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6861      	ldr	r1, [r4, #4]
 8004af6:	4299      	cmp	r1, r3
 8004af8:	bfde      	ittt	le
 8004afa:	2330      	movle	r3, #48	; 0x30
 8004afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b04:	1b52      	subs	r2, r2, r5
 8004b06:	6122      	str	r2, [r4, #16]
 8004b08:	f8cd a000 	str.w	sl, [sp]
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	aa03      	add	r2, sp, #12
 8004b10:	4621      	mov	r1, r4
 8004b12:	4640      	mov	r0, r8
 8004b14:	f7ff fee2 	bl	80048dc <_printf_common>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d14c      	bne.n	8004bb6 <_printf_i+0x1fe>
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	b004      	add	sp, #16
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	4835      	ldr	r0, [pc, #212]	; (8004bfc <_printf_i+0x244>)
 8004b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b2c:	6829      	ldr	r1, [r5, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b34:	6029      	str	r1, [r5, #0]
 8004b36:	061d      	lsls	r5, r3, #24
 8004b38:	d514      	bpl.n	8004b64 <_printf_i+0x1ac>
 8004b3a:	07df      	lsls	r7, r3, #31
 8004b3c:	bf44      	itt	mi
 8004b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b42:	6023      	strmi	r3, [r4, #0]
 8004b44:	b91e      	cbnz	r6, 8004b4e <_printf_i+0x196>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f023 0320 	bic.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	2310      	movs	r3, #16
 8004b50:	e7b0      	b.n	8004ab4 <_printf_i+0xfc>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f043 0320 	orr.w	r3, r3, #32
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	2378      	movs	r3, #120	; 0x78
 8004b5c:	4828      	ldr	r0, [pc, #160]	; (8004c00 <_printf_i+0x248>)
 8004b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b62:	e7e3      	b.n	8004b2c <_printf_i+0x174>
 8004b64:	0659      	lsls	r1, r3, #25
 8004b66:	bf48      	it	mi
 8004b68:	b2b6      	uxthmi	r6, r6
 8004b6a:	e7e6      	b.n	8004b3a <_printf_i+0x182>
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	e7bb      	b.n	8004ae8 <_printf_i+0x130>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6826      	ldr	r6, [r4, #0]
 8004b74:	6961      	ldr	r1, [r4, #20]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6028      	str	r0, [r5, #0]
 8004b7a:	0635      	lsls	r5, r6, #24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	d501      	bpl.n	8004b84 <_printf_i+0x1cc>
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <_printf_i+0x1d2>
 8004b84:	0670      	lsls	r0, r6, #25
 8004b86:	d5fb      	bpl.n	8004b80 <_printf_i+0x1c8>
 8004b88:	8019      	strh	r1, [r3, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	4615      	mov	r5, r2
 8004b90:	e7ba      	b.n	8004b08 <_printf_i+0x150>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	602a      	str	r2, [r5, #0]
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7fb fb3e 	bl	8000220 <memchr>
 8004ba4:	b108      	cbz	r0, 8004baa <_printf_i+0x1f2>
 8004ba6:	1b40      	subs	r0, r0, r5
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb4:	e7a8      	b.n	8004b08 <_printf_i+0x150>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d0ab      	beq.n	8004b1c <_printf_i+0x164>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	079b      	lsls	r3, r3, #30
 8004bc8:	d413      	bmi.n	8004bf2 <_printf_i+0x23a>
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	bfb8      	it	lt
 8004bd2:	4618      	movlt	r0, r3
 8004bd4:	e7a4      	b.n	8004b20 <_printf_i+0x168>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d09b      	beq.n	8004b1c <_printf_i+0x164>
 8004be4:	3501      	adds	r5, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	9903      	ldr	r1, [sp, #12]
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dcf2      	bgt.n	8004bd6 <_printf_i+0x21e>
 8004bf0:	e7eb      	b.n	8004bca <_printf_i+0x212>
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	f104 0619 	add.w	r6, r4, #25
 8004bf8:	e7f5      	b.n	8004be6 <_printf_i+0x22e>
 8004bfa:	bf00      	nop
 8004bfc:	08004ef1 	.word	0x08004ef1
 8004c00:	08004f02 	.word	0x08004f02

08004c04 <__retarget_lock_acquire_recursive>:
 8004c04:	4770      	bx	lr

08004c06 <__retarget_lock_release_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <memcpy>:
 8004c08:	440a      	add	r2, r1
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c10:	d100      	bne.n	8004c14 <memcpy+0xc>
 8004c12:	4770      	bx	lr
 8004c14:	b510      	push	{r4, lr}
 8004c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c1e:	4291      	cmp	r1, r2
 8004c20:	d1f9      	bne.n	8004c16 <memcpy+0xe>
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <memmove>:
 8004c24:	4288      	cmp	r0, r1
 8004c26:	b510      	push	{r4, lr}
 8004c28:	eb01 0402 	add.w	r4, r1, r2
 8004c2c:	d902      	bls.n	8004c34 <memmove+0x10>
 8004c2e:	4284      	cmp	r4, r0
 8004c30:	4623      	mov	r3, r4
 8004c32:	d807      	bhi.n	8004c44 <memmove+0x20>
 8004c34:	1e43      	subs	r3, r0, #1
 8004c36:	42a1      	cmp	r1, r4
 8004c38:	d008      	beq.n	8004c4c <memmove+0x28>
 8004c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c42:	e7f8      	b.n	8004c36 <memmove+0x12>
 8004c44:	4402      	add	r2, r0
 8004c46:	4601      	mov	r1, r0
 8004c48:	428a      	cmp	r2, r1
 8004c4a:	d100      	bne.n	8004c4e <memmove+0x2a>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c56:	e7f7      	b.n	8004c48 <memmove+0x24>

08004c58 <_realloc_r>:
 8004c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	4614      	mov	r4, r2
 8004c60:	460e      	mov	r6, r1
 8004c62:	b921      	cbnz	r1, 8004c6e <_realloc_r+0x16>
 8004c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f7ff bc2b 	b.w	80044c4 <_malloc_r>
 8004c6e:	b92a      	cbnz	r2, 8004c7c <_realloc_r+0x24>
 8004c70:	f7ff fbbc 	bl	80043ec <_free_r>
 8004c74:	4625      	mov	r5, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	f000 f81b 	bl	8004cb6 <_malloc_usable_size_r>
 8004c80:	4284      	cmp	r4, r0
 8004c82:	4607      	mov	r7, r0
 8004c84:	d802      	bhi.n	8004c8c <_realloc_r+0x34>
 8004c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c8a:	d812      	bhi.n	8004cb2 <_realloc_r+0x5a>
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7ff fc18 	bl	80044c4 <_malloc_r>
 8004c94:	4605      	mov	r5, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0ed      	beq.n	8004c76 <_realloc_r+0x1e>
 8004c9a:	42bc      	cmp	r4, r7
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	bf28      	it	cs
 8004ca2:	463a      	movcs	r2, r7
 8004ca4:	f7ff ffb0 	bl	8004c08 <memcpy>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fb9e 	bl	80043ec <_free_r>
 8004cb0:	e7e1      	b.n	8004c76 <_realloc_r+0x1e>
 8004cb2:	4635      	mov	r5, r6
 8004cb4:	e7df      	b.n	8004c76 <_realloc_r+0x1e>

08004cb6 <_malloc_usable_size_r>:
 8004cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cba:	1f18      	subs	r0, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bfbc      	itt	lt
 8004cc0:	580b      	ldrlt	r3, [r1, r0]
 8004cc2:	18c0      	addlt	r0, r0, r3
 8004cc4:	4770      	bx	lr
	...

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
