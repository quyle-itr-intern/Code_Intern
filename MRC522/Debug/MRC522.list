
MRC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f88  08004f88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08005000  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005000  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e26  00000000  00000000  0002ca92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f8b  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f034  00000000  00000000  00051b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb90c  00000000  00000000  00060bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c4db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  0012c52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ef0 	.word	0x08004ef0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ef0 	.word	0x08004ef0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <bsp_gpio_set_pin>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bsp_gpio_set_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(bsp_gpio_port, bsp_gpio_pin, GPIO_PIN_SET);
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 f82e 	bl	8002638 <HAL_GPIO_WritePin>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <bsp_gpio_reset_pin>:

void bsp_gpio_reset_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(bsp_gpio_port, bsp_gpio_pin, GPIO_PIN_RESET);
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f002 f81e 	bl	8002638 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <bsp_spi1_init>:
/* Function definitions ----------------------------------------------- */

/* ===================================== BSP spi INIT ===================================== */

bsp_spi_status_t bsp_spi1_init(SPI_HandleTypeDef *hspi1)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if (bsp_spi_init.bsp_spi1_init)
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <bsp_spi1_init+0x48>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <bsp_spi1_init+0x14>
    return bsp_spi_success;
 8000614:	2301      	movs	r3, #1
 8000616:	e012      	b.n	800063e <bsp_spi1_init+0x3a>
  /* Check the spi handle allocation */
  if (hspi1 == NULL)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <bsp_spi1_init+0x1e>
    return bsp_spi_error;
 800061e:	2300      	movs	r3, #0
 8000620:	e00d      	b.n	800063e <bsp_spi1_init+0x3a>
  if (hspi1->Instance != SPI1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <bsp_spi1_init+0x4c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d001      	beq.n	8000630 <bsp_spi1_init+0x2c>
    return bsp_spi_invalid_parameter;
 800062c:	2304      	movs	r3, #4
 800062e:	e006      	b.n	800063e <bsp_spi1_init+0x3a>
  bsp_spi1                   = hspi1;
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <bsp_spi1_init+0x50>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  bsp_spi_init.bsp_spi1_init = 1;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <bsp_spi1_init+0x48>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
  return bsp_spi_success;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	40013000 	.word	0x40013000
 8000654:	2000008c 	.word	0x2000008c

08000658 <bsp_spi2_init>:

bsp_spi_status_t bsp_spi2_init(SPI_HandleTypeDef *hspi2)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if (bsp_spi_init.bsp_spi2_init)
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <bsp_spi2_init+0x48>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <bsp_spi2_init+0x14>
    return bsp_spi_success;
 8000668:	2301      	movs	r3, #1
 800066a:	e012      	b.n	8000692 <bsp_spi2_init+0x3a>
  /* Check the spi handle allocation */
  if (hspi2 == NULL)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <bsp_spi2_init+0x1e>
    return bsp_spi_error;
 8000672:	2300      	movs	r3, #0
 8000674:	e00d      	b.n	8000692 <bsp_spi2_init+0x3a>
  if (hspi2->Instance != SPI2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <bsp_spi2_init+0x4c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d001      	beq.n	8000684 <bsp_spi2_init+0x2c>
    return bsp_spi_invalid_parameter;
 8000680:	2304      	movs	r3, #4
 8000682:	e006      	b.n	8000692 <bsp_spi2_init+0x3a>
  bsp_spi2                   = hspi2;
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <bsp_spi2_init+0x50>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6013      	str	r3, [r2, #0]
  bsp_spi_init.bsp_spi2_init = 1;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <bsp_spi2_init+0x48>)
 800068c:	2201      	movs	r2, #1
 800068e:	705a      	strb	r2, [r3, #1]
  return bsp_spi_success;
 8000690:	2301      	movs	r3, #1
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000098 	.word	0x20000098
 80006a4:	40003800 	.word	0x40003800
 80006a8:	20000090 	.word	0x20000090

080006ac <bsp_spi3_init>:

bsp_spi_status_t bsp_spi3_init(SPI_HandleTypeDef *hspi3)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if (bsp_spi_init.bsp_spi3_init)
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <bsp_spi3_init+0x48>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <bsp_spi3_init+0x14>
    return bsp_spi_success;
 80006bc:	2301      	movs	r3, #1
 80006be:	e012      	b.n	80006e6 <bsp_spi3_init+0x3a>
  /* Check the spi handle allocation */
  if (hspi3 == NULL)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <bsp_spi3_init+0x1e>
    return bsp_spi_error;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e00d      	b.n	80006e6 <bsp_spi3_init+0x3a>
  if (hspi3->Instance != SPI3)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <bsp_spi3_init+0x4c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d001      	beq.n	80006d8 <bsp_spi3_init+0x2c>
    return bsp_spi_invalid_parameter;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e006      	b.n	80006e6 <bsp_spi3_init+0x3a>
  bsp_spi3                   = hspi3;
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <bsp_spi3_init+0x50>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  bsp_spi_init.bsp_spi3_init = 1;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <bsp_spi3_init+0x48>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	709a      	strb	r2, [r3, #2]
  return bsp_spi_success;
 80006e4:	2301      	movs	r3, #1
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000098 	.word	0x20000098
 80006f8:	40003c00 	.word	0x40003c00
 80006fc:	20000094 	.word	0x20000094

08000700 <bsp_spi1_write>:

/* ===================================== BSP SPI1 READ/WRITE ===================================== */

bsp_spi_status_t bsp_spi1_write(uint8_t reg_write, uint8_t data_write)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi1_init);
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <bsp_spi1_write+0x7c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <bsp_spi1_write+0x1c>
 8000718:	2303      	movs	r3, #3
 800071a:	e02a      	b.n	8000772 <bsp_spi1_write+0x72>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi1_busy);
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <bsp_spi1_write+0x80>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <bsp_spi1_write+0x28>
 8000724:	2302      	movs	r3, #2
 8000726:	e024      	b.n	8000772 <bsp_spi1_write+0x72>

  /* SPI1 Running */
  bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_LOCK;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <bsp_spi1_write+0x80>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi1, &reg_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <bsp_spi1_write+0x84>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	1df9      	adds	r1, r7, #7
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2201      	movs	r2, #1
 8000738:	f002 fe59 	bl	80033ee <HAL_SPI_Transmit>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d104      	bne.n	800074c <bsp_spi1_write+0x4c>
  {
    /* SPI1 Stop */
    bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <bsp_spi1_write+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    return bsp_spi_error;
 8000748:	2300      	movs	r3, #0
 800074a:	e012      	b.n	8000772 <bsp_spi1_write+0x72>
  }
  if (HAL_SPI_Transmit(bsp_spi1, &data_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <bsp_spi1_write+0x84>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	1db9      	adds	r1, r7, #6
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	f002 fe4a 	bl	80033ee <HAL_SPI_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d104      	bne.n	800076a <bsp_spi1_write+0x6a>
  {
    /* SPI1 Stop */
    bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <bsp_spi1_write+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    return bsp_spi_error;
 8000766:	2300      	movs	r3, #0
 8000768:	e003      	b.n	8000772 <bsp_spi1_write+0x72>
  }
  /* SPI1 Stop */
  bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <bsp_spi1_write+0x80>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
  return bsp_spi_success;
 8000770:	2301      	movs	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000098 	.word	0x20000098
 8000780:	2000009c 	.word	0x2000009c
 8000784:	2000008c 	.word	0x2000008c

08000788 <bsp_spi1_read>:

bsp_spi_status_t bsp_spi1_read(uint8_t reg_read, uint8_t *data_read)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi1_init);
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <bsp_spi1_read+0x78>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <bsp_spi1_read+0x18>
 800079c:	2303      	movs	r3, #3
 800079e:	e02a      	b.n	80007f6 <bsp_spi1_read+0x6e>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi1_busy);
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <bsp_spi1_read+0x7c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <bsp_spi1_read+0x24>
 80007a8:	2302      	movs	r3, #2
 80007aa:	e024      	b.n	80007f6 <bsp_spi1_read+0x6e>

  /* SPI1 Running */
  bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_LOCK;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <bsp_spi1_read+0x7c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi1, &reg_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <bsp_spi1_read+0x80>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2201      	movs	r2, #1
 80007bc:	f002 fe17 	bl	80033ee <HAL_SPI_Transmit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d104      	bne.n	80007d0 <bsp_spi1_read+0x48>
  {
    /* SPI1 Stop */
    bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <bsp_spi1_read+0x7c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
    return bsp_spi_error;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e012      	b.n	80007f6 <bsp_spi1_read+0x6e>
  }
  /* Receive data */
  if (HAL_SPI_Receive(bsp_spi1, data_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <bsp_spi1_read+0x80>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	2201      	movs	r2, #1
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f002 ff44 	bl	8003666 <HAL_SPI_Receive>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d104      	bne.n	80007ee <bsp_spi1_read+0x66>
  {
    /* SPI1 Stop */
    bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <bsp_spi1_read+0x7c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
    return bsp_spi_error;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e003      	b.n	80007f6 <bsp_spi1_read+0x6e>
  }
  /* SPI1 Stop */
  bsp_spi_is_busy.bsp_spi1_busy = BSP_SPI_UNLOCK;
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <bsp_spi1_read+0x7c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
  return bsp_spi_success;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000098 	.word	0x20000098
 8000804:	2000009c 	.word	0x2000009c
 8000808:	2000008c 	.word	0x2000008c

0800080c <bsp_spi2_write>:

/* ===================================== BSP SPI2 READ/WRITE ===================================== */

bsp_spi_status_t bsp_spi2_write(uint8_t reg_write, uint8_t data_write)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi2_init);
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <bsp_spi2_write+0x7c>)
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d101      	bne.n	8000828 <bsp_spi2_write+0x1c>
 8000824:	2303      	movs	r3, #3
 8000826:	e02a      	b.n	800087e <bsp_spi2_write+0x72>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi2_busy);
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <bsp_spi2_write+0x80>)
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <bsp_spi2_write+0x28>
 8000830:	2302      	movs	r3, #2
 8000832:	e024      	b.n	800087e <bsp_spi2_write+0x72>

  /* SPI2 Running */
  bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_LOCK;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <bsp_spi2_write+0x80>)
 8000836:	2201      	movs	r2, #1
 8000838:	705a      	strb	r2, [r3, #1]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi2, &reg_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <bsp_spi2_write+0x84>)
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	2201      	movs	r2, #1
 8000844:	f002 fdd3 	bl	80033ee <HAL_SPI_Transmit>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d104      	bne.n	8000858 <bsp_spi2_write+0x4c>
  {
    /* SPI2 Stop */
    bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <bsp_spi2_write+0x80>)
 8000850:	2200      	movs	r2, #0
 8000852:	705a      	strb	r2, [r3, #1]
    return bsp_spi_error;
 8000854:	2300      	movs	r3, #0
 8000856:	e012      	b.n	800087e <bsp_spi2_write+0x72>
  }
  if (HAL_SPI_Transmit(bsp_spi2, &data_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <bsp_spi2_write+0x84>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	1db9      	adds	r1, r7, #6
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	2201      	movs	r2, #1
 8000862:	f002 fdc4 	bl	80033ee <HAL_SPI_Transmit>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d104      	bne.n	8000876 <bsp_spi2_write+0x6a>
  {
    /* SPI2 Stop */
    bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <bsp_spi2_write+0x80>)
 800086e:	2200      	movs	r2, #0
 8000870:	705a      	strb	r2, [r3, #1]
    return bsp_spi_error;
 8000872:	2300      	movs	r3, #0
 8000874:	e003      	b.n	800087e <bsp_spi2_write+0x72>
  }
  /* SPI2 Stop */
  bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <bsp_spi2_write+0x80>)
 8000878:	2200      	movs	r2, #0
 800087a:	705a      	strb	r2, [r3, #1]
  return bsp_spi_success;
 800087c:	2301      	movs	r3, #1
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000098 	.word	0x20000098
 800088c:	2000009c 	.word	0x2000009c
 8000890:	20000090 	.word	0x20000090

08000894 <bsp_spi2_read>:

bsp_spi_status_t bsp_spi2_read(uint8_t reg_read, uint8_t *data_read)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi2_init);
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <bsp_spi2_read+0x78>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <bsp_spi2_read+0x18>
 80008a8:	2303      	movs	r3, #3
 80008aa:	e02a      	b.n	8000902 <bsp_spi2_read+0x6e>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi2_busy);
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <bsp_spi2_read+0x7c>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <bsp_spi2_read+0x24>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e024      	b.n	8000902 <bsp_spi2_read+0x6e>

  /* SPI2 Running */
  bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_LOCK;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <bsp_spi2_read+0x7c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	705a      	strb	r2, [r3, #1]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi2, &reg_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <bsp_spi2_read+0x80>)
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	1df9      	adds	r1, r7, #7
 80008c4:	2364      	movs	r3, #100	; 0x64
 80008c6:	2201      	movs	r2, #1
 80008c8:	f002 fd91 	bl	80033ee <HAL_SPI_Transmit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <bsp_spi2_read+0x48>
  {
    /* SPI2 Stop */
    bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <bsp_spi2_read+0x7c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	705a      	strb	r2, [r3, #1]
    return bsp_spi_error;
 80008d8:	2300      	movs	r3, #0
 80008da:	e012      	b.n	8000902 <bsp_spi2_read+0x6e>
  }
  /* Receive data */
  if (HAL_SPI_Receive(bsp_spi2, data_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <bsp_spi2_read+0x80>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	2201      	movs	r2, #1
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	f002 febe 	bl	8003666 <HAL_SPI_Receive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d104      	bne.n	80008fa <bsp_spi2_read+0x66>
  {
    /* SPI2 Stop */
    bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <bsp_spi2_read+0x7c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	705a      	strb	r2, [r3, #1]
    return bsp_spi_error;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e003      	b.n	8000902 <bsp_spi2_read+0x6e>
  }
  /* SPI2 Stop */
  bsp_spi_is_busy.bsp_spi2_busy = BSP_SPI_UNLOCK;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <bsp_spi2_read+0x7c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	705a      	strb	r2, [r3, #1]
  return bsp_spi_success;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000098 	.word	0x20000098
 8000910:	2000009c 	.word	0x2000009c
 8000914:	20000090 	.word	0x20000090

08000918 <bsp_spi3_write>:

/* ===================================== BSP SPI3 READ/WRITE ===================================== */

bsp_spi_status_t bsp_spi3_write(uint8_t reg_write, uint8_t data_write)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi3_init);
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <bsp_spi3_write+0x7c>)
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <bsp_spi3_write+0x1c>
 8000930:	2303      	movs	r3, #3
 8000932:	e02a      	b.n	800098a <bsp_spi3_write+0x72>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi3_busy);
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <bsp_spi3_write+0x80>)
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <bsp_spi3_write+0x28>
 800093c:	2302      	movs	r3, #2
 800093e:	e024      	b.n	800098a <bsp_spi3_write+0x72>

  /* SPI3 Running */
  bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_LOCK;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <bsp_spi3_write+0x80>)
 8000942:	2201      	movs	r2, #1
 8000944:	709a      	strb	r2, [r3, #2]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi3, &reg_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <bsp_spi3_write+0x84>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	1df9      	adds	r1, r7, #7
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2201      	movs	r2, #1
 8000950:	f002 fd4d 	bl	80033ee <HAL_SPI_Transmit>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d104      	bne.n	8000964 <bsp_spi3_write+0x4c>
  {
    /* SPI3 Stop */
    bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <bsp_spi3_write+0x80>)
 800095c:	2200      	movs	r2, #0
 800095e:	709a      	strb	r2, [r3, #2]
    return bsp_spi_error;
 8000960:	2300      	movs	r3, #0
 8000962:	e012      	b.n	800098a <bsp_spi3_write+0x72>
  }
  if (HAL_SPI_Transmit(bsp_spi3, &data_write, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <bsp_spi3_write+0x84>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	1db9      	adds	r1, r7, #6
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	2201      	movs	r2, #1
 800096e:	f002 fd3e 	bl	80033ee <HAL_SPI_Transmit>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d104      	bne.n	8000982 <bsp_spi3_write+0x6a>
  {
    /* SPI3 Stop */
    bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <bsp_spi3_write+0x80>)
 800097a:	2200      	movs	r2, #0
 800097c:	709a      	strb	r2, [r3, #2]
    return bsp_spi_error;
 800097e:	2300      	movs	r3, #0
 8000980:	e003      	b.n	800098a <bsp_spi3_write+0x72>
  }
  /* SPI3 Stop */
  bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <bsp_spi3_write+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	709a      	strb	r2, [r3, #2]
  return bsp_spi_success;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000098 	.word	0x20000098
 8000998:	2000009c 	.word	0x2000009c
 800099c:	20000094 	.word	0x20000094

080009a0 <bsp_spi3_read>:

bsp_spi_status_t bsp_spi3_read(uint8_t reg_read, uint8_t *data_read)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* Check initialize bsp spi */
  BSP_SPI_CHECK_INITIALIZE(bsp_spi_init.bsp_spi3_init);
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <bsp_spi3_read+0x78>)
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <bsp_spi3_read+0x18>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e02a      	b.n	8000a0e <bsp_spi3_read+0x6e>
  BSP_SPI_CHECK_IS_BUSY(bsp_spi_is_busy.bsp_spi3_busy);
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <bsp_spi3_read+0x7c>)
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <bsp_spi3_read+0x24>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e024      	b.n	8000a0e <bsp_spi3_read+0x6e>

  /* SPI3 Running */
  bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_LOCK;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <bsp_spi3_read+0x7c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	709a      	strb	r2, [r3, #2]

  /* Transmit data */
  if (HAL_SPI_Transmit(bsp_spi3, &reg_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <bsp_spi3_read+0x80>)
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	1df9      	adds	r1, r7, #7
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	f002 fd0b 	bl	80033ee <HAL_SPI_Transmit>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d104      	bne.n	80009e8 <bsp_spi3_read+0x48>
  {
    /* SPI3 Stop */
    bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <bsp_spi3_read+0x7c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]
    return bsp_spi_error;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e012      	b.n	8000a0e <bsp_spi3_read+0x6e>
  }
  /* Receive data */
  if (HAL_SPI_Receive(bsp_spi3, data_read, 1, BSP_SPI_TIMEOUT) == HAL_ERROR)
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <bsp_spi3_read+0x80>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	f002 fe38 	bl	8003666 <HAL_SPI_Receive>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d104      	bne.n	8000a06 <bsp_spi3_read+0x66>
  {
    /* SPI3 Stop */
    bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <bsp_spi3_read+0x7c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	709a      	strb	r2, [r3, #2]
    return bsp_spi_error;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e003      	b.n	8000a0e <bsp_spi3_read+0x6e>
  }
  /* SPI3 Stop */
  bsp_spi_is_busy.bsp_spi3_busy = BSP_SPI_UNLOCK;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <bsp_spi3_read+0x7c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	709a      	strb	r2, [r3, #2]
  return bsp_spi_success;
 8000a0c:	2301      	movs	r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	20000094 	.word	0x20000094

08000a24 <drv_mfrc522_write_reg>:
drv_mfrc522_to_card(drv_mfrc522_config_t drv_mfrc522, uint8_t command, uint8_t *send_data, uint8_t send_len, uint8_t *back_data, uint16_t *back_len);

/* Function definitions ----------------------------------------------- */

static drv_mfrc522_status_t drv_mfrc522_write_reg(drv_mfrc522_config_t drv_mfrc522, uint8_t reg_write, uint8_t data_write)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	463c      	mov	r4, r7
 8000a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8000a30:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <drv_mfrc522_write_reg+0x108>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	fa42 f303 	asr.w	r3, r2, r3
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <drv_mfrc522_write_reg+0x24>
 8000a44:	2305      	movs	r3, #5
 8000a46:	e06d      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>

  uint8_t reg_value = ((reg_write << 1) & 0x7E);
 8000a48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000a54:	75fb      	strb	r3, [r7, #23]
  bsp_gpio_reset_pin(drv_mfrc522.drv_mfrc522_cs_port, drv_mfrc522.drv_mfrc522_cs_pin);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fdc0 	bl	80005e4 <bsp_gpio_reset_pin>

  if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI1)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <drv_mfrc522_write_reg+0x10c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d115      	bne.n	8000a9a <drv_mfrc522_write_reg+0x76>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_write(reg_value, data_write))
 8000a6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe42 	bl	8000700 <bsp_spi1_write>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d009      	beq.n	8000a96 <drv_mfrc522_write_reg+0x72>
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	dc3f      	bgt.n	8000b06 <drv_mfrc522_write_reg+0xe2>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <drv_mfrc522_write_reg+0x6e>
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d13b      	bne.n	8000b06 <drv_mfrc522_write_reg+0xe2>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e048      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000a92:	2300      	movs	r3, #0
 8000a94:	e046      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000a96:	2306      	movs	r3, #6
 8000a98:	e044      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
  else if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI2)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <drv_mfrc522_write_reg+0x110>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d115      	bne.n	8000ad0 <drv_mfrc522_write_reg+0xac>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_write(reg_value, data_write))
 8000aa4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fead 	bl	800080c <bsp_spi2_write>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d009      	beq.n	8000acc <drv_mfrc522_write_reg+0xa8>
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	dc26      	bgt.n	8000b0a <drv_mfrc522_write_reg+0xe6>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <drv_mfrc522_write_reg+0xa4>
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d122      	bne.n	8000b0a <drv_mfrc522_write_reg+0xe6>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e02d      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e02b      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000acc:	2306      	movs	r3, #6
 8000ace:	e029      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
  else if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI3)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <drv_mfrc522_write_reg+0x114>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d119      	bne.n	8000b0e <drv_mfrc522_write_reg+0xea>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_write(reg_value, data_write))
 8000ada:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff18 	bl	8000918 <bsp_spi3_write>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d009      	beq.n	8000b02 <drv_mfrc522_write_reg+0xde>
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	dc0f      	bgt.n	8000b12 <drv_mfrc522_write_reg+0xee>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <drv_mfrc522_write_reg+0xda>
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d10b      	bne.n	8000b12 <drv_mfrc522_write_reg+0xee>
 8000afa:	2304      	movs	r3, #4
 8000afc:	e012      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000afe:	2300      	movs	r3, #0
 8000b00:	e010      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
 8000b02:	2306      	movs	r3, #6
 8000b04:	e00e      	b.n	8000b24 <drv_mfrc522_write_reg+0x100>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_write(reg_value, data_write))
 8000b06:	bf00      	nop
 8000b08:	e004      	b.n	8000b14 <drv_mfrc522_write_reg+0xf0>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_write(reg_value, data_write))
 8000b0a:	bf00      	nop
 8000b0c:	e002      	b.n	8000b14 <drv_mfrc522_write_reg+0xf0>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_write(reg_value, data_write))
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <drv_mfrc522_write_reg+0xf0>
 8000b12:	bf00      	nop

  bsp_gpio_set_pin(drv_mfrc522.drv_mfrc522_cs_port, drv_mfrc522.drv_mfrc522_cs_pin);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd51 	bl	80005c4 <bsp_gpio_set_pin>
  return drv_mfrc522_success;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	2000009f 	.word	0x2000009f
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40003800 	.word	0x40003800
 8000b38:	40003c00 	.word	0x40003c00

08000b3c <drv_mfrc522_read_reg>:

static drv_mfrc522_status_t drv_mfrc522_read_reg(drv_mfrc522_config_t drv_mfrc522, uint8_t reg_read, uint8_t *data_read)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	463c      	mov	r4, r7
 8000b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8000b48:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <drv_mfrc522_read_reg+0x104>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	7b3b      	ldrb	r3, [r7, #12]
 8000b50:	fa42 f303 	asr.w	r3, r2, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <drv_mfrc522_read_reg+0x24>
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	e06b      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>

  uint8_t reg_value = (((reg_read << 1) & 0x7E) | 0x80);
 8000b60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	75fb      	strb	r3, [r7, #23]
  bsp_gpio_reset_pin(drv_mfrc522.drv_mfrc522_cs_port, drv_mfrc522.drv_mfrc522_cs_pin);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	b292      	uxth	r2, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd30 	bl	80005e4 <bsp_gpio_reset_pin>

  if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI1)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <drv_mfrc522_read_reg+0x108>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d113      	bne.n	8000bb6 <drv_mfrc522_read_reg+0x7a>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_read(reg_value, data_read))
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fdf8 	bl	8000788 <bsp_spi1_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d009      	beq.n	8000bb2 <drv_mfrc522_read_reg+0x76>
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	dc3b      	bgt.n	8000c1a <drv_mfrc522_read_reg+0xde>
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <drv_mfrc522_read_reg+0x72>
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d137      	bne.n	8000c1a <drv_mfrc522_read_reg+0xde>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e044      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e042      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	e040      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
  else if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI2)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <drv_mfrc522_read_reg+0x10c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d113      	bne.n	8000be8 <drv_mfrc522_read_reg+0xac>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_read(reg_value, data_read))
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe65 	bl	8000894 <bsp_spi2_read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d009      	beq.n	8000be4 <drv_mfrc522_read_reg+0xa8>
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	dc24      	bgt.n	8000c1e <drv_mfrc522_read_reg+0xe2>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <drv_mfrc522_read_reg+0xa4>
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d120      	bne.n	8000c1e <drv_mfrc522_read_reg+0xe2>
 8000bdc:	2304      	movs	r3, #4
 8000bde:	e02b      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000be0:	2300      	movs	r3, #0
 8000be2:	e029      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000be4:	2306      	movs	r3, #6
 8000be6:	e027      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
  else if (drv_mfrc522.drv_mfrc522_spi->Instance == SPI3)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <drv_mfrc522_read_reg+0x110>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d117      	bne.n	8000c22 <drv_mfrc522_read_reg+0xe6>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_read(reg_value, data_read))
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fed2 	bl	80009a0 <bsp_spi3_read>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d009      	beq.n	8000c16 <drv_mfrc522_read_reg+0xda>
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	dc0f      	bgt.n	8000c26 <drv_mfrc522_read_reg+0xea>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <drv_mfrc522_read_reg+0xd6>
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d10b      	bne.n	8000c26 <drv_mfrc522_read_reg+0xea>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e012      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000c12:	2300      	movs	r3, #0
 8000c14:	e010      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
 8000c16:	2306      	movs	r3, #6
 8000c18:	e00e      	b.n	8000c38 <drv_mfrc522_read_reg+0xfc>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_read(reg_value, data_read))
 8000c1a:	bf00      	nop
 8000c1c:	e004      	b.n	8000c28 <drv_mfrc522_read_reg+0xec>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_read(reg_value, data_read))
 8000c1e:	bf00      	nop
 8000c20:	e002      	b.n	8000c28 <drv_mfrc522_read_reg+0xec>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_read(reg_value, data_read))
 8000c22:	bf00      	nop
 8000c24:	e000      	b.n	8000c28 <drv_mfrc522_read_reg+0xec>
 8000c26:	bf00      	nop

  bsp_gpio_set_pin(drv_mfrc522.drv_mfrc522_cs_port, drv_mfrc522.drv_mfrc522_cs_pin);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fcc7 	bl	80005c4 <bsp_gpio_set_pin>
  return drv_mfrc522_success;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	2000009f 	.word	0x2000009f
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40003800 	.word	0x40003800
 8000c4c:	40003c00 	.word	0x40003c00

08000c50 <drv_mfrc522_set_bit_reg>:
  bsp_gpio_set_pin(drv_mfrc522.drv_mfrc522_cs_port, drv_mfrc522.drv_mfrc522_cs_pin);
  return data_read;
}

static drv_mfrc522_status_t drv_mfrc522_set_bit_reg(drv_mfrc522_config_t drv_mfrc522, uint8_t reg, uint8_t bit)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	463c      	mov	r4, r7
 8000c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <drv_mfrc522_set_bit_reg+0x74>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	7b3b      	ldrb	r3, [r7, #12]
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <drv_mfrc522_set_bit_reg+0x24>
 8000c70:	2305      	movs	r3, #5
 8000c72:	e022      	b.n	8000cba <drv_mfrc522_set_bit_reg+0x6a>
  uint8_t value;
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, reg, &value))
 8000c74:	f107 0317 	add.w	r3, r7, #23
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	463b      	mov	r3, r7
 8000c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c84:	f7ff ff5a 	bl	8000b3c <drv_mfrc522_read_reg>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <drv_mfrc522_set_bit_reg+0x78>)
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <drv_mfrc522_set_bit_reg+0x78>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d002      	beq.n	8000c9e <drv_mfrc522_set_bit_reg+0x4e>
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <drv_mfrc522_set_bit_reg+0x78>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	e00d      	b.n	8000cba <drv_mfrc522_set_bit_reg+0x6a>
  return drv_mfrc522_write_reg(drv_mfrc522, reg, value | bit);
 8000c9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb4:	f7ff feb6 	bl	8000a24 <drv_mfrc522_write_reg>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000009f 	.word	0x2000009f
 8000cc8:	200000a0 	.word	0x200000a0

08000ccc <drv_mfrc522_clear_bit_reg>:

static drv_mfrc522_status_t drv_mfrc522_clear_bit_reg(drv_mfrc522_config_t drv_mfrc522, uint8_t reg, uint8_t bit)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	463c      	mov	r4, r7
 8000cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <drv_mfrc522_clear_bit_reg+0x7c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	7b3b      	ldrb	r3, [r7, #12]
 8000ce0:	fa42 f303 	asr.w	r3, r2, r3
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <drv_mfrc522_clear_bit_reg+0x24>
 8000cec:	2305      	movs	r3, #5
 8000cee:	e026      	b.n	8000d3e <drv_mfrc522_clear_bit_reg+0x72>
  uint8_t value;
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, reg, &value))
 8000cf0:	f107 0317 	add.w	r3, r7, #23
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d00:	f7ff ff1c 	bl	8000b3c <drv_mfrc522_read_reg>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <drv_mfrc522_clear_bit_reg+0x80>)
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <drv_mfrc522_clear_bit_reg+0x80>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d002      	beq.n	8000d1a <drv_mfrc522_clear_bit_reg+0x4e>
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <drv_mfrc522_clear_bit_reg+0x80>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	e011      	b.n	8000d3e <drv_mfrc522_clear_bit_reg+0x72>
  return drv_mfrc522_write_reg(drv_mfrc522, reg, value & (~bit));
 8000d1a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	4013      	ands	r3, r2
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	463b      	mov	r3, r7
 8000d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d38:	f7ff fe74 	bl	8000a24 <drv_mfrc522_write_reg>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000009f 	.word	0x2000009f
 8000d4c:	200000a0 	.word	0x200000a0

08000d50 <drv_mfrc522_to_card>:

static drv_mfrc522_status_t
drv_mfrc522_to_card(drv_mfrc522_config_t drv_mfrc522, uint8_t command, uint8_t *send_data, uint8_t send_len, uint8_t *back_data, uint16_t *back_len)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	463c      	mov	r4, r7
 8000d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8000d5c:	4b8a      	ldr	r3, [pc, #552]	; (8000f88 <drv_mfrc522_to_card+0x238>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	7b3b      	ldrb	r3, [r7, #12]
 8000d64:	fa42 f303 	asr.w	r3, r2, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <drv_mfrc522_to_card+0x24>
 8000d70:	2305      	movs	r3, #5
 8000d72:	e104      	b.n	8000f7e <drv_mfrc522_to_card+0x22e>

  drv_mfrc522_status_t status  = drv_mfrc522_error;
 8000d74:	2300      	movs	r3, #0
 8000d76:	77fb      	strb	r3, [r7, #31]
  uint8_t              irqEn   = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	77bb      	strb	r3, [r7, #30]
  uint8_t              waitIRq = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	777b      	strb	r3, [r7, #29]
  uint8_t              lastBits;
  uint8_t              n     = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	763b      	strb	r3, [r7, #24]
  uint16_t             i     = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	837b      	strh	r3, [r7, #26]
  uint8_t              check = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	75fb      	strb	r3, [r7, #23]

  switch (command)
 8000d8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	d006      	beq.n	8000da2 <drv_mfrc522_to_card+0x52>
 8000d94:	2b0e      	cmp	r3, #14
 8000d96:	d109      	bne.n	8000dac <drv_mfrc522_to_card+0x5c>
  {
  case DRV_PCD_AUTHENT:
  {
    irqEn   = 0x12;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	77bb      	strb	r3, [r7, #30]
    waitIRq = 0x10;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	777b      	strb	r3, [r7, #29]
    break;
 8000da0:	e005      	b.n	8000dae <drv_mfrc522_to_card+0x5e>
  }
  case DRV_PCD_TRANSCEIVE:
  {
    irqEn   = 0x77;
 8000da2:	2377      	movs	r3, #119	; 0x77
 8000da4:	77bb      	strb	r3, [r7, #30]
    waitIRq = 0x30;
 8000da6:	2330      	movs	r3, #48	; 0x30
 8000da8:	777b      	strb	r3, [r7, #29]
    break;
 8000daa:	e000      	b.n	8000dae <drv_mfrc522_to_card+0x5e>
  }
  default: break;
 8000dac:	bf00      	nop
  }

  /* enable interrupt */
  drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_COMM_I_EN, irqEn | 0x80);
 8000dae:	7fbb      	ldrb	r3, [r7, #30]
 8000db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2302      	movs	r3, #2
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc0:	f7ff fe30 	bl	8000a24 <drv_mfrc522_write_reg>
  /* clear interrupt */
  drv_mfrc522_clear_bit_reg(drv_mfrc522, DRV_MFRC522_REG_COMM_IRQ, 0x80);
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	2304      	movs	r3, #4
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	463b      	mov	r3, r7
 8000dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd0:	f7ff ff7c 	bl	8000ccc <drv_mfrc522_clear_bit_reg>
  /* clear FIFO */
  drv_mfrc522_set_bit_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_LEVEL, 0x80);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	230a      	movs	r3, #10
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	463b      	mov	r3, r7
 8000dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de0:	f7ff ff36 	bl	8000c50 <drv_mfrc522_set_bit_reg>

  drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_COMMAND, DRV_PCD_IDLE);
 8000de4:	2300      	movs	r3, #0
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	463b      	mov	r3, r7
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	f7ff fe18 	bl	8000a24 <drv_mfrc522_write_reg>
  // Writing data to the FIFO
  for (i = 0; i < send_len; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	837b      	strh	r3, [r7, #26]
 8000df8:	e00d      	b.n	8000e16 <drv_mfrc522_to_card+0xc6>
  {
    drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_DATA, send_data[i]);
 8000dfa:	8b7b      	ldrh	r3, [r7, #26]
 8000dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	2309      	movs	r3, #9
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	463b      	mov	r3, r7
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	f7ff fe0a 	bl	8000a24 <drv_mfrc522_write_reg>
  for (i = 0; i < send_len; i++)
 8000e10:	8b7b      	ldrh	r3, [r7, #26]
 8000e12:	3301      	adds	r3, #1
 8000e14:	837b      	strh	r3, [r7, #26]
 8000e16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	8b7a      	ldrh	r2, [r7, #26]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3eb      	bcc.n	8000dfa <drv_mfrc522_to_card+0xaa>
  }
  // Execute the command
  drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_COMMAND, command);
 8000e22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	f7ff fdf8 	bl	8000a24 <drv_mfrc522_write_reg>
  if (command == DRV_PCD_TRANSCEIVE)
 8000e34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d107      	bne.n	8000e4c <drv_mfrc522_to_card+0xfc>
  {
    drv_mfrc522_set_bit_reg(drv_mfrc522, DRV_MFRC522_REG_BIT_FRAMING, 0x80);
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	230d      	movs	r3, #13
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	463b      	mov	r3, r7
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	f7ff ff02 	bl	8000c50 <drv_mfrc522_set_bit_reg>
  }
  i = 2000;
 8000e4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e50:	837b      	strh	r3, [r7, #26]
  do
  {
    /* Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq */
    drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_COMM_IRQ, &n);
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2304      	movs	r3, #4
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e60:	f7ff fe6c 	bl	8000b3c <drv_mfrc522_read_reg>
    i--;
 8000e64:	8b7b      	ldrh	r3, [r7, #26]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	837b      	strh	r3, [r7, #26]
  } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00a      	beq.n	8000e86 <drv_mfrc522_to_card+0x136>
 8000e70:	7e3b      	ldrb	r3, [r7, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d105      	bne.n	8000e86 <drv_mfrc522_to_card+0x136>
 8000e7a:	7e3a      	ldrb	r2, [r7, #24]
 8000e7c:	7f7b      	ldrb	r3, [r7, #29]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0e5      	beq.n	8000e52 <drv_mfrc522_to_card+0x102>

  drv_mfrc522_clear_bit_reg(drv_mfrc522, DRV_MFRC522_REG_BIT_FRAMING, 0x80);
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	230d      	movs	r3, #13
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	463b      	mov	r3, r7
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	f7ff ff1b 	bl	8000ccc <drv_mfrc522_clear_bit_reg>

  if (i != 0)
 8000e96:	8b7b      	ldrh	r3, [r7, #26]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d06f      	beq.n	8000f7c <drv_mfrc522_to_card+0x22c>
  {
    drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_ERROR, &check);
 8000e9c:	f107 0317 	add.w	r3, r7, #23
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eaa:	f7ff fe47 	bl	8000b3c <drv_mfrc522_read_reg>
    if (!(check & 0x1B))
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	f003 031b 	and.w	r3, r3, #27
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d15f      	bne.n	8000f78 <drv_mfrc522_to_card+0x228>
    {
      status = drv_mfrc522_success;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8000ebc:	7e3a      	ldrb	r2, [r7, #24]
 8000ebe:	7fbb      	ldrb	r3, [r7, #30]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <drv_mfrc522_to_card+0x180>
      {
        status = drv_mfrc522_error;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	77fb      	strb	r3, [r7, #31]
      }
      if (command == DRV_PCD_TRANSCEIVE)
 8000ed0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ed4:	2b0c      	cmp	r3, #12
 8000ed6:	d151      	bne.n	8000f7c <drv_mfrc522_to_card+0x22c>
      {
        drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_LEVEL, &n);
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	230a      	movs	r3, #10
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee6:	f7ff fe29 	bl	8000b3c <drv_mfrc522_read_reg>
        drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_CONTROL, &lastBits);
 8000eea:	f107 0319 	add.w	r3, r7, #25
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	f7ff fe20 	bl	8000b3c <drv_mfrc522_read_reg>
        lastBits = lastBits & 0x07;
 8000efc:	7e7b      	ldrb	r3, [r7, #25]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	767b      	strb	r3, [r7, #25]
        if (lastBits)
 8000f06:	7e7b      	ldrb	r3, [r7, #25]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <drv_mfrc522_to_card+0x1d4>
        {
          *back_len = (n - 1) * 8 + lastBits;
 8000f0c:	7e3b      	ldrb	r3, [r7, #24]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	7e7b      	ldrb	r3, [r7, #25]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	e005      	b.n	8000f30 <drv_mfrc522_to_card+0x1e0>
        }
        else
        {
          *back_len = n * 8;
 8000f24:	7e3b      	ldrb	r3, [r7, #24]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f2e:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0)
 8000f30:	7e3b      	ldrb	r3, [r7, #24]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <drv_mfrc522_to_card+0x1ea>
        {
          n = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	763b      	strb	r3, [r7, #24]
        }
        if (n > DRV_MFRC522_MAX_LEN)
 8000f3a:	7e3b      	ldrb	r3, [r7, #24]
 8000f3c:	2b10      	cmp	r3, #16
 8000f3e:	d901      	bls.n	8000f44 <drv_mfrc522_to_card+0x1f4>
        {
          n = DRV_MFRC522_MAX_LEN;
 8000f40:	2310      	movs	r3, #16
 8000f42:	763b      	strb	r3, [r7, #24]
        }

        /* reading the received data in FIFO */
        for (i = 0; i < n; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	837b      	strh	r3, [r7, #26]
 8000f48:	e010      	b.n	8000f6c <drv_mfrc522_to_card+0x21c>
        {
          uint8_t value;
          drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_DATA, &value);
 8000f4a:	f107 0316 	add.w	r3, r7, #22
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2309      	movs	r3, #9
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	463b      	mov	r3, r7
 8000f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f58:	f7ff fdf0 	bl	8000b3c <drv_mfrc522_read_reg>
          back_data[i] = value;
 8000f5c:	8b7b      	ldrh	r3, [r7, #26]
 8000f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f60:	4413      	add	r3, r2
 8000f62:	7dba      	ldrb	r2, [r7, #22]
 8000f64:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++)
 8000f66:	8b7b      	ldrh	r3, [r7, #26]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	837b      	strh	r3, [r7, #26]
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	8b7a      	ldrh	r2, [r7, #26]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3e9      	bcc.n	8000f4a <drv_mfrc522_to_card+0x1fa>
 8000f76:	e001      	b.n	8000f7c <drv_mfrc522_to_card+0x22c>
        }
      }
    }
    else
    {
      status = drv_mfrc522_error;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000009f 	.word	0x2000009f

08000f8c <drv_mfrc522_select_tag>:

static drv_mfrc522_status_t drv_mfrc522_select_tag(drv_mfrc522_config_t drv_mfrc522, uint8_t *ser_num, uint8_t *data_size)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b08f      	sub	sp, #60	; 0x3c
 8000f90:	af06      	add	r7, sp, #24
 8000f92:	463c      	mov	r4, r7
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t              i;
  drv_mfrc522_status_t status = drv_mfrc522_error;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	77bb      	strb	r3, [r7, #30]
  uint16_t             recvBits;
  uint8_t              buffer[9];

  buffer[0] = DRV_PICC_SElECTTAG;
 8000f9c:	2393      	movs	r3, #147	; 0x93
 8000f9e:	743b      	strb	r3, [r7, #16]
  buffer[1] = 0x70;
 8000fa0:	2370      	movs	r3, #112	; 0x70
 8000fa2:	747b      	strb	r3, [r7, #17]
  for (i = 0; i < 5; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	77fb      	strb	r3, [r7, #31]
 8000fa8:	e00c      	b.n	8000fc4 <drv_mfrc522_select_tag+0x38>
  {
    buffer[i + 2] = *(ser_num + i);
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
 8000fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fae:	441a      	add	r2, r3
 8000fb0:	7ffb      	ldrb	r3, [r7, #31]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	3320      	adds	r3, #32
 8000fb8:	443b      	add	r3, r7
 8000fba:	f803 2c10 	strb.w	r2, [r3, #-16]
  for (i = 0; i < 5; i++)
 8000fbe:	7ffb      	ldrb	r3, [r7, #31]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	77fb      	strb	r3, [r7, #31]
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d9ef      	bls.n	8000faa <drv_mfrc522_select_tag+0x1e>
  }
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_calculate_crc(drv_mfrc522, buffer, 7, &buffer[7]))
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	3307      	adds	r3, #7
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	463b      	mov	r3, r7
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	f000 f8e2 	bl	80011a8 <drv_mfrc522_calculate_crc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <drv_mfrc522_select_tag+0xb8>)
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <drv_mfrc522_select_tag+0xb8>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d002      	beq.n	8000ffa <drv_mfrc522_select_tag+0x6e>
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <drv_mfrc522_select_tag+0xb8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	e020      	b.n	800103c <drv_mfrc522_select_tag+0xb0>
  status = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	9304      	str	r3, [sp, #16]
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	2309      	movs	r3, #9
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	230c      	movs	r3, #12
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	463b      	mov	r3, r7
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	f7ff fe9a 	bl	8000d50 <drv_mfrc522_to_card>
 800101c:	4603      	mov	r3, r0
 800101e:	77bb      	strb	r3, [r7, #30]

  if ((status == drv_mfrc522_success) && (recvBits == 0x18))
 8001020:	7fbb      	ldrb	r3, [r7, #30]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <drv_mfrc522_select_tag+0xa8>
 8001026:	8bbb      	ldrh	r3, [r7, #28]
 8001028:	2b18      	cmp	r3, #24
 800102a:	d103      	bne.n	8001034 <drv_mfrc522_select_tag+0xa8>
  {
    *data_size = buffer[0];
 800102c:	7c3a      	ldrb	r2, [r7, #16]
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e002      	b.n	800103a <drv_mfrc522_select_tag+0xae>
  }
  else
  {
    *data_size = 0;
 8001034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800103a:	7fbb      	ldrb	r3, [r7, #30]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3724      	adds	r7, #36	; 0x24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	200000a0 	.word	0x200000a0

08001048 <drv_mfrc522_request>:


static drv_mfrc522_status_t drv_mfrc522_request(drv_mfrc522_config_t drv_mfrc522, uint8_t request_mode, uint8_t *tag_type)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af06      	add	r7, sp, #24
 800104e:	463c      	mov	r4, r7
 8001050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <drv_mfrc522_request+0x90>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	fa42 f303 	asr.w	r3, r2, r3
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <drv_mfrc522_request+0x24>
 8001068:	2305      	movs	r3, #5
 800106a:	e030      	b.n	80010ce <drv_mfrc522_request+0x86>

  drv_mfrc522_status_t status;
  uint16_t             back_bits;

  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_BIT_FRAMING, 0x07))
 800106c:	2307      	movs	r3, #7
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	230d      	movs	r3, #13
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	463b      	mov	r3, r7
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	f7ff fcd4 	bl	8000a24 <drv_mfrc522_write_reg>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <drv_mfrc522_request+0x94>)
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <drv_mfrc522_request+0x94>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <drv_mfrc522_request+0x4a>
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <drv_mfrc522_request+0x94>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e01d      	b.n	80010ce <drv_mfrc522_request+0x86>

  tag_type[0] = request_mode;
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001098:	701a      	strb	r2, [r3, #0]
  status      = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, tag_type, 1, tag_type, &back_bits);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	9304      	str	r3, [sp, #16]
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	9303      	str	r3, [sp, #12]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	230c      	movs	r3, #12
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	463b      	mov	r3, r7
 80010b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b4:	f7ff fe4c 	bl	8000d50 <drv_mfrc522_to_card>
 80010b8:	4603      	mov	r3, r0
 80010ba:	75fb      	strb	r3, [r7, #23]

  if ((status != drv_mfrc522_success) || (back_bits != 0x10))
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d102      	bne.n	80010c8 <drv_mfrc522_request+0x80>
 80010c2:	8abb      	ldrh	r3, [r7, #20]
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d001      	beq.n	80010cc <drv_mfrc522_request+0x84>
  {
    status = drv_mfrc522_error;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000009f 	.word	0x2000009f
 80010dc:	200000a0 	.word	0x200000a0

080010e0 <drv_mfrc522_anticoll>:

static drv_mfrc522_status_t drv_mfrc522_anticoll(drv_mfrc522_config_t drv_mfrc522, uint8_t *data)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08d      	sub	sp, #52	; 0x34
 80010e4:	af06      	add	r7, sp, #24
 80010e6:	463c      	mov	r4, r7
 80010e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <drv_mfrc522_anticoll+0xc0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	fa42 f303 	asr.w	r3, r2, r3
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <drv_mfrc522_anticoll+0x24>
 8001100:	2305      	movs	r3, #5
 8001102:	e049      	b.n	8001198 <drv_mfrc522_anticoll+0xb8>

  drv_mfrc522_status_t status;
  uint8_t              i;
  uint8_t              num_check = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	757b      	strb	r3, [r7, #21]
  uint16_t             len;

  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_BIT_FRAMING, 0x00))
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	230d      	movs	r3, #13
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	463b      	mov	r3, r7
 8001112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001114:	f7ff fc86 	bl	8000a24 <drv_mfrc522_write_reg>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <drv_mfrc522_anticoll+0xc4>)
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <drv_mfrc522_anticoll+0xc4>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d002      	beq.n	800112e <drv_mfrc522_anticoll+0x4e>
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <drv_mfrc522_anticoll+0xc4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	e034      	b.n	8001198 <drv_mfrc522_anticoll+0xb8>

  data[0] = DRV_PICC_ANTICOLL;
 800112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001130:	2293      	movs	r2, #147	; 0x93
 8001132:	701a      	strb	r2, [r3, #0]
  data[1] = 0x20;
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	3301      	adds	r3, #1
 8001138:	2220      	movs	r2, #32
 800113a:	701a      	strb	r2, [r3, #0]
  status  = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, data, 2, data, &len);
 800113c:	f107 0312 	add.w	r3, r7, #18
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	9303      	str	r3, [sp, #12]
 8001146:	2302      	movs	r3, #2
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	230c      	movs	r3, #12
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	463b      	mov	r3, r7
 8001154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001156:	f7ff fdfb 	bl	8000d50 <drv_mfrc522_to_card>
 800115a:	4603      	mov	r3, r0
 800115c:	75fb      	strb	r3, [r7, #23]

  if (status == drv_mfrc522_success)
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d118      	bne.n	8001196 <drv_mfrc522_anticoll+0xb6>
  {
    /* check card serial number */
    for (i = 0; i < 4; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	75bb      	strb	r3, [r7, #22]
 8001168:	e009      	b.n	800117e <drv_mfrc522_anticoll+0x9e>
    {
      num_check ^= data[i];
 800116a:	7dbb      	ldrb	r3, [r7, #22]
 800116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116e:	4413      	add	r3, r2
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	7d7b      	ldrb	r3, [r7, #21]
 8001174:	4053      	eors	r3, r2
 8001176:	757b      	strb	r3, [r7, #21]
    for (i = 0; i < 4; i++)
 8001178:	7dbb      	ldrb	r3, [r7, #22]
 800117a:	3301      	adds	r3, #1
 800117c:	75bb      	strb	r3, [r7, #22]
 800117e:	7dbb      	ldrb	r3, [r7, #22]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d9f2      	bls.n	800116a <drv_mfrc522_anticoll+0x8a>
    }
    if (num_check != data[i])
 8001184:	7dbb      	ldrb	r3, [r7, #22]
 8001186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	7d7a      	ldrb	r2, [r7, #21]
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <drv_mfrc522_anticoll+0xb6>
    {
      status = drv_mfrc522_error;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	2000009f 	.word	0x2000009f
 80011a4:	200000a0 	.word	0x200000a0

080011a8 <drv_mfrc522_calculate_crc>:

static drv_mfrc522_status_t drv_mfrc522_calculate_crc(drv_mfrc522_config_t drv_mfrc522, uint8_t *data_in, uint8_t len, uint8_t *data_out)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	463c      	mov	r4, r7
 80011b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <drv_mfrc522_calculate_crc+0x174>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	fa42 f303 	asr.w	r3, r2, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <drv_mfrc522_calculate_crc+0x24>
 80011c8:	2305      	movs	r3, #5
 80011ca:	e0a2      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>

  uint8_t i, n;

  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_clear_bit_reg(drv_mfrc522, DRV_MFRC522_REG_DIV_IRQ, 0x04))
 80011cc:	2304      	movs	r3, #4
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2305      	movs	r3, #5
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	463b      	mov	r3, r7
 80011d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d8:	f7ff fd78 	bl	8000ccc <drv_mfrc522_clear_bit_reg>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d002      	beq.n	80011f2 <drv_mfrc522_calculate_crc+0x4a>
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	e08f      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_set_bit_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_LEVEL, 0x80))
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	230a      	movs	r3, #10
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	463b      	mov	r3, r7
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	f7ff fd27 	bl	8000c50 <drv_mfrc522_set_bit_reg>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d002      	beq.n	8001218 <drv_mfrc522_calculate_crc+0x70>
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e07c      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>

  /* writing data to the FIFO */
  for (i = 0; i < len; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	75fb      	strb	r3, [r7, #23]
 800121c:	e018      	b.n	8001250 <drv_mfrc522_calculate_crc+0xa8>
  {
    DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_FIFO_DATA, *(data_in + i)))
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2309      	movs	r3, #9
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	463b      	mov	r3, r7
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	f7ff fbf8 	bl	8000a24 <drv_mfrc522_write_reg>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d002      	beq.n	800124a <drv_mfrc522_calculate_crc+0xa2>
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	e063      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>
  for (i = 0; i < len; i++)
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3301      	adds	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	7dfa      	ldrb	r2, [r7, #23]
 8001252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001256:	429a      	cmp	r2, r3
 8001258:	d3e1      	bcc.n	800121e <drv_mfrc522_calculate_crc+0x76>
  }
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_COMMAND, DRV_PCD_CALCCRC))
 800125a:	2303      	movs	r3, #3
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2301      	movs	r3, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	463b      	mov	r3, r7
 8001264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001266:	f7ff fbdd 	bl	8000a24 <drv_mfrc522_write_reg>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <drv_mfrc522_calculate_crc+0xd8>
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	e048      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>

  i = 0xFF;
 8001280:	23ff      	movs	r3, #255	; 0xff
 8001282:	75fb      	strb	r3, [r7, #23]
  do
  {
    DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_DIV_IRQ, &n))
 8001284:	f107 0316 	add.w	r3, r7, #22
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2305      	movs	r3, #5
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	463b      	mov	r3, r7
 8001290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001292:	f7ff fc53 	bl	8000b3c <drv_mfrc522_read_reg>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d002      	beq.n	80012ac <drv_mfrc522_calculate_crc+0x104>
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	e032      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>
    i--;
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
  } while ((i != 0) && !(n & 0x04));
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <drv_mfrc522_calculate_crc+0x11a>
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0e0      	beq.n	8001284 <drv_mfrc522_calculate_crc+0xdc>

  /* read CRC calculation result */
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_CRC_RESULT_L, &data_out[0]))
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2322      	movs	r3, #34	; 0x22
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	463b      	mov	r3, r7
 80012cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ce:	f7ff fc35 	bl	8000b3c <drv_mfrc522_read_reg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <drv_mfrc522_calculate_crc+0x140>
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	e014      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_CRC_RESULT_M, &data_out[1]))
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	3301      	adds	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2321      	movs	r3, #33	; 0x21
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	463b      	mov	r3, r7
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	f7ff fc21 	bl	8000b3c <drv_mfrc522_read_reg>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d002      	beq.n	8001310 <drv_mfrc522_calculate_crc+0x168>
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <drv_mfrc522_calculate_crc+0x178>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	e000      	b.n	8001312 <drv_mfrc522_calculate_crc+0x16a>
  return drv_mfrc522_success;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	2000009f 	.word	0x2000009f
 8001320:	200000a0 	.word	0x200000a0

08001324 <drv_mfrc522_haft>:

static drv_mfrc522_status_t drv_mfrc522_haft(drv_mfrc522_config_t drv_mfrc522)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08d      	sub	sp, #52	; 0x34
 8001328:	af06      	add	r7, sp, #24
 800132a:	463c      	mov	r4, r7
 800132c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <drv_mfrc522_haft+0x88>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	fa42 f303 	asr.w	r3, r2, r3
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <drv_mfrc522_haft+0x24>
 8001344:	2305      	movs	r3, #5
 8001346:	e02d      	b.n	80013a4 <drv_mfrc522_haft+0x80>

  uint16_t len;
  uint8_t  buff[4];

  buff[0] = DRV_PICC_HALT;
 8001348:	2350      	movs	r3, #80	; 0x50
 800134a:	743b      	strb	r3, [r7, #16]
  buff[1] = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	747b      	strb	r3, [r7, #17]
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_calculate_crc(drv_mfrc522, buff, 2, &buff[2]))
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	3302      	adds	r3, #2
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2302      	movs	r3, #2
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	463b      	mov	r3, r7
 8001364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001366:	f7ff ff1f 	bl	80011a8 <drv_mfrc522_calculate_crc>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <drv_mfrc522_haft+0x8c>)
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <drv_mfrc522_haft+0x8c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d002      	beq.n	8001380 <drv_mfrc522_haft+0x5c>
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <drv_mfrc522_haft+0x8c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	e011      	b.n	80013a4 <drv_mfrc522_haft+0x80>
  return drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, buff, 4, buff, &len);
 8001380:	f107 0316 	add.w	r3, r7, #22
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	9303      	str	r3, [sp, #12]
 800138c:	2304      	movs	r3, #4
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	230c      	movs	r3, #12
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	463b      	mov	r3, r7
 800139c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139e:	f7ff fcd7 	bl	8000d50 <drv_mfrc522_to_card>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	2000009f 	.word	0x2000009f
 80013b0:	200000a0 	.word	0x200000a0

080013b4 <drv_mfrc522_auth>:

static drv_mfrc522_status_t drv_mfrc522_auth(drv_mfrc522_config_t drv_mfrc522, uint8_t auth_mode, uint8_t block_address, uint8_t *sector_key, uint8_t *ser_num)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b091      	sub	sp, #68	; 0x44
 80013b8:	af06      	add	r7, sp, #24
 80013ba:	463c      	mov	r4, r7
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  drv_mfrc522_status_t status = drv_mfrc522_error;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t             recvBits;
  uint8_t              i;
  uint8_t              buff[12];

  // Verify the command block address + sector + password + card serial number
  buff[0] = auth_mode;
 80013c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013ca:	763b      	strb	r3, [r7, #24]
  buff[1] = block_address;
 80013cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80013d0:	767b      	strb	r3, [r7, #25]
  for (i = 0; i < 6; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013d8:	e010      	b.n	80013fc <drv_mfrc522_auth+0x48>
  {
    buff[i + 2] = *(sector_key + i);
 80013da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013e0:	441a      	add	r2, r3
 80013e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013e6:	3302      	adds	r3, #2
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	3328      	adds	r3, #40	; 0x28
 80013ec:	443b      	add	r3, r7
 80013ee:	f803 2c10 	strb.w	r2, [r3, #-16]
  for (i = 0; i < 6; i++)
 80013f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f6:	3301      	adds	r3, #1
 80013f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001400:	2b05      	cmp	r3, #5
 8001402:	d9ea      	bls.n	80013da <drv_mfrc522_auth+0x26>
  }
  for (i = 0; i < 4; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800140a:	e010      	b.n	800142e <drv_mfrc522_auth+0x7a>
  {
    buff[i + 8] = *(ser_num + i);
 800140c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001412:	441a      	add	r2, r3
 8001414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001418:	3308      	adds	r3, #8
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	3328      	adds	r3, #40	; 0x28
 800141e:	443b      	add	r3, r7
 8001420:	f803 2c10 	strb.w	r2, [r3, #-16]
  for (i = 0; i < 4; i++)
 8001424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001428:	3301      	adds	r3, #1
 800142a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800142e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001432:	2b03      	cmp	r3, #3
 8001434:	d9ea      	bls.n	800140c <drv_mfrc522_auth+0x58>
  }
  status = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_AUTHENT, buff, 12, buff, &recvBits);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	9304      	str	r3, [sp, #16]
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	9303      	str	r3, [sp, #12]
 8001442:	230c      	movs	r3, #12
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	230e      	movs	r3, #14
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	463b      	mov	r3, r7
 8001452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001454:	f7ff fc7c 	bl	8000d50 <drv_mfrc522_to_card>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t status_2;
  drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_STATUS2, &status_2);
 800145e:	f107 0317 	add.w	r3, r7, #23
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2308      	movs	r3, #8
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	463b      	mov	r3, r7
 800146a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146c:	f7ff fb66 	bl	8000b3c <drv_mfrc522_read_reg>
  if ((status != drv_mfrc522_success) || (!(status_2 & 0x08)))
 8001470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001474:	2b01      	cmp	r3, #1
 8001476:	d104      	bne.n	8001482 <drv_mfrc522_auth+0xce>
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <drv_mfrc522_auth+0xd4>
  {
    status = drv_mfrc522_error;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return status;
 8001488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800148c:	4618      	mov	r0, r3
 800148e:	372c      	adds	r7, #44	; 0x2c
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <drv_mfrc522_write_address>:
  drv_mfrc522_haft(drv_mfrc522);
  return status;
}

drv_mfrc522_status_t drv_mfrc522_write_address(drv_mfrc522_config_t drv_mfrc522, uint8_t block_address, uint8_t *send_data)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b095      	sub	sp, #84	; 0x54
 8001498:	af06      	add	r7, sp, #24
 800149a:	463c      	mov	r4, r7
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 80014a0:	4bae      	ldr	r3, [pc, #696]	; (800175c <drv_mfrc522_write_address+0x2c8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	fa42 f303 	asr.w	r3, r2, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <drv_mfrc522_write_address+0x24>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e14c      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  drv_mfrc522_status_t status = drv_mfrc522_error;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint16_t             receive_bits;
  uint8_t              i;
  uint8_t              buff[18];
  uint8_t              data[5];
  uint8_t              sector_key[6];
  uint8_t              addr_special = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_request(drv_mfrc522, DRV_PICC_REQIDL, data))
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2326      	movs	r3, #38	; 0x26
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	463b      	mov	r3, r7
 80014d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d2:	f7ff fdb9 	bl	8001048 <drv_mfrc522_request>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4ba1      	ldr	r3, [pc, #644]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d002      	beq.n	80014ec <drv_mfrc522_write_address+0x58>
 80014e6:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	e132      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_anticoll(drv_mfrc522, data))
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	463b      	mov	r3, r7
 80014f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f6:	f7ff fdf3 	bl	80010e0 <drv_mfrc522_anticoll>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b98      	ldr	r3, [pc, #608]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <drv_mfrc522_write_address+0x7c>
 800150a:	4b95      	ldr	r3, [pc, #596]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	e120      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_select_tag(drv_mfrc522, data, &status))
 8001510:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	463b      	mov	r3, r7
 800151e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001520:	f7ff fd34 	bl	8000f8c <drv_mfrc522_select_tag>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b8d      	ldr	r3, [pc, #564]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d002      	beq.n	800153a <drv_mfrc522_write_address+0xa6>
 8001534:	4b8a      	ldr	r3, [pc, #552]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	e10b      	b.n	8001752 <drv_mfrc522_write_address+0x2be>

  if (status > 0)
 800153a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800153e:	2b00      	cmp	r3, #0
 8001540:	d025      	beq.n	800158e <drv_mfrc522_write_address+0xfa>
  {
    sector_key[0] = 0xFF;
 8001542:	23ff      	movs	r3, #255	; 0xff
 8001544:	743b      	strb	r3, [r7, #16]
    sector_key[1] = 0xFF;
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	747b      	strb	r3, [r7, #17]
    sector_key[2] = 0xFF;
 800154a:	23ff      	movs	r3, #255	; 0xff
 800154c:	74bb      	strb	r3, [r7, #18]
    sector_key[3] = 0xFF;
 800154e:	23ff      	movs	r3, #255	; 0xff
 8001550:	74fb      	strb	r3, [r7, #19]
    sector_key[4] = 0xFF;
 8001552:	23ff      	movs	r3, #255	; 0xff
 8001554:	753b      	strb	r3, [r7, #20]
    sector_key[5] = 0xFF;
 8001556:	23ff      	movs	r3, #255	; 0xff
 8001558:	757b      	strb	r3, [r7, #21]
    DRV_MFRC522_CHECK_STATUS(drv_mfrc522_auth(drv_mfrc522, 0x60, block_address, sector_key, data))
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2360      	movs	r3, #96	; 0x60
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	463b      	mov	r3, r7
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	f7ff ff1e 	bl	80013b4 <drv_mfrc522_auth>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	4b77      	ldr	r3, [pc, #476]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d004      	beq.n	8001592 <drv_mfrc522_write_address+0xfe>
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	e0e1      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  }
  else
  {
    return drv_mfrc522_error;
 800158e:	2300      	movs	r3, #0
 8001590:	e0df      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  }

  for (i = 3; i < 64; i += 4)
 8001592:	2303      	movs	r3, #3
 8001594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001598:	e00e      	b.n	80015b8 <drv_mfrc522_write_address+0x124>
  {
    if (i == block_address)
 800159a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800159e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d103      	bne.n	80015ae <drv_mfrc522_write_address+0x11a>
    {
      addr_special = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 80015ac:	e008      	b.n	80015c0 <drv_mfrc522_write_address+0x12c>
  for (i = 3; i < 64; i += 4)
 80015ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015b2:	3304      	adds	r3, #4
 80015b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80015b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015bc:	2b3f      	cmp	r3, #63	; 0x3f
 80015be:	d9ec      	bls.n	800159a <drv_mfrc522_write_address+0x106>
    }
  }
  if (addr_special)
 80015c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d037      	beq.n	8001638 <drv_mfrc522_write_address+0x1a4>
  {
    buff[0]  = 0xFF;
 80015c8:	23ff      	movs	r3, #255	; 0xff
 80015ca:	f887 3020 	strb.w	r3, [r7, #32]
    buff[1]  = 0xFF;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buff[2]  = 0xFF;
 80015d4:	23ff      	movs	r3, #255	; 0xff
 80015d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buff[3]  = 0xFF;
 80015da:	23ff      	movs	r3, #255	; 0xff
 80015dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    buff[4]  = 0xFF;
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    buff[5]  = 0xFF;
 80015e6:	23ff      	movs	r3, #255	; 0xff
 80015e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    buff[6]  = 0xFF;          // Access_bits[6]
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buff[7]  = 0x07;          // Access_bits[7]
 80015f2:	2307      	movs	r3, #7
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    buff[8]  = 0x80;          // Access_bits[8]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    buff[9]  = send_data[0];  // user_byte[9]
 80015fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    buff[10] = send_data[1];  // user_byte[10]
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    buff[11] = send_data[2];  // user_byte[11]
 800160e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001610:	789b      	ldrb	r3, [r3, #2]
 8001612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    buff[12] = send_data[3];  // user_byte[12]
 8001616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    buff[13] = send_data[4];  // user_byte[13]
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    buff[14] = send_data[5];  // user_byte[14]
 8001626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001628:	795b      	ldrb	r3, [r3, #5]
 800162a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    buff[15] = send_data[6];  // user_byte[15]
 800162e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001630:	799b      	ldrb	r3, [r3, #6]
 8001632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001636:	e017      	b.n	8001668 <drv_mfrc522_write_address+0x1d4>
  }
  else
  {
    for (i = 0; i < 16; i++)
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800163e:	e00f      	b.n	8001660 <drv_mfrc522_write_address+0x1cc>
    {
      buff[i] = *(send_data + i);
 8001640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001646:	441a      	add	r2, r3
 8001648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	3338      	adds	r3, #56	; 0x38
 8001650:	443b      	add	r3, r7
 8001652:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (i = 0; i < 16; i++)
 8001656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800165a:	3301      	adds	r3, #1
 800165c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d9eb      	bls.n	8001640 <drv_mfrc522_write_address+0x1ac>
    }
  }

  data[0] = DRV_PICC_WRITE;
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	763b      	strb	r3, [r7, #24]
  data[1] = block_address;
 800166c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001670:	767b      	strb	r3, [r7, #25]
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_calculate_crc(drv_mfrc522, data, 2, &data[2]))
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	3302      	adds	r3, #2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	2302      	movs	r3, #2
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	463b      	mov	r3, r7
 8001686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001688:	f7ff fd8e 	bl	80011a8 <drv_mfrc522_calculate_crc>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d002      	beq.n	80016a2 <drv_mfrc522_write_address+0x20e>
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	e057      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
  status = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, data, 4, data, &receive_bits);
 80016a2:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80016a6:	9304      	str	r3, [sp, #16]
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	9303      	str	r3, [sp, #12]
 80016ae:	2304      	movs	r3, #4
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	230c      	movs	r3, #12
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	463b      	mov	r3, r7
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	f7ff fb46 	bl	8000d50 <drv_mfrc522_to_card>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  if ((status != drv_mfrc522_success))
 80016ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d002      	beq.n	80016d8 <drv_mfrc522_write_address+0x244>
  {
    status = drv_mfrc522_error;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  }
  if (status == drv_mfrc522_success)
 80016d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d132      	bne.n	8001746 <drv_mfrc522_write_address+0x2b2>
  {
    DRV_MFRC522_CHECK_STATUS(drv_mfrc522_calculate_crc(drv_mfrc522, buff, 16, &buff[16]))
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	3310      	adds	r3, #16
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	2310      	movs	r3, #16
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	463b      	mov	r3, r7
 80016f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f6:	f7ff fd57 	bl	80011a8 <drv_mfrc522_calculate_crc>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d002      	beq.n	8001710 <drv_mfrc522_write_address+0x27c>
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <drv_mfrc522_write_address+0x2cc>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	e020      	b.n	8001752 <drv_mfrc522_write_address+0x2be>
    status = drv_mfrc522_to_card(drv_mfrc522, DRV_PCD_TRANSCEIVE, buff, 18, buff, &receive_bits);
 8001710:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8001714:	9304      	str	r3, [sp, #16]
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	2312      	movs	r3, #18
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	230c      	movs	r3, #12
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	463b      	mov	r3, r7
 800172c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172e:	f7ff fb0f 	bl	8000d50 <drv_mfrc522_to_card>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    if ((status != drv_mfrc522_success))
 8001738:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <drv_mfrc522_write_address+0x2b2>
    {
      status = drv_mfrc522_error;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
  }
  drv_mfrc522_haft(drv_mfrc522);
 8001746:	463b      	mov	r3, r7
 8001748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174a:	f7ff fdeb 	bl	8001324 <drv_mfrc522_haft>
  return status;
 800174e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
}
 8001752:	4618      	mov	r0, r3
 8001754:	373c      	adds	r7, #60	; 0x3c
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	2000009f 	.word	0x2000009f
 8001760:	200000a0 	.word	0x200000a0

08001764 <drv_mfrc522_antenna_on>:

static drv_mfrc522_status_t drv_mfrc522_antenna_on(drv_mfrc522_config_t drv_mfrc522)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af02      	add	r7, sp, #8
 800176a:	463c      	mov	r4, r7
 800176c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Check device init */
  DRV_MFRC522_CHECK_INIT(drv_mfrc522.drv_mfrc522_id);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <drv_mfrc522_antenna_on+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	7b3b      	ldrb	r3, [r7, #12]
 8001778:	fa42 f303 	asr.w	r3, r2, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <drv_mfrc522_antenna_on+0x24>
 8001784:	2305      	movs	r3, #5
 8001786:	e01f      	b.n	80017c8 <drv_mfrc522_antenna_on+0x64>

  uint8_t temp;
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_read_reg(drv_mfrc522, DRV_MFRC522_REG_TX_CONTROL, &temp))
 8001788:	f107 0317 	add.w	r3, r7, #23
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2314      	movs	r3, #20
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	463b      	mov	r3, r7
 8001794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001796:	f7ff f9d1 	bl	8000b3c <drv_mfrc522_read_reg>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <drv_mfrc522_antenna_on+0x70>)
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <drv_mfrc522_antenna_on+0x70>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d002      	beq.n	80017b0 <drv_mfrc522_antenna_on+0x4c>
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <drv_mfrc522_antenna_on+0x70>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	e00b      	b.n	80017c8 <drv_mfrc522_antenna_on+0x64>
  return drv_mfrc522_write_reg(drv_mfrc522, DRV_MFRC522_REG_TX_CONTROL, temp | 0x03);
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	f043 0303 	orr.w	r3, r3, #3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2314      	movs	r3, #20
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	463b      	mov	r3, r7
 80017c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c2:	f7ff f92f 	bl	8000a24 <drv_mfrc522_write_reg>
 80017c6:	4603      	mov	r3, r0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	2000009f 	.word	0x2000009f
 80017d4:	200000a0 	.word	0x200000a0

080017d8 <drv_mfrc522_init>:

drv_mfrc522_status_t drv_mfrc522_init(drv_mfrc522_config_t *drv_mfrc522)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
  DRV_MFRC522_CHECK_ID(drv_mfrc522->drv_mfrc522_id);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7b1b      	ldrb	r3, [r3, #12]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d901      	bls.n	80017ec <drv_mfrc522_init+0x14>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e129      	b.n	8001a40 <drv_mfrc522_init+0x268>
 80017ec:	4b96      	ldr	r3, [pc, #600]	; (8001a48 <drv_mfrc522_init+0x270>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b1b      	ldrb	r3, [r3, #12]
 80017f6:	fa42 f303 	asr.w	r3, r2, r3
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <drv_mfrc522_init+0x2e>
 8001802:	2303      	movs	r3, #3
 8001804:	e11c      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_SPI(drv_mfrc522->drv_mfrc522_spi);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <drv_mfrc522_init+0x3a>
 800180e:	2306      	movs	r3, #6
 8001810:	e116      	b.n	8001a40 <drv_mfrc522_init+0x268>

  if (drv_mfrc522->drv_mfrc522_spi->Instance == SPI1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a8c      	ldr	r2, [pc, #560]	; (8001a4c <drv_mfrc522_init+0x274>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d113      	bne.n	8001846 <drv_mfrc522_init+0x6e>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_init(drv_mfrc522->drv_mfrc522_spi))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe feee 	bl	8000604 <bsp_spi1_init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b04      	cmp	r3, #4
 800182c:	d009      	beq.n	8001842 <drv_mfrc522_init+0x6a>
 800182e:	2b04      	cmp	r3, #4
 8001830:	dc3d      	bgt.n	80018ae <drv_mfrc522_init+0xd6>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <drv_mfrc522_init+0x66>
 8001836:	2b03      	cmp	r3, #3
 8001838:	d139      	bne.n	80018ae <drv_mfrc522_init+0xd6>
 800183a:	2304      	movs	r3, #4
 800183c:	e100      	b.n	8001a40 <drv_mfrc522_init+0x268>
 800183e:	2300      	movs	r3, #0
 8001840:	e0fe      	b.n	8001a40 <drv_mfrc522_init+0x268>
 8001842:	2306      	movs	r3, #6
 8001844:	e0fc      	b.n	8001a40 <drv_mfrc522_init+0x268>
  else if (drv_mfrc522->drv_mfrc522_spi->Instance == SPI2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <drv_mfrc522_init+0x278>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d113      	bne.n	800187a <drv_mfrc522_init+0xa2>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_init(drv_mfrc522->drv_mfrc522_spi))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fefe 	bl	8000658 <bsp_spi2_init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b04      	cmp	r3, #4
 8001860:	d009      	beq.n	8001876 <drv_mfrc522_init+0x9e>
 8001862:	2b04      	cmp	r3, #4
 8001864:	dc25      	bgt.n	80018b2 <drv_mfrc522_init+0xda>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <drv_mfrc522_init+0x9a>
 800186a:	2b03      	cmp	r3, #3
 800186c:	d121      	bne.n	80018b2 <drv_mfrc522_init+0xda>
 800186e:	2304      	movs	r3, #4
 8001870:	e0e6      	b.n	8001a40 <drv_mfrc522_init+0x268>
 8001872:	2300      	movs	r3, #0
 8001874:	e0e4      	b.n	8001a40 <drv_mfrc522_init+0x268>
 8001876:	2306      	movs	r3, #6
 8001878:	e0e2      	b.n	8001a40 <drv_mfrc522_init+0x268>
  else if (drv_mfrc522->drv_mfrc522_spi->Instance == SPI3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a74      	ldr	r2, [pc, #464]	; (8001a54 <drv_mfrc522_init+0x27c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d117      	bne.n	80018b6 <drv_mfrc522_init+0xde>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_init(drv_mfrc522->drv_mfrc522_spi))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe ff0e 	bl	80006ac <bsp_spi3_init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b04      	cmp	r3, #4
 8001894:	d009      	beq.n	80018aa <drv_mfrc522_init+0xd2>
 8001896:	2b04      	cmp	r3, #4
 8001898:	dc0f      	bgt.n	80018ba <drv_mfrc522_init+0xe2>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <drv_mfrc522_init+0xce>
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d10b      	bne.n	80018ba <drv_mfrc522_init+0xe2>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e0cc      	b.n	8001a40 <drv_mfrc522_init+0x268>
 80018a6:	2300      	movs	r3, #0
 80018a8:	e0ca      	b.n	8001a40 <drv_mfrc522_init+0x268>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e0c8      	b.n	8001a40 <drv_mfrc522_init+0x268>
    DRV_MFRC522_CHECK_FAULT(bsp_spi1_init(drv_mfrc522->drv_mfrc522_spi))
 80018ae:	bf00      	nop
 80018b0:	e004      	b.n	80018bc <drv_mfrc522_init+0xe4>
    DRV_MFRC522_CHECK_FAULT(bsp_spi2_init(drv_mfrc522->drv_mfrc522_spi))
 80018b2:	bf00      	nop
 80018b4:	e002      	b.n	80018bc <drv_mfrc522_init+0xe4>
    DRV_MFRC522_CHECK_FAULT(bsp_spi3_init(drv_mfrc522->drv_mfrc522_spi))
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <drv_mfrc522_init+0xe4>
 80018ba:	bf00      	nop

  /* Add device to private variable */
  drv_mfrc522_initialize |= (1 << drv_mfrc522->drv_mfrc522_id);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	461a      	mov	r2, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	4093      	lsls	r3, r2
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <drv_mfrc522_init+0x270>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <drv_mfrc522_init+0x270>)
 80018d6:	701a      	strb	r2, [r3, #0]
  bsp_gpio_set_pin(drv_mfrc522->drv_mfrc522_cs_port, drv_mfrc522->drv_mfrc522_cs_pin);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7fe fe6d 	bl	80005c4 <bsp_gpio_set_pin>

  /* Reset the Mifare Classic and NTAG devices */
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_COMMAND, DRV_PCD_RESETPHASE))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	220f      	movs	r2, #15
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	9200      	str	r2, [sp, #0]
 80018f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f6:	f7ff f895 	bl	8000a24 <drv_mfrc522_write_reg>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d002      	beq.n	8001910 <drv_mfrc522_init+0x138>
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <drv_mfrc522_init+0x280>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	e097      	b.n	8001a40 <drv_mfrc522_init+0x268>
  HAL_Delay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f000 fbf3 	bl	80020fc <HAL_Delay>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_T_MODE, 0x8D))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	228d      	movs	r2, #141	; 0x8d
 800191a:	9201      	str	r2, [sp, #4]
 800191c:	222a      	movs	r2, #42	; 0x2a
 800191e:	9200      	str	r2, [sp, #0]
 8001920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001922:	f7ff f87f 	bl	8000a24 <drv_mfrc522_write_reg>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <drv_mfrc522_init+0x280>)
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d002      	beq.n	800193c <drv_mfrc522_init+0x164>
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	e081      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_T_PRESCALER, 0x3E))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	223e      	movs	r2, #62	; 0x3e
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	222b      	movs	r2, #43	; 0x2b
 8001944:	9200      	str	r2, [sp, #0]
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	f7ff f86c 	bl	8000a24 <drv_mfrc522_write_reg>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d002      	beq.n	8001962 <drv_mfrc522_init+0x18a>
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <drv_mfrc522_init+0x280>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	e06e      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_T_RELOAD_L, 30))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	221e      	movs	r2, #30
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	222d      	movs	r2, #45	; 0x2d
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196e:	f7ff f859 	bl	8000a24 <drv_mfrc522_write_reg>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <drv_mfrc522_init+0x280>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d002      	beq.n	8001988 <drv_mfrc522_init+0x1b0>
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	e05b      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_T_RELOAD_H, 0))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	9201      	str	r2, [sp, #4]
 800198e:	222c      	movs	r2, #44	; 0x2c
 8001990:	9200      	str	r2, [sp, #0]
 8001992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001994:	f7ff f846 	bl	8000a24 <drv_mfrc522_write_reg>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <drv_mfrc522_init+0x280>)
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d002      	beq.n	80019ae <drv_mfrc522_init+0x1d6>
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	e048      	b.n	8001a40 <drv_mfrc522_init+0x268>
  /* 48dB gain */
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_RF_CFG, 0x70))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2270      	movs	r2, #112	; 0x70
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	2226      	movs	r2, #38	; 0x26
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ba:	f7ff f833 	bl	8000a24 <drv_mfrc522_write_reg>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d002      	beq.n	80019d4 <drv_mfrc522_init+0x1fc>
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	e035      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_TX_AUTO, 0x40))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	9201      	str	r2, [sp, #4]
 80019da:	2215      	movs	r2, #21
 80019dc:	9200      	str	r2, [sp, #0]
 80019de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e0:	f7ff f820 	bl	8000a24 <drv_mfrc522_write_reg>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d002      	beq.n	80019fa <drv_mfrc522_init+0x222>
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <drv_mfrc522_init+0x280>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	e022      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_write_reg(*drv_mfrc522, DRV_MFRC522_REG_MODE, 0x3D))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223d      	movs	r2, #61	; 0x3d
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	2211      	movs	r2, #17
 8001a02:	9200      	str	r2, [sp, #0]
 8001a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a06:	f7ff f80d 	bl	8000a24 <drv_mfrc522_write_reg>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d002      	beq.n	8001a20 <drv_mfrc522_init+0x248>
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	e00f      	b.n	8001a40 <drv_mfrc522_init+0x268>
  DRV_MFRC522_CHECK_STATUS(drv_mfrc522_antenna_on(*drv_mfrc522))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a24:	f7ff fe9e 	bl	8001764 <drv_mfrc522_antenna_on>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d002      	beq.n	8001a3e <drv_mfrc522_init+0x266>
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <drv_mfrc522_init+0x280>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	e000      	b.n	8001a40 <drv_mfrc522_init+0x268>
  return drv_mfrc522_success;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000009f 	.word	0x2000009f
 8001a4c:	40013000 	.word	0x40013000
 8001a50:	40003800 	.word	0x40003800
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	200000a0 	.word	0x200000a0

08001a5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a62:	f000 fad9 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a66:	f000 f869 	bl	8001b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6a:	f000 f939 	bl	8001ce0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a6e:	f000 f8d7 	bl	8001c20 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a72:	f000 f90b 	bl	8001c8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  drv_mfrc522.drv_mfrc522_spi     = &hspi1;
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <main+0xb8>)
 8001a78:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <main+0xbc>)
 8001a7a:	601a      	str	r2, [r3, #0]
  drv_mfrc522.drv_mfrc522_id      = 1;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <main+0xb8>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	731a      	strb	r2, [r3, #12]
  drv_mfrc522.drv_mfrc522_cs_port = GPIOA;
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <main+0xb8>)
 8001a84:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <main+0xc0>)
 8001a86:	605a      	str	r2, [r3, #4]
  drv_mfrc522.drv_mfrc522_cs_pin  = GPIO_PIN_0;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <main+0xb8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]

  sprintf(TX, "Status Config: %d\r\n", drv_mfrc522_init(&drv_mfrc522));
 8001a8e:	4821      	ldr	r0, [pc, #132]	; (8001b14 <main+0xb8>)
 8001a90:	f7ff fea2 	bl	80017d8 <drv_mfrc522_init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4921      	ldr	r1, [pc, #132]	; (8001b20 <main+0xc4>)
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <main+0xc8>)
 8001a9c:	f002 fdba 	bl	8004614 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) TX, strlen(TX), 100);
 8001aa0:	4820      	ldr	r0, [pc, #128]	; (8001b24 <main+0xc8>)
 8001aa2:	f7fe fbb5 	bl	8000210 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	491d      	ldr	r1, [pc, #116]	; (8001b24 <main+0xc8>)
 8001aae:	481e      	ldr	r0, [pc, #120]	; (8001b28 <main+0xcc>)
 8001ab0:	f002 fa09 	bl	8003ec6 <HAL_UART_Transmit>

  for (uint8_t i = 0; i < 16; i++) card_data[i] = i;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	e006      	b.n	8001ac8 <main+0x6c>
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	491b      	ldr	r1, [pc, #108]	; (8001b2c <main+0xd0>)
 8001abe:	79fa      	ldrb	r2, [r7, #7]
 8001ac0:	54ca      	strb	r2, [r1, r3]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	d9f5      	bls.n	8001aba <main+0x5e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    status = drv_mfrc522_write_address(drv_mfrc522, 4, card_data);
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <main+0xb8>)
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <main+0xd0>)
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ada:	f7ff fcdb 	bl	8001494 <drv_mfrc522_write_address>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <main+0xd4>)
 8001ae4:	701a      	strb	r2, [r3, #0]

    if (status == drv_mfrc522_success)
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <main+0xd4>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d106      	bne.n	8001afc <main+0xa0>
    {
      HAL_UART_Transmit(&huart2, (uint8_t *) "Write OK\r\n", 10, 100);
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	220a      	movs	r2, #10
 8001af2:	4910      	ldr	r1, [pc, #64]	; (8001b34 <main+0xd8>)
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <main+0xcc>)
 8001af6:	f002 f9e6 	bl	8003ec6 <HAL_UART_Transmit>
 8001afa:	e005      	b.n	8001b08 <main+0xac>
    }
    else
    {
      HAL_UART_Transmit(&huart2, (uint8_t *) "Write Er\r\n", 10, 100);
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	220a      	movs	r2, #10
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <main+0xdc>)
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <main+0xcc>)
 8001b04:	f002 f9df 	bl	8003ec6 <HAL_UART_Transmit>
    }

    HAL_Delay(2000);
 8001b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b0c:	f000 faf6 	bl	80020fc <HAL_Delay>
    status = drv_mfrc522_write_address(drv_mfrc522, 4, card_data);
 8001b10:	e7dd      	b.n	8001ace <main+0x72>
 8001b12:	bf00      	nop
 8001b14:	20000174 	.word	0x20000174
 8001b18:	200000a4 	.word	0x200000a4
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	08004f08 	.word	0x08004f08
 8001b24:	20000140 	.word	0x20000140
 8001b28:	200000fc 	.word	0x200000fc
 8001b2c:	20000188 	.word	0x20000188
 8001b30:	20000184 	.word	0x20000184
 8001b34:	08004f1c 	.word	0x08004f1c
 8001b38:	08004f28 	.word	0x08004f28

08001b3c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b094      	sub	sp, #80	; 0x50
 8001b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2234      	movs	r2, #52	; 0x34
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fd5a 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <SystemClock_Config+0xdc>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <SystemClock_Config+0xdc>)
 8001b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <SystemClock_Config+0xdc>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <SystemClock_Config+0xe0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <SystemClock_Config+0xe0>)
 8001b86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <SystemClock_Config+0xe0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8001b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8001ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM       = 4;
 8001bac:	2304      	movs	r3, #4
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN       = 180;
 8001bb0:	23b4      	movs	r3, #180	; 0xb4
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ       = 2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR       = 2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 f8eb 	bl	8002da0 <HAL_RCC_OscConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bd0:	f000 f8c8 	bl	8001d64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bd4:	f000 fd4a 	bl	800266c <HAL_PWREx_EnableOverDrive>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bde:	f000 f8c1 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	230f      	movs	r3, #15
 8001be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	2105      	movs	r1, #5
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fd83 	bl	800270c <HAL_RCC_ClockConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c0c:	f000 f8aa 	bl	8001d64 <Error_Handler>
  }
}
 8001c10:	bf00      	nop
 8001c12:	3750      	adds	r7, #80	; 0x50
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance               = SPI1;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <MX_SPI1_Init+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode              = SPI_MODE_MASTER;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS               = SPI_NSS_SOFT;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c54:	2220      	movs	r2, #32
 8001c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial     = 10;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_SPI1_Init+0x64>)
 8001c72:	f001 fb33 	bl	80032dc <HAL_SPI_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f000 f872 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200000a4 	.word	0x200000a4
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <MX_USART2_UART_Init+0x50>)
 8001c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f002 f8b2 	bl	8003e2c <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cce:	f000 f849 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000fc 	.word	0x200000fc
 8001cdc:	40004400 	.word	0x40004400

08001ce0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_GPIO_Init+0x7c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	480b      	ldr	r0, [pc, #44]	; (8001d60 <MX_GPIO_Init+0x80>)
 8001d34:	f000 fc80 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin   = GPIO_PIN_0;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_GPIO_Init+0x80>)
 8001d50:	f000 fade 	bl	8002310 <HAL_GPIO_Init>
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_MspInit+0x4c>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_SPI_MspInit+0x84>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12b      	bne.n	8001e3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_SPI_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e1a:	23e0      	movs	r3, #224	; 0xe0
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <HAL_SPI_MspInit+0x8c>)
 8001e36:	f000 fa6b 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40013000 	.word	0x40013000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <HAL_UART_MspInit+0x84>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12b      	bne.n	8001eca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_UART_MspInit+0x8c>)
 8001ec6:	f000 fa23 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 f8c6 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f002 fb24 	bl	80045b0 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20020000 	.word	0x20020000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	20000198 	.word	0x20000198
 8001f9c:	200001b0 	.word	0x200001b0

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fca:	490e      	ldr	r1, [pc, #56]	; (8002004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe0:	4c0b      	ldr	r4, [pc, #44]	; (8002010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fee:	f7ff ffd7 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f002 fae3 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7ff fd31 	bl	8001a5c <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002008:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 800200c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002010:	200001b0 	.word	0x200001b0

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_Init+0x40>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_Init+0x40>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x40>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 f931 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	200f      	movs	r0, #15
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fe90 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f93b 	bl	80022f6 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f911 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008
 80020e0:	2000019c 	.word	0x2000019c

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	2000019c 	.word	0x2000019c

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff47 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff5c 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffb0 	bl	8002264 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e165      	b.n	80025f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8154 	bne.w	80025f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80ae 	beq.w	80025f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_GPIO_Init+0x300>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_GPIO_Init+0x304>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x308>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x21a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4e      	ldr	r2, [pc, #312]	; (800261c <HAL_GPIO_Init+0x30c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x216>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_GPIO_Init+0x310>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x212>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_GPIO_Init+0x314>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_GPIO_Init+0x318>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x20a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4a      	ldr	r2, [pc, #296]	; (800262c <HAL_GPIO_Init+0x31c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x206>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_GPIO_Init+0x320>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x202>
 800250e:	2306      	movs	r3, #6
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x21c>
 8002512:	2307      	movs	r3, #7
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x21c>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x21c>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x21c>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x21c>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x21c>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x21c>
 800252a:	2300      	movs	r3, #0
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_GPIO_Init+0x304>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_GPIO_Init+0x324>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256e:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_GPIO_Init+0x324>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_GPIO_Init+0x324>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_GPIO_Init+0x324>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_GPIO_Init+0x324>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3301      	adds	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	f67f ae96 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_PWREx_EnableOverDrive+0x90>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_PWREx_EnableOverDrive+0x94>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7ff fd24 	bl	80020e4 <HAL_GetTick>
 800269c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800269e:	e009      	b.n	80026b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026a0:	f7ff fd20 	bl	80020e4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ae:	d901      	bls.n	80026b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e01f      	b.n	80026f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_PWREx_EnableOverDrive+0x98>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d1ee      	bne.n	80026a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c8:	f7ff fd0c 	bl	80020e4 <HAL_GetTick>
 80026cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026ce:	e009      	b.n	80026e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026d0:	f7ff fd08 	bl	80020e4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026de:	d901      	bls.n	80026e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e007      	b.n	80026f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_PWREx_EnableOverDrive+0x98>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026f0:	d1ee      	bne.n	80026d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	420e0040 	.word	0x420e0040
 8002704:	40007000 	.word	0x40007000
 8002708:	420e0044 	.word	0x420e0044

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff fc72 	bl	80020e4 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7ff fc6e 	bl	80020e4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f855 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbd2 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08004f34 	.word	0x08004f34
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f4:	f7ff fff0 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0a9b      	lsrs	r3, r3, #10
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08004f44 	.word	0x08004f44

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800291c:	f7ff ffdc 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0b5b      	lsrs	r3, r3, #13
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK2Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	08004f44 	.word	0x08004f44

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b0ae      	sub	sp, #184	; 0xb8
 8002946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002966:	4bcb      	ldr	r3, [pc, #812]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b0c      	cmp	r3, #12
 8002970:	f200 8206 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x440>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	080029b1 	.word	0x080029b1
 8002980:	08002d81 	.word	0x08002d81
 8002984:	08002d81 	.word	0x08002d81
 8002988:	08002d81 	.word	0x08002d81
 800298c:	080029b9 	.word	0x080029b9
 8002990:	08002d81 	.word	0x08002d81
 8002994:	08002d81 	.word	0x08002d81
 8002998:	08002d81 	.word	0x08002d81
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	08002d81 	.word	0x08002d81
 80029a4:	08002d81 	.word	0x08002d81
 80029a8:	08002d81 	.word	0x08002d81
 80029ac:	08002bb1 	.word	0x08002bb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4bb9      	ldr	r3, [pc, #740]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x358>)
 80029b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029b6:	e1e7      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b8:	4bb8      	ldr	r3, [pc, #736]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80029ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029be:	e1e3      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4bb4      	ldr	r3, [pc, #720]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029cc:	4bb1      	ldr	r3, [pc, #708]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d071      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4bae      	ldr	r3, [pc, #696]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80029e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029fe:	4622      	mov	r2, r4
 8002a00:	462b      	mov	r3, r5
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4621      	mov	r1, r4
 8002a18:	1a51      	subs	r1, r2, r1
 8002a1a:	6439      	str	r1, [r7, #64]	; 0x40
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	647b      	str	r3, [r7, #68]	; 0x44
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a30:	4649      	mov	r1, r9
 8002a32:	018b      	lsls	r3, r1, #6
 8002a34:	4641      	mov	r1, r8
 8002a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	018a      	lsls	r2, r1, #6
 8002a3e:	4641      	mov	r1, r8
 8002a40:	1a51      	subs	r1, r2, r1
 8002a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a44:	4649      	mov	r1, r9
 8002a46:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a58:	4649      	mov	r1, r9
 8002a5a:	00cb      	lsls	r3, r1, #3
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a62:	4641      	mov	r1, r8
 8002a64:	00ca      	lsls	r2, r1, #3
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
 8002a72:	462b      	mov	r3, r5
 8002a74:	460a      	mov	r2, r1
 8002a76:	eb42 0303 	adc.w	r3, r2, r3
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a88:	4629      	mov	r1, r5
 8002a8a:	024b      	lsls	r3, r1, #9
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a92:	4621      	mov	r1, r4
 8002a94:	024a      	lsls	r2, r1, #9
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002aac:	f7fd fc08 	bl	80002c0 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aba:	e067      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abc:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ac8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ada:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ade:	4622      	mov	r2, r4
 8002ae0:	462b      	mov	r3, r5
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4621      	mov	r1, r4
 8002af8:	1a51      	subs	r1, r2, r1
 8002afa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002afc:	4629      	mov	r1, r5
 8002afe:	eb63 0301 	sbc.w	r3, r3, r1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b10:	4649      	mov	r1, r9
 8002b12:	018b      	lsls	r3, r1, #6
 8002b14:	4641      	mov	r1, r8
 8002b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	018a      	lsls	r2, r1, #6
 8002b1e:	4641      	mov	r1, r8
 8002b20:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b24:	4649      	mov	r1, r9
 8002b26:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3e:	4692      	mov	sl, r2
 8002b40:	469b      	mov	fp, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	eb1a 0303 	adds.w	r3, sl, r3
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	028b      	lsls	r3, r1, #10
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b68:	4621      	mov	r1, r4
 8002b6a:	028a      	lsls	r2, r1, #10
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b74:	2200      	movs	r2, #0
 8002b76:	673b      	str	r3, [r7, #112]	; 0x70
 8002b78:	677a      	str	r2, [r7, #116]	; 0x74
 8002b7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b7e:	f7fd fb9f 	bl	80002c0 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4613      	mov	r3, r2
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bae:	e0eb      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb0:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d06b      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	2200      	movs	r2, #0
 8002bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bda:	663b      	str	r3, [r7, #96]	; 0x60
 8002bdc:	2300      	movs	r3, #0
 8002bde:	667b      	str	r3, [r7, #100]	; 0x64
 8002be0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002be4:	4622      	mov	r2, r4
 8002be6:	462b      	mov	r3, r5
 8002be8:	f04f 0000 	mov.w	r0, #0
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	0159      	lsls	r1, r3, #5
 8002bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf6:	0150      	lsls	r0, r2, #5
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	1a51      	subs	r1, r2, r1
 8002c00:	61b9      	str	r1, [r7, #24]
 8002c02:	4629      	mov	r1, r5
 8002c04:	eb63 0301 	sbc.w	r3, r3, r1
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c16:	4659      	mov	r1, fp
 8002c18:	018b      	lsls	r3, r1, #6
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c20:	4651      	mov	r1, sl
 8002c22:	018a      	lsls	r2, r1, #6
 8002c24:	4651      	mov	r1, sl
 8002c26:	ebb2 0801 	subs.w	r8, r2, r1
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	eb63 0901 	sbc.w	r9, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c44:	4690      	mov	r8, r2
 8002c46:	4699      	mov	r9, r3
 8002c48:	4623      	mov	r3, r4
 8002c4a:	eb18 0303 	adds.w	r3, r8, r3
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	462b      	mov	r3, r5
 8002c52:	eb49 0303 	adc.w	r3, r9, r3
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c64:	4629      	mov	r1, r5
 8002c66:	024b      	lsls	r3, r1, #9
 8002c68:	4621      	mov	r1, r4
 8002c6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c6e:	4621      	mov	r1, r4
 8002c70:	024a      	lsls	r2, r1, #9
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c84:	f7fd fb1c 	bl	80002c0 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c92:	e065      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x420>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca0:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4611      	mov	r1, r2
 8002cac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002cba:	4642      	mov	r2, r8
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	0159      	lsls	r1, r3, #5
 8002cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ccc:	0150      	lsls	r0, r2, #5
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	1a51      	subs	r1, r2, r1
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4649      	mov	r1, r9
 8002cda:	eb63 0301 	sbc.w	r3, r3, r1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cec:	4659      	mov	r1, fp
 8002cee:	018b      	lsls	r3, r1, #6
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	018a      	lsls	r2, r1, #6
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	1a54      	subs	r4, r2, r1
 8002cfe:	4659      	mov	r1, fp
 8002d00:	eb63 0501 	sbc.w	r5, r3, r1
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	00eb      	lsls	r3, r5, #3
 8002d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d12:	00e2      	lsls	r2, r4, #3
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	4643      	mov	r3, r8
 8002d1a:	18e3      	adds	r3, r4, r3
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	464b      	mov	r3, r9
 8002d20:	eb45 0303 	adc.w	r3, r5, r3
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	028a      	lsls	r2, r1, #10
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d48:	2200      	movs	r2, #0
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d52:	f7fd fab5 	bl	80002c0 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0f1b      	lsrs	r3, r3, #28
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d7e:	e003      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	37b8      	adds	r7, #184	; 0xb8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e28d      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8083 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d019      	beq.n	8002e00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dcc:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de4:	d00c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d112      	bne.n	8002e18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	4b84      	ldr	r3, [pc, #528]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d05b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x124>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d157      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e25a      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x90>
 8002e22:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7b      	ldr	r2, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0xcc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0xb4>
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0xcc>
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f936 	bl	80020e4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f932 	bl	80020e4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e21f      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0xdc>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f922 	bl	80020e4 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7ff f91e 	bl	80020e4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e20b      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	4b57      	ldr	r3, [pc, #348]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x104>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ed2:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d017      	beq.n	8002f0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eea:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d11c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x186>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e1d3      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4937      	ldr	r1, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	e03a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_OscConfig+0x278>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7ff f8cb 	bl	80020e4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7ff f8c7 	bl	80020e4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1b4      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4925      	ldr	r1, [pc, #148]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_OscConfig+0x278>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7ff f8aa 	bl	80020e4 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f94:	f7ff f8a6 	bl	80020e4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e193      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d036      	beq.n	800302c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff f88a 	bl	80020e4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7ff f886 	bl	80020e4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e173      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x234>
 8002ff2:	e01b      	b.n	800302c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7ff f873 	bl	80020e4 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	e00e      	b.n	8003020 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003002:	f7ff f86f 	bl	80020e4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d907      	bls.n	8003020 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e15c      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
 8003014:	40023800 	.word	0x40023800
 8003018:	42470000 	.word	0x42470000
 800301c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	4b8a      	ldr	r3, [pc, #552]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ea      	bne.n	8003002 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8097 	beq.w	8003168 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b7f      	ldr	r3, [pc, #508]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a7e      	ldr	r2, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b7c      	ldr	r3, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_OscConfig+0x4b0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x4b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x4b0>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003082:	f7ff f82f 	bl	80020e4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308a:	f7ff f82b 	bl	80020e4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e118      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x4b0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x31e>
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	; 0x70
 80030bc:	e01c      	b.n	80030f8 <HAL_RCC_OscConfig+0x358>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x340>
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	4b5e      	ldr	r3, [pc, #376]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a5d      	ldr	r2, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0x358>
 80030e0:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a59      	ldr	r2, [pc, #356]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fff0 	bl	80020e4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe ffec 	bl	80020e4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0d7      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ee      	beq.n	8003108 <HAL_RCC_OscConfig+0x368>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe ffda 	bl	80020e4 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fe ffd6 	bl	80020e4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0c1      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ee      	bne.n	8003134 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80ad 	beq.w	80032cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d060      	beq.n	8003240 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d145      	bne.n	8003212 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x4b4>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe ffaa 	bl	80020e4 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe ffa6 	bl	80020e4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e093      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	071b      	lsls	r3, r3, #28
 80031de:	491b      	ldr	r1, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4b4>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe ff7b 	bl	80020e4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe ff77 	bl	80020e4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e064      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x452>
 8003210:	e05c      	b.n	80032cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_OscConfig+0x4b4>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe ff64 	bl	80020e4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe ff60 	bl	80020e4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04d      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_OscConfig+0x4ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x480>
 800323e:	e045      	b.n	80032cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e040      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
 800324c:	40023800 	.word	0x40023800
 8003250:	40007000 	.word	0x40007000
 8003254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <HAL_RCC_OscConfig+0x538>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d030      	beq.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d129      	bne.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d122      	bne.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800328e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	4293      	cmp	r3, r2
 8003292:	d119      	bne.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	3b01      	subs	r3, #1
 80032a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d10f      	bne.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07b      	b.n	80033e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fe:	d009      	beq.n	8003314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
 8003306:	e005      	b.n	8003314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fd46 	bl	8001dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	ea42 0103 	orr.w	r1, r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0104 	and.w	r1, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0210 	and.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Transmit+0x22>
 800340c:	2302      	movs	r3, #2
 800340e:	e126      	b.n	800365e <HAL_SPI_Transmit+0x270>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fe fe64 	bl	80020e4 <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e10b      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x52>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e102      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348c:	d10f      	bne.n	80034ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d007      	beq.n	80034cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d4:	d14b      	bne.n	800356e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0xf6>
 80034de:	8afb      	ldrh	r3, [r7, #22]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d13e      	bne.n	8003562 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003508:	e02b      	b.n	8003562 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d112      	bne.n	800353e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
 800353c:	e011      	b.n	8003562 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800353e:	f7fe fdd1 	bl	80020e4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d803      	bhi.n	8003556 <HAL_SPI_Transmit+0x168>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d102      	bne.n	800355c <HAL_SPI_Transmit+0x16e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003560:	e074      	b.n	800364c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ce      	bne.n	800350a <HAL_SPI_Transmit+0x11c>
 800356c:	e04c      	b.n	8003608 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Transmit+0x18e>
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d140      	bne.n	80035fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035a2:	e02c      	b.n	80035fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d8:	e011      	b.n	80035fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035da:	f7fe fd83 	bl	80020e4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d803      	bhi.n	80035f2 <HAL_SPI_Transmit+0x204>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d102      	bne.n	80035f8 <HAL_SPI_Transmit+0x20a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035fc:	e026      	b.n	800364c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1cd      	bne.n	80035a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	6839      	ldr	r1, [r7, #0]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fbcb 	bl	8003da8 <SPI_EndRxTxTransaction>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e000      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

error:
 800364a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800365c:	7ffb      	ldrb	r3, [r7, #31]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b088      	sub	sp, #32
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003682:	d112      	bne.n	80036aa <HAL_SPI_Receive+0x44>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10e      	bne.n	80036aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8f1 	bl	8003888 <HAL_SPI_TransmitReceive>
 80036a6:	4603      	mov	r3, r0
 80036a8:	e0ea      	b.n	8003880 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_SPI_Receive+0x52>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0e3      	b.n	8003880 <HAL_SPI_Receive+0x21a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036c0:	f7fe fd10 	bl	80020e4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036d6:	e0ca      	b.n	800386e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Receive+0x7e>
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036e8:	e0c1      	b.n	800386e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2204      	movs	r2, #4
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003730:	d10f      	bne.n	8003752 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003750:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d007      	beq.n	8003770 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d162      	bne.n	800383e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003778:	e02e      	b.n	80037d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d115      	bne.n	80037b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f103 020c 	add.w	r2, r3, #12
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b2:	e011      	b.n	80037d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b4:	f7fe fc96 	bl	80020e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d803      	bhi.n	80037cc <HAL_SPI_Receive+0x166>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Receive+0x16c>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037d6:	e04a      	b.n	800386e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1cb      	bne.n	800377a <HAL_SPI_Receive+0x114>
 80037e2:	e031      	b.n	8003848 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d113      	bne.n	800381a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	b292      	uxth	r2, r2
 80037fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003818:	e011      	b.n	800383e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fe fc63 	bl	80020e4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Receive+0x1cc>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Receive+0x1d2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800383c:	e017      	b.n	800386e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1cd      	bne.n	80037e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fa45 	bl	8003cdc <SPI_EndRxTransaction>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
 800386a:	e000      	b.n	800386e <HAL_SPI_Receive+0x208>
  }

error :
 800386c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x26>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e18a      	b.n	8003bc4 <HAL_SPI_TransmitReceive+0x33c>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b6:	f7fe fc15 	bl	80020e4 <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d00f      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x70>
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038de:	d107      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x68>
 80038e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d003      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038f6:	e15b      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_SPI_TransmitReceive+0x82>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_SPI_TransmitReceive+0x82>
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003910:	e14e      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2205      	movs	r2, #5
 8003922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	887a      	ldrh	r2, [r7, #2]
 8003936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	887a      	ldrh	r2, [r7, #2]
 800394e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d007      	beq.n	800397a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d178      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x10a>
 800398c:	8b7b      	ldrh	r3, [r7, #26]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d166      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b6:	e053      	b.n	8003a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d11b      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x176>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d016      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x176>
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d113      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d119      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x1b8>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d014      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	b292      	uxth	r2, r2
 8003a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a40:	f7fe fb50 	bl	80020e4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d807      	bhi.n	8003a60 <HAL_SPI_TransmitReceive+0x1d8>
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d003      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a5e:	e0a7      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1a6      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x130>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1a1      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x130>
 8003a74:	e07c      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x1fc>
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d16b      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aaa:	e057      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d11c      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x26c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x26c>
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d114      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d119      	bne.n	8003b36 <HAL_SPI_TransmitReceive+0x2ae>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d014      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b32:	2301      	movs	r3, #1
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b36:	f7fe fad5 	bl	80020e4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d803      	bhi.n	8003b4e <HAL_SPI_TransmitReceive+0x2c6>
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x2cc>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b5a:	e029      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1a2      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x224>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d19d      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f917 	bl	8003da8 <SPI_EndRxTxTransaction>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d006      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b8c:	e010      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	e000      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3730      	adds	r7, #48	; 0x30
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bdc:	f7fe fa82 	bl	80020e4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bec:	f7fe fa7a 	bl	80020e4 <HAL_GetTick>
 8003bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	015b      	lsls	r3, r3, #5
 8003bf8:	0d1b      	lsrs	r3, r3, #20
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c02:	e054      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d050      	beq.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c0c:	f7fe fa6a 	bl	80020e4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d902      	bls.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13d      	bne.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d111      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d004      	beq.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d107      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d10f      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e017      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d19b      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000000 	.word	0x20000000

08003cdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf0:	d111      	bne.n	8003d16 <SPI_EndRxTransaction+0x3a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfa:	d004      	beq.n	8003d06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d107      	bne.n	8003d16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d12a      	bne.n	8003d76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d012      	beq.n	8003d50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff ff49 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02d      	beq.n	8003d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e026      	b.n	8003d9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2101      	movs	r1, #1
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff ff36 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01a      	beq.n	8003d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e013      	b.n	8003d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ff23 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <SPI_EndRxTxTransaction+0x7c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <SPI_EndRxTxTransaction+0x80>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0d5b      	lsrs	r3, r3, #21
 8003dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd2:	d112      	bne.n	8003dfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fef4 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d0f2      	beq.n	8003dfa <SPI_EndRxTxTransaction+0x52>
 8003e14:	e000      	b.n	8003e18 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e16:	bf00      	nop
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000
 8003e28:	165e9f81 	.word	0x165e9f81

08003e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e03f      	b.n	8003ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fffc 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f929 	bl	80040c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d17c      	bne.n	8003fe0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_Transmit+0x2c>
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e075      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x3e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e06e      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2221      	movs	r2, #33	; 0x21
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1a:	f7fe f8e3 	bl	80020e4 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f58:	e02a      	b.n	8003fb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f840 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e036      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e007      	b.n	8003fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1cf      	bne.n	8003f5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f810 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e006      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b090      	sub	sp, #64	; 0x40
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	e050      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d04c      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x30>
 800400a:	f7fe f86b 	bl	80020e4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004016:	429a      	cmp	r2, r3
 8004018:	d241      	bcs.n	800409e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800403a:	637a      	str	r2, [r7, #52]	; 0x34
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3314      	adds	r3, #20
 8004054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	613b      	str	r3, [r7, #16]
   return(result);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800406e:	623a      	str	r2, [r7, #32]
 8004070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	61bb      	str	r3, [r7, #24]
   return(result);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e5      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e00f      	b.n	80040be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d09f      	beq.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3740      	adds	r7, #64	; 0x40
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b0c0      	sub	sp, #256	; 0x100
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	68d9      	ldr	r1, [r3, #12]
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	ea40 0301 	orr.w	r3, r0, r1
 80040f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	431a      	orrs	r2, r3
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004120:	f021 010c 	bic.w	r1, r1, #12
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800412e:	430b      	orrs	r3, r1
 8004130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	6999      	ldr	r1, [r3, #24]
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	ea40 0301 	orr.w	r3, r0, r1
 800414e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <UART_SetConfig+0x2cc>)
 8004158:	429a      	cmp	r2, r3
 800415a:	d005      	beq.n	8004168 <UART_SetConfig+0xa0>
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <UART_SetConfig+0x2d0>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d104      	bne.n	8004172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7fe fbd6 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 800416c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004170:	e003      	b.n	800417a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004172:	f7fe fbbd 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8004176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004184:	f040 810c 	bne.w	80043a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041a2:	415b      	adcs	r3, r3
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041aa:	4621      	mov	r1, r4
 80041ac:	eb12 0801 	adds.w	r8, r2, r1
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb43 0901 	adc.w	r9, r3, r1
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ca:	4690      	mov	r8, r2
 80041cc:	4699      	mov	r9, r3
 80041ce:	4623      	mov	r3, r4
 80041d0:	eb18 0303 	adds.w	r3, r8, r3
 80041d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041d8:	462b      	mov	r3, r5
 80041da:	eb49 0303 	adc.w	r3, r9, r3
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041f6:	460b      	mov	r3, r1
 80041f8:	18db      	adds	r3, r3, r3
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
 80041fc:	4613      	mov	r3, r2
 80041fe:	eb42 0303 	adc.w	r3, r2, r3
 8004202:	657b      	str	r3, [r7, #84]	; 0x54
 8004204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800420c:	f7fc f858 	bl	80002c0 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <UART_SetConfig+0x2d4>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800422c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	64b9      	str	r1, [r7, #72]	; 0x48
 8004238:	415b      	adcs	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004240:	4641      	mov	r1, r8
 8004242:	eb12 0a01 	adds.w	sl, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb43 0b01 	adc.w	fp, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800425c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004260:	4692      	mov	sl, r2
 8004262:	469b      	mov	fp, r3
 8004264:	4643      	mov	r3, r8
 8004266:	eb1a 0303 	adds.w	r3, sl, r3
 800426a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800426e:	464b      	mov	r3, r9
 8004270:	eb4b 0303 	adc.w	r3, fp, r3
 8004274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
 800429a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800429e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042a2:	f7fc f80d 	bl	80002c0 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <UART_SetConfig+0x2d4>)
 80042ae:	fba3 2301 	umull	r2, r3, r3, r1
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2264      	movs	r2, #100	; 0x64
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	1acb      	subs	r3, r1, r3
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042c2:	4b36      	ldr	r3, [pc, #216]	; (800439c <UART_SetConfig+0x2d4>)
 80042c4:	fba3 2302 	umull	r2, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d0:	441c      	add	r4, r3
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80042ec:	415b      	adcs	r3, r3
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6339      	str	r1, [r7, #48]	; 0x30
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004328:	464b      	mov	r3, r9
 800432a:	460a      	mov	r2, r1
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004348:	460b      	mov	r3, r1
 800434a:	18db      	adds	r3, r3, r3
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	4613      	mov	r3, r2
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800435e:	f7fb ffaf 	bl	80002c0 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <UART_SetConfig+0x2d4>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <UART_SetConfig+0x2d4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4422      	add	r2, r4
 800438e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004390:	e105      	b.n	800459e <UART_SetConfig+0x4d6>
 8004392:	bf00      	nop
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	6239      	str	r1, [r7, #32]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043c2:	4641      	mov	r1, r8
 80043c4:	1854      	adds	r4, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb43 0501 	adc.w	r5, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e8:	464b      	mov	r3, r9
 80043ea:	eb45 0303 	adc.w	r3, r5, r3
 80043ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800440e:	4629      	mov	r1, r5
 8004410:	008b      	lsls	r3, r1, #2
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004418:	4621      	mov	r1, r4
 800441a:	008a      	lsls	r2, r1, #2
 800441c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004420:	f7fb ff4e 	bl	80002c0 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b60      	ldr	r3, [pc, #384]	; (80045ac <UART_SetConfig+0x4e4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011c      	lsls	r4, r3, #4
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800443c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	61b9      	str	r1, [r7, #24]
 800444c:	415b      	adcs	r3, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6139      	str	r1, [r7, #16]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004488:	464b      	mov	r3, r9
 800448a:	460a      	mov	r2, r1
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	67bb      	str	r3, [r7, #120]	; 0x78
 800449e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044ac:	4649      	mov	r1, r9
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4641      	mov	r1, r8
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044be:	f7fb feff 	bl	80002c0 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <UART_SetConfig+0x4e4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a34      	ldr	r2, [pc, #208]	; (80045ac <UART_SetConfig+0x4e4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	441c      	add	r4, r3
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	673b      	str	r3, [r7, #112]	; 0x70
 80044f0:	677a      	str	r2, [r7, #116]	; 0x74
 80044f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	415b      	adcs	r3, r3
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004506:	4641      	mov	r1, r8
 8004508:	1851      	adds	r1, r2, r1
 800450a:	6039      	str	r1, [r7, #0]
 800450c:	4649      	mov	r1, r9
 800450e:	414b      	adcs	r3, r1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800451e:	4659      	mov	r1, fp
 8004520:	00cb      	lsls	r3, r1, #3
 8004522:	4651      	mov	r1, sl
 8004524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004528:	4651      	mov	r1, sl
 800452a:	00ca      	lsls	r2, r1, #3
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	4603      	mov	r3, r0
 8004532:	4642      	mov	r2, r8
 8004534:	189b      	adds	r3, r3, r2
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
 800454c:	667a      	str	r2, [r7, #100]	; 0x64
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800455a:	4649      	mov	r1, r9
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	4641      	mov	r1, r8
 8004560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004564:	4641      	mov	r1, r8
 8004566:	008a      	lsls	r2, r1, #2
 8004568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800456c:	f7fb fea8 	bl	80002c0 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <UART_SetConfig+0x4e4>)
 8004576:	fba3 1302 	umull	r1, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2164      	movs	r1, #100	; 0x64
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <UART_SetConfig+0x4e4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4422      	add	r2, r4
 800459c:	609a      	str	r2, [r3, #8]
}
 800459e:	bf00      	nop
 80045a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	2000000c 	.word	0x2000000c

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 fc8e 	bl	8004ef0 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08004f88 	.word	0x08004f88
 80045f8:	08004f88 	.word	0x08004f88
 80045fc:	08004f88 	.word	0x08004f88
 8004600:	08004f8c 	.word	0x08004f8c

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <siprintf>:
 8004614:	b40e      	push	{r1, r2, r3}
 8004616:	b500      	push	{lr}
 8004618:	b09c      	sub	sp, #112	; 0x70
 800461a:	ab1d      	add	r3, sp, #116	; 0x74
 800461c:	9002      	str	r0, [sp, #8]
 800461e:	9006      	str	r0, [sp, #24]
 8004620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004624:	4809      	ldr	r0, [pc, #36]	; (800464c <siprintf+0x38>)
 8004626:	9107      	str	r1, [sp, #28]
 8004628:	9104      	str	r1, [sp, #16]
 800462a:	4909      	ldr	r1, [pc, #36]	; (8004650 <siprintf+0x3c>)
 800462c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004630:	9105      	str	r1, [sp, #20]
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	a902      	add	r1, sp, #8
 8004638:	f000 f868 	bl	800470c <_svfiprintf_r>
 800463c:	9b02      	ldr	r3, [sp, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	b01c      	add	sp, #112	; 0x70
 8004644:	f85d eb04 	ldr.w	lr, [sp], #4
 8004648:	b003      	add	sp, #12
 800464a:	4770      	bx	lr
 800464c:	2000000c 	.word	0x2000000c
 8004650:	ffff0208 	.word	0xffff0208

08004654 <__ssputs_r>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	688e      	ldr	r6, [r1, #8]
 800465a:	429e      	cmp	r6, r3
 800465c:	4682      	mov	sl, r0
 800465e:	460c      	mov	r4, r1
 8004660:	4690      	mov	r8, r2
 8004662:	461f      	mov	r7, r3
 8004664:	d838      	bhi.n	80046d8 <__ssputs_r+0x84>
 8004666:	898a      	ldrh	r2, [r1, #12]
 8004668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800466c:	d032      	beq.n	80046d4 <__ssputs_r+0x80>
 800466e:	6825      	ldr	r5, [r4, #0]
 8004670:	6909      	ldr	r1, [r1, #16]
 8004672:	eba5 0901 	sub.w	r9, r5, r1
 8004676:	6965      	ldr	r5, [r4, #20]
 8004678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800467c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004680:	3301      	adds	r3, #1
 8004682:	444b      	add	r3, r9
 8004684:	106d      	asrs	r5, r5, #1
 8004686:	429d      	cmp	r5, r3
 8004688:	bf38      	it	cc
 800468a:	461d      	movcc	r5, r3
 800468c:	0553      	lsls	r3, r2, #21
 800468e:	d531      	bpl.n	80046f4 <__ssputs_r+0xa0>
 8004690:	4629      	mov	r1, r5
 8004692:	f000 fb63 	bl	8004d5c <_malloc_r>
 8004696:	4606      	mov	r6, r0
 8004698:	b950      	cbnz	r0, 80046b0 <__ssputs_r+0x5c>
 800469a:	230c      	movs	r3, #12
 800469c:	f8ca 3000 	str.w	r3, [sl]
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	6921      	ldr	r1, [r4, #16]
 80046b2:	464a      	mov	r2, r9
 80046b4:	f000 fabe 	bl	8004c34 <memcpy>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	6126      	str	r6, [r4, #16]
 80046c6:	6165      	str	r5, [r4, #20]
 80046c8:	444e      	add	r6, r9
 80046ca:	eba5 0509 	sub.w	r5, r5, r9
 80046ce:	6026      	str	r6, [r4, #0]
 80046d0:	60a5      	str	r5, [r4, #8]
 80046d2:	463e      	mov	r6, r7
 80046d4:	42be      	cmp	r6, r7
 80046d6:	d900      	bls.n	80046da <__ssputs_r+0x86>
 80046d8:	463e      	mov	r6, r7
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	4632      	mov	r2, r6
 80046de:	4641      	mov	r1, r8
 80046e0:	f000 fab6 	bl	8004c50 <memmove>
 80046e4:	68a3      	ldr	r3, [r4, #8]
 80046e6:	1b9b      	subs	r3, r3, r6
 80046e8:	60a3      	str	r3, [r4, #8]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	4433      	add	r3, r6
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	2000      	movs	r0, #0
 80046f2:	e7db      	b.n	80046ac <__ssputs_r+0x58>
 80046f4:	462a      	mov	r2, r5
 80046f6:	f000 fba5 	bl	8004e44 <_realloc_r>
 80046fa:	4606      	mov	r6, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1e1      	bne.n	80046c4 <__ssputs_r+0x70>
 8004700:	6921      	ldr	r1, [r4, #16]
 8004702:	4650      	mov	r0, sl
 8004704:	f000 fabe 	bl	8004c84 <_free_r>
 8004708:	e7c7      	b.n	800469a <__ssputs_r+0x46>
	...

0800470c <_svfiprintf_r>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	4698      	mov	r8, r3
 8004712:	898b      	ldrh	r3, [r1, #12]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	b09d      	sub	sp, #116	; 0x74
 8004718:	4607      	mov	r7, r0
 800471a:	460d      	mov	r5, r1
 800471c:	4614      	mov	r4, r2
 800471e:	d50e      	bpl.n	800473e <_svfiprintf_r+0x32>
 8004720:	690b      	ldr	r3, [r1, #16]
 8004722:	b963      	cbnz	r3, 800473e <_svfiprintf_r+0x32>
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	f000 fb19 	bl	8004d5c <_malloc_r>
 800472a:	6028      	str	r0, [r5, #0]
 800472c:	6128      	str	r0, [r5, #16]
 800472e:	b920      	cbnz	r0, 800473a <_svfiprintf_r+0x2e>
 8004730:	230c      	movs	r3, #12
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e0d1      	b.n	80048de <_svfiprintf_r+0x1d2>
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	616b      	str	r3, [r5, #20]
 800473e:	2300      	movs	r3, #0
 8004740:	9309      	str	r3, [sp, #36]	; 0x24
 8004742:	2320      	movs	r3, #32
 8004744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004748:	f8cd 800c 	str.w	r8, [sp, #12]
 800474c:	2330      	movs	r3, #48	; 0x30
 800474e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048f8 <_svfiprintf_r+0x1ec>
 8004752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004756:	f04f 0901 	mov.w	r9, #1
 800475a:	4623      	mov	r3, r4
 800475c:	469a      	mov	sl, r3
 800475e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004762:	b10a      	cbz	r2, 8004768 <_svfiprintf_r+0x5c>
 8004764:	2a25      	cmp	r2, #37	; 0x25
 8004766:	d1f9      	bne.n	800475c <_svfiprintf_r+0x50>
 8004768:	ebba 0b04 	subs.w	fp, sl, r4
 800476c:	d00b      	beq.n	8004786 <_svfiprintf_r+0x7a>
 800476e:	465b      	mov	r3, fp
 8004770:	4622      	mov	r2, r4
 8004772:	4629      	mov	r1, r5
 8004774:	4638      	mov	r0, r7
 8004776:	f7ff ff6d 	bl	8004654 <__ssputs_r>
 800477a:	3001      	adds	r0, #1
 800477c:	f000 80aa 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004782:	445a      	add	r2, fp
 8004784:	9209      	str	r2, [sp, #36]	; 0x24
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80a2 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004790:	2300      	movs	r3, #0
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479a:	f10a 0a01 	add.w	sl, sl, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	9307      	str	r3, [sp, #28]
 80047a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047a6:	931a      	str	r3, [sp, #104]	; 0x68
 80047a8:	4654      	mov	r4, sl
 80047aa:	2205      	movs	r2, #5
 80047ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b0:	4851      	ldr	r0, [pc, #324]	; (80048f8 <_svfiprintf_r+0x1ec>)
 80047b2:	f7fb fd35 	bl	8000220 <memchr>
 80047b6:	9a04      	ldr	r2, [sp, #16]
 80047b8:	b9d8      	cbnz	r0, 80047f2 <_svfiprintf_r+0xe6>
 80047ba:	06d0      	lsls	r0, r2, #27
 80047bc:	bf44      	itt	mi
 80047be:	2320      	movmi	r3, #32
 80047c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c4:	0711      	lsls	r1, r2, #28
 80047c6:	bf44      	itt	mi
 80047c8:	232b      	movmi	r3, #43	; 0x2b
 80047ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ce:	f89a 3000 	ldrb.w	r3, [sl]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d015      	beq.n	8004802 <_svfiprintf_r+0xf6>
 80047d6:	9a07      	ldr	r2, [sp, #28]
 80047d8:	4654      	mov	r4, sl
 80047da:	2000      	movs	r0, #0
 80047dc:	f04f 0c0a 	mov.w	ip, #10
 80047e0:	4621      	mov	r1, r4
 80047e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e6:	3b30      	subs	r3, #48	; 0x30
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d94e      	bls.n	800488a <_svfiprintf_r+0x17e>
 80047ec:	b1b0      	cbz	r0, 800481c <_svfiprintf_r+0x110>
 80047ee:	9207      	str	r2, [sp, #28]
 80047f0:	e014      	b.n	800481c <_svfiprintf_r+0x110>
 80047f2:	eba0 0308 	sub.w	r3, r0, r8
 80047f6:	fa09 f303 	lsl.w	r3, r9, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	46a2      	mov	sl, r4
 8004800:	e7d2      	b.n	80047a8 <_svfiprintf_r+0x9c>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9103      	str	r1, [sp, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfbb      	ittet	lt
 800480e:	425b      	neglt	r3, r3
 8004810:	f042 0202 	orrlt.w	r2, r2, #2
 8004814:	9307      	strge	r3, [sp, #28]
 8004816:	9307      	strlt	r3, [sp, #28]
 8004818:	bfb8      	it	lt
 800481a:	9204      	strlt	r2, [sp, #16]
 800481c:	7823      	ldrb	r3, [r4, #0]
 800481e:	2b2e      	cmp	r3, #46	; 0x2e
 8004820:	d10c      	bne.n	800483c <_svfiprintf_r+0x130>
 8004822:	7863      	ldrb	r3, [r4, #1]
 8004824:	2b2a      	cmp	r3, #42	; 0x2a
 8004826:	d135      	bne.n	8004894 <_svfiprintf_r+0x188>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	9203      	str	r2, [sp, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfb8      	it	lt
 8004834:	f04f 33ff 	movlt.w	r3, #4294967295
 8004838:	3402      	adds	r4, #2
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004908 <_svfiprintf_r+0x1fc>
 8004840:	7821      	ldrb	r1, [r4, #0]
 8004842:	2203      	movs	r2, #3
 8004844:	4650      	mov	r0, sl
 8004846:	f7fb fceb 	bl	8000220 <memchr>
 800484a:	b140      	cbz	r0, 800485e <_svfiprintf_r+0x152>
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	eba0 000a 	sub.w	r0, r0, sl
 8004852:	fa03 f000 	lsl.w	r0, r3, r0
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	4303      	orrs	r3, r0
 800485a:	3401      	adds	r4, #1
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004862:	4826      	ldr	r0, [pc, #152]	; (80048fc <_svfiprintf_r+0x1f0>)
 8004864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004868:	2206      	movs	r2, #6
 800486a:	f7fb fcd9 	bl	8000220 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d038      	beq.n	80048e4 <_svfiprintf_r+0x1d8>
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <_svfiprintf_r+0x1f4>)
 8004874:	bb1b      	cbnz	r3, 80048be <_svfiprintf_r+0x1b2>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	3307      	adds	r3, #7
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	3308      	adds	r3, #8
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004884:	4433      	add	r3, r6
 8004886:	9309      	str	r3, [sp, #36]	; 0x24
 8004888:	e767      	b.n	800475a <_svfiprintf_r+0x4e>
 800488a:	fb0c 3202 	mla	r2, ip, r2, r3
 800488e:	460c      	mov	r4, r1
 8004890:	2001      	movs	r0, #1
 8004892:	e7a5      	b.n	80047e0 <_svfiprintf_r+0xd4>
 8004894:	2300      	movs	r3, #0
 8004896:	3401      	adds	r4, #1
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	4619      	mov	r1, r3
 800489c:	f04f 0c0a 	mov.w	ip, #10
 80048a0:	4620      	mov	r0, r4
 80048a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a6:	3a30      	subs	r2, #48	; 0x30
 80048a8:	2a09      	cmp	r2, #9
 80048aa:	d903      	bls.n	80048b4 <_svfiprintf_r+0x1a8>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0c5      	beq.n	800483c <_svfiprintf_r+0x130>
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	e7c3      	b.n	800483c <_svfiprintf_r+0x130>
 80048b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048b8:	4604      	mov	r4, r0
 80048ba:	2301      	movs	r3, #1
 80048bc:	e7f0      	b.n	80048a0 <_svfiprintf_r+0x194>
 80048be:	ab03      	add	r3, sp, #12
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <_svfiprintf_r+0x1f8>)
 80048c6:	a904      	add	r1, sp, #16
 80048c8:	4638      	mov	r0, r7
 80048ca:	f3af 8000 	nop.w
 80048ce:	1c42      	adds	r2, r0, #1
 80048d0:	4606      	mov	r6, r0
 80048d2:	d1d6      	bne.n	8004882 <_svfiprintf_r+0x176>
 80048d4:	89ab      	ldrh	r3, [r5, #12]
 80048d6:	065b      	lsls	r3, r3, #25
 80048d8:	f53f af2c 	bmi.w	8004734 <_svfiprintf_r+0x28>
 80048dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048de:	b01d      	add	sp, #116	; 0x74
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <_svfiprintf_r+0x1f8>)
 80048ec:	a904      	add	r1, sp, #16
 80048ee:	4638      	mov	r0, r7
 80048f0:	f000 f87a 	bl	80049e8 <_printf_i>
 80048f4:	e7eb      	b.n	80048ce <_svfiprintf_r+0x1c2>
 80048f6:	bf00      	nop
 80048f8:	08004f4c 	.word	0x08004f4c
 80048fc:	08004f56 	.word	0x08004f56
 8004900:	00000000 	.word	0x00000000
 8004904:	08004655 	.word	0x08004655
 8004908:	08004f52 	.word	0x08004f52

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800491c:	4293      	cmp	r3, r2
 800491e:	bfb8      	it	lt
 8004920:	4613      	movlt	r3, r2
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004928:	4607      	mov	r7, r0
 800492a:	460c      	mov	r4, r1
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc26      	bgt.n	80049a2 <_printf_common+0x96>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d42b      	bmi.n	80049bc <_printf_common+0xb0>
 8004964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004968:	4649      	mov	r1, r9
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d01e      	beq.n	80049b0 <_printf_common+0xa4>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	68e5      	ldr	r5, [r4, #12]
 8004976:	6832      	ldr	r2, [r6, #0]
 8004978:	f003 0306 	and.w	r3, r3, #6
 800497c:	2b04      	cmp	r3, #4
 800497e:	bf08      	it	eq
 8004980:	1aad      	subeq	r5, r5, r2
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	6922      	ldr	r2, [r4, #16]
 8004986:	bf0c      	ite	eq
 8004988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800498c:	2500      	movne	r5, #0
 800498e:	4293      	cmp	r3, r2
 8004990:	bfc4      	itt	gt
 8004992:	1a9b      	subgt	r3, r3, r2
 8004994:	18ed      	addgt	r5, r5, r3
 8004996:	2600      	movs	r6, #0
 8004998:	341a      	adds	r4, #26
 800499a:	42b5      	cmp	r5, r6
 800499c:	d11a      	bne.n	80049d4 <_printf_common+0xc8>
 800499e:	2000      	movs	r0, #0
 80049a0:	e008      	b.n	80049b4 <_printf_common+0xa8>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4652      	mov	r2, sl
 80049a6:	4649      	mov	r1, r9
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c0      	blx	r8
 80049ac:	3001      	adds	r0, #1
 80049ae:	d103      	bne.n	80049b8 <_printf_common+0xac>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b8:	3501      	adds	r5, #1
 80049ba:	e7c6      	b.n	800494a <_printf_common+0x3e>
 80049bc:	18e1      	adds	r1, r4, r3
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c6:	4422      	add	r2, r4
 80049c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d0:	3302      	adds	r3, #2
 80049d2:	e7c7      	b.n	8004964 <_printf_common+0x58>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4622      	mov	r2, r4
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d0e6      	beq.n	80049b0 <_printf_common+0xa4>
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7d9      	b.n	800499a <_printf_common+0x8e>
	...

080049e8 <_printf_i>:
 80049e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	7e0f      	ldrb	r7, [r1, #24]
 80049ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f0:	2f78      	cmp	r7, #120	; 0x78
 80049f2:	4691      	mov	r9, r2
 80049f4:	4680      	mov	r8, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	469a      	mov	sl, r3
 80049fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fe:	d807      	bhi.n	8004a10 <_printf_i+0x28>
 8004a00:	2f62      	cmp	r7, #98	; 0x62
 8004a02:	d80a      	bhi.n	8004a1a <_printf_i+0x32>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	f000 80d8 	beq.w	8004bba <_printf_i+0x1d2>
 8004a0a:	2f58      	cmp	r7, #88	; 0x58
 8004a0c:	f000 80a3 	beq.w	8004b56 <_printf_i+0x16e>
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a18:	e03a      	b.n	8004a90 <_printf_i+0xa8>
 8004a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1e:	2b15      	cmp	r3, #21
 8004a20:	d8f6      	bhi.n	8004a10 <_printf_i+0x28>
 8004a22:	a101      	add	r1, pc, #4	; (adr r1, 8004a28 <_printf_i+0x40>)
 8004a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a11 	.word	0x08004a11
 8004a34:	08004a11 	.word	0x08004a11
 8004a38:	08004a11 	.word	0x08004a11
 8004a3c:	08004a11 	.word	0x08004a11
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a11 	.word	0x08004a11
 8004a48:	08004a11 	.word	0x08004a11
 8004a4c:	08004a11 	.word	0x08004a11
 8004a50:	08004a11 	.word	0x08004a11
 8004a54:	08004ba1 	.word	0x08004ba1
 8004a58:	08004ac5 	.word	0x08004ac5
 8004a5c:	08004b83 	.word	0x08004b83
 8004a60:	08004a11 	.word	0x08004a11
 8004a64:	08004a11 	.word	0x08004a11
 8004a68:	08004bc3 	.word	0x08004bc3
 8004a6c:	08004a11 	.word	0x08004a11
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a11 	.word	0x08004a11
 8004a78:	08004a11 	.word	0x08004a11
 8004a7c:	08004b8b 	.word	0x08004b8b
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a3      	b.n	8004bdc <_printf_i+0x1f4>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	6829      	ldr	r1, [r5, #0]
 8004a98:	0606      	lsls	r6, r0, #24
 8004a9a:	f101 0304 	add.w	r3, r1, #4
 8004a9e:	d50a      	bpl.n	8004ab6 <_printf_i+0xce>
 8004aa0:	680e      	ldr	r6, [r1, #0]
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	2e00      	cmp	r6, #0
 8004aa6:	da03      	bge.n	8004ab0 <_printf_i+0xc8>
 8004aa8:	232d      	movs	r3, #45	; 0x2d
 8004aaa:	4276      	negs	r6, r6
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab0:	485e      	ldr	r0, [pc, #376]	; (8004c2c <_printf_i+0x244>)
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e019      	b.n	8004aea <_printf_i+0x102>
 8004ab6:	680e      	ldr	r6, [r1, #0]
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004abe:	bf18      	it	ne
 8004ac0:	b236      	sxthne	r6, r6
 8004ac2:	e7ef      	b.n	8004aa4 <_printf_i+0xbc>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6029      	str	r1, [r5, #0]
 8004acc:	0601      	lsls	r1, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xec>
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0xf2>
 8004ad4:	0646      	lsls	r6, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xe8>
 8004ad8:	881e      	ldrh	r6, [r3, #0]
 8004ada:	4854      	ldr	r0, [pc, #336]	; (8004c2c <_printf_i+0x244>)
 8004adc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ade:	bf0c      	ite	eq
 8004ae0:	2308      	moveq	r3, #8
 8004ae2:	230a      	movne	r3, #10
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aea:	6865      	ldr	r5, [r4, #4]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	bfa2      	ittt	ge
 8004af2:	6821      	ldrge	r1, [r4, #0]
 8004af4:	f021 0104 	bicge.w	r1, r1, #4
 8004af8:	6021      	strge	r1, [r4, #0]
 8004afa:	b90e      	cbnz	r6, 8004b00 <_printf_i+0x118>
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d04d      	beq.n	8004b9c <_printf_i+0x1b4>
 8004b00:	4615      	mov	r5, r2
 8004b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b06:	fb03 6711 	mls	r7, r3, r1, r6
 8004b0a:	5dc7      	ldrb	r7, [r0, r7]
 8004b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b10:	4637      	mov	r7, r6
 8004b12:	42bb      	cmp	r3, r7
 8004b14:	460e      	mov	r6, r1
 8004b16:	d9f4      	bls.n	8004b02 <_printf_i+0x11a>
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d10b      	bne.n	8004b34 <_printf_i+0x14c>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07de      	lsls	r6, r3, #31
 8004b20:	d508      	bpl.n	8004b34 <_printf_i+0x14c>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	4299      	cmp	r1, r3
 8004b28:	bfde      	ittt	le
 8004b2a:	2330      	movle	r3, #48	; 0x30
 8004b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b34:	1b52      	subs	r2, r2, r5
 8004b36:	6122      	str	r2, [r4, #16]
 8004b38:	f8cd a000 	str.w	sl, [sp]
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	aa03      	add	r2, sp, #12
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f7ff fee2 	bl	800490c <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d14c      	bne.n	8004be6 <_printf_i+0x1fe>
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b004      	add	sp, #16
 8004b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b56:	4835      	ldr	r0, [pc, #212]	; (8004c2c <_printf_i+0x244>)
 8004b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b5c:	6829      	ldr	r1, [r5, #0]
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b64:	6029      	str	r1, [r5, #0]
 8004b66:	061d      	lsls	r5, r3, #24
 8004b68:	d514      	bpl.n	8004b94 <_printf_i+0x1ac>
 8004b6a:	07df      	lsls	r7, r3, #31
 8004b6c:	bf44      	itt	mi
 8004b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b72:	6023      	strmi	r3, [r4, #0]
 8004b74:	b91e      	cbnz	r6, 8004b7e <_printf_i+0x196>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f023 0320 	bic.w	r3, r3, #32
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	2310      	movs	r3, #16
 8004b80:	e7b0      	b.n	8004ae4 <_printf_i+0xfc>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f043 0320 	orr.w	r3, r3, #32
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	2378      	movs	r3, #120	; 0x78
 8004b8c:	4828      	ldr	r0, [pc, #160]	; (8004c30 <_printf_i+0x248>)
 8004b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b92:	e7e3      	b.n	8004b5c <_printf_i+0x174>
 8004b94:	0659      	lsls	r1, r3, #25
 8004b96:	bf48      	it	mi
 8004b98:	b2b6      	uxthmi	r6, r6
 8004b9a:	e7e6      	b.n	8004b6a <_printf_i+0x182>
 8004b9c:	4615      	mov	r5, r2
 8004b9e:	e7bb      	b.n	8004b18 <_printf_i+0x130>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	6826      	ldr	r6, [r4, #0]
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6028      	str	r0, [r5, #0]
 8004baa:	0635      	lsls	r5, r6, #24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	d501      	bpl.n	8004bb4 <_printf_i+0x1cc>
 8004bb0:	6019      	str	r1, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <_printf_i+0x1d2>
 8004bb4:	0670      	lsls	r0, r6, #25
 8004bb6:	d5fb      	bpl.n	8004bb0 <_printf_i+0x1c8>
 8004bb8:	8019      	strh	r1, [r3, #0]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	4615      	mov	r5, r2
 8004bc0:	e7ba      	b.n	8004b38 <_printf_i+0x150>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7fb fb26 	bl	8000220 <memchr>
 8004bd4:	b108      	cbz	r0, 8004bda <_printf_i+0x1f2>
 8004bd6:	1b40      	subs	r0, r0, r5
 8004bd8:	6060      	str	r0, [r4, #4]
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	2300      	movs	r3, #0
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	e7a8      	b.n	8004b38 <_printf_i+0x150>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	47d0      	blx	sl
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d0ab      	beq.n	8004b4c <_printf_i+0x164>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	079b      	lsls	r3, r3, #30
 8004bf8:	d413      	bmi.n	8004c22 <_printf_i+0x23a>
 8004bfa:	68e0      	ldr	r0, [r4, #12]
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	4298      	cmp	r0, r3
 8004c00:	bfb8      	it	lt
 8004c02:	4618      	movlt	r0, r3
 8004c04:	e7a4      	b.n	8004b50 <_printf_i+0x168>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4632      	mov	r2, r6
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	47d0      	blx	sl
 8004c10:	3001      	adds	r0, #1
 8004c12:	d09b      	beq.n	8004b4c <_printf_i+0x164>
 8004c14:	3501      	adds	r5, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	9903      	ldr	r1, [sp, #12]
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dcf2      	bgt.n	8004c06 <_printf_i+0x21e>
 8004c20:	e7eb      	b.n	8004bfa <_printf_i+0x212>
 8004c22:	2500      	movs	r5, #0
 8004c24:	f104 0619 	add.w	r6, r4, #25
 8004c28:	e7f5      	b.n	8004c16 <_printf_i+0x22e>
 8004c2a:	bf00      	nop
 8004c2c:	08004f5d 	.word	0x08004f5d
 8004c30:	08004f6e 	.word	0x08004f6e

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <memmove>:
 8004c50:	4288      	cmp	r0, r1
 8004c52:	b510      	push	{r4, lr}
 8004c54:	eb01 0402 	add.w	r4, r1, r2
 8004c58:	d902      	bls.n	8004c60 <memmove+0x10>
 8004c5a:	4284      	cmp	r4, r0
 8004c5c:	4623      	mov	r3, r4
 8004c5e:	d807      	bhi.n	8004c70 <memmove+0x20>
 8004c60:	1e43      	subs	r3, r0, #1
 8004c62:	42a1      	cmp	r1, r4
 8004c64:	d008      	beq.n	8004c78 <memmove+0x28>
 8004c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c6e:	e7f8      	b.n	8004c62 <memmove+0x12>
 8004c70:	4402      	add	r2, r0
 8004c72:	4601      	mov	r1, r0
 8004c74:	428a      	cmp	r2, r1
 8004c76:	d100      	bne.n	8004c7a <memmove+0x2a>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c82:	e7f7      	b.n	8004c74 <memmove+0x24>

08004c84 <_free_r>:
 8004c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d044      	beq.n	8004d14 <_free_r+0x90>
 8004c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8e:	9001      	str	r0, [sp, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f1a1 0404 	sub.w	r4, r1, #4
 8004c96:	bfb8      	it	lt
 8004c98:	18e4      	addlt	r4, r4, r3
 8004c9a:	f000 f913 	bl	8004ec4 <__malloc_lock>
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <_free_r+0x94>)
 8004ca0:	9801      	ldr	r0, [sp, #4]
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	b933      	cbnz	r3, 8004cb4 <_free_r+0x30>
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6014      	str	r4, [r2, #0]
 8004caa:	b003      	add	sp, #12
 8004cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb0:	f000 b90e 	b.w	8004ed0 <__malloc_unlock>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x46>
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	1961      	adds	r1, r4, r5
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf01      	itttt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	1949      	addeq	r1, r1, r5
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	e7ed      	b.n	8004ca6 <_free_r+0x22>
 8004cca:	461a      	mov	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <_free_r+0x50>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x46>
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	1855      	adds	r5, r2, r1
 8004cd8:	42a5      	cmp	r5, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x70>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	4421      	add	r1, r4
 8004ce0:	1854      	adds	r4, r2, r1
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	d1e0      	bne.n	8004caa <_free_r+0x26>
 8004ce8:	681c      	ldr	r4, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	6053      	str	r3, [r2, #4]
 8004cee:	4421      	add	r1, r4
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	e7da      	b.n	8004caa <_free_r+0x26>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x78>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6003      	str	r3, [r0, #0]
 8004cfa:	e7d6      	b.n	8004caa <_free_r+0x26>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	1961      	adds	r1, r4, r5
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1949      	addeq	r1, r1, r5
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	6054      	str	r4, [r2, #4]
 8004d12:	e7ca      	b.n	8004caa <_free_r+0x26>
 8004d14:	b003      	add	sp, #12
 8004d16:	bd30      	pop	{r4, r5, pc}
 8004d18:	200001a0 	.word	0x200001a0

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0e      	ldr	r6, [pc, #56]	; (8004d58 <sbrk_aligned+0x3c>)
 8004d20:	460c      	mov	r4, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	4605      	mov	r5, r0
 8004d26:	b911      	cbnz	r1, 8004d2e <sbrk_aligned+0x12>
 8004d28:	f000 f8bc 	bl	8004ea4 <_sbrk_r>
 8004d2c:	6030      	str	r0, [r6, #0]
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 f8b7 	bl	8004ea4 <_sbrk_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d00a      	beq.n	8004d50 <sbrk_aligned+0x34>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d007      	beq.n	8004d54 <sbrk_aligned+0x38>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f8ac 	bl	8004ea4 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d101      	bne.n	8004d54 <sbrk_aligned+0x38>
 8004d50:	f04f 34ff 	mov.w	r4, #4294967295
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	200001a4 	.word	0x200001a4

08004d5c <_malloc_r>:
 8004d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d60:	1ccd      	adds	r5, r1, #3
 8004d62:	f025 0503 	bic.w	r5, r5, #3
 8004d66:	3508      	adds	r5, #8
 8004d68:	2d0c      	cmp	r5, #12
 8004d6a:	bf38      	it	cc
 8004d6c:	250c      	movcc	r5, #12
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	4607      	mov	r7, r0
 8004d72:	db01      	blt.n	8004d78 <_malloc_r+0x1c>
 8004d74:	42a9      	cmp	r1, r5
 8004d76:	d905      	bls.n	8004d84 <_malloc_r+0x28>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	4630      	mov	r0, r6
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	4e2e      	ldr	r6, [pc, #184]	; (8004e40 <_malloc_r+0xe4>)
 8004d86:	f000 f89d 	bl	8004ec4 <__malloc_lock>
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	461c      	mov	r4, r3
 8004d8e:	bb34      	cbnz	r4, 8004dde <_malloc_r+0x82>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4638      	mov	r0, r7
 8004d94:	f7ff ffc2 	bl	8004d1c <sbrk_aligned>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	d14d      	bne.n	8004e3a <_malloc_r+0xde>
 8004d9e:	6834      	ldr	r4, [r6, #0]
 8004da0:	4626      	mov	r6, r4
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d140      	bne.n	8004e28 <_malloc_r+0xcc>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	4631      	mov	r1, r6
 8004daa:	4638      	mov	r0, r7
 8004dac:	eb04 0803 	add.w	r8, r4, r3
 8004db0:	f000 f878 	bl	8004ea4 <_sbrk_r>
 8004db4:	4580      	cmp	r8, r0
 8004db6:	d13a      	bne.n	8004e2e <_malloc_r+0xd2>
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	3503      	adds	r5, #3
 8004dbc:	1a6d      	subs	r5, r5, r1
 8004dbe:	f025 0503 	bic.w	r5, r5, #3
 8004dc2:	3508      	adds	r5, #8
 8004dc4:	2d0c      	cmp	r5, #12
 8004dc6:	bf38      	it	cc
 8004dc8:	250c      	movcc	r5, #12
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f7ff ffa5 	bl	8004d1c <sbrk_aligned>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d02b      	beq.n	8004e2e <_malloc_r+0xd2>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	442b      	add	r3, r5
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	e00e      	b.n	8004dfc <_malloc_r+0xa0>
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	1b52      	subs	r2, r2, r5
 8004de2:	d41e      	bmi.n	8004e22 <_malloc_r+0xc6>
 8004de4:	2a0b      	cmp	r2, #11
 8004de6:	d916      	bls.n	8004e16 <_malloc_r+0xba>
 8004de8:	1961      	adds	r1, r4, r5
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	6025      	str	r5, [r4, #0]
 8004dee:	bf18      	it	ne
 8004df0:	6059      	strne	r1, [r3, #4]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	bf08      	it	eq
 8004df6:	6031      	streq	r1, [r6, #0]
 8004df8:	5162      	str	r2, [r4, r5]
 8004dfa:	604b      	str	r3, [r1, #4]
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f104 060b 	add.w	r6, r4, #11
 8004e02:	f000 f865 	bl	8004ed0 <__malloc_unlock>
 8004e06:	f026 0607 	bic.w	r6, r6, #7
 8004e0a:	1d23      	adds	r3, r4, #4
 8004e0c:	1af2      	subs	r2, r6, r3
 8004e0e:	d0b6      	beq.n	8004d7e <_malloc_r+0x22>
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	50a3      	str	r3, [r4, r2]
 8004e14:	e7b3      	b.n	8004d7e <_malloc_r+0x22>
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	bf0c      	ite	eq
 8004e1c:	6032      	streq	r2, [r6, #0]
 8004e1e:	605a      	strne	r2, [r3, #4]
 8004e20:	e7ec      	b.n	8004dfc <_malloc_r+0xa0>
 8004e22:	4623      	mov	r3, r4
 8004e24:	6864      	ldr	r4, [r4, #4]
 8004e26:	e7b2      	b.n	8004d8e <_malloc_r+0x32>
 8004e28:	4634      	mov	r4, r6
 8004e2a:	6876      	ldr	r6, [r6, #4]
 8004e2c:	e7b9      	b.n	8004da2 <_malloc_r+0x46>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4638      	mov	r0, r7
 8004e34:	f000 f84c 	bl	8004ed0 <__malloc_unlock>
 8004e38:	e7a1      	b.n	8004d7e <_malloc_r+0x22>
 8004e3a:	6025      	str	r5, [r4, #0]
 8004e3c:	e7de      	b.n	8004dfc <_malloc_r+0xa0>
 8004e3e:	bf00      	nop
 8004e40:	200001a0 	.word	0x200001a0

08004e44 <_realloc_r>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	4680      	mov	r8, r0
 8004e4a:	4614      	mov	r4, r2
 8004e4c:	460e      	mov	r6, r1
 8004e4e:	b921      	cbnz	r1, 8004e5a <_realloc_r+0x16>
 8004e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	4611      	mov	r1, r2
 8004e56:	f7ff bf81 	b.w	8004d5c <_malloc_r>
 8004e5a:	b92a      	cbnz	r2, 8004e68 <_realloc_r+0x24>
 8004e5c:	f7ff ff12 	bl	8004c84 <_free_r>
 8004e60:	4625      	mov	r5, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e68:	f000 f838 	bl	8004edc <_malloc_usable_size_r>
 8004e6c:	4284      	cmp	r4, r0
 8004e6e:	4607      	mov	r7, r0
 8004e70:	d802      	bhi.n	8004e78 <_realloc_r+0x34>
 8004e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e76:	d812      	bhi.n	8004e9e <_realloc_r+0x5a>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff ff6e 	bl	8004d5c <_malloc_r>
 8004e80:	4605      	mov	r5, r0
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0ed      	beq.n	8004e62 <_realloc_r+0x1e>
 8004e86:	42bc      	cmp	r4, r7
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	bf28      	it	cs
 8004e8e:	463a      	movcs	r2, r7
 8004e90:	f7ff fed0 	bl	8004c34 <memcpy>
 8004e94:	4631      	mov	r1, r6
 8004e96:	4640      	mov	r0, r8
 8004e98:	f7ff fef4 	bl	8004c84 <_free_r>
 8004e9c:	e7e1      	b.n	8004e62 <_realloc_r+0x1e>
 8004e9e:	4635      	mov	r5, r6
 8004ea0:	e7df      	b.n	8004e62 <_realloc_r+0x1e>
	...

08004ea4 <_sbrk_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d06      	ldr	r5, [pc, #24]	; (8004ec0 <_sbrk_r+0x1c>)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fd f840 	bl	8001f34 <_sbrk>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_sbrk_r+0x1a>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_sbrk_r+0x1a>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200001a8 	.word	0x200001a8

08004ec4 <__malloc_lock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__malloc_lock+0x8>)
 8004ec6:	f000 b811 	b.w	8004eec <__retarget_lock_acquire_recursive>
 8004eca:	bf00      	nop
 8004ecc:	200001ac 	.word	0x200001ac

08004ed0 <__malloc_unlock>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__malloc_unlock+0x8>)
 8004ed2:	f000 b80c 	b.w	8004eee <__retarget_lock_release_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	200001ac 	.word	0x200001ac

08004edc <_malloc_usable_size_r>:
 8004edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee0:	1f18      	subs	r0, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bfbc      	itt	lt
 8004ee6:	580b      	ldrlt	r3, [r1, r0]
 8004ee8:	18c0      	addlt	r0, r0, r3
 8004eea:	4770      	bx	lr

08004eec <__retarget_lock_acquire_recursive>:
 8004eec:	4770      	bx	lr

08004eee <__retarget_lock_release_recursive>:
 8004eee:	4770      	bx	lr

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
