
LED_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004808  08004808  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800481c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800481c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f06d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002121  00000000  00000000  0002f0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021664  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b4e  00000000  00000000  0005421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd049  00000000  00000000  00065d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038dc  00000000  00000000  00132e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047d0 	.word	0x080047d0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080047d0 	.word	0x080047d0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <bsp_led_rgb_init>:

uint8_t data[12];
uint32_t g_color = 0;

void bsp_led_rgb_init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(RED_TIM, RED_CH);
 8000cec:	2100      	movs	r1, #0
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <bsp_led_rgb_init+0x2c>)
 8000cf0:	f001 ffba 	bl	8002c68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(GREEN_TIM, GREEN_CH);
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <bsp_led_rgb_init+0x2c>)
 8000cf8:	f001 ffb6 	bl	8002c68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(BLUE_TIM, BLUE_CH);
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <bsp_led_rgb_init+0x2c>)
 8000d00:	f001 ffb2 	bl	8002c68 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, data, 12);
 8000d04:	220c      	movs	r2, #12
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <bsp_led_rgb_init+0x30>)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <bsp_led_rgb_init+0x34>)
 8000d0a:	f002 fdd8 	bl	80038be <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000038 	.word	0x20000038
 8000d18:	20000028 	.word	0x20000028
 8000d1c:	20000080 	.word	0x20000080

08000d20 <bsp_led_red_set_duty>:

void bsp_led_red_set_duty(uint8_t percent)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(RED_TIM, RED_CH, (uint32_t) 999 * (percent * 1.0 / 100));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbbd 	bl	80004ac <__aeabi_i2d>
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <bsp_led_red_set_duty+0x58>)
 8000d38:	f7ff fd4c 	bl	80007d4 <__aeabi_ddiv>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	a30a      	add	r3, pc, #40	; (adr r3, 8000d70 <bsp_led_red_set_duty+0x50>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	f7ff fc19 	bl	8000580 <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <bsp_led_red_set_duty+0x5c>)
 8000d54:	680c      	ldr	r4, [r1, #0]
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fe23 	bl	80009a4 <__aeabi_d2uiz>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	00000000 	.word	0x00000000
 8000d74:	408f3800 	.word	0x408f3800
 8000d78:	40590000 	.word	0x40590000
 8000d7c:	20000038 	.word	0x20000038

08000d80 <bsp_led_green_set_duty>:

void bsp_led_green_set_duty(uint8_t percent)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(GREEN_TIM, GREEN_CH, (uint32_t) 999 * (percent * 1.0 / 100));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fb8d 	bl	80004ac <__aeabi_i2d>
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <bsp_led_green_set_duty+0x58>)
 8000d98:	f7ff fd1c 	bl	80007d4 <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	a30a      	add	r3, pc, #40	; (adr r3, 8000dd0 <bsp_led_green_set_duty+0x50>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fbe9 	bl	8000580 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	490a      	ldr	r1, [pc, #40]	; (8000ddc <bsp_led_green_set_duty+0x5c>)
 8000db4:	680c      	ldr	r4, [r1, #0]
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f7ff fdf3 	bl	80009a4 <__aeabi_d2uiz>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	f3af 8000 	nop.w
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	408f3800 	.word	0x408f3800
 8000dd8:	40590000 	.word	0x40590000
 8000ddc:	20000038 	.word	0x20000038

08000de0 <bsp_led_blue_set_duty>:

void bsp_led_blue_set_duty(uint8_t percent)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(BLUE_TIM, BLUE_CH, (uint32_t) 999 * (percent * 1.0 / 100));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fb5d 	bl	80004ac <__aeabi_i2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <bsp_led_blue_set_duty+0x58>)
 8000df8:	f7ff fcec 	bl	80007d4 <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	a30a      	add	r3, pc, #40	; (adr r3, 8000e30 <bsp_led_blue_set_duty+0x50>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fbb9 	bl	8000580 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	490a      	ldr	r1, [pc, #40]	; (8000e3c <bsp_led_blue_set_duty+0x5c>)
 8000e14:	680c      	ldr	r4, [r1, #0]
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fdc3 	bl	80009a4 <__aeabi_d2uiz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w
 8000e30:	00000000 	.word	0x00000000
 8000e34:	408f3800 	.word	0x408f3800
 8000e38:	40590000 	.word	0x40590000
 8000e3c:	20000038 	.word	0x20000038

08000e40 <getHex>:

static uint8_t getHex(uint8_t Copy_uint8_tAsci)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    uint8_t Result = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
    /*0 ... 9*/
    if ((Copy_uint8_tAsci >= 48) && (Copy_uint8_tAsci <= 57))
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b2f      	cmp	r3, #47	; 0x2f
 8000e52:	d906      	bls.n	8000e62 <getHex+0x22>
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b39      	cmp	r3, #57	; 0x39
 8000e58:	d803      	bhi.n	8000e62 <getHex+0x22>
        Result = Copy_uint8_tAsci - 48;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	3b30      	subs	r3, #48	; 0x30
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e008      	b.n	8000e74 <getHex+0x34>
    /*A ... F*/
    else if ((Copy_uint8_tAsci >= 65) && (Copy_uint8_tAsci <= 70))
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d905      	bls.n	8000e74 <getHex+0x34>
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b46      	cmp	r3, #70	; 0x46
 8000e6c:	d802      	bhi.n	8000e74 <getHex+0x34>
        Result = Copy_uint8_tAsci - 55;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3b37      	subs	r3, #55	; 0x37
 8000e72:	73fb      	strb	r3, [r7, #15]
    return Result;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
    if( huart->Instance == USART2 )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d141      	bne.n	8000f1e <HAL_UARTEx_RxEventCallback+0x9a>
    {
        /* RGB:0xFF00FF */
        if(data[0] == 'R' && data[1] == 'G' && data[2] == 'B')
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b52      	cmp	r3, #82	; 0x52
 8000ea0:	d13d      	bne.n	8000f1e <HAL_UARTEx_RxEventCallback+0x9a>
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	2b47      	cmp	r3, #71	; 0x47
 8000ea8:	d139      	bne.n	8000f1e <HAL_UARTEx_RxEventCallback+0x9a>
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	2b42      	cmp	r3, #66	; 0x42
 8000eb0:	d135      	bne.n	8000f1e <HAL_UARTEx_RxEventCallback+0x9a>
        {
            g_color = getHex(data[6]) << 20 | getHex(data[7]) << 16 | getHex(data[8]) << 12 | getHex(data[9]) << 8 | getHex(data[10]) << 4 | getHex(data[11]);
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000eb4:	799b      	ldrb	r3, [r3, #6]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffc2 	bl	8000e40 <getHex>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	051c      	lsls	r4, r3, #20
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ec2:	79db      	ldrb	r3, [r3, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ffbb 	bl	8000e40 <getHex>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ed2:	7a1b      	ldrb	r3, [r3, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffb3 	bl	8000e40 <getHex>
 8000eda:	4603      	mov	r3, r0
 8000edc:	031b      	lsls	r3, r3, #12
 8000ede:	431c      	orrs	r4, r3
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ee2:	7a5b      	ldrb	r3, [r3, #9]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffab 	bl	8000e40 <getHex>
 8000eea:	4603      	mov	r3, r0
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000ef2:	7a9b      	ldrb	r3, [r3, #10]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffa3 	bl	8000e40 <getHex>
 8000efa:	4603      	mov	r3, r0
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	431c      	orrs	r4, r3
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000f02:	7adb      	ldrb	r3, [r3, #11]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff9b 	bl	8000e40 <getHex>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_UARTEx_RxEventCallback+0xac>)
 8000f12:	601a      	str	r2, [r3, #0]
            HAL_UARTEx_ReceiveToIdle_IT(&huart2, data, 12);
 8000f14:	220c      	movs	r2, #12
 8000f16:	4905      	ldr	r1, [pc, #20]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000f1a:	f002 fcd0 	bl	80038be <HAL_UARTEx_ReceiveToIdle_IT>
        }
    }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	20000028 	.word	0x20000028
 8000f30:	20000034 	.word	0x20000034
 8000f34:	20000080 	.word	0x20000080

08000f38 <led_rgb_init>:
*/

#include "driver_led.h"

void led_rgb_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  bsp_led_rgb_init();
 8000f3c:	f7ff fed4 	bl	8000ce8 <bsp_led_rgb_init>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <led_rgb_set_fade_out>:
{
  bsp_led_blue_set_duty(percent);
}

void led_rgb_set_fade_out(uint32_t color)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint8_t duty_color_red   = (color >> 16 & 0xFF);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0c1b      	lsrs	r3, r3, #16
 8000f50:	73bb      	strb	r3, [r7, #14]
  uint8_t duty_color_green = (color >> 8 & 0xFF);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	737b      	strb	r3, [r7, #13]
  uint8_t duty_color_blue  = (color & 0xFF);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	733b      	strb	r3, [r7, #12]

  for (uint8_t i = 1; i < 101; i++)
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e065      	b.n	800102e <led_rgb_set_fade_out+0xea>
  {
    bsp_led_red_set_duty(duty_color_red * (i * 1.0 / 100));
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff faa1 	bl	80004ac <__aeabi_i2d>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa9b 	bl	80004ac <__aeabi_i2d>
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <led_rgb_set_fade_out+0xfc>)
 8000f7c:	f7ff fc2a 	bl	80007d4 <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	f7ff fafa 	bl	8000580 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fd06 	bl	80009a4 <__aeabi_d2uiz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff febf 	bl	8000d20 <bsp_led_red_set_duty>
    bsp_led_green_set_duty(duty_color_green * (i * 1.0 / 100));
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa81 	bl	80004ac <__aeabi_i2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa7b 	bl	80004ac <__aeabi_i2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <led_rgb_set_fade_out+0xfc>)
 8000fbc:	f7ff fc0a 	bl	80007d4 <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff fada 	bl	8000580 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fce6 	bl	80009a4 <__aeabi_d2uiz>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fecf 	bl	8000d80 <bsp_led_green_set_duty>
    bsp_led_blue_set_duty(duty_color_blue * (i * 1.0 / 100));
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa61 	bl	80004ac <__aeabi_i2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa5b 	bl	80004ac <__aeabi_i2d>
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <led_rgb_set_fade_out+0xfc>)
 8000ffc:	f7ff fbea 	bl	80007d4 <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff faba 	bl	8000580 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fcc6 	bl	80009a4 <__aeabi_d2uiz>
 8001018:	4603      	mov	r3, r0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fedf 	bl	8000de0 <bsp_led_blue_set_duty>
    HAL_Delay(25);
 8001022:	2019      	movs	r0, #25
 8001024:	f000 fbe4 	bl	80017f0 <HAL_Delay>
  for (uint8_t i = 1; i < 101; i++)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	d996      	bls.n	8000f62 <led_rgb_set_fade_out+0x1e>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	bf00      	nop
 8001040:	40590000 	.word	0x40590000

08001044 <led_rgb_set_fade_in>:

void led_rgb_set_fade_in(uint32_t color)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint8_t duty_color_red   = (color >> 16 & 0xFF);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	73bb      	strb	r3, [r7, #14]
  uint8_t duty_color_green = (color >> 8 & 0xFF);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	737b      	strb	r3, [r7, #13]
  uint8_t duty_color_blue  = (color & 0xFF);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	733b      	strb	r3, [r7, #12]

  for (uint8_t i = 100; i > 0; i--)
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e065      	b.n	800112e <led_rgb_set_fade_in+0xea>
  {
    bsp_led_red_set_duty(duty_color_red * (i * 1.0 / 100));
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa21 	bl	80004ac <__aeabi_i2d>
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa1b 	bl	80004ac <__aeabi_i2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <led_rgb_set_fade_in+0xfc>)
 800107c:	f7ff fbaa 	bl	80007d4 <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fa7a 	bl	8000580 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fc86 	bl	80009a4 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fe3f 	bl	8000d20 <bsp_led_red_set_duty>
    bsp_led_green_set_duty(duty_color_green * (i * 1.0 / 100));
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa01 	bl	80004ac <__aeabi_i2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9fb 	bl	80004ac <__aeabi_i2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <led_rgb_set_fade_in+0xfc>)
 80010bc:	f7ff fb8a 	bl	80007d4 <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff fa5a 	bl	8000580 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fc66 	bl	80009a4 <__aeabi_d2uiz>
 80010d8:	4603      	mov	r3, r0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fe4f 	bl	8000d80 <bsp_led_green_set_duty>
    bsp_led_blue_set_duty(duty_color_blue * (i * 1.0 / 100));
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9e1 	bl	80004ac <__aeabi_i2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9db 	bl	80004ac <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <led_rgb_set_fade_in+0xfc>)
 80010fc:	f7ff fb6a 	bl	80007d4 <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff fa3a 	bl	8000580 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fc46 	bl	80009a4 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe5f 	bl	8000de0 <bsp_led_blue_set_duty>
    HAL_Delay(25);
 8001122:	2019      	movs	r0, #25
 8001124:	f000 fb64 	bl	80017f0 <HAL_Delay>
  for (uint8_t i = 100; i > 0; i--)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3b01      	subs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d196      	bne.n	8001062 <led_rgb_set_fade_in+0x1e>
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	40590000 	.word	0x40590000

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fae0 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f816 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 f93c 	bl	80013cc <MX_GPIO_Init>
  MX_TIM3_Init();
 8001154:	f000 f884 	bl	8001260 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001158:	f000 f90e 	bl	8001378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  led_rgb_init();
 800115c:	f7ff feec 	bl	8000f38 <led_rgb_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    led_rgb_set_fade_out(g_color);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <main+0x34>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff feed 	bl	8000f44 <led_rgb_set_fade_out>
    led_rgb_set_fade_in(g_color);
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <main+0x34>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff68 	bl	8001044 <led_rgb_set_fade_in>
    led_rgb_set_fade_out(g_color);
 8001174:	e7f4      	b.n	8001160 <main+0x1c>
 8001176:	bf00      	nop
 8001178:	20000034 	.word	0x20000034

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	; 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2234      	movs	r2, #52	; 0x34
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fb18 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <SystemClock_Config+0xdc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <SystemClock_Config+0xdc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <SystemClock_Config+0xdc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <SystemClock_Config+0xe0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <SystemClock_Config+0xe0>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <SystemClock_Config+0xe0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011f0:	23b4      	movs	r3, #180	; 0xb4
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f9e9 	bl	80025dc <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001210:	f000 f912 	bl	8001438 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001214:	f000 fe48 	bl	8001ea8 <HAL_PWREx_EnableOverDrive>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800121e:	f000 f90b 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2105      	movs	r1, #5
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fe81 	bl	8001f48 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800124c:	f000 f8f4 	bl	8001438 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	; 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <MX_TIM3_Init+0x110>)
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <MX_TIM3_Init+0x114>)
 8001294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <MX_TIM3_Init+0x110>)
 8001298:	2259      	movs	r2, #89	; 0x59
 800129a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <MX_TIM3_Init+0x110>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <MX_TIM3_Init+0x110>)
 80012a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <MX_TIM3_Init+0x110>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <MX_TIM3_Init+0x110>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b6:	482e      	ldr	r0, [pc, #184]	; (8001370 <MX_TIM3_Init+0x110>)
 80012b8:	f001 fc2e 	bl	8002b18 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012c2:	f000 f8b9 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4827      	ldr	r0, [pc, #156]	; (8001370 <MX_TIM3_Init+0x110>)
 80012d4:	f001 fe52 	bl	8002f7c <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012de:	f000 f8ab 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <MX_TIM3_Init+0x110>)
 80012e4:	f001 fc67 	bl	8002bb6 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012ee:	f000 f8a3 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4619      	mov	r1, r3
 8001300:	481b      	ldr	r0, [pc, #108]	; (8001370 <MX_TIM3_Init+0x110>)
 8001302:	f002 fa13 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800130c:	f000 f894 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4812      	ldr	r0, [pc, #72]	; (8001370 <MX_TIM3_Init+0x110>)
 8001328:	f001 fd66 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001332:	f000 f881 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2204      	movs	r2, #4
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM3_Init+0x110>)
 800133e:	f001 fd5b 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001348:	f000 f876 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2208      	movs	r2, #8
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <MX_TIM3_Init+0x110>)
 8001354:	f001 fd50 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800135e:	f000 f86b 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <MX_TIM3_Init+0x110>)
 8001364:	f000 f8b8 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000038 	.word	0x20000038
 8001374:	40000400 	.word	0x40000400

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 fa38 	bl	8003824 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f83d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000080 	.word	0x20000080
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_GPIO_Init+0x68>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <MX_GPIO_Init+0x68>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_GPIO_Init+0x68>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_GPIO_Init+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_GPIO_Init+0x68>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_GPIO_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_GPIO_Init+0x68>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <MX_GPIO_Init+0x68>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_GPIO_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_TIM_Base_MspInit+0x3c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10d      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_TIM_Base_MspInit+0x40>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x40>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_TIM_Base_MspInit+0x40>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_TIM_MspPostInit+0xa4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d13b      	bne.n	8001572 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_TIM_MspPostInit+0xa8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001542:	2302      	movs	r3, #2
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <HAL_TIM_MspPostInit+0xac>)
 800154e:	f000 fb17 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001562:	2302      	movs	r3, #2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <HAL_TIM_MspPostInit+0xb0>)
 800156e:	f000 fb07 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40000400 	.word	0x40000400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_UART_MspInit+0x94>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d133      	bne.n	8001616 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e6:	230c      	movs	r3, #12
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f6:	2307      	movs	r3, #7
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_UART_MspInit+0x9c>)
 8001602:	f000 fabd 	bl	8001b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2026      	movs	r0, #38	; 0x26
 800160c:	f000 f9ef 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001610:	2026      	movs	r0, #38	; 0x26
 8001612:	f000 fa08 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004400 	.word	0x40004400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f89a 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART2_IRQHandler+0x10>)
 8001686:	f002 f97f 	bl	8003988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000080 	.word	0x20000080

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f003 f847 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fd2b 	bl	8001144 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016fc:	08004810 	.word	0x08004810
  ldr r2, =_sbss
 8001700:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001704:	200000c8 	.word	0x200000c8

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe80 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	200000c4 	.word	0x200000c4

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200000c4 	.word	0x200000c4

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff feb6 	bl	80017d8 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e052      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0216 	bic.w	r2, r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <HAL_DMA_Abort+0x62>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0208 	bic.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001adc:	e013      	b.n	8001b06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fe7b 	bl	80017d8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d90c      	bls.n	8001b06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e015      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e4      	bne.n	8001ade <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00c      	b.n	8001b72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e165      	b.n	8001e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8154 	bne.w	8001e62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d005      	beq.n	8001bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d130      	bne.n	8001c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d017      	beq.n	8001c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d123      	bne.n	8001cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80ae 	beq.w	8001e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a5c      	ldr	r2, [pc, #368]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4f      	ldr	r2, [pc, #316]	; (8001e88 <HAL_GPIO_Init+0x308>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x21a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_GPIO_Init+0x30c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x216>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4d      	ldr	r2, [pc, #308]	; (8001e90 <HAL_GPIO_Init+0x310>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x212>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <HAL_GPIO_Init+0x314>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x20e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_GPIO_Init+0x318>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x20a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <HAL_GPIO_Init+0x31c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x206>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_GPIO_Init+0x320>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x202>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x21c>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f ae96 	bls.w	8001b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_PWREx_EnableOverDrive+0x94>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff fc80 	bl	80017d8 <HAL_GetTick>
 8001ed8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eda:	e009      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001edc:	f7ff fc7c 	bl	80017d8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eea:	d901      	bls.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e01f      	b.n	8001f30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d1ee      	bne.n	8001edc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f04:	f7ff fc68 	bl	80017d8 <HAL_GetTick>
 8001f08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f0a:	e009      	b.n	8001f20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f0c:	f7ff fc64 	bl	80017d8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f1a:	d901      	bls.n	8001f20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e007      	b.n	8001f30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	420e0040 	.word	0x420e0040
 8001f40:	40007000 	.word	0x40007000
 8001f44:	420e0044 	.word	0x420e0044

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cc      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d90c      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d044      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002002:	2b03      	cmp	r3, #3
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e067      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4934      	ldr	r1, [pc, #208]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fbce 	bl	80017d8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff fbca 	bl	80017d8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e04f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20c      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f855 	bl	800217c <HAL_RCC_GetSysClockFreq>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	490a      	ldr	r1, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	5ccb      	ldrb	r3, [r1, r3]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb2e 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00
 8002104:	40023800 	.word	0x40023800
 8002108:	080047e8 	.word	0x080047e8
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	080047f8 	.word	0x080047f8

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	080047f8 	.word	0x080047f8

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b0ae      	sub	sp, #184	; 0xb8
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a2:	4bcb      	ldr	r3, [pc, #812]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	f200 8206 	bhi.w	80025bc <HAL_RCC_GetSysClockFreq+0x440>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	080025bd 	.word	0x080025bd
 80021c0:	080025bd 	.word	0x080025bd
 80021c4:	080025bd 	.word	0x080025bd
 80021c8:	080021f5 	.word	0x080021f5
 80021cc:	080025bd 	.word	0x080025bd
 80021d0:	080025bd 	.word	0x080025bd
 80021d4:	080025bd 	.word	0x080025bd
 80021d8:	080021fd 	.word	0x080021fd
 80021dc:	080025bd 	.word	0x080025bd
 80021e0:	080025bd 	.word	0x080025bd
 80021e4:	080025bd 	.word	0x080025bd
 80021e8:	080023ed 	.word	0x080023ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4bb9      	ldr	r3, [pc, #740]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80021ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80021f2:	e1e7      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4bb8      	ldr	r3, [pc, #736]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021fa:	e1e3      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4bb4      	ldr	r3, [pc, #720]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002208:	4bb1      	ldr	r3, [pc, #708]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d071      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002214:	4bae      	ldr	r3, [pc, #696]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002220:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800223a:	4622      	mov	r2, r4
 800223c:	462b      	mov	r3, r5
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224c:	0150      	lsls	r0, r2, #5
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4621      	mov	r1, r4
 8002254:	1a51      	subs	r1, r2, r1
 8002256:	6439      	str	r1, [r7, #64]	; 0x40
 8002258:	4629      	mov	r1, r5
 800225a:	eb63 0301 	sbc.w	r3, r3, r1
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800226c:	4649      	mov	r1, r9
 800226e:	018b      	lsls	r3, r1, #6
 8002270:	4641      	mov	r1, r8
 8002272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002276:	4641      	mov	r1, r8
 8002278:	018a      	lsls	r2, r1, #6
 800227a:	4641      	mov	r1, r8
 800227c:	1a51      	subs	r1, r2, r1
 800227e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002280:	4649      	mov	r1, r9
 8002282:	eb63 0301 	sbc.w	r3, r3, r1
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002294:	4649      	mov	r1, r9
 8002296:	00cb      	lsls	r3, r1, #3
 8002298:	4641      	mov	r1, r8
 800229a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800229e:	4641      	mov	r1, r8
 80022a0:	00ca      	lsls	r2, r1, #3
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	4622      	mov	r2, r4
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
 80022ae:	462b      	mov	r3, r5
 80022b0:	460a      	mov	r2, r1
 80022b2:	eb42 0303 	adc.w	r3, r2, r3
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022c4:	4629      	mov	r1, r5
 80022c6:	024b      	lsls	r3, r1, #9
 80022c8:	4621      	mov	r1, r4
 80022ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ce:	4621      	mov	r1, r4
 80022d0:	024a      	lsls	r2, r1, #9
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022e8:	f7fe fb7c 	bl	80009e4 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022f6:	e067      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002304:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002310:	67bb      	str	r3, [r7, #120]	; 0x78
 8002312:	2300      	movs	r3, #0
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002316:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800231a:	4622      	mov	r2, r4
 800231c:	462b      	mov	r3, r5
 800231e:	f04f 0000 	mov.w	r0, #0
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	0159      	lsls	r1, r3, #5
 8002328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800232c:	0150      	lsls	r0, r2, #5
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4621      	mov	r1, r4
 8002334:	1a51      	subs	r1, r2, r1
 8002336:	62b9      	str	r1, [r7, #40]	; 0x28
 8002338:	4629      	mov	r1, r5
 800233a:	eb63 0301 	sbc.w	r3, r3, r1
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800234c:	4649      	mov	r1, r9
 800234e:	018b      	lsls	r3, r1, #6
 8002350:	4641      	mov	r1, r8
 8002352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002356:	4641      	mov	r1, r8
 8002358:	018a      	lsls	r2, r1, #6
 800235a:	4641      	mov	r1, r8
 800235c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002360:	4649      	mov	r1, r9
 8002362:	eb63 0b01 	sbc.w	fp, r3, r1
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002372:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800237a:	4692      	mov	sl, r2
 800237c:	469b      	mov	fp, r3
 800237e:	4623      	mov	r3, r4
 8002380:	eb1a 0303 	adds.w	r3, sl, r3
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	462b      	mov	r3, r5
 8002388:	eb4b 0303 	adc.w	r3, fp, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b0:	2200      	movs	r2, #0
 80023b2:	673b      	str	r3, [r7, #112]	; 0x70
 80023b4:	677a      	str	r2, [r7, #116]	; 0x74
 80023b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023ba:	f7fe fb13 	bl	80009e4 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4613      	mov	r3, r2
 80023c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80023da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023ea:	e0eb      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06b      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	2200      	movs	r2, #0
 800240c:	66bb      	str	r3, [r7, #104]	; 0x68
 800240e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	663b      	str	r3, [r7, #96]	; 0x60
 8002418:	2300      	movs	r3, #0
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
 800241c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002420:	4622      	mov	r2, r4
 8002422:	462b      	mov	r3, r5
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	0159      	lsls	r1, r3, #5
 800242e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002432:	0150      	lsls	r0, r2, #5
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4621      	mov	r1, r4
 800243a:	1a51      	subs	r1, r2, r1
 800243c:	61b9      	str	r1, [r7, #24]
 800243e:	4629      	mov	r1, r5
 8002440:	eb63 0301 	sbc.w	r3, r3, r1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002452:	4659      	mov	r1, fp
 8002454:	018b      	lsls	r3, r1, #6
 8002456:	4651      	mov	r1, sl
 8002458:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245c:	4651      	mov	r1, sl
 800245e:	018a      	lsls	r2, r1, #6
 8002460:	4651      	mov	r1, sl
 8002462:	ebb2 0801 	subs.w	r8, r2, r1
 8002466:	4659      	mov	r1, fp
 8002468:	eb63 0901 	sbc.w	r9, r3, r1
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002478:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002480:	4690      	mov	r8, r2
 8002482:	4699      	mov	r9, r3
 8002484:	4623      	mov	r3, r4
 8002486:	eb18 0303 	adds.w	r3, r8, r3
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	462b      	mov	r3, r5
 800248e:	eb49 0303 	adc.w	r3, r9, r3
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024a0:	4629      	mov	r1, r5
 80024a2:	024b      	lsls	r3, r1, #9
 80024a4:	4621      	mov	r1, r4
 80024a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024aa:	4621      	mov	r1, r4
 80024ac:	024a      	lsls	r2, r1, #9
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024b6:	2200      	movs	r2, #0
 80024b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80024ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024c0:	f7fe fa90 	bl	80009e4 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024ce:	e065      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x420>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	2200      	movs	r2, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	4611      	mov	r1, r2
 80024e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ec:	653b      	str	r3, [r7, #80]	; 0x50
 80024ee:	2300      	movs	r3, #0
 80024f0:	657b      	str	r3, [r7, #84]	; 0x54
 80024f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80024f6:	4642      	mov	r2, r8
 80024f8:	464b      	mov	r3, r9
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	0159      	lsls	r1, r3, #5
 8002504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002508:	0150      	lsls	r0, r2, #5
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4641      	mov	r1, r8
 8002510:	1a51      	subs	r1, r2, r1
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	4649      	mov	r1, r9
 8002516:	eb63 0301 	sbc.w	r3, r3, r1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002528:	4659      	mov	r1, fp
 800252a:	018b      	lsls	r3, r1, #6
 800252c:	4651      	mov	r1, sl
 800252e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002532:	4651      	mov	r1, sl
 8002534:	018a      	lsls	r2, r1, #6
 8002536:	4651      	mov	r1, sl
 8002538:	1a54      	subs	r4, r2, r1
 800253a:	4659      	mov	r1, fp
 800253c:	eb63 0501 	sbc.w	r5, r3, r1
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	00eb      	lsls	r3, r5, #3
 800254a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800254e:	00e2      	lsls	r2, r4, #3
 8002550:	4614      	mov	r4, r2
 8002552:	461d      	mov	r5, r3
 8002554:	4643      	mov	r3, r8
 8002556:	18e3      	adds	r3, r4, r3
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	464b      	mov	r3, r9
 800255c:	eb45 0303 	adc.w	r3, r5, r3
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800256e:	4629      	mov	r1, r5
 8002570:	028b      	lsls	r3, r1, #10
 8002572:	4621      	mov	r1, r4
 8002574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002578:	4621      	mov	r1, r4
 800257a:	028a      	lsls	r2, r1, #10
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002584:	2200      	movs	r2, #0
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
 8002588:	64fa      	str	r2, [r7, #76]	; 0x4c
 800258a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800258e:	f7fe fa29 	bl	80009e4 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4613      	mov	r3, r2
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0f1b      	lsrs	r3, r3, #28
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80025aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	37b8      	adds	r7, #184	; 0xb8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400

080025dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e28d      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8083 	beq.w	8002702 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b04      	cmp	r3, #4
 8002606:	d019      	beq.n	800263c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002610:	2b08      	cmp	r3, #8
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002614:	4b8e      	ldr	r3, [pc, #568]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x124>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e25a      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x90>
 800265e:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7b      	ldr	r2, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xcc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0xb4>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xcc>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6b      	ldr	r2, [pc, #428]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff f892 	bl	80017d8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f88e 	bl	80017d8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e21f      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xdc>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f87e 	bl	80017d8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f87a 	bl	80017d8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e20b      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x104>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06f      	beq.n	80027ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d017      	beq.n	800274a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d11c      	bne.n	8002778 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x186>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1d3      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e03a      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x278>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7ff f827 	bl	80017d8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7ff f823 	bl	80017d8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1b4      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4925      	ldr	r1, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x278>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff f806 	bl	80017d8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7ff f802 	bl	80017d8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e193      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d036      	beq.n	8002868 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x27c>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe ffe6 	bl	80017d8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe ffe2 	bl	80017d8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e173      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x234>
 800282e:	e01b      	b.n	8002868 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x27c>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe ffcf 	bl	80017d8 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e00e      	b.n	800285c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe ffcb 	bl	80017d8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d907      	bls.n	800285c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e15c      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	4b8a      	ldr	r3, [pc, #552]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ea      	bne.n	800283e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8097 	beq.w	80029a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b7c      	ldr	r3, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <HAL_RCC_OscConfig+0x4b0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCC_OscConfig+0x4b0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a75      	ldr	r2, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x4b0>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe ff8b 	bl	80017d8 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe ff87 	bl	80017d8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e118      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_RCC_OscConfig+0x4b0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x31e>
 80028ec:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x358>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x340>
 8002902:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a60      	ldr	r2, [pc, #384]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x358>
 800291c:	4b5a      	ldr	r3, [pc, #360]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a59      	ldr	r2, [pc, #356]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe ff4c 	bl	80017d8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe ff48 	bl	80017d8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0d7      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ee      	beq.n	8002944 <HAL_RCC_OscConfig+0x368>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe ff36 	bl	80017d8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe ff32 	bl	80017d8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0c1      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ee      	bne.n	8002970 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80ad 	beq.w	8002b08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d060      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d145      	bne.n	8002a4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_RCC_OscConfig+0x4b4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe ff06 	bl	80017d8 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe ff02 	bl	80017d8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e093      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	491b      	ldr	r1, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x4b4>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fed7 	bl	80017d8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fed3 	bl	80017d8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e064      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x452>
 8002a4c:	e05c      	b.n	8002b08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x4b4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fec0 	bl	80017d8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe febc 	bl	80017d8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e04d      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x480>
 8002a7a:	e045      	b.n	8002b08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e040      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_RCC_OscConfig+0x538>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d030      	beq.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d129      	bne.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d122      	bne.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d119      	bne.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d10f      	bne.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fca8 	bl	8001494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fad8 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e041      	b.n	8002c4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f839 	bl	8002c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 fa89 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_TIM_PWM_Start+0x24>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d109      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x3e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e015      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x58>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07c      	b.n	8002dd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x82>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x92>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fce0 	bl	80036e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2d      	ldr	r2, [pc, #180]	; (8002ddc <HAL_TIM_PWM_Start+0x174>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_PWM_Start+0xcc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_TIM_PWM_Start+0x178>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_PWM_Start+0xd0>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_TIM_PWM_Start+0xd2>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_TIM_PWM_Start+0x174>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d01d      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_TIM_PWM_Start+0x17c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_TIM_PWM_Start+0x180>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_TIM_PWM_Start+0x184>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <HAL_TIM_PWM_Start+0x178>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_TIM_PWM_Start+0x188>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_TIM_PWM_Start+0x18c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d010      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	e007      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40001800 	.word	0x40001800

08002df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ae      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	f200 809f 	bhi.w	8002f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002f65 	.word	0x08002f65
 8002e34:	08002f65 	.word	0x08002f65
 8002e38:	08002f65 	.word	0x08002f65
 8002e3c:	08002ea1 	.word	0x08002ea1
 8002e40:	08002f65 	.word	0x08002f65
 8002e44:	08002f65 	.word	0x08002f65
 8002e48:	08002f65 	.word	0x08002f65
 8002e4c:	08002ee3 	.word	0x08002ee3
 8002e50:	08002f65 	.word	0x08002f65
 8002e54:	08002f65 	.word	0x08002f65
 8002e58:	08002f65 	.word	0x08002f65
 8002e5c:	08002f23 	.word	0x08002f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f9f0 	bl	800324c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
      break;
 8002e9e:	e064      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fa40 	bl	800332c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	021a      	lsls	r2, r3, #8
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
      break;
 8002ee0:	e043      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fa95 	bl	8003418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0208 	orr.w	r2, r2, #8
 8002efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0204 	bic.w	r2, r2, #4
 8002f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69d9      	ldr	r1, [r3, #28]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	61da      	str	r2, [r3, #28]
      break;
 8002f20:	e023      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fae9 	bl	8003500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	021a      	lsls	r2, r3, #8
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	61da      	str	r2, [r3, #28]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_ConfigClockSource+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0b4      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x186>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd4>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x172>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xa6>
 8002fec:	2b70      	cmp	r3, #112	; 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff4:	2b60      	cmp	r3, #96	; 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfa>
 8002ffc:	2b50      	cmp	r3, #80	; 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f000 fb35 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f000 fb1e 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 fa92 	bl	80035ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	; 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 faeb 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fab1 	bl	800360a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	; 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fadb 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fa72 	bl	80035ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 facb 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 fac2 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <TIM_Base_SetConfig+0x114>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312a:	d00f      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <TIM_Base_SetConfig+0x118>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00b      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <TIM_Base_SetConfig+0x11c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <TIM_Base_SetConfig+0x120>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3a      	ldr	r2, [pc, #232]	; (8003230 <TIM_Base_SetConfig+0x124>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <TIM_Base_SetConfig+0x114>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d027      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <TIM_Base_SetConfig+0x118>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d023      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <TIM_Base_SetConfig+0x11c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <TIM_Base_SetConfig+0x120>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a29      	ldr	r2, [pc, #164]	; (8003230 <TIM_Base_SetConfig+0x124>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a28      	ldr	r2, [pc, #160]	; (8003234 <TIM_Base_SetConfig+0x128>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <TIM_Base_SetConfig+0x12c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a26      	ldr	r2, [pc, #152]	; (800323c <TIM_Base_SetConfig+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <TIM_Base_SetConfig+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <TIM_Base_SetConfig+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <TIM_Base_SetConfig+0x13c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <TIM_Base_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <TIM_Base_SetConfig+0x124>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40010400 	.word	0x40010400
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	40001800 	.word	0x40001800
 8003244:	40001c00 	.word	0x40001c00
 8003248:	40002000 	.word	0x40002000

0800324c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0201 	bic.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f023 0302 	bic.w	r3, r3, #2
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <TIM_OC1_SetConfig+0xd8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_OC1_SetConfig+0x64>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <TIM_OC1_SetConfig+0xdc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10c      	bne.n	80032ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0308 	bic.w	r3, r3, #8
 80032b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <TIM_OC1_SetConfig+0xd8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC1_SetConfig+0x8e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <TIM_OC1_SetConfig+0xdc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40010000 	.word	0x40010000
 8003328:	40010400 	.word	0x40010400

0800332c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0210 	bic.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0320 	bic.w	r3, r3, #32
 8003376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a22      	ldr	r2, [pc, #136]	; (8003410 <TIM_OC2_SetConfig+0xe4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_OC2_SetConfig+0x68>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <TIM_OC2_SetConfig+0xe8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10d      	bne.n	80033b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a17      	ldr	r2, [pc, #92]	; (8003410 <TIM_OC2_SetConfig+0xe4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_OC2_SetConfig+0x94>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <TIM_OC2_SetConfig+0xe8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d113      	bne.n	80033e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40010400 	.word	0x40010400

08003418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <TIM_OC3_SetConfig+0xe0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_OC3_SetConfig+0x66>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a20      	ldr	r2, [pc, #128]	; (80034fc <TIM_OC3_SetConfig+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10d      	bne.n	800349a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <TIM_OC3_SetConfig+0xe0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_OC3_SetConfig+0x92>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <TIM_OC3_SetConfig+0xe4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d113      	bne.n	80034d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40010400 	.word	0x40010400

08003500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <TIM_OC4_SetConfig+0xa4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC4_SetConfig+0x68>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <TIM_OC4_SetConfig+0xa8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d109      	bne.n	800357c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010400 	.word	0x40010400

080035ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 030a 	bic.w	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b087      	sub	sp, #28
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	f043 0307 	orr.w	r3, r3, #7
 800368c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e05a      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d022      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d01d      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d018      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10c      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e03f      	b.n	80038b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fe9e 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fd11 	bl	8004290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b08c      	sub	sp, #48	; 0x30
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d152      	bne.n	800397e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04b      	b.n	8003980 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e044      	b.n	8003980 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	461a      	mov	r2, r3
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fae8 	bl	8003ee0 <UART_Start_Receive_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800391a:	2b00      	cmp	r3, #0
 800391c:	d12c      	bne.n	8003978 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	2b01      	cmp	r3, #1
 8003924:	d125      	bne.n	8003972 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	617b      	str	r3, [r7, #20]
   return(result);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f043 0310 	orr.w	r3, r3, #16
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	627a      	str	r2, [r7, #36]	; 0x24
 800395e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	61fb      	str	r3, [r7, #28]
   return(result);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8003970:	e002      	b.n	8003978 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800397c:	e000      	b.n	8003980 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3730      	adds	r7, #48	; 0x30
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0ba      	sub	sp, #232	; 0xe8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_UART_IRQHandler+0x66>
 80039da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fb97 	bl	800411a <UART_Receive_IT>
      return;
 80039ec:	e256      	b.n	8003e9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80de 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x22c>
 80039f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80d1 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0xae>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xd2>
 8003a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0202 	orr.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_UART_IRQHandler+0xf6>
 8003a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <HAL_UART_IRQHandler+0x126>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0208 	orr.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 81ed 	beq.w	8003e92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x14e>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fb22 	bl	800411a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_UART_IRQHandler+0x17a>
 8003afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d04f      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa2a 	bl	8003f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d141      	bne.n	8003b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1d9      	bne.n	8003b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d013      	beq.n	8003b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	4a7d      	ldr	r2, [pc, #500]	; (8003d64 <HAL_UART_IRQHandler+0x3dc>)
 8003b70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd ffdf 	bl	8001b3a <HAL_DMA_Abort_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	e00e      	b.n	8003bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f99a 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	e00a      	b.n	8003bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f996 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	e006      	b.n	8003bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f992 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bae:	e170      	b.n	8003e92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	bf00      	nop
    return;
 8003bb2:	e16e      	b.n	8003e92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f040 814a 	bne.w	8003e52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8143 	beq.w	8003e52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 813c 	beq.w	8003e52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	f040 80b4 	bne.w	8003d68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8140 	beq.w	8003e96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	f080 8139 	bcs.w	8003e96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c36:	f000 8088 	beq.w	8003d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1d9      	bne.n	8003c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e1      	bne.n	8003c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e3      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1a:	f023 0310 	bic.w	r3, r3, #16
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e3      	bne.n	8003d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fd fe88 	bl	8001a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd f892 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d60:	e099      	b.n	8003e96 <HAL_UART_IRQHandler+0x50e>
 8003d62:	bf00      	nop
 8003d64:	08004023 	.word	0x08004023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 808b 	beq.w	8003e9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003db2:	647a      	str	r2, [r7, #68]	; 0x44
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dea:	633a      	str	r2, [r7, #48]	; 0x30
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e30:	61fa      	str	r2, [r7, #28]
 8003e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e3      	bne.n	8003e0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd f81a 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e50:	e023      	b.n	8003e9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_UART_IRQHandler+0x4ea>
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8ed 	bl	800404a <UART_Transmit_IT>
    return;
 8003e70:	e014      	b.n	8003e9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <HAL_UART_IRQHandler+0x514>
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f92d 	bl	80040ea <UART_EndTransmit_IT>
    return;
 8003e90:	e004      	b.n	8003e9c <HAL_UART_IRQHandler+0x514>
    return;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_UART_IRQHandler+0x514>
      return;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_UART_IRQHandler+0x514>
      return;
 8003e9a:	bf00      	nop
  }
}
 8003e9c:	37e8      	adds	r7, #232	; 0xe8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop

08003ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2222      	movs	r2, #34	; 0x22
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0220 	orr.w	r2, r2, #32
 8003f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b095      	sub	sp, #84	; 0x54
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f84:	643a      	str	r2, [r7, #64]	; 0x40
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d119      	bne.n	8004008 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0310 	bic.w	r3, r3, #16
 8003fea:	647b      	str	r3, [r7, #68]	; 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff4:	61ba      	str	r2, [r7, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	613b      	str	r3, [r7, #16]
   return(result);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004016:	bf00      	nop
 8004018:	3754      	adds	r7, #84	; 0x54
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ff45 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b21      	cmp	r3, #33	; 0x21
 800405c:	d13e      	bne.n	80040dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d114      	bne.n	8004092 <UART_Transmit_IT+0x48>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d110      	bne.n	8004092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]
 8004090:	e008      	b.n	80040a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6211      	str	r1, [r2, #32]
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4619      	mov	r1, r3
 80040b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff feca 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08c      	sub	sp, #48	; 0x30
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b22      	cmp	r3, #34	; 0x22
 800412c:	f040 80ab 	bne.w	8004286 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d117      	bne.n	800416a <UART_Receive_IT+0x50>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	b29a      	uxth	r2, r3
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
 8004168:	e026      	b.n	80041b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d007      	beq.n	800418e <UART_Receive_IT+0x74>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <UART_Receive_IT+0x82>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e008      	b.n	80041ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d15a      	bne.n	8004282 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0220 	bic.w	r2, r2, #32
 80041da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d135      	bne.n	8004278 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	613b      	str	r3, [r7, #16]
   return(result);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	623a      	str	r2, [r7, #32]
 8004234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	6a3a      	ldr	r2, [r7, #32]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d10a      	bne.n	800426a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fc fe07 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
 8004276:	e002      	b.n	800427e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fe1d 	bl	8003eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e002      	b.n	8004288 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3730      	adds	r7, #48	; 0x30
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b0c0      	sub	sp, #256	; 0x100
 8004296:	af00      	add	r7, sp, #0
 8004298:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	68d9      	ldr	r1, [r3, #12]
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042e8:	f021 010c 	bic.w	r1, r1, #12
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	6999      	ldr	r1, [r3, #24]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	ea40 0301 	orr.w	r3, r0, r1
 8004316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b8f      	ldr	r3, [pc, #572]	; (800455c <UART_SetConfig+0x2cc>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d005      	beq.n	8004330 <UART_SetConfig+0xa0>
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8d      	ldr	r3, [pc, #564]	; (8004560 <UART_SetConfig+0x2d0>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d104      	bne.n	800433a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fd ff10 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8004334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004338:	e003      	b.n	8004342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7fd fef7 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800433e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	f040 810c 	bne.w	8004568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800435a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800435e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	1891      	adds	r1, r2, r2
 8004368:	65b9      	str	r1, [r7, #88]	; 0x58
 800436a:	415b      	adcs	r3, r3
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004372:	4621      	mov	r1, r4
 8004374:	eb12 0801 	adds.w	r8, r2, r1
 8004378:	4629      	mov	r1, r5
 800437a:	eb43 0901 	adc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	4623      	mov	r3, r4
 8004398:	eb18 0303 	adds.w	r3, r8, r3
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043a0:	462b      	mov	r3, r5
 80043a2:	eb49 0303 	adc.w	r3, r9, r3
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043be:	460b      	mov	r3, r1
 80043c0:	18db      	adds	r3, r3, r3
 80043c2:	653b      	str	r3, [r7, #80]	; 0x50
 80043c4:	4613      	mov	r3, r2
 80043c6:	eb42 0303 	adc.w	r3, r2, r3
 80043ca:	657b      	str	r3, [r7, #84]	; 0x54
 80043cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d4:	f7fc fb06 	bl	80009e4 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <UART_SetConfig+0x2d4>)
 80043de:	fba3 2302 	umull	r2, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	011c      	lsls	r4, r3, #4
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004400:	415b      	adcs	r3, r3
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004408:	4641      	mov	r1, r8
 800440a:	eb12 0a01 	adds.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb43 0b01 	adc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	4692      	mov	sl, r2
 800442a:	469b      	mov	fp, r3
 800442c:	4643      	mov	r3, r8
 800442e:	eb1a 0303 	adds.w	r3, sl, r3
 8004432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004436:	464b      	mov	r3, r9
 8004438:	eb4b 0303 	adc.w	r3, fp, r3
 800443c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800444c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004454:	460b      	mov	r3, r1
 8004456:	18db      	adds	r3, r3, r3
 8004458:	643b      	str	r3, [r7, #64]	; 0x40
 800445a:	4613      	mov	r3, r2
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800446a:	f7fc fabb 	bl	80009e4 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <UART_SetConfig+0x2d4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	; 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <UART_SetConfig+0x2d4>)
 800448c:	fba3 2302 	umull	r2, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004498:	441c      	add	r4, r3
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b4:	415b      	adcs	r3, r3
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6339      	str	r1, [r7, #48]	; 0x30
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004508:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800450c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004526:	f7fc fa5d 	bl	80009e4 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <UART_SetConfig+0x2d4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <UART_SetConfig+0x2d4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 0207 	and.w	r2, r3, #7
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4422      	add	r2, r4
 8004556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004558:	e105      	b.n	8004766 <UART_SetConfig+0x4d6>
 800455a:	bf00      	nop
 800455c:	40011000 	.word	0x40011000
 8004560:	40011400 	.word	0x40011400
 8004564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004572:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800457a:	4642      	mov	r2, r8
 800457c:	464b      	mov	r3, r9
 800457e:	1891      	adds	r1, r2, r2
 8004580:	6239      	str	r1, [r7, #32]
 8004582:	415b      	adcs	r3, r3
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458a:	4641      	mov	r1, r8
 800458c:	1854      	adds	r4, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0501 	adc.w	r5, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b0:	464b      	mov	r3, r9
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045d6:	4629      	mov	r1, r5
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4621      	mov	r1, r4
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045e8:	f7fc f9fc 	bl	80009e4 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b60      	ldr	r3, [pc, #384]	; (8004774 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	61b9      	str	r1, [r7, #24]
 8004614:	415b      	adcs	r3, r3
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6139      	str	r1, [r7, #16]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	67bb      	str	r3, [r7, #120]	; 0x78
 8004666:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004674:	4649      	mov	r1, r9
 8004676:	008b      	lsls	r3, r1, #2
 8004678:	4641      	mov	r1, r8
 800467a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467e:	4641      	mov	r1, r8
 8004680:	008a      	lsls	r2, r1, #2
 8004682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004686:	f7fc f9ad 	bl	80009e4 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <UART_SetConfig+0x4e4>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	; 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a34      	ldr	r2, [pc, #208]	; (8004774 <UART_SetConfig+0x4e4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ae:	441c      	add	r4, r3
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	673b      	str	r3, [r7, #112]	; 0x70
 80046b8:	677a      	str	r2, [r7, #116]	; 0x74
 80046ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1851      	adds	r1, r2, r1
 80046d2:	6039      	str	r1, [r7, #0]
 80046d4:	4649      	mov	r1, r9
 80046d6:	414b      	adcs	r3, r1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e6:	4659      	mov	r1, fp
 80046e8:	00cb      	lsls	r3, r1, #3
 80046ea:	4651      	mov	r1, sl
 80046ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f0:	4651      	mov	r1, sl
 80046f2:	00ca      	lsls	r2, r1, #3
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	4603      	mov	r3, r0
 80046fa:	4642      	mov	r2, r8
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	663b      	str	r3, [r7, #96]	; 0x60
 8004714:	667a      	str	r2, [r7, #100]	; 0x64
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004722:	4649      	mov	r1, r9
 8004724:	008b      	lsls	r3, r1, #2
 8004726:	4641      	mov	r1, r8
 8004728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472c:	4641      	mov	r1, r8
 800472e:	008a      	lsls	r2, r1, #2
 8004730:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004734:	f7fc f956 	bl	80009e4 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x4e4>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2164      	movs	r1, #100	; 0x64
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x4e4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4422      	add	r2, r4
 8004764:	609a      	str	r2, [r3, #8]
}
 8004766:	bf00      	nop
 8004768:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4d0d      	ldr	r5, [pc, #52]	; (80047b0 <__libc_init_array+0x38>)
 800477c:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	2600      	movs	r6, #0
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	4d0b      	ldr	r5, [pc, #44]	; (80047b8 <__libc_init_array+0x40>)
 800478a:	4c0c      	ldr	r4, [pc, #48]	; (80047bc <__libc_init_array+0x44>)
 800478c:	f000 f820 	bl	80047d0 <_init>
 8004790:	1b64      	subs	r4, r4, r5
 8004792:	10a4      	asrs	r4, r4, #2
 8004794:	2600      	movs	r6, #0
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08004808 	.word	0x08004808
 80047b4:	08004808 	.word	0x08004808
 80047b8:	08004808 	.word	0x08004808
 80047bc:	0800480c 	.word	0x0800480c

080047c0 <memset>:
 80047c0:	4402      	add	r2, r0
 80047c2:	4603      	mov	r3, r0
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	f803 1b01 	strb.w	r1, [r3], #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
