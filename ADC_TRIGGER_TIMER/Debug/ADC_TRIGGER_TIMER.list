
ADC_TRIGGER_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008458  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008628  08008628  00018628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a6c  08008a6c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a74  08008a74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e0  08008c5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08008c5c  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fa0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002858  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024932  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014563  00000000  00000000  0005b172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def4e  00000000  00000000  0006f6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  0014e674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008610 	.word	0x08008610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008610 	.word	0x08008610

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <bsp_adc_init>:
char    volts[5];
float   fvolts     = 0;
float   fadc_volts = 0;

void bsp_adc_init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  HAL_ADC_Start_IT(&hadc1);
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <bsp_adc_init+0x28>)
 8000fc2:	f000 ff07 	bl	8001dd4 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <bsp_adc_init+0x2c>)
 8000fca:	f002 fd7d 	bl	8003ac8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <bsp_adc_init+0x30>)
 8000fd2:	f002 fd79 	bl	8003ac8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <bsp_adc_init+0x34>)
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <bsp_adc_init+0x38>)
 8000fdc:	f003 fc83 	bl	80048e6 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000218 	.word	0x20000218
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	200002a8 	.word	0x200002a8
 8000ff0:	200001fc 	.word	0x200001fc
 8000ff4:	200002f0 	.word	0x200002f0

08000ff8 <bsp_adc_set_volts>:

void bsp_adc_set_volts(float volts)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0a01 	vstr	s0, [r7, #4]
  fvolts = (fvolts / 3.3) * RANGE_PWM;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <bsp_adc_set_volts+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fabe 	bl	8000588 <__aeabi_f2d>
 800100c:	a312      	add	r3, pc, #72	; (adr r3, 8001058 <bsp_adc_set_volts+0x60>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fc3b 	bl	800088c <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	a310      	add	r3, pc, #64	; (adr r3, 8001060 <bsp_adc_set_volts+0x68>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fb08 	bl	8000638 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdbc 	bl	8000bac <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <bsp_adc_set_volts+0x70>)
 8001038:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <bsp_adc_set_volts+0x70>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <bsp_adc_set_volts+0x74>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001048:	ee17 2a90 	vmov	r2, s15
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	66666666 	.word	0x66666666
 800105c:	400a6666 	.word	0x400a6666
 8001060:	00000000 	.word	0x00000000
 8001064:	40d193c0 	.word	0x40d193c0
 8001068:	20000210 	.word	0x20000210
 800106c:	200002a8 	.word	0x200002a8

08001070 <bsp_adc_get_volts>:

void bsp_adc_get_volts(float *volts)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  *volts = fadc_volts;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <bsp_adc_get_volts+0x1c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20000214 	.word	0x20000214

08001090 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if (rx_data == '\n')
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_UART_RxCpltCallback+0xf0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b0a      	cmp	r3, #10
 800109e:	d153      	bne.n	8001148 <HAL_UART_RxCpltCallback+0xb8>
  {
    data_buffer[count++] = '\n';
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	b2d1      	uxtb	r1, r2
 80010a8:	4a36      	ldr	r2, [pc, #216]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 80010aa:	7011      	strb	r1, [r2, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_UART_RxCpltCallback+0xf8>)
 80010b0:	210a      	movs	r1, #10
 80010b2:	5499      	strb	r1, [r3, r2]
    HAL_UART_Transmit(huart, (uint8_t *) data_buffer, count, HAL_MAX_DELAY);
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4932      	ldr	r1, [pc, #200]	; (8001188 <HAL_UART_RxCpltCallback+0xf8>)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f003 fb7e 	bl	80047c2 <HAL_UART_Transmit>
    strcpy(volts, data_buffer);
 80010c6:	4930      	ldr	r1, [pc, #192]	; (8001188 <HAL_UART_RxCpltCallback+0xf8>)
 80010c8:	4830      	ldr	r0, [pc, #192]	; (800118c <HAL_UART_RxCpltCallback+0xfc>)
 80010ca:	f004 fbdb 	bl	8005884 <strcpy>
    memset(data_buffer, 0, count);
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	482c      	ldr	r0, [pc, #176]	; (8001188 <HAL_UART_RxCpltCallback+0xf8>)
 80010d8:	f004 fbcc 	bl	8005874 <memset>
    count  = 0;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    fvolts = atof(volts);
 80010e2:	482a      	ldr	r0, [pc, #168]	; (800118c <HAL_UART_RxCpltCallback+0xfc>)
 80010e4:	f004 fb98 	bl	8005818 <atof>
 80010e8:	ec53 2b10 	vmov	r2, r3, d0
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd5c 	bl	8000bac <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_UART_RxCpltCallback+0x100>)
 80010f8:	6013      	str	r3, [r2, #0]
    fvolts = (fvolts / 3.3) * RANGE_PWM;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_UART_RxCpltCallback+0x100>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa42 	bl	8000588 <__aeabi_f2d>
 8001104:	a31a      	add	r3, pc, #104	; (adr r3, 8001170 <HAL_UART_RxCpltCallback+0xe0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fbbf 	bl	800088c <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	a318      	add	r3, pc, #96	; (adr r3, 8001178 <HAL_UART_RxCpltCallback+0xe8>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa8c 	bl	8000638 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd40 	bl	8000bac <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_UART_RxCpltCallback+0x100>)
 8001130:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_UART_RxCpltCallback+0x100>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_UART_RxCpltCallback+0x104>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001140:	ee17 2a90 	vmov	r2, s15
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e00a      	b.n	800115e <HAL_UART_RxCpltCallback+0xce>
  }
  else
  {
    data_buffer[count++] = rx_data;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	b2d1      	uxtb	r1, r2
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_UART_RxCpltCallback+0xf4>)
 8001152:	7011      	strb	r1, [r2, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_UART_RxCpltCallback+0xf0>)
 8001158:	7819      	ldrb	r1, [r3, #0]
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_UART_RxCpltCallback+0xf8>)
 800115c:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <HAL_UART_RxCpltCallback+0xf0>)
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_UART_RxCpltCallback+0x108>)
 8001164:	f003 fbbf 	bl	80048e6 <HAL_UART_Receive_IT>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	66666666 	.word	0x66666666
 8001174:	400a6666 	.word	0x400a6666
 8001178:	00000000 	.word	0x00000000
 800117c:	40d193c0 	.word	0x40d193c0
 8001180:	200001fc 	.word	0x200001fc
 8001184:	200001fd 	.word	0x200001fd
 8001188:	20000200 	.word	0x20000200
 800118c:	20000208 	.word	0x20000208
 8001190:	20000210 	.word	0x20000210
 8001194:	200002a8 	.word	0x200002a8
 8001198:	200002f0 	.word	0x200002f0
 800119c:	00000000 	.word	0x00000000

080011a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  fadc_volts = HAL_ADC_GetValue(&hadc1) * 1.0 / 4095 * 3.3;
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <HAL_ADC_ConvCpltCallback+0x60>)
 80011aa:	f001 f801 	bl	80021b0 <HAL_ADC_GetValue>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9c7 	bl	8000544 <__aeabi_ui2d>
 80011b6:	a30e      	add	r3, pc, #56	; (adr r3, 80011f0 <HAL_ADC_ConvCpltCallback+0x50>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fb66 	bl	800088c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	a30b      	add	r3, pc, #44	; (adr r3, 80011f8 <HAL_ADC_ConvCpltCallback+0x58>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa33 	bl	8000638 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fce7 	bl	8000bac <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_ADC_ConvCpltCallback+0x64>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f3af 8000 	nop.w
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40affe00 	.word	0x40affe00
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	20000218 	.word	0x20000218
 8001204:	20000214 	.word	0x20000214

08001208 <adc_init>:
*/

#include "driver_adc.h"

void adc_init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  bsp_adc_init();
 800120c:	f7ff fed6 	bl	8000fbc <bsp_adc_init>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <adc_set_volts>:

void adc_set_volts(float volts)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	ed87 0a01 	vstr	s0, [r7, #4]
  bsp_adc_set_volts(volts);
 800121e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001222:	f7ff fee9 	bl	8000ff8 <bsp_adc_set_volts>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <adc_get_volts>:

void adc_get_volts(float *volts)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  bsp_adc_get_volts(volts);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff1a 	bl	8001070 <bsp_adc_get_volts>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fcea 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f81a 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 fa1a 	bl	8001688 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001254:	f000 f888 	bl	8001368 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001258:	f000 f8d8 	bl	800140c <MX_TIM3_Init>
  MX_TIM8_Init();
 800125c:	f000 f94a 	bl	80014f4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001260:	f000 f9e8 	bl	8001634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  adc_init();
 8001264:	f7ff ffd0 	bl	8001208 <adc_init>
  adc_set_volts(1.5);
 8001268:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800126c:	f7ff ffd2 	bl	8001214 <adc_set_volts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    adc_get_volts(&read_volts);
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <main+0x3c>)
 8001272:	f7ff ffdc 	bl	800122e <adc_get_volts>
    HAL_Delay(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f000 fd44 	bl	8001d04 <HAL_Delay>
    adc_get_volts(&read_volts);
 800127c:	e7f8      	b.n	8001270 <main+0x2c>
 800127e:	bf00      	nop
 8001280:	20000334 	.word	0x20000334

08001284 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2234      	movs	r2, #52	; 0x34
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 faee 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <SystemClock_Config+0xdc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <SystemClock_Config+0xdc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <SystemClock_Config+0xdc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <SystemClock_Config+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <SystemClock_Config+0xe0>)
 80012ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <SystemClock_Config+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM       = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN       = 180;
 80012f8:	23b4      	movs	r3, #180	; 0xb4
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ       = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR       = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f895 	bl	800343c <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001318:	f000 fa06 	bl	8001728 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800131c:	f001 fcf4 	bl	8002d08 <HAL_PWREx_EnableOverDrive>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001326:	f000 f9ff 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800132a:	230f      	movs	r3, #15
 800132c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001336:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2105      	movs	r1, #5
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fd2d 	bl	8002da8 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001354:	f000 f9e8 	bl	8001728 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	; 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = { 0 };
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance                   = ADC1;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_ADC1_Init+0x9c>)
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <MX_ADC1_Init+0xa0>)
 800137e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MX_ADC1_Init+0x9c>)
 8001382:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001386:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_ADC1_Init+0x9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode          = DISABLE;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_ADC1_Init+0x9c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_ADC1_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_ADC1_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion       = 1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013ce:	f000 fcbd 	bl	8001d4c <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80013d8:	f000 f9a6 	bl	8001728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel      = ADC_CHANNEL_0;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank         = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC1_Init+0x9c>)
 80013ee:	f000 ff01 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013f8:	f000 f996 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000218 	.word	0x20000218
 8001408:	40012000 	.word	0x40012000

0800140c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
 8001412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig      = { 0 };
 8001420:	f107 0320 	add.w	r3, r7, #32
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef      sConfigOC          = { 0 };
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance               = TIM3;
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM3_Init+0xe0>)
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_TIM3_Init+0xe4>)
 8001440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler         = 9000 - 1;
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001444:	f242 3227 	movw	r2, #8999	; 0x2327
 8001448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_TIM3_Init+0xe0>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period            = 1000 - 1;
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MX_TIM3_Init+0xe0>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001464:	4821      	ldr	r0, [pc, #132]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001466:	f002 fa87 	bl	8003978 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001470:	f000 f95a 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	4619      	mov	r1, r3
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001482:	f002 fcab 	bl	8003ddc <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800148c:	f000 f94c 	bl	8001728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001490:	4816      	ldr	r0, [pc, #88]	; (80014ec <MX_TIM3_Init+0xe0>)
 8001492:	f002 fac0 	bl	8003a16 <HAL_TIM_PWM_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800149c:	f000 f944 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a0:	2320      	movs	r3, #32
 80014a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4619      	mov	r1, r3
 80014ae:	480f      	ldr	r0, [pc, #60]	; (80014ec <MX_TIM3_Init+0xe0>)
 80014b0:	f003 f86c 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014ba:	f000 f935 	bl	8001728 <Error_Handler>
  }
  sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse      = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_TIM3_Init+0xe0>)
 80014d6:	f002 fbbf 	bl	8003c58 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014e0:	f000 f922 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000260 	.word	0x20000260
 80014f0:	40000400 	.word	0x40000400

080014f4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef         sClockSourceConfig   = { 0 };
 80014fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef        sMasterConfig        = { 0 };
 8001508:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef             sConfigOC            = { 0 };
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2220      	movs	r2, #32
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f004 f9a1 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance               = TIM8;
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <MX_TIM8_Init+0x138>)
 8001534:	4a3e      	ldr	r2, [pc, #248]	; (8001630 <MX_TIM8_Init+0x13c>)
 8001536:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler         = 0;
 8001538:	4b3c      	ldr	r3, [pc, #240]	; (800162c <MX_TIM8_Init+0x138>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <MX_TIM8_Init+0x138>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim8.Init.Period            = 18000 - 1;
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <MX_TIM8_Init+0x138>)
 8001546:	f244 624f 	movw	r2, #17999	; 0x464f
 800154a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <MX_TIM8_Init+0x138>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <MX_TIM8_Init+0x138>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <MX_TIM8_Init+0x138>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800155e:	4833      	ldr	r0, [pc, #204]	; (800162c <MX_TIM8_Init+0x138>)
 8001560:	f002 fa0a 	bl	8003978 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800156a:	f000 f8dd 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001578:	4619      	mov	r1, r3
 800157a:	482c      	ldr	r0, [pc, #176]	; (800162c <MX_TIM8_Init+0x138>)
 800157c:	f002 fc2e 	bl	8003ddc <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001586:	f000 f8cf 	bl	8001728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800158a:	4828      	ldr	r0, [pc, #160]	; (800162c <MX_TIM8_Init+0x138>)
 800158c:	f002 fa43 	bl	8003a16 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001596:	f000 f8c7 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a6:	4619      	mov	r1, r3
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <MX_TIM8_Init+0x138>)
 80015aa:	f002 ffef 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015b4:	f000 f8b8 	bl	8001728 <Error_Handler>
  }
  sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse        = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_TIM8_Init+0x138>)
 80015de:	f002 fb3b 	bl	8003c58 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015e8:	f000 f89e 	bl	8001728 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime         = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 8001600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001604:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM8_Init+0x138>)
 8001610:	f003 f838 	bl	8004684 <HAL_TIMEx_ConfigBreakDeadTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800161a:	f000 f885 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM8_Init+0x138>)
 8001620:	f000 f934 	bl	800188c <HAL_TIM_MspPostInit>
}
 8001624:	bf00      	nop
 8001626:	3758      	adds	r7, #88	; 0x58
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200002a8 	.word	0x200002a8
 8001630:	40010400 	.word	0x40010400

08001634 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_USART2_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_USART2_UART_Init+0x4c>)
 800166c:	f003 f85c 	bl	8004728 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f857 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002f0 	.word	0x200002f0
 8001684:	40004400 	.word	0x40004400

08001688 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_GPIO_Init+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <MX_GPIO_Init+0x98>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_GPIO_Init+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_GPIO_Init+0x98>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_GPIO_Init+0x98>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_GPIO_Init+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_GPIO_Init+0x98>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <MX_GPIO_Init+0x98>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_GPIO_Init+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	480b      	ldr	r0, [pc, #44]	; (8001724 <MX_GPIO_Init+0x9c>)
 80016f8:	f001 faec 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin   = LED1_Pin;
 80016fc:	2320      	movs	r3, #32
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_GPIO_Init+0x9c>)
 8001714:	f001 f94a 	bl	80029ac <HAL_GPIO_Init>
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	e7fe      	b.n	8001730 <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_MspInit+0x4c>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_ADC_MspInit+0x8c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12f      	bne.n	8001806 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_ADC_MspInit+0x90>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_ADC_MspInit+0x94>)
 80017f2:	f001 f8db 	bl	80029ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2012      	movs	r0, #18
 80017fc:	f001 f80d 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001800:	2012      	movs	r0, #18
 8001802:	f001 f826 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012000 	.word	0x40012000
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_TIM_Base_MspInit+0x64>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10e      	bne.n	800184c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800184a:	e012      	b.n	8001872 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_TIM_Base_MspInit+0x6c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_TIM_Base_MspInit+0x68>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40000400 	.word	0x40000400
 8001884:	40023800 	.word	0x40023800
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_TIM_MspPostInit+0x68>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d11d      	bne.n	80018ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ca:	2340      	movs	r3, #64	; 0x40
 80018cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018da:	2303      	movs	r3, #3
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_TIM_MspPostInit+0x70>)
 80018e6:	f001 f861 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40010400 	.word	0x40010400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_UART_MspInit+0x94>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d133      	bne.n	800198a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_UART_MspInit+0x98>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x98>)
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x98>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x98>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x98>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_UART_MspInit+0x98>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800195a:	230c      	movs	r3, #12
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196a:	2307      	movs	r3, #7
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001976:	f001 f819 	bl	80029ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2026      	movs	r0, #38	; 0x26
 8001980:	f000 ff4b 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001984:	2026      	movs	r0, #38	; 0x26
 8001986:	f000 ff64 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004400 	.word	0x40004400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f96a 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <ADC_IRQHandler+0x10>)
 80019fa:	f000 fac9 	bl	8001f90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000218 	.word	0x20000218

08001a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART2_IRQHandler+0x10>)
 8001a0e:	f002 ff9b 	bl	8004948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002f0 	.word	0x200002f0

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a36:	f003 fef3 	bl	8005820 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5e:	e7fe      	b.n	8001a5e <_exit+0x12>

08001a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e00a      	b.n	8001a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a72:	f3af 8000 	nop.w
 8001a76:	4601      	mov	r1, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf0      	blt.n	8001a72 <_read+0x12>
	}

return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e009      	b.n	8001ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf1      	blt.n	8001aac <_write+0x12>
	}
	return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_close>:

int _close(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_isatty>:

int _isatty(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return 1;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f003 fe58 	bl	8005820 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000338 	.word	0x20000338
 8001ba4:	20000350 	.word	0x20000350

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be8:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ffd7 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fe17 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fb21 	bl	8001244 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c10:	08008a7c 	.word	0x08008a7c
  ldr r2, =_sbss
 8001c14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c18:	20000350 	.word	0x20000350

08001c1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <CAN1_RX0_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 fddb 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fd6e 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fdf3 	bl	800286e <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 fdbb 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	2000033c 	.word	0x2000033c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000033c 	.word	0x2000033c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e033      	b.n	8001dca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fd0a 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d92:	f023 0302 	bic.w	r3, r3, #2
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fb5a 	bl	8002458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dba:	e001      	b.n	8001dc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Start_IT+0x1a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e0bd      	b.n	8001f6a <HAL_ADC_Start_IT+0x196>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d018      	beq.n	8001e36 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_ADC_Start_IT+0x1a4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_ADC_Start_IT+0x1a8>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0c9a      	lsrs	r2, r3, #18
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f9      	bne.n	8001e2a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 8085 	bne.w	8001f50 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e84:	d106      	bne.n	8001e94 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f023 0206 	bic.w	r2, r3, #6
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <HAL_ADC_Start_IT+0x1ac>)
 8001ea4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001eae:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12a      	bne.n	8001f26 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_ADC_Start_IT+0x1b0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d015      	beq.n	8001f06 <HAL_ADC_Start_IT+0x132>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_ADC_Start_IT+0x1b4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_Start_IT+0x11c>
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_ADC_Start_IT+0x1ac>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00a      	beq.n	8001f06 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_ADC_Start_IT+0x1b8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d136      	bne.n	8001f68 <HAL_ADC_Start_IT+0x194>
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_ADC_Start_IT+0x1ac>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d130      	bne.n	8001f68 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d129      	bne.n	8001f68 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e020      	b.n	8001f68 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_ADC_Start_IT+0x1b0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d11b      	bne.n	8001f68 <HAL_ADC_Start_IT+0x194>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d114      	bne.n	8001f68 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e00b      	b.n	8001f68 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	40012300 	.word	0x40012300
 8001f84:	40012000 	.word	0x40012000
 8001f88:	40012100 	.word	0x40012100
 8001f8c:	40012200 	.word	0x40012200

08001f90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d049      	beq.n	800205a <HAL_ADC_IRQHandler+0xca>
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d046      	beq.n	800205a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d12b      	bne.n	800204a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d127      	bne.n	800204a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0220 	bic.w	r2, r2, #32
 8002024:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff f8a8 	bl	80011a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0212 	mvn.w	r2, #18
 8002058:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d057      	beq.n	8002120 <HAL_ADC_IRQHandler+0x190>
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d054      	beq.n	8002120 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d139      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d12b      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d124      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11d      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d119      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa9d 	bl	8002650 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 020c 	mvn.w	r2, #12
 800211e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d017      	beq.n	8002166 <HAL_ADC_IRQHandler+0x1d6>
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d014      	beq.n	8002166 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f837 	bl	80021ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0201 	mvn.w	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002174:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x218>
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0220 	mvn.w	r2, #32
 8002196:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f820 	bl	80021de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 0220 	mvn.w	r2, #32
 80021a6:	601a      	str	r2, [r3, #0]
  }
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1c>
 800220c:	2302      	movs	r3, #2
 800220e:	e113      	b.n	8002438 <HAL_ADC_ConfigChannel+0x244>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d925      	bls.n	800226c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	3b1e      	subs	r3, #30
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43da      	mvns	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	400a      	ands	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68d9      	ldr	r1, [r3, #12]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	4603      	mov	r3, r0
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4403      	add	r3, r0
 800225e:	3b1e      	subs	r3, #30
 8002260:	409a      	lsls	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	e022      	b.n	80022b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	2207      	movs	r2, #7
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	400a      	ands	r2, r1
 800228e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4403      	add	r3, r0
 80022a8:	409a      	lsls	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d824      	bhi.n	8002304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b05      	subs	r3, #5
 80022cc:	221f      	movs	r2, #31
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3b05      	subs	r3, #5
 80022f6:	fa00 f203 	lsl.w	r2, r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
 8002302:	e04c      	b.n	800239e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d824      	bhi.n	8002356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b23      	subs	r3, #35	; 0x23
 800231e:	221f      	movs	r2, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b23      	subs	r3, #35	; 0x23
 8002348:	fa00 f203 	lsl.w	r2, r0, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
 8002354:	e023      	b.n	800239e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b41      	subs	r3, #65	; 0x41
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b41      	subs	r3, #65	; 0x41
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_ADC_ConfigChannel+0x250>)
 80023a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_ADC_ConfigChannel+0x254>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10f      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1d8>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d10b      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_ADC_ConfigChannel+0x254>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d12b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x23a>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_ADC_ConfigChannel+0x258>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x1f4>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b11      	cmp	r3, #17
 80023e6:	d122      	bne.n	800242e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_ADC_ConfigChannel+0x258>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d111      	bne.n	800242e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_ADC_ConfigChannel+0x25c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_ADC_ConfigChannel+0x260>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9a      	lsrs	r2, r3, #18
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002420:	e002      	b.n	8002428 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3b01      	subs	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40012300 	.word	0x40012300
 8002448:	40012000 	.word	0x40012000
 800244c:	10000012 	.word	0x10000012
 8002450:	20000000 	.word	0x20000000
 8002454:	431bde83 	.word	0x431bde83

08002458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002460:	4b79      	ldr	r3, [pc, #484]	; (8002648 <ADC_Init+0x1f0>)
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	4a58      	ldr	r2, [pc, #352]	; (800264c <ADC_Init+0x1f4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e00f      	b.n	8002556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002554:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0202 	bic.w	r2, r2, #2
 8002564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e1b      	ldrb	r3, [r3, #24]
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002592:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	3b01      	subs	r3, #1
 80025b0:	035a      	lsls	r2, r3, #13
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e007      	b.n	80025cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	051a      	lsls	r2, r3, #20
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260e:	025a      	lsls	r2, r3, #9
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	029a      	lsls	r2, r3, #10
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012300 	.word	0x40012300
 800264c:	0f000001 	.word	0x0f000001

08002650 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fa2a 	bl	8001cec <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d008      	beq.n	80028b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e052      	b.n	800295e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0216 	bic.w	r2, r2, #22
 80028c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <HAL_DMA_Abort+0x62>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0208 	bic.w	r2, r2, #8
 80028f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002908:	e013      	b.n	8002932 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290a:	f7ff f9ef 	bl	8001cec <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b05      	cmp	r3, #5
 8002916:	d90c      	bls.n	8002932 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e015      	b.n	800295e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e4      	bne.n	800290a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	223f      	movs	r2, #63	; 0x3f
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d004      	beq.n	8002984 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e00c      	b.n	800299e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2205      	movs	r2, #5
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e165      	b.n	8002c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f040 8154 	bne.w	8002c8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d005      	beq.n	80029fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d130      	bne.n	8002a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 0201 	and.w	r2, r3, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d017      	beq.n	8002a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d123      	bne.n	8002af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	08da      	lsrs	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3208      	adds	r2, #8
 8002ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	08da      	lsrs	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3208      	adds	r2, #8
 8002aea:	69b9      	ldr	r1, [r7, #24]
 8002aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0203 	and.w	r2, r3, #3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80ae 	beq.w	8002c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_GPIO_Init+0x300>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_GPIO_Init+0x300>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <HAL_GPIO_Init+0x300>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b4e:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_GPIO_Init+0x304>)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	220f      	movs	r2, #15
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x308>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d025      	beq.n	8002bc6 <HAL_GPIO_Init+0x21a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_GPIO_Init+0x30c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01f      	beq.n	8002bc2 <HAL_GPIO_Init+0x216>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_GPIO_Init+0x310>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_GPIO_Init+0x314>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x20e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x318>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x20a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <HAL_GPIO_Init+0x31c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x206>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a49      	ldr	r2, [pc, #292]	; (8002ccc <HAL_GPIO_Init+0x320>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x202>
 8002baa:	2306      	movs	r3, #6
 8002bac:	e00c      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e00a      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x21c>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	; (8002cb0 <HAL_GPIO_Init+0x304>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3a:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_GPIO_Init+0x324>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f ae96 	bls.w	80029c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021800 	.word	0x40021800
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_PWREx_EnableOverDrive+0x94>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d34:	f7fe ffda 	bl	8001cec <HAL_GetTick>
 8002d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d3a:	e009      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d3c:	f7fe ffd6 	bl	8001cec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4a:	d901      	bls.n	8002d50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e01f      	b.n	8002d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d1ee      	bne.n	8002d3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d64:	f7fe ffc2 	bl	8001cec <HAL_GetTick>
 8002d68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d6a:	e009      	b.n	8002d80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d6c:	f7fe ffbe 	bl	8001cec <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7a:	d901      	bls.n	8002d80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e007      	b.n	8002d90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	420e0040 	.word	0x420e0040
 8002da0:	40007000 	.word	0x40007000
 8002da4:	420e0044 	.word	0x420e0044

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe ff28 	bl	8001cec <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe ff24 	bl	8001cec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f855 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fe88 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08008628 	.word	0x08008628
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08008638 	.word	0x08008638

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08008638 	.word	0x08008638

08002fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0ae      	sub	sp, #184	; 0xb8
 8002fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4bcb      	ldr	r3, [pc, #812]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b0c      	cmp	r3, #12
 800300c:	f200 8206 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x440>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800341d 	.word	0x0800341d
 8003020:	0800341d 	.word	0x0800341d
 8003024:	0800341d 	.word	0x0800341d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800341d 	.word	0x0800341d
 8003030:	0800341d 	.word	0x0800341d
 8003034:	0800341d 	.word	0x0800341d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800341d 	.word	0x0800341d
 8003040:	0800341d 	.word	0x0800341d
 8003044:	0800341d 	.word	0x0800341d
 8003048:	0800324d 	.word	0x0800324d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4bb9      	ldr	r3, [pc, #740]	; (8003334 <HAL_RCC_GetSysClockFreq+0x358>)
 800304e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003052:	e1e7      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003054:	4bb8      	ldr	r3, [pc, #736]	; (8003338 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800305a:	e1e3      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4bb4      	ldr	r3, [pc, #720]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003068:	4bb1      	ldr	r3, [pc, #708]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d071      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4bae      	ldr	r3, [pc, #696]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003080:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ac:	0150      	lsls	r0, r2, #5
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4621      	mov	r1, r4
 80030b4:	1a51      	subs	r1, r2, r1
 80030b6:	6439      	str	r1, [r7, #64]	; 0x40
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb63 0301 	sbc.w	r3, r3, r1
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030cc:	4649      	mov	r1, r9
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	4641      	mov	r1, r8
 80030d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d6:	4641      	mov	r1, r8
 80030d8:	018a      	lsls	r2, r1, #6
 80030da:	4641      	mov	r1, r8
 80030dc:	1a51      	subs	r1, r2, r1
 80030de:	63b9      	str	r1, [r7, #56]	; 0x38
 80030e0:	4649      	mov	r1, r9
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80030f4:	4649      	mov	r1, r9
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4641      	mov	r1, r8
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4641      	mov	r1, r8
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4622      	mov	r2, r4
 800310a:	189b      	adds	r3, r3, r2
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
 800310e:	462b      	mov	r3, r5
 8003110:	460a      	mov	r2, r1
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003124:	4629      	mov	r1, r5
 8003126:	024b      	lsls	r3, r1, #9
 8003128:	4621      	mov	r1, r4
 800312a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800312e:	4621      	mov	r1, r4
 8003130:	024a      	lsls	r2, r1, #9
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003144:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003148:	f7fd fd80 	bl	8000c4c <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003156:	e067      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003158:	4b75      	ldr	r3, [pc, #468]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003164:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	67bb      	str	r3, [r7, #120]	; 0x78
 8003172:	2300      	movs	r3, #0
 8003174:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003176:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	0159      	lsls	r1, r3, #5
 8003188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318c:	0150      	lsls	r0, r2, #5
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4621      	mov	r1, r4
 8003194:	1a51      	subs	r1, r2, r1
 8003196:	62b9      	str	r1, [r7, #40]	; 0x28
 8003198:	4629      	mov	r1, r5
 800319a:	eb63 0301 	sbc.w	r3, r3, r1
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80031ac:	4649      	mov	r1, r9
 80031ae:	018b      	lsls	r3, r1, #6
 80031b0:	4641      	mov	r1, r8
 80031b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031b6:	4641      	mov	r1, r8
 80031b8:	018a      	lsls	r2, r1, #6
 80031ba:	4641      	mov	r1, r8
 80031bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80031c0:	4649      	mov	r1, r9
 80031c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031da:	4692      	mov	sl, r2
 80031dc:	469b      	mov	fp, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	eb1a 0303 	adds.w	r3, sl, r3
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	462b      	mov	r3, r5
 80031e8:	eb4b 0303 	adc.w	r3, fp, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003210:	2200      	movs	r2, #0
 8003212:	673b      	str	r3, [r7, #112]	; 0x70
 8003214:	677a      	str	r2, [r7, #116]	; 0x74
 8003216:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800321a:	f7fd fd17 	bl	8000c4c <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4613      	mov	r3, r2
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003228:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800323a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800323e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800324a:	e0eb      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003258:	4b35      	ldr	r3, [pc, #212]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d06b      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	66bb      	str	r3, [r7, #104]	; 0x68
 800326e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	663b      	str	r3, [r7, #96]	; 0x60
 8003278:	2300      	movs	r3, #0
 800327a:	667b      	str	r3, [r7, #100]	; 0x64
 800327c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003280:	4622      	mov	r2, r4
 8003282:	462b      	mov	r3, r5
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003292:	0150      	lsls	r0, r2, #5
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4621      	mov	r1, r4
 800329a:	1a51      	subs	r1, r2, r1
 800329c:	61b9      	str	r1, [r7, #24]
 800329e:	4629      	mov	r1, r5
 80032a0:	eb63 0301 	sbc.w	r3, r3, r1
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032b2:	4659      	mov	r1, fp
 80032b4:	018b      	lsls	r3, r1, #6
 80032b6:	4651      	mov	r1, sl
 80032b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032bc:	4651      	mov	r1, sl
 80032be:	018a      	lsls	r2, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ebb2 0801 	subs.w	r8, r2, r1
 80032c6:	4659      	mov	r1, fp
 80032c8:	eb63 0901 	sbc.w	r9, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e0:	4690      	mov	r8, r2
 80032e2:	4699      	mov	r9, r3
 80032e4:	4623      	mov	r3, r4
 80032e6:	eb18 0303 	adds.w	r3, r8, r3
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	462b      	mov	r3, r5
 80032ee:	eb49 0303 	adc.w	r3, r9, r3
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	024b      	lsls	r3, r1, #9
 8003304:	4621      	mov	r1, r4
 8003306:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800330a:	4621      	mov	r1, r4
 800330c:	024a      	lsls	r2, r1, #9
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003316:	2200      	movs	r2, #0
 8003318:	65bb      	str	r3, [r7, #88]	; 0x58
 800331a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800331c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003320:	f7fd fc94 	bl	8000c4c <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332e:	e065      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x420>
 8003330:	40023800 	.word	0x40023800
 8003334:	00f42400 	.word	0x00f42400
 8003338:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333c:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCC_GetSysClockFreq+0x458>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	2200      	movs	r2, #0
 8003344:	4618      	mov	r0, r3
 8003346:	4611      	mov	r1, r2
 8003348:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334c:	653b      	str	r3, [r7, #80]	; 0x50
 800334e:	2300      	movs	r3, #0
 8003350:	657b      	str	r3, [r7, #84]	; 0x54
 8003352:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003356:	4642      	mov	r2, r8
 8003358:	464b      	mov	r3, r9
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4641      	mov	r1, r8
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	4649      	mov	r1, r9
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003388:	4659      	mov	r1, fp
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4651      	mov	r1, sl
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	4651      	mov	r1, sl
 8003398:	1a54      	subs	r4, r2, r1
 800339a:	4659      	mov	r1, fp
 800339c:	eb63 0501 	sbc.w	r5, r3, r1
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	00eb      	lsls	r3, r5, #3
 80033aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ae:	00e2      	lsls	r2, r4, #3
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	18e3      	adds	r3, r4, r3
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	464b      	mov	r3, r9
 80033bc:	eb45 0303 	adc.w	r3, r5, r3
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e4:	2200      	movs	r2, #0
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ee:	f7fd fc2d 	bl	8000c4c <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4613      	mov	r3, r2
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_GetSysClockFreq+0x458>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0f1b      	lsrs	r3, r3, #28
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800340a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800341a:	e003      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetSysClockFreq+0x45c>)
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003428:	4618      	mov	r0, r3
 800342a:	37b8      	adds	r7, #184	; 0xb8
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	00f42400 	.word	0x00f42400

0800343c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e28d      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8083 	beq.w	8003562 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800345c:	4b94      	ldr	r3, [pc, #592]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d019      	beq.n	800349c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003468:	4b91      	ldr	r3, [pc, #580]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003470:	2b08      	cmp	r3, #8
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003474:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003480:	d00c      	beq.n	800349c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003482:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d112      	bne.n	80034b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348e:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349a:	d10b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	4b84      	ldr	r3, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05b      	beq.n	8003560 <HAL_RCC_OscConfig+0x124>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d157      	bne.n	8003560 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e25a      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0x90>
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7b      	ldr	r2, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0xcc>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0xb4>
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a72      	ldr	r2, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xcc>
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6b      	ldr	r2, [pc, #428]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fbec 	bl	8001cec <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fbe8 	bl	8001cec <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e21f      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0xdc>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fbd8 	bl	8001cec <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe fbd4 	bl	8001cec <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e20b      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x104>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d06f      	beq.n	800364e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800356e:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800357a:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003582:	2b08      	cmp	r3, #8
 8003584:	d105      	bne.n	8003592 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x186>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1d3      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x278>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe fb81 	bl	8001cec <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fb7d 	bl	8001cec <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1b4      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4925      	ldr	r1, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x278>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fb60 	bl	8001cec <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003630:	f7fe fb5c 	bl	8001cec <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e193      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fe fb40 	bl	8001cec <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe fb3c 	bl	8001cec <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e173      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x234>
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fb29 	bl	8001cec <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	e00e      	b.n	80036bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fb25 	bl	8001cec <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d907      	bls.n	80036bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e15c      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470000 	.word	0x42470000
 80036b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b8a      	ldr	r3, [pc, #552]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ea      	bne.n	800369e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8097 	beq.w	8003804 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b83      	ldr	r3, [pc, #524]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a7e      	ldr	r2, [pc, #504]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b79      	ldr	r3, [pc, #484]	; (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7fe fae5 	bl	8001cec <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fe fae1 	bl	8001cec <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e118      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <HAL_RCC_OscConfig+0x4b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x31e>
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	; 0x70
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x358>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x340>
 8003762:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a60      	ldr	r2, [pc, #384]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
 800376e:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0x358>
 800377c:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a59      	ldr	r2, [pc, #356]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fe faa6 	bl	8001cec <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe faa2 	bl	8001cec <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0d7      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RCC_OscConfig+0x368>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe fa90 	bl	8001cec <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe fa8c 	bl	8001cec <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0c1      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ee      	bne.n	80037d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ad 	beq.w	8003968 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d060      	beq.n	80038dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d145      	bne.n	80038ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fa60 	bl	8001cec <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fa5c 	bl	8001cec <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e093      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	491b      	ldr	r1, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe fa31 	bl	8001cec <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe fa2d 	bl	8001cec <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e064      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x452>
 80038ac:	e05c      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fa1a 	bl	8001cec <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fa16 	bl	8001cec <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04d      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x480>
 80038da:	e045      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e040      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCC_OscConfig+0x538>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d030      	beq.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d129      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d122      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	4293      	cmp	r3, r2
 800392e:	d119      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	3b01      	subs	r3, #1
 800393e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d10f      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e041      	b.n	8003a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd ff3c 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f000 fad8 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e041      	b.n	8003aac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f839 	bl	8003ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 fa89 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start+0x24>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e022      	b.n	8003b32 <HAL_TIM_PWM_Start+0x6a>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d109      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x3e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e015      	b.n	8003b32 <HAL_TIM_PWM_Start+0x6a>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x58>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e008      	b.n	8003b32 <HAL_TIM_PWM_Start+0x6a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07c      	b.n	8003c34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x82>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	e013      	b.n	8003b72 <HAL_TIM_PWM_Start+0xaa>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0x92>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	e00b      	b.n	8003b72 <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xa2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b68:	e003      	b.n	8003b72 <HAL_TIM_PWM_Start+0xaa>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fce0 	bl	8004540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2d      	ldr	r2, [pc, #180]	; (8003c3c <HAL_TIM_PWM_Start+0x174>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_TIM_PWM_Start+0xcc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <HAL_TIM_PWM_Start+0x178>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_PWM_Start+0xd0>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_TIM_PWM_Start+0xd2>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <HAL_TIM_PWM_Start+0x174>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d01d      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <HAL_TIM_PWM_Start+0x17c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_TIM_PWM_Start+0x180>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <HAL_TIM_PWM_Start+0x184>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_TIM_PWM_Start+0x178>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_TIM_PWM_Start+0x188>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIM_PWM_Start+0x136>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_TIM_PWM_Start+0x18c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d010      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	e007      	b.n	8003c32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40010400 	.word	0x40010400
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40001800 	.word	0x40001800

08003c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0ae      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	f200 809f 	bhi.w	8003dc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cc1 	.word	0x08003cc1
 8003c90:	08003dc5 	.word	0x08003dc5
 8003c94:	08003dc5 	.word	0x08003dc5
 8003c98:	08003dc5 	.word	0x08003dc5
 8003c9c:	08003d01 	.word	0x08003d01
 8003ca0:	08003dc5 	.word	0x08003dc5
 8003ca4:	08003dc5 	.word	0x08003dc5
 8003ca8:	08003dc5 	.word	0x08003dc5
 8003cac:	08003d43 	.word	0x08003d43
 8003cb0:	08003dc5 	.word	0x08003dc5
 8003cb4:	08003dc5 	.word	0x08003dc5
 8003cb8:	08003dc5 	.word	0x08003dc5
 8003cbc:	08003d83 	.word	0x08003d83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f9f0 	bl	80040ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0208 	orr.w	r2, r2, #8
 8003cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0204 	bic.w	r2, r2, #4
 8003cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6999      	ldr	r1, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
      break;
 8003cfe:	e064      	b.n	8003dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa40 	bl	800418c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
      break;
 8003d40:	e043      	b.n	8003dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fa95 	bl	8004278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0208 	orr.w	r2, r2, #8
 8003d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0204 	bic.w	r2, r2, #4
 8003d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	61da      	str	r2, [r3, #28]
      break;
 8003d80:	e023      	b.n	8003dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fae9 	bl	8004360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	021a      	lsls	r2, r3, #8
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	61da      	str	r2, [r3, #28]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_ConfigClockSource+0x1c>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0b4      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x186>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e30:	d03e      	beq.n	8003eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	f200 8087 	bhi.w	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	f000 8086 	beq.w	8003f4e <HAL_TIM_ConfigClockSource+0x172>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d87f      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b70      	cmp	r3, #112	; 0x70
 8003e4a:	d01a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0xa6>
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d87b      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b60      	cmp	r3, #96	; 0x60
 8003e52:	d050      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e54:	2b60      	cmp	r3, #96	; 0x60
 8003e56:	d877      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b50      	cmp	r3, #80	; 0x50
 8003e5a:	d03c      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e5c:	2b50      	cmp	r3, #80	; 0x50
 8003e5e:	d873      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d058      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x13a>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d86f      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b30      	cmp	r3, #48	; 0x30
 8003e6a:	d064      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x15a>
 8003e6c:	2b30      	cmp	r3, #48	; 0x30
 8003e6e:	d86b      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d060      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d867      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d05a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	e062      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f000 fb35 	bl	8004500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	609a      	str	r2, [r3, #8]
      break;
 8003eae:	e04f      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f000 fb1e 	bl	8004500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed2:	609a      	str	r2, [r3, #8]
      break;
 8003ed4:	e03c      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 fa92 	bl	800440c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2150      	movs	r1, #80	; 0x50
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 faeb 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e02c      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f000 fab1 	bl	800446a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2160      	movs	r1, #96	; 0x60
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fadb 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f14:	e01c      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fa72 	bl	800440c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 facb 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f34:	e00c      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f000 fac2 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003f46:	e003      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e000      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d00f      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3d      	ldr	r2, [pc, #244]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00b      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d108      	bne.n	8003fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d027      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d023      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d017      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a28      	ldr	r2, [pc, #160]	; (8004094 <TIM_Base_SetConfig+0x128>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <TIM_Base_SetConfig+0x12c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a26      	ldr	r2, [pc, #152]	; (800409c <TIM_Base_SetConfig+0x130>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_Base_SetConfig+0x134>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <TIM_Base_SetConfig+0x138>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <TIM_Base_SetConfig+0x13c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0xf8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40010400 	.word	0x40010400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800
 80040a0:	40001800 	.word	0x40001800
 80040a4:	40001c00 	.word	0x40001c00
 80040a8:	40002000 	.word	0x40002000

080040ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0302 	bic.w	r3, r3, #2
 80040f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <TIM_OC1_SetConfig+0xd8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC1_SetConfig+0x64>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0308 	bic.w	r3, r3, #8
 8004116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <TIM_OC1_SetConfig+0xd8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC1_SetConfig+0x8e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d111      	bne.n	800415e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40010000 	.word	0x40010000
 8004188:	40010400 	.word	0x40010400

0800418c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0210 	bic.w	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a22      	ldr	r2, [pc, #136]	; (8004270 <TIM_OC2_SetConfig+0xe4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC2_SetConfig+0x68>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <TIM_OC2_SetConfig+0xe8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10d      	bne.n	8004210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <TIM_OC2_SetConfig+0xe4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0x94>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <TIM_OC2_SetConfig+0xe8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d113      	bne.n	8004248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40010400 	.word	0x40010400

08004278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a21      	ldr	r2, [pc, #132]	; (8004358 <TIM_OC3_SetConfig+0xe0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x66>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a16      	ldr	r2, [pc, #88]	; (8004358 <TIM_OC3_SetConfig+0xe0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0x92>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40010000 	.word	0x40010000
 800435c:	40010400 	.word	0x40010400

08004360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <TIM_OC4_SetConfig+0xa4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC4_SetConfig+0x68>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a11      	ldr	r2, [pc, #68]	; (8004408 <TIM_OC4_SetConfig+0xa8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d109      	bne.n	80043dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40010400 	.word	0x40010400

0800440c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 030a 	bic.w	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0210 	bic.w	r2, r3, #16
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	031b      	lsls	r3, r3, #12
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f043 0307 	orr.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	431a      	orrs	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4313      	orrs	r3, r2
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e05a      	b.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d01d      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10c      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40010400 	.word	0x40010400
 800467c:	40014000 	.word	0x40014000
 8004680:	40001800 	.word	0x40001800

08004684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800469c:	2302      	movs	r3, #2
 800469e:	e03d      	b.n	800471c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f8d6 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fddf 	bl	8005330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17c      	bne.n	80048dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e075      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x3e>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06e      	b.n	80048de <HAL_UART_Transmit+0x11c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fd fa69 	bl	8001cec <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x82>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004854:	e02a      	b.n	80048ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fb1f 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1cf      	bne.n	8004856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 faef 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d11d      	bne.n	800493c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Receive_IT+0x26>
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e016      	b.n	800493e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_UART_Receive_IT+0x38>
 800491a:	2302      	movs	r3, #2
 800491c:	e00f      	b.n	800493e <HAL_UART_Receive_IT+0x58>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	461a      	mov	r2, r3
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fb24 	bl	8004f80 <UART_Start_Receive_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	e000      	b.n	800493e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0ba      	sub	sp, #232	; 0xe8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_UART_IRQHandler+0x66>
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fc07 	bl	80051ba <UART_Receive_IT>
      return;
 80049ac:	e256      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80de 	beq.w	8004b74 <HAL_UART_IRQHandler+0x22c>
 80049b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80d1 	beq.w	8004b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_UART_IRQHandler+0xae>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_UART_IRQHandler+0xd2>
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_UART_IRQHandler+0xf6>
 8004a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_UART_IRQHandler+0x126>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0208 	orr.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 81ed 	beq.w	8004e52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14e>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb92 	bl	80051ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x17a>
 8004aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04f      	beq.n	8004b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa9a 	bl	8004ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d141      	bne.n	8004b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1d9      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d013      	beq.n	8004b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4a7d      	ldr	r2, [pc, #500]	; (8004d24 <HAL_UART_IRQHandler+0x3dc>)
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd ff15 	bl	8002966 <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e00e      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f990 	bl	8004e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	e00a      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f98c 	bl	8004e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	e006      	b.n	8004b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f988 	bl	8004e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b6e:	e170      	b.n	8004e52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	bf00      	nop
    return;
 8004b72:	e16e      	b.n	8004e52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	f040 814a 	bne.w	8004e12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8143 	beq.w	8004e12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 813c 	beq.w	8004e12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	f040 80b4 	bne.w	8004d28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8140 	beq.w	8004e56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bde:	429a      	cmp	r2, r3
 8004be0:	f080 8139 	bcs.w	8004e56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf6:	f000 8088 	beq.w	8004d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d9      	bne.n	8004bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3314      	adds	r3, #20
 8004c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e1      	bne.n	8004c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e3      	bne.n	8004c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e3      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fdbe 	bl	8002886 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8b6 	bl	8004e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d20:	e099      	b.n	8004e56 <HAL_UART_IRQHandler+0x50e>
 8004d22:	bf00      	nop
 8004d24:	080050c3 	.word	0x080050c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 808b 	beq.w	8004e5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8086 	beq.w	8004e5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d72:	647a      	str	r2, [r7, #68]	; 0x44
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	623b      	str	r3, [r7, #32]
   return(result);
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004daa:	633a      	str	r2, [r7, #48]	; 0x30
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e3      	bne.n	8004d86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004df0:	61fa      	str	r2, [r7, #28]
 8004df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	69b9      	ldr	r1, [r7, #24]
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e3      	bne.n	8004dcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f83e 	bl	8004e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e10:	e023      	b.n	8004e5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_UART_IRQHandler+0x4ea>
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f95d 	bl	80050ea <UART_Transmit_IT>
    return;
 8004e30:	e014      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00e      	beq.n	8004e5c <HAL_UART_IRQHandler+0x514>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f99d 	bl	800518a <UART_EndTransmit_IT>
    return;
 8004e50:	e004      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
    return;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
      return;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <HAL_UART_IRQHandler+0x514>
      return;
 8004e5a:	bf00      	nop
  }
}
 8004e5c:	37e8      	adds	r7, #232	; 0xe8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop

08004e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b090      	sub	sp, #64	; 0x40
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb4:	e050      	b.n	8004f58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d04c      	beq.n	8004f58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec4:	f7fc ff12 	bl	8001cec <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d241      	bcs.n	8004f58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	613b      	str	r3, [r7, #16]
   return(result);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f28:	623a      	str	r2, [r7, #32]
 8004f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e00f      	b.n	8004f78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d09f      	beq.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3740      	adds	r7, #64	; 0x40
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2222      	movs	r2, #34	; 0x22
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0220 	orr.w	r2, r2, #32
 8004fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b095      	sub	sp, #84	; 0x54
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005024:	643a      	str	r2, [r7, #64]	; 0x40
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800502a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	d119      	bne.n	80050a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	60bb      	str	r3, [r7, #8]
   return(result);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0310 	bic.w	r3, r3, #16
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005094:	61ba      	str	r2, [r7, #24]
 8005096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6979      	ldr	r1, [r7, #20]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	613b      	str	r3, [r7, #16]
   return(result);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050b6:	bf00      	nop
 80050b8:	3754      	adds	r7, #84	; 0x54
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fecb 	bl	8004e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d13e      	bne.n	800517c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d114      	bne.n	8005132 <UART_Transmit_IT+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]
 8005130:	e008      	b.n	8005144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6211      	str	r1, [r2, #32]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4619      	mov	r1, r3
 8005152:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fe5a 	bl	8004e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08c      	sub	sp, #48	; 0x30
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	f040 80ab 	bne.w	8005326 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d117      	bne.n	800520a <UART_Receive_IT+0x50>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d113      	bne.n	800520a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
 8005208:	e026      	b.n	8005258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521c:	d007      	beq.n	800522e <UART_Receive_IT+0x74>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <UART_Receive_IT+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e008      	b.n	800524e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4619      	mov	r1, r3
 8005266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005268:	2b00      	cmp	r3, #0
 800526a:	d15a      	bne.n	8005322 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0220 	bic.w	r2, r2, #32
 800527a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800528a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d135      	bne.n	8005318 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f023 0310 	bic.w	r3, r3, #16
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d2:	623a      	str	r2, [r7, #32]
 80052d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	69f9      	ldr	r1, [r7, #28]
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e5      	bne.n	80052b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d10a      	bne.n	800530a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fdbb 	bl	8004e8c <HAL_UARTEx_RxEventCallback>
 8005316:	e002      	b.n	800531e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fb feb9 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e002      	b.n	8005328 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e000      	b.n	8005328 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005326:	2302      	movs	r3, #2
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3730      	adds	r7, #48	; 0x30
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005334:	b0c0      	sub	sp, #256	; 0x100
 8005336:	af00      	add	r7, sp, #0
 8005338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	68d9      	ldr	r1, [r3, #12]
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	ea40 0301 	orr.w	r3, r0, r1
 8005358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	431a      	orrs	r2, r3
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005388:	f021 010c 	bic.w	r1, r1, #12
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005396:	430b      	orrs	r3, r1
 8005398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	6999      	ldr	r1, [r3, #24]
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	ea40 0301 	orr.w	r3, r0, r1
 80053b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b8f      	ldr	r3, [pc, #572]	; (80055fc <UART_SetConfig+0x2cc>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d005      	beq.n	80053d0 <UART_SetConfig+0xa0>
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b8d      	ldr	r3, [pc, #564]	; (8005600 <UART_SetConfig+0x2d0>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d104      	bne.n	80053da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fd fdf0 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 80053d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053d8:	e003      	b.n	80053e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053da:	f7fd fdd7 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 80053de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	f040 810c 	bne.w	8005608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	1891      	adds	r1, r2, r2
 8005408:	65b9      	str	r1, [r7, #88]	; 0x58
 800540a:	415b      	adcs	r3, r3
 800540c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800540e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005412:	4621      	mov	r1, r4
 8005414:	eb12 0801 	adds.w	r8, r2, r1
 8005418:	4629      	mov	r1, r5
 800541a:	eb43 0901 	adc.w	r9, r3, r1
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800542a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800542e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005432:	4690      	mov	r8, r2
 8005434:	4699      	mov	r9, r3
 8005436:	4623      	mov	r3, r4
 8005438:	eb18 0303 	adds.w	r3, r8, r3
 800543c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005440:	462b      	mov	r3, r5
 8005442:	eb49 0303 	adc.w	r3, r9, r3
 8005446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800545a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800545e:	460b      	mov	r3, r1
 8005460:	18db      	adds	r3, r3, r3
 8005462:	653b      	str	r3, [r7, #80]	; 0x50
 8005464:	4613      	mov	r3, r2
 8005466:	eb42 0303 	adc.w	r3, r2, r3
 800546a:	657b      	str	r3, [r7, #84]	; 0x54
 800546c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005474:	f7fb fbea 	bl	8000c4c <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4b61      	ldr	r3, [pc, #388]	; (8005604 <UART_SetConfig+0x2d4>)
 800547e:	fba3 2302 	umull	r2, r3, r3, r2
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	011c      	lsls	r4, r3, #4
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	64b9      	str	r1, [r7, #72]	; 0x48
 80054a0:	415b      	adcs	r3, r3
 80054a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054a8:	4641      	mov	r1, r8
 80054aa:	eb12 0a01 	adds.w	sl, r2, r1
 80054ae:	4649      	mov	r1, r9
 80054b0:	eb43 0b01 	adc.w	fp, r3, r1
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c8:	4692      	mov	sl, r2
 80054ca:	469b      	mov	fp, r3
 80054cc:	4643      	mov	r3, r8
 80054ce:	eb1a 0303 	adds.w	r3, sl, r3
 80054d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054d6:	464b      	mov	r3, r9
 80054d8:	eb4b 0303 	adc.w	r3, fp, r3
 80054dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054f4:	460b      	mov	r3, r1
 80054f6:	18db      	adds	r3, r3, r3
 80054f8:	643b      	str	r3, [r7, #64]	; 0x40
 80054fa:	4613      	mov	r3, r2
 80054fc:	eb42 0303 	adc.w	r3, r2, r3
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
 8005502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800550a:	f7fb fb9f 	bl	8000c4c <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4611      	mov	r1, r2
 8005514:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <UART_SetConfig+0x2d4>)
 8005516:	fba3 2301 	umull	r2, r3, r3, r1
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	2264      	movs	r2, #100	; 0x64
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	1acb      	subs	r3, r1, r3
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800552a:	4b36      	ldr	r3, [pc, #216]	; (8005604 <UART_SetConfig+0x2d4>)
 800552c:	fba3 2302 	umull	r2, r3, r3, r2
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005538:	441c      	add	r4, r3
 800553a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	1891      	adds	r1, r2, r2
 8005552:	63b9      	str	r1, [r7, #56]	; 0x38
 8005554:	415b      	adcs	r3, r3
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800555c:	4641      	mov	r1, r8
 800555e:	1851      	adds	r1, r2, r1
 8005560:	6339      	str	r1, [r7, #48]	; 0x30
 8005562:	4649      	mov	r1, r9
 8005564:	414b      	adcs	r3, r1
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005574:	4659      	mov	r1, fp
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4651      	mov	r1, sl
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4651      	mov	r1, sl
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4642      	mov	r2, r8
 800558a:	189b      	adds	r3, r3, r2
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005590:	464b      	mov	r3, r9
 8005592:	460a      	mov	r2, r1
 8005594:	eb42 0303 	adc.w	r3, r2, r3
 8005598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055b0:	460b      	mov	r3, r1
 80055b2:	18db      	adds	r3, r3, r3
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	4613      	mov	r3, r2
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055c6:	f7fb fb41 	bl	8000c4c <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <UART_SetConfig+0x2d4>)
 80055d0:	fba3 1302 	umull	r1, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2164      	movs	r1, #100	; 0x64
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <UART_SetConfig+0x2d4>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 0207 	and.w	r2, r3, #7
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4422      	add	r2, r4
 80055f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f8:	e105      	b.n	8005806 <UART_SetConfig+0x4d6>
 80055fa:	bf00      	nop
 80055fc:	40011000 	.word	0x40011000
 8005600:	40011400 	.word	0x40011400
 8005604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560c:	2200      	movs	r2, #0
 800560e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800561a:	4642      	mov	r2, r8
 800561c:	464b      	mov	r3, r9
 800561e:	1891      	adds	r1, r2, r2
 8005620:	6239      	str	r1, [r7, #32]
 8005622:	415b      	adcs	r3, r3
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800562a:	4641      	mov	r1, r8
 800562c:	1854      	adds	r4, r2, r1
 800562e:	4649      	mov	r1, r9
 8005630:	eb43 0501 	adc.w	r5, r3, r1
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	00eb      	lsls	r3, r5, #3
 800563e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005642:	00e2      	lsls	r2, r4, #3
 8005644:	4614      	mov	r4, r2
 8005646:	461d      	mov	r5, r3
 8005648:	4643      	mov	r3, r8
 800564a:	18e3      	adds	r3, r4, r3
 800564c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005650:	464b      	mov	r3, r9
 8005652:	eb45 0303 	adc.w	r3, r5, r3
 8005656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005676:	4629      	mov	r1, r5
 8005678:	008b      	lsls	r3, r1, #2
 800567a:	4621      	mov	r1, r4
 800567c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005680:	4621      	mov	r1, r4
 8005682:	008a      	lsls	r2, r1, #2
 8005684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005688:	f7fb fae0 	bl	8000c4c <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4b60      	ldr	r3, [pc, #384]	; (8005814 <UART_SetConfig+0x4e4>)
 8005692:	fba3 2302 	umull	r2, r3, r3, r2
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	011c      	lsls	r4, r3, #4
 800569a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056ac:	4642      	mov	r2, r8
 80056ae:	464b      	mov	r3, r9
 80056b0:	1891      	adds	r1, r2, r2
 80056b2:	61b9      	str	r1, [r7, #24]
 80056b4:	415b      	adcs	r3, r3
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056bc:	4641      	mov	r1, r8
 80056be:	1851      	adds	r1, r2, r1
 80056c0:	6139      	str	r1, [r7, #16]
 80056c2:	4649      	mov	r1, r9
 80056c4:	414b      	adcs	r3, r1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056d4:	4659      	mov	r1, fp
 80056d6:	00cb      	lsls	r3, r1, #3
 80056d8:	4651      	mov	r1, sl
 80056da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056de:	4651      	mov	r1, sl
 80056e0:	00ca      	lsls	r2, r1, #3
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	4642      	mov	r2, r8
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056f0:	464b      	mov	r3, r9
 80056f2:	460a      	mov	r2, r1
 80056f4:	eb42 0303 	adc.w	r3, r2, r3
 80056f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	67bb      	str	r3, [r7, #120]	; 0x78
 8005706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005714:	4649      	mov	r1, r9
 8005716:	008b      	lsls	r3, r1, #2
 8005718:	4641      	mov	r1, r8
 800571a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800571e:	4641      	mov	r1, r8
 8005720:	008a      	lsls	r2, r1, #2
 8005722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005726:	f7fb fa91 	bl	8000c4c <__aeabi_uldivmod>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4b39      	ldr	r3, [pc, #228]	; (8005814 <UART_SetConfig+0x4e4>)
 8005730:	fba3 1302 	umull	r1, r3, r3, r2
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	2164      	movs	r1, #100	; 0x64
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a34      	ldr	r2, [pc, #208]	; (8005814 <UART_SetConfig+0x4e4>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800574e:	441c      	add	r4, r3
 8005750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005754:	2200      	movs	r2, #0
 8005756:	673b      	str	r3, [r7, #112]	; 0x70
 8005758:	677a      	str	r2, [r7, #116]	; 0x74
 800575a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800575e:	4642      	mov	r2, r8
 8005760:	464b      	mov	r3, r9
 8005762:	1891      	adds	r1, r2, r2
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	415b      	adcs	r3, r3
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800576e:	4641      	mov	r1, r8
 8005770:	1851      	adds	r1, r2, r1
 8005772:	6039      	str	r1, [r7, #0]
 8005774:	4649      	mov	r1, r9
 8005776:	414b      	adcs	r3, r1
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005786:	4659      	mov	r1, fp
 8005788:	00cb      	lsls	r3, r1, #3
 800578a:	4651      	mov	r1, sl
 800578c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005790:	4651      	mov	r1, sl
 8005792:	00ca      	lsls	r2, r1, #3
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	4603      	mov	r3, r0
 800579a:	4642      	mov	r2, r8
 800579c:	189b      	adds	r3, r3, r2
 800579e:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a0:	464b      	mov	r3, r9
 80057a2:	460a      	mov	r2, r1
 80057a4:	eb42 0303 	adc.w	r3, r2, r3
 80057a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	663b      	str	r3, [r7, #96]	; 0x60
 80057b4:	667a      	str	r2, [r7, #100]	; 0x64
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057c2:	4649      	mov	r1, r9
 80057c4:	008b      	lsls	r3, r1, #2
 80057c6:	4641      	mov	r1, r8
 80057c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057cc:	4641      	mov	r1, r8
 80057ce:	008a      	lsls	r2, r1, #2
 80057d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057d4:	f7fb fa3a 	bl	8000c4c <__aeabi_uldivmod>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <UART_SetConfig+0x4e4>)
 80057de:	fba3 1302 	umull	r1, r3, r3, r2
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2164      	movs	r1, #100	; 0x64
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	3332      	adds	r3, #50	; 0x32
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <UART_SetConfig+0x4e4>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4422      	add	r2, r4
 8005804:	609a      	str	r2, [r3, #8]
}
 8005806:	bf00      	nop
 8005808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005812:	bf00      	nop
 8005814:	51eb851f 	.word	0x51eb851f

08005818 <atof>:
 8005818:	2100      	movs	r1, #0
 800581a:	f000 be5f 	b.w	80064dc <strtod>
	...

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	2000000c 	.word	0x2000000c

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4d0d      	ldr	r5, [pc, #52]	; (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2600      	movs	r6, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4d0b      	ldr	r5, [pc, #44]	; (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <__libc_init_array+0x44>)
 8005840:	f002 fee6 	bl	8008610 <_init>
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2600      	movs	r6, #0
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08008a74 	.word	0x08008a74
 8005868:	08008a74 	.word	0x08008a74
 800586c:	08008a74 	.word	0x08008a74
 8005870:	08008a78 	.word	0x08008a78

08005874 <memset>:
 8005874:	4402      	add	r2, r0
 8005876:	4603      	mov	r3, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <strcpy>:
 8005884:	4603      	mov	r3, r0
 8005886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588a:	f803 2b01 	strb.w	r2, [r3], #1
 800588e:	2a00      	cmp	r2, #0
 8005890:	d1f9      	bne.n	8005886 <strcpy+0x2>
 8005892:	4770      	bx	lr

08005894 <sulp>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	ec45 4b10 	vmov	d0, r4, r5
 800589e:	4616      	mov	r6, r2
 80058a0:	f001 fd2a 	bl	80072f8 <__ulp>
 80058a4:	ec51 0b10 	vmov	r0, r1, d0
 80058a8:	b17e      	cbz	r6, 80058ca <sulp+0x36>
 80058aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dd09      	ble.n	80058ca <sulp+0x36>
 80058b6:	051b      	lsls	r3, r3, #20
 80058b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058bc:	2400      	movs	r4, #0
 80058be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058c2:	4622      	mov	r2, r4
 80058c4:	462b      	mov	r3, r5
 80058c6:	f7fa feb7 	bl	8000638 <__aeabi_dmul>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	0000      	movs	r0, r0
	...

080058d0 <_strtod_l>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	ed2d 8b02 	vpush	{d8}
 80058d8:	b09d      	sub	sp, #116	; 0x74
 80058da:	461f      	mov	r7, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	9318      	str	r3, [sp, #96]	; 0x60
 80058e0:	4ba2      	ldr	r3, [pc, #648]	; (8005b6c <_strtod_l+0x29c>)
 80058e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9305      	str	r3, [sp, #20]
 80058e8:	4604      	mov	r4, r0
 80058ea:	4618      	mov	r0, r3
 80058ec:	4688      	mov	r8, r1
 80058ee:	f7fa fc8f 	bl	8000210 <strlen>
 80058f2:	f04f 0a00 	mov.w	sl, #0
 80058f6:	4605      	mov	r5, r0
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	2a2b      	cmp	r2, #43	; 0x2b
 8005906:	d04e      	beq.n	80059a6 <_strtod_l+0xd6>
 8005908:	d83b      	bhi.n	8005982 <_strtod_l+0xb2>
 800590a:	2a0d      	cmp	r2, #13
 800590c:	d834      	bhi.n	8005978 <_strtod_l+0xa8>
 800590e:	2a08      	cmp	r2, #8
 8005910:	d834      	bhi.n	800597c <_strtod_l+0xac>
 8005912:	2a00      	cmp	r2, #0
 8005914:	d03e      	beq.n	8005994 <_strtod_l+0xc4>
 8005916:	2300      	movs	r3, #0
 8005918:	930a      	str	r3, [sp, #40]	; 0x28
 800591a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800591c:	7833      	ldrb	r3, [r6, #0]
 800591e:	2b30      	cmp	r3, #48	; 0x30
 8005920:	f040 80b0 	bne.w	8005a84 <_strtod_l+0x1b4>
 8005924:	7873      	ldrb	r3, [r6, #1]
 8005926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800592a:	2b58      	cmp	r3, #88	; 0x58
 800592c:	d168      	bne.n	8005a00 <_strtod_l+0x130>
 800592e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	ab18      	add	r3, sp, #96	; 0x60
 8005934:	9702      	str	r7, [sp, #8]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4a8d      	ldr	r2, [pc, #564]	; (8005b70 <_strtod_l+0x2a0>)
 800593a:	ab19      	add	r3, sp, #100	; 0x64
 800593c:	a917      	add	r1, sp, #92	; 0x5c
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fe40 	bl	80065c4 <__gethex>
 8005944:	f010 0707 	ands.w	r7, r0, #7
 8005948:	4605      	mov	r5, r0
 800594a:	d005      	beq.n	8005958 <_strtod_l+0x88>
 800594c:	2f06      	cmp	r7, #6
 800594e:	d12c      	bne.n	80059aa <_strtod_l+0xda>
 8005950:	3601      	adds	r6, #1
 8005952:	2300      	movs	r3, #0
 8005954:	9617      	str	r6, [sp, #92]	; 0x5c
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8590 	bne.w	8006480 <_strtod_l+0xbb0>
 8005960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005962:	b1eb      	cbz	r3, 80059a0 <_strtod_l+0xd0>
 8005964:	4652      	mov	r2, sl
 8005966:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800596a:	ec43 2b10 	vmov	d0, r2, r3
 800596e:	b01d      	add	sp, #116	; 0x74
 8005970:	ecbd 8b02 	vpop	{d8}
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	2a20      	cmp	r2, #32
 800597a:	d1cc      	bne.n	8005916 <_strtod_l+0x46>
 800597c:	3301      	adds	r3, #1
 800597e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005980:	e7be      	b.n	8005900 <_strtod_l+0x30>
 8005982:	2a2d      	cmp	r2, #45	; 0x2d
 8005984:	d1c7      	bne.n	8005916 <_strtod_l+0x46>
 8005986:	2201      	movs	r2, #1
 8005988:	920a      	str	r2, [sp, #40]	; 0x28
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	9217      	str	r2, [sp, #92]	; 0x5c
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1c2      	bne.n	800591a <_strtod_l+0x4a>
 8005994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005996:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 856e 	bne.w	800647c <_strtod_l+0xbac>
 80059a0:	4652      	mov	r2, sl
 80059a2:	465b      	mov	r3, fp
 80059a4:	e7e1      	b.n	800596a <_strtod_l+0x9a>
 80059a6:	2200      	movs	r2, #0
 80059a8:	e7ee      	b.n	8005988 <_strtod_l+0xb8>
 80059aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059ac:	b13a      	cbz	r2, 80059be <_strtod_l+0xee>
 80059ae:	2135      	movs	r1, #53	; 0x35
 80059b0:	a81a      	add	r0, sp, #104	; 0x68
 80059b2:	f001 fdac 	bl	800750e <__copybits>
 80059b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059b8:	4620      	mov	r0, r4
 80059ba:	f001 f96b 	bl	8006c94 <_Bfree>
 80059be:	3f01      	subs	r7, #1
 80059c0:	2f04      	cmp	r7, #4
 80059c2:	d806      	bhi.n	80059d2 <_strtod_l+0x102>
 80059c4:	e8df f007 	tbb	[pc, r7]
 80059c8:	1714030a 	.word	0x1714030a
 80059cc:	0a          	.byte	0x0a
 80059cd:	00          	.byte	0x00
 80059ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80059d2:	0728      	lsls	r0, r5, #28
 80059d4:	d5c0      	bpl.n	8005958 <_strtod_l+0x88>
 80059d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80059da:	e7bd      	b.n	8005958 <_strtod_l+0x88>
 80059dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80059e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059ee:	e7f0      	b.n	80059d2 <_strtod_l+0x102>
 80059f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b74 <_strtod_l+0x2a4>
 80059f4:	e7ed      	b.n	80059d2 <_strtod_l+0x102>
 80059f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80059fa:	f04f 3aff 	mov.w	sl, #4294967295
 80059fe:	e7e8      	b.n	80059d2 <_strtod_l+0x102>
 8005a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d0f9      	beq.n	8005a00 <_strtod_l+0x130>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0a3      	beq.n	8005958 <_strtod_l+0x88>
 8005a10:	2301      	movs	r3, #1
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a1a:	9308      	str	r3, [sp, #32]
 8005a1c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a20:	464f      	mov	r7, r9
 8005a22:	220a      	movs	r2, #10
 8005a24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a26:	7806      	ldrb	r6, [r0, #0]
 8005a28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a2c:	b2d9      	uxtb	r1, r3
 8005a2e:	2909      	cmp	r1, #9
 8005a30:	d92a      	bls.n	8005a88 <_strtod_l+0x1b8>
 8005a32:	9905      	ldr	r1, [sp, #20]
 8005a34:	462a      	mov	r2, r5
 8005a36:	f001 fe73 	bl	8007720 <strncmp>
 8005a3a:	b398      	cbz	r0, 8005aa4 <_strtod_l+0x1d4>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4632      	mov	r2, r6
 8005a40:	463d      	mov	r5, r7
 8005a42:	9005      	str	r0, [sp, #20]
 8005a44:	4603      	mov	r3, r0
 8005a46:	2a65      	cmp	r2, #101	; 0x65
 8005a48:	d001      	beq.n	8005a4e <_strtod_l+0x17e>
 8005a4a:	2a45      	cmp	r2, #69	; 0x45
 8005a4c:	d118      	bne.n	8005a80 <_strtod_l+0x1b0>
 8005a4e:	b91d      	cbnz	r5, 8005a58 <_strtod_l+0x188>
 8005a50:	9a04      	ldr	r2, [sp, #16]
 8005a52:	4302      	orrs	r2, r0
 8005a54:	d09e      	beq.n	8005994 <_strtod_l+0xc4>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005a5c:	f108 0201 	add.w	r2, r8, #1
 8005a60:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a62:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005a66:	2a2b      	cmp	r2, #43	; 0x2b
 8005a68:	d075      	beq.n	8005b56 <_strtod_l+0x286>
 8005a6a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a6c:	d07b      	beq.n	8005b66 <_strtod_l+0x296>
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005a76:	2909      	cmp	r1, #9
 8005a78:	f240 8082 	bls.w	8005b80 <_strtod_l+0x2b0>
 8005a7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a80:	2600      	movs	r6, #0
 8005a82:	e09d      	b.n	8005bc0 <_strtod_l+0x2f0>
 8005a84:	2300      	movs	r3, #0
 8005a86:	e7c4      	b.n	8005a12 <_strtod_l+0x142>
 8005a88:	2f08      	cmp	r7, #8
 8005a8a:	bfd8      	it	le
 8005a8c:	9907      	ldrle	r1, [sp, #28]
 8005a8e:	f100 0001 	add.w	r0, r0, #1
 8005a92:	bfda      	itte	le
 8005a94:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a98:	9307      	strle	r3, [sp, #28]
 8005a9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a9e:	3701      	adds	r7, #1
 8005aa0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005aa2:	e7bf      	b.n	8005a24 <_strtod_l+0x154>
 8005aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aa6:	195a      	adds	r2, r3, r5
 8005aa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aaa:	5d5a      	ldrb	r2, [r3, r5]
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	d037      	beq.n	8005b20 <_strtod_l+0x250>
 8005ab0:	9005      	str	r0, [sp, #20]
 8005ab2:	463d      	mov	r5, r7
 8005ab4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d912      	bls.n	8005ae2 <_strtod_l+0x212>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7c2      	b.n	8005a46 <_strtod_l+0x176>
 8005ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ac6:	785a      	ldrb	r2, [r3, #1]
 8005ac8:	3001      	adds	r0, #1
 8005aca:	2a30      	cmp	r2, #48	; 0x30
 8005acc:	d0f8      	beq.n	8005ac0 <_strtod_l+0x1f0>
 8005ace:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	f200 84d9 	bhi.w	800648a <_strtod_l+0xbba>
 8005ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ada:	9005      	str	r0, [sp, #20]
 8005adc:	2000      	movs	r0, #0
 8005ade:	9308      	str	r3, [sp, #32]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	3a30      	subs	r2, #48	; 0x30
 8005ae4:	f100 0301 	add.w	r3, r0, #1
 8005ae8:	d014      	beq.n	8005b14 <_strtod_l+0x244>
 8005aea:	9905      	ldr	r1, [sp, #20]
 8005aec:	4419      	add	r1, r3
 8005aee:	9105      	str	r1, [sp, #20]
 8005af0:	462b      	mov	r3, r5
 8005af2:	eb00 0e05 	add.w	lr, r0, r5
 8005af6:	210a      	movs	r1, #10
 8005af8:	4573      	cmp	r3, lr
 8005afa:	d113      	bne.n	8005b24 <_strtod_l+0x254>
 8005afc:	182b      	adds	r3, r5, r0
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	f105 0501 	add.w	r5, r5, #1
 8005b04:	4405      	add	r5, r0
 8005b06:	dc1c      	bgt.n	8005b42 <_strtod_l+0x272>
 8005b08:	9907      	ldr	r1, [sp, #28]
 8005b0a:	230a      	movs	r3, #10
 8005b0c:	fb03 2301 	mla	r3, r3, r1, r2
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b16:	1c51      	adds	r1, r2, #1
 8005b18:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b1a:	7852      	ldrb	r2, [r2, #1]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	e7c9      	b.n	8005ab4 <_strtod_l+0x1e4>
 8005b20:	4638      	mov	r0, r7
 8005b22:	e7d2      	b.n	8005aca <_strtod_l+0x1fa>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	dc04      	bgt.n	8005b32 <_strtod_l+0x262>
 8005b28:	9e07      	ldr	r6, [sp, #28]
 8005b2a:	434e      	muls	r6, r1
 8005b2c:	9607      	str	r6, [sp, #28]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	e7e2      	b.n	8005af8 <_strtod_l+0x228>
 8005b32:	f103 0c01 	add.w	ip, r3, #1
 8005b36:	f1bc 0f10 	cmp.w	ip, #16
 8005b3a:	bfd8      	it	le
 8005b3c:	fb01 f909 	mulle.w	r9, r1, r9
 8005b40:	e7f5      	b.n	8005b2e <_strtod_l+0x25e>
 8005b42:	2d10      	cmp	r5, #16
 8005b44:	bfdc      	itt	le
 8005b46:	230a      	movle	r3, #10
 8005b48:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b4c:	e7e1      	b.n	8005b12 <_strtod_l+0x242>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	2301      	movs	r3, #1
 8005b54:	e77c      	b.n	8005a50 <_strtod_l+0x180>
 8005b56:	f04f 0c00 	mov.w	ip, #0
 8005b5a:	f108 0202 	add.w	r2, r8, #2
 8005b5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005b64:	e785      	b.n	8005a72 <_strtod_l+0x1a2>
 8005b66:	f04f 0c01 	mov.w	ip, #1
 8005b6a:	e7f6      	b.n	8005b5a <_strtod_l+0x28a>
 8005b6c:	08008718 	.word	0x08008718
 8005b70:	08008650 	.word	0x08008650
 8005b74:	7ff00000 	.word	0x7ff00000
 8005b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b7a:	1c51      	adds	r1, r2, #1
 8005b7c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b7e:	7852      	ldrb	r2, [r2, #1]
 8005b80:	2a30      	cmp	r2, #48	; 0x30
 8005b82:	d0f9      	beq.n	8005b78 <_strtod_l+0x2a8>
 8005b84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005b88:	2908      	cmp	r1, #8
 8005b8a:	f63f af79 	bhi.w	8005a80 <_strtod_l+0x1b0>
 8005b8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b94:	9206      	str	r2, [sp, #24]
 8005b96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b98:	1c51      	adds	r1, r2, #1
 8005b9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b9c:	7852      	ldrb	r2, [r2, #1]
 8005b9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005ba2:	2e09      	cmp	r6, #9
 8005ba4:	d937      	bls.n	8005c16 <_strtod_l+0x346>
 8005ba6:	9e06      	ldr	r6, [sp, #24]
 8005ba8:	1b89      	subs	r1, r1, r6
 8005baa:	2908      	cmp	r1, #8
 8005bac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bb0:	dc02      	bgt.n	8005bb8 <_strtod_l+0x2e8>
 8005bb2:	4576      	cmp	r6, lr
 8005bb4:	bfa8      	it	ge
 8005bb6:	4676      	movge	r6, lr
 8005bb8:	f1bc 0f00 	cmp.w	ip, #0
 8005bbc:	d000      	beq.n	8005bc0 <_strtod_l+0x2f0>
 8005bbe:	4276      	negs	r6, r6
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	d14d      	bne.n	8005c60 <_strtod_l+0x390>
 8005bc4:	9904      	ldr	r1, [sp, #16]
 8005bc6:	4301      	orrs	r1, r0
 8005bc8:	f47f aec6 	bne.w	8005958 <_strtod_l+0x88>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f47f aee1 	bne.w	8005994 <_strtod_l+0xc4>
 8005bd2:	2a69      	cmp	r2, #105	; 0x69
 8005bd4:	d027      	beq.n	8005c26 <_strtod_l+0x356>
 8005bd6:	dc24      	bgt.n	8005c22 <_strtod_l+0x352>
 8005bd8:	2a49      	cmp	r2, #73	; 0x49
 8005bda:	d024      	beq.n	8005c26 <_strtod_l+0x356>
 8005bdc:	2a4e      	cmp	r2, #78	; 0x4e
 8005bde:	f47f aed9 	bne.w	8005994 <_strtod_l+0xc4>
 8005be2:	499f      	ldr	r1, [pc, #636]	; (8005e60 <_strtod_l+0x590>)
 8005be4:	a817      	add	r0, sp, #92	; 0x5c
 8005be6:	f000 ff45 	bl	8006a74 <__match>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f43f aed2 	beq.w	8005994 <_strtod_l+0xc4>
 8005bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d12d      	bne.n	8005c54 <_strtod_l+0x384>
 8005bf8:	499a      	ldr	r1, [pc, #616]	; (8005e64 <_strtod_l+0x594>)
 8005bfa:	aa1a      	add	r2, sp, #104	; 0x68
 8005bfc:	a817      	add	r0, sp, #92	; 0x5c
 8005bfe:	f000 ff4d 	bl	8006a9c <__hexnan>
 8005c02:	2805      	cmp	r0, #5
 8005c04:	d126      	bne.n	8005c54 <_strtod_l+0x384>
 8005c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005c0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c14:	e6a0      	b.n	8005958 <_strtod_l+0x88>
 8005c16:	210a      	movs	r1, #10
 8005c18:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005c1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c20:	e7b9      	b.n	8005b96 <_strtod_l+0x2c6>
 8005c22:	2a6e      	cmp	r2, #110	; 0x6e
 8005c24:	e7db      	b.n	8005bde <_strtod_l+0x30e>
 8005c26:	4990      	ldr	r1, [pc, #576]	; (8005e68 <_strtod_l+0x598>)
 8005c28:	a817      	add	r0, sp, #92	; 0x5c
 8005c2a:	f000 ff23 	bl	8006a74 <__match>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f43f aeb0 	beq.w	8005994 <_strtod_l+0xc4>
 8005c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c36:	498d      	ldr	r1, [pc, #564]	; (8005e6c <_strtod_l+0x59c>)
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	a817      	add	r0, sp, #92	; 0x5c
 8005c3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c3e:	f000 ff19 	bl	8006a74 <__match>
 8005c42:	b910      	cbnz	r0, 8005c4a <_strtod_l+0x37a>
 8005c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c46:	3301      	adds	r3, #1
 8005c48:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005e7c <_strtod_l+0x5ac>
 8005c4e:	f04f 0a00 	mov.w	sl, #0
 8005c52:	e681      	b.n	8005958 <_strtod_l+0x88>
 8005c54:	4886      	ldr	r0, [pc, #536]	; (8005e70 <_strtod_l+0x5a0>)
 8005c56:	f001 fd4b 	bl	80076f0 <nan>
 8005c5a:	ec5b ab10 	vmov	sl, fp, d0
 8005c5e:	e67b      	b.n	8005958 <_strtod_l+0x88>
 8005c60:	9b05      	ldr	r3, [sp, #20]
 8005c62:	9807      	ldr	r0, [sp, #28]
 8005c64:	1af3      	subs	r3, r6, r3
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	bf08      	it	eq
 8005c6a:	462f      	moveq	r7, r5
 8005c6c:	2d10      	cmp	r5, #16
 8005c6e:	9306      	str	r3, [sp, #24]
 8005c70:	46a8      	mov	r8, r5
 8005c72:	bfa8      	it	ge
 8005c74:	f04f 0810 	movge.w	r8, #16
 8005c78:	f7fa fc64 	bl	8000544 <__aeabi_ui2d>
 8005c7c:	2d09      	cmp	r5, #9
 8005c7e:	4682      	mov	sl, r0
 8005c80:	468b      	mov	fp, r1
 8005c82:	dd13      	ble.n	8005cac <_strtod_l+0x3dc>
 8005c84:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <_strtod_l+0x5a4>)
 8005c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c8e:	f7fa fcd3 	bl	8000638 <__aeabi_dmul>
 8005c92:	4682      	mov	sl, r0
 8005c94:	4648      	mov	r0, r9
 8005c96:	468b      	mov	fp, r1
 8005c98:	f7fa fc54 	bl	8000544 <__aeabi_ui2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	f7fa fb12 	bl	80002cc <__adddf3>
 8005ca8:	4682      	mov	sl, r0
 8005caa:	468b      	mov	fp, r1
 8005cac:	2d0f      	cmp	r5, #15
 8005cae:	dc38      	bgt.n	8005d22 <_strtod_l+0x452>
 8005cb0:	9b06      	ldr	r3, [sp, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f43f ae50 	beq.w	8005958 <_strtod_l+0x88>
 8005cb8:	dd24      	ble.n	8005d04 <_strtod_l+0x434>
 8005cba:	2b16      	cmp	r3, #22
 8005cbc:	dc0b      	bgt.n	8005cd6 <_strtod_l+0x406>
 8005cbe:	496d      	ldr	r1, [pc, #436]	; (8005e74 <_strtod_l+0x5a4>)
 8005cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cc8:	4652      	mov	r2, sl
 8005cca:	465b      	mov	r3, fp
 8005ccc:	f7fa fcb4 	bl	8000638 <__aeabi_dmul>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	468b      	mov	fp, r1
 8005cd4:	e640      	b.n	8005958 <_strtod_l+0x88>
 8005cd6:	9a06      	ldr	r2, [sp, #24]
 8005cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	db20      	blt.n	8005d22 <_strtod_l+0x452>
 8005ce0:	4c64      	ldr	r4, [pc, #400]	; (8005e74 <_strtod_l+0x5a4>)
 8005ce2:	f1c5 050f 	rsb	r5, r5, #15
 8005ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005cea:	4652      	mov	r2, sl
 8005cec:	465b      	mov	r3, fp
 8005cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf2:	f7fa fca1 	bl	8000638 <__aeabi_dmul>
 8005cf6:	9b06      	ldr	r3, [sp, #24]
 8005cf8:	1b5d      	subs	r5, r3, r5
 8005cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d02:	e7e3      	b.n	8005ccc <_strtod_l+0x3fc>
 8005d04:	9b06      	ldr	r3, [sp, #24]
 8005d06:	3316      	adds	r3, #22
 8005d08:	db0b      	blt.n	8005d22 <_strtod_l+0x452>
 8005d0a:	9b05      	ldr	r3, [sp, #20]
 8005d0c:	1b9e      	subs	r6, r3, r6
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <_strtod_l+0x5a4>)
 8005d10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d18:	4650      	mov	r0, sl
 8005d1a:	4659      	mov	r1, fp
 8005d1c:	f7fa fdb6 	bl	800088c <__aeabi_ddiv>
 8005d20:	e7d6      	b.n	8005cd0 <_strtod_l+0x400>
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	eba5 0808 	sub.w	r8, r5, r8
 8005d28:	4498      	add	r8, r3
 8005d2a:	f1b8 0f00 	cmp.w	r8, #0
 8005d2e:	dd74      	ble.n	8005e1a <_strtod_l+0x54a>
 8005d30:	f018 030f 	ands.w	r3, r8, #15
 8005d34:	d00a      	beq.n	8005d4c <_strtod_l+0x47c>
 8005d36:	494f      	ldr	r1, [pc, #316]	; (8005e74 <_strtod_l+0x5a4>)
 8005d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	465b      	mov	r3, fp
 8005d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d44:	f7fa fc78 	bl	8000638 <__aeabi_dmul>
 8005d48:	4682      	mov	sl, r0
 8005d4a:	468b      	mov	fp, r1
 8005d4c:	f038 080f 	bics.w	r8, r8, #15
 8005d50:	d04f      	beq.n	8005df2 <_strtod_l+0x522>
 8005d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d56:	dd22      	ble.n	8005d9e <_strtod_l+0x4ce>
 8005d58:	2500      	movs	r5, #0
 8005d5a:	462e      	mov	r6, r5
 8005d5c:	9507      	str	r5, [sp, #28]
 8005d5e:	9505      	str	r5, [sp, #20]
 8005d60:	2322      	movs	r3, #34	; 0x22
 8005d62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005e7c <_strtod_l+0x5ac>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	f04f 0a00 	mov.w	sl, #0
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f43f adf2 	beq.w	8005958 <_strtod_l+0x88>
 8005d74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 ff8c 	bl	8006c94 <_Bfree>
 8005d7c:	9905      	ldr	r1, [sp, #20]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 ff88 	bl	8006c94 <_Bfree>
 8005d84:	4631      	mov	r1, r6
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 ff84 	bl	8006c94 <_Bfree>
 8005d8c:	9907      	ldr	r1, [sp, #28]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 ff80 	bl	8006c94 <_Bfree>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 ff7c 	bl	8006c94 <_Bfree>
 8005d9c:	e5dc      	b.n	8005958 <_strtod_l+0x88>
 8005d9e:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <_strtod_l+0x5a8>)
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	2300      	movs	r3, #0
 8005da4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005da8:	4650      	mov	r0, sl
 8005daa:	4659      	mov	r1, fp
 8005dac:	4699      	mov	r9, r3
 8005dae:	f1b8 0f01 	cmp.w	r8, #1
 8005db2:	dc21      	bgt.n	8005df8 <_strtod_l+0x528>
 8005db4:	b10b      	cbz	r3, 8005dba <_strtod_l+0x4ea>
 8005db6:	4682      	mov	sl, r0
 8005db8:	468b      	mov	fp, r1
 8005dba:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <_strtod_l+0x5a8>)
 8005dbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005dc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005dcc:	f7fa fc34 	bl	8000638 <__aeabi_dmul>
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <_strtod_l+0x5ac>)
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	492a      	ldr	r1, [pc, #168]	; (8005e80 <_strtod_l+0x5b0>)
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	4682      	mov	sl, r0
 8005ddc:	d8bc      	bhi.n	8005d58 <_strtod_l+0x488>
 8005dde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005de2:	428b      	cmp	r3, r1
 8005de4:	bf86      	itte	hi
 8005de6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005e84 <_strtod_l+0x5b4>
 8005dea:	f04f 3aff 	movhi.w	sl, #4294967295
 8005dee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005df2:	2300      	movs	r3, #0
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	e084      	b.n	8005f02 <_strtod_l+0x632>
 8005df8:	f018 0f01 	tst.w	r8, #1
 8005dfc:	d005      	beq.n	8005e0a <_strtod_l+0x53a>
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fc18 	bl	8000638 <__aeabi_dmul>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	9a04      	ldr	r2, [sp, #16]
 8005e0c:	3208      	adds	r2, #8
 8005e0e:	f109 0901 	add.w	r9, r9, #1
 8005e12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e16:	9204      	str	r2, [sp, #16]
 8005e18:	e7c9      	b.n	8005dae <_strtod_l+0x4de>
 8005e1a:	d0ea      	beq.n	8005df2 <_strtod_l+0x522>
 8005e1c:	f1c8 0800 	rsb	r8, r8, #0
 8005e20:	f018 020f 	ands.w	r2, r8, #15
 8005e24:	d00a      	beq.n	8005e3c <_strtod_l+0x56c>
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <_strtod_l+0x5a4>)
 8005e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	4659      	mov	r1, fp
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa fd2a 	bl	800088c <__aeabi_ddiv>
 8005e38:	4682      	mov	sl, r0
 8005e3a:	468b      	mov	fp, r1
 8005e3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e40:	d0d7      	beq.n	8005df2 <_strtod_l+0x522>
 8005e42:	f1b8 0f1f 	cmp.w	r8, #31
 8005e46:	dd1f      	ble.n	8005e88 <_strtod_l+0x5b8>
 8005e48:	2500      	movs	r5, #0
 8005e4a:	462e      	mov	r6, r5
 8005e4c:	9507      	str	r5, [sp, #28]
 8005e4e:	9505      	str	r5, [sp, #20]
 8005e50:	2322      	movs	r3, #34	; 0x22
 8005e52:	f04f 0a00 	mov.w	sl, #0
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	e786      	b.n	8005d6c <_strtod_l+0x49c>
 8005e5e:	bf00      	nop
 8005e60:	0800864d 	.word	0x0800864d
 8005e64:	08008664 	.word	0x08008664
 8005e68:	08008644 	.word	0x08008644
 8005e6c:	08008647 	.word	0x08008647
 8005e70:	080088d7 	.word	0x080088d7
 8005e74:	080087c8 	.word	0x080087c8
 8005e78:	080087a0 	.word	0x080087a0
 8005e7c:	7ff00000 	.word	0x7ff00000
 8005e80:	7ca00000 	.word	0x7ca00000
 8005e84:	7fefffff 	.word	0x7fefffff
 8005e88:	f018 0310 	ands.w	r3, r8, #16
 8005e8c:	bf18      	it	ne
 8005e8e:	236a      	movne	r3, #106	; 0x6a
 8005e90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006240 <_strtod_l+0x970>
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	4650      	mov	r0, sl
 8005e98:	4659      	mov	r1, fp
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f018 0f01 	tst.w	r8, #1
 8005ea0:	d004      	beq.n	8005eac <_strtod_l+0x5dc>
 8005ea2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ea6:	f7fa fbc7 	bl	8000638 <__aeabi_dmul>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005eb0:	f109 0908 	add.w	r9, r9, #8
 8005eb4:	d1f2      	bne.n	8005e9c <_strtod_l+0x5cc>
 8005eb6:	b10b      	cbz	r3, 8005ebc <_strtod_l+0x5ec>
 8005eb8:	4682      	mov	sl, r0
 8005eba:	468b      	mov	fp, r1
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	b1c3      	cbz	r3, 8005ef2 <_strtod_l+0x622>
 8005ec0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005ec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	4659      	mov	r1, fp
 8005ecc:	dd11      	ble.n	8005ef2 <_strtod_l+0x622>
 8005ece:	2b1f      	cmp	r3, #31
 8005ed0:	f340 8124 	ble.w	800611c <_strtod_l+0x84c>
 8005ed4:	2b34      	cmp	r3, #52	; 0x34
 8005ed6:	bfde      	ittt	le
 8005ed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005edc:	f04f 33ff 	movle.w	r3, #4294967295
 8005ee0:	fa03 f202 	lslle.w	r2, r3, r2
 8005ee4:	f04f 0a00 	mov.w	sl, #0
 8005ee8:	bfcc      	ite	gt
 8005eea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005eee:	ea02 0b01 	andle.w	fp, r2, r1
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	4659      	mov	r1, fp
 8005efa:	f7fa fe05 	bl	8000b08 <__aeabi_dcmpeq>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1a2      	bne.n	8005e48 <_strtod_l+0x578>
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	9908      	ldr	r1, [sp, #32]
 8005f08:	462b      	mov	r3, r5
 8005f0a:	463a      	mov	r2, r7
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 ff29 	bl	8006d64 <__s2b>
 8005f12:	9007      	str	r0, [sp, #28]
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f43f af1f 	beq.w	8005d58 <_strtod_l+0x488>
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	1b9e      	subs	r6, r3, r6
 8005f1e:	9b06      	ldr	r3, [sp, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfb4      	ite	lt
 8005f24:	4633      	movlt	r3, r6
 8005f26:	2300      	movge	r3, #0
 8005f28:	930c      	str	r3, [sp, #48]	; 0x30
 8005f2a:	9b06      	ldr	r3, [sp, #24]
 8005f2c:	2500      	movs	r5, #0
 8005f2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f32:	9312      	str	r3, [sp, #72]	; 0x48
 8005f34:	462e      	mov	r6, r5
 8005f36:	9b07      	ldr	r3, [sp, #28]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	f000 fe6a 	bl	8006c14 <_Balloc>
 8005f40:	9005      	str	r0, [sp, #20]
 8005f42:	2800      	cmp	r0, #0
 8005f44:	f43f af0c 	beq.w	8005d60 <_strtod_l+0x490>
 8005f48:	9b07      	ldr	r3, [sp, #28]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	3202      	adds	r2, #2
 8005f4e:	f103 010c 	add.w	r1, r3, #12
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	300c      	adds	r0, #12
 8005f56:	f000 fe4f 	bl	8006bf8 <memcpy>
 8005f5a:	ec4b ab10 	vmov	d0, sl, fp
 8005f5e:	aa1a      	add	r2, sp, #104	; 0x68
 8005f60:	a919      	add	r1, sp, #100	; 0x64
 8005f62:	4620      	mov	r0, r4
 8005f64:	f001 fa44 	bl	80073f0 <__d2b>
 8005f68:	ec4b ab18 	vmov	d8, sl, fp
 8005f6c:	9018      	str	r0, [sp, #96]	; 0x60
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f43f aef6 	beq.w	8005d60 <_strtod_l+0x490>
 8005f74:	2101      	movs	r1, #1
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 ff8e 	bl	8006e98 <__i2b>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	f43f aeee 	beq.w	8005d60 <_strtod_l+0x490>
 8005f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f86:	9904      	ldr	r1, [sp, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfab      	itete	ge
 8005f8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005f8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005f90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005f92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005f96:	bfac      	ite	ge
 8005f98:	eb03 0902 	addge.w	r9, r3, r2
 8005f9c:	1ad7      	sublt	r7, r2, r3
 8005f9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fa0:	eba3 0801 	sub.w	r8, r3, r1
 8005fa4:	4490      	add	r8, r2
 8005fa6:	4ba1      	ldr	r3, [pc, #644]	; (800622c <_strtod_l+0x95c>)
 8005fa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fac:	4598      	cmp	r8, r3
 8005fae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fb2:	f280 80c7 	bge.w	8006144 <_strtod_l+0x874>
 8005fb6:	eba3 0308 	sub.w	r3, r3, r8
 8005fba:	2b1f      	cmp	r3, #31
 8005fbc:	eba2 0203 	sub.w	r2, r2, r3
 8005fc0:	f04f 0101 	mov.w	r1, #1
 8005fc4:	f300 80b1 	bgt.w	800612a <_strtod_l+0x85a>
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9308      	str	r3, [sp, #32]
 8005fd2:	eb09 0802 	add.w	r8, r9, r2
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	45c1      	cmp	r9, r8
 8005fda:	4417      	add	r7, r2
 8005fdc:	441f      	add	r7, r3
 8005fde:	464b      	mov	r3, r9
 8005fe0:	bfa8      	it	ge
 8005fe2:	4643      	movge	r3, r8
 8005fe4:	42bb      	cmp	r3, r7
 8005fe6:	bfa8      	it	ge
 8005fe8:	463b      	movge	r3, r7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bfc2      	ittt	gt
 8005fee:	eba8 0803 	subgt.w	r8, r8, r3
 8005ff2:	1aff      	subgt	r7, r7, r3
 8005ff4:	eba9 0903 	subgt.w	r9, r9, r3
 8005ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	dd17      	ble.n	800602e <_strtod_l+0x75e>
 8005ffe:	4631      	mov	r1, r6
 8006000:	461a      	mov	r2, r3
 8006002:	4620      	mov	r0, r4
 8006004:	f001 f808 	bl	8007018 <__pow5mult>
 8006008:	4606      	mov	r6, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	f43f aea8 	beq.w	8005d60 <_strtod_l+0x490>
 8006010:	4601      	mov	r1, r0
 8006012:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006014:	4620      	mov	r0, r4
 8006016:	f000 ff55 	bl	8006ec4 <__multiply>
 800601a:	900b      	str	r0, [sp, #44]	; 0x2c
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f ae9f 	beq.w	8005d60 <_strtod_l+0x490>
 8006022:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006024:	4620      	mov	r0, r4
 8006026:	f000 fe35 	bl	8006c94 <_Bfree>
 800602a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602c:	9318      	str	r3, [sp, #96]	; 0x60
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	f300 808c 	bgt.w	800614e <_strtod_l+0x87e>
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dd08      	ble.n	800604e <_strtod_l+0x77e>
 800603c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800603e:	9905      	ldr	r1, [sp, #20]
 8006040:	4620      	mov	r0, r4
 8006042:	f000 ffe9 	bl	8007018 <__pow5mult>
 8006046:	9005      	str	r0, [sp, #20]
 8006048:	2800      	cmp	r0, #0
 800604a:	f43f ae89 	beq.w	8005d60 <_strtod_l+0x490>
 800604e:	2f00      	cmp	r7, #0
 8006050:	dd08      	ble.n	8006064 <_strtod_l+0x794>
 8006052:	9905      	ldr	r1, [sp, #20]
 8006054:	463a      	mov	r2, r7
 8006056:	4620      	mov	r0, r4
 8006058:	f001 f838 	bl	80070cc <__lshift>
 800605c:	9005      	str	r0, [sp, #20]
 800605e:	2800      	cmp	r0, #0
 8006060:	f43f ae7e 	beq.w	8005d60 <_strtod_l+0x490>
 8006064:	f1b9 0f00 	cmp.w	r9, #0
 8006068:	dd08      	ble.n	800607c <_strtod_l+0x7ac>
 800606a:	4631      	mov	r1, r6
 800606c:	464a      	mov	r2, r9
 800606e:	4620      	mov	r0, r4
 8006070:	f001 f82c 	bl	80070cc <__lshift>
 8006074:	4606      	mov	r6, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f ae72 	beq.w	8005d60 <_strtod_l+0x490>
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006080:	4620      	mov	r0, r4
 8006082:	f001 f8af 	bl	80071e4 <__mdiff>
 8006086:	4605      	mov	r5, r0
 8006088:	2800      	cmp	r0, #0
 800608a:	f43f ae69 	beq.w	8005d60 <_strtod_l+0x490>
 800608e:	68c3      	ldr	r3, [r0, #12]
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	2300      	movs	r3, #0
 8006094:	60c3      	str	r3, [r0, #12]
 8006096:	4631      	mov	r1, r6
 8006098:	f001 f888 	bl	80071ac <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	da60      	bge.n	8006162 <_strtod_l+0x892>
 80060a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060a2:	ea53 030a 	orrs.w	r3, r3, sl
 80060a6:	f040 8082 	bne.w	80061ae <_strtod_l+0x8de>
 80060aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d17d      	bne.n	80061ae <_strtod_l+0x8de>
 80060b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060b6:	0d1b      	lsrs	r3, r3, #20
 80060b8:	051b      	lsls	r3, r3, #20
 80060ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060be:	d976      	bls.n	80061ae <_strtod_l+0x8de>
 80060c0:	696b      	ldr	r3, [r5, #20]
 80060c2:	b913      	cbnz	r3, 80060ca <_strtod_l+0x7fa>
 80060c4:	692b      	ldr	r3, [r5, #16]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	dd71      	ble.n	80061ae <_strtod_l+0x8de>
 80060ca:	4629      	mov	r1, r5
 80060cc:	2201      	movs	r2, #1
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 fffc 	bl	80070cc <__lshift>
 80060d4:	4631      	mov	r1, r6
 80060d6:	4605      	mov	r5, r0
 80060d8:	f001 f868 	bl	80071ac <__mcmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	dd66      	ble.n	80061ae <_strtod_l+0x8de>
 80060e0:	9904      	ldr	r1, [sp, #16]
 80060e2:	4a53      	ldr	r2, [pc, #332]	; (8006230 <_strtod_l+0x960>)
 80060e4:	465b      	mov	r3, fp
 80060e6:	2900      	cmp	r1, #0
 80060e8:	f000 8081 	beq.w	80061ee <_strtod_l+0x91e>
 80060ec:	ea02 010b 	and.w	r1, r2, fp
 80060f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060f4:	dc7b      	bgt.n	80061ee <_strtod_l+0x91e>
 80060f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060fa:	f77f aea9 	ble.w	8005e50 <_strtod_l+0x580>
 80060fe:	4b4d      	ldr	r3, [pc, #308]	; (8006234 <_strtod_l+0x964>)
 8006100:	4650      	mov	r0, sl
 8006102:	4659      	mov	r1, fp
 8006104:	2200      	movs	r2, #0
 8006106:	f7fa fa97 	bl	8000638 <__aeabi_dmul>
 800610a:	460b      	mov	r3, r1
 800610c:	4303      	orrs	r3, r0
 800610e:	bf08      	it	eq
 8006110:	2322      	moveq	r3, #34	; 0x22
 8006112:	4682      	mov	sl, r0
 8006114:	468b      	mov	fp, r1
 8006116:	bf08      	it	eq
 8006118:	6023      	streq	r3, [r4, #0]
 800611a:	e62b      	b.n	8005d74 <_strtod_l+0x4a4>
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	ea03 0a0a 	and.w	sl, r3, sl
 8006128:	e6e3      	b.n	8005ef2 <_strtod_l+0x622>
 800612a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800612e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800613a:	fa01 f308 	lsl.w	r3, r1, r8
 800613e:	9308      	str	r3, [sp, #32]
 8006140:	910d      	str	r1, [sp, #52]	; 0x34
 8006142:	e746      	b.n	8005fd2 <_strtod_l+0x702>
 8006144:	2300      	movs	r3, #0
 8006146:	9308      	str	r3, [sp, #32]
 8006148:	2301      	movs	r3, #1
 800614a:	930d      	str	r3, [sp, #52]	; 0x34
 800614c:	e741      	b.n	8005fd2 <_strtod_l+0x702>
 800614e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006150:	4642      	mov	r2, r8
 8006152:	4620      	mov	r0, r4
 8006154:	f000 ffba 	bl	80070cc <__lshift>
 8006158:	9018      	str	r0, [sp, #96]	; 0x60
 800615a:	2800      	cmp	r0, #0
 800615c:	f47f af6b 	bne.w	8006036 <_strtod_l+0x766>
 8006160:	e5fe      	b.n	8005d60 <_strtod_l+0x490>
 8006162:	465f      	mov	r7, fp
 8006164:	d16e      	bne.n	8006244 <_strtod_l+0x974>
 8006166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800616c:	b342      	cbz	r2, 80061c0 <_strtod_l+0x8f0>
 800616e:	4a32      	ldr	r2, [pc, #200]	; (8006238 <_strtod_l+0x968>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d128      	bne.n	80061c6 <_strtod_l+0x8f6>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	4651      	mov	r1, sl
 8006178:	b1eb      	cbz	r3, 80061b6 <_strtod_l+0x8e6>
 800617a:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <_strtod_l+0x960>)
 800617c:	403b      	ands	r3, r7
 800617e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	d819      	bhi.n	80061bc <_strtod_l+0x8ec>
 8006188:	0d1b      	lsrs	r3, r3, #20
 800618a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	4299      	cmp	r1, r3
 8006194:	d117      	bne.n	80061c6 <_strtod_l+0x8f6>
 8006196:	4b29      	ldr	r3, [pc, #164]	; (800623c <_strtod_l+0x96c>)
 8006198:	429f      	cmp	r7, r3
 800619a:	d102      	bne.n	80061a2 <_strtod_l+0x8d2>
 800619c:	3101      	adds	r1, #1
 800619e:	f43f addf 	beq.w	8005d60 <_strtod_l+0x490>
 80061a2:	4b23      	ldr	r3, [pc, #140]	; (8006230 <_strtod_l+0x960>)
 80061a4:	403b      	ands	r3, r7
 80061a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061aa:	f04f 0a00 	mov.w	sl, #0
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1a4      	bne.n	80060fe <_strtod_l+0x82e>
 80061b4:	e5de      	b.n	8005d74 <_strtod_l+0x4a4>
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	e7ea      	b.n	8006192 <_strtod_l+0x8c2>
 80061bc:	4613      	mov	r3, r2
 80061be:	e7e8      	b.n	8006192 <_strtod_l+0x8c2>
 80061c0:	ea53 030a 	orrs.w	r3, r3, sl
 80061c4:	d08c      	beq.n	80060e0 <_strtod_l+0x810>
 80061c6:	9b08      	ldr	r3, [sp, #32]
 80061c8:	b1db      	cbz	r3, 8006202 <_strtod_l+0x932>
 80061ca:	423b      	tst	r3, r7
 80061cc:	d0ef      	beq.n	80061ae <_strtod_l+0x8de>
 80061ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	4650      	mov	r0, sl
 80061d4:	4659      	mov	r1, fp
 80061d6:	b1c3      	cbz	r3, 800620a <_strtod_l+0x93a>
 80061d8:	f7ff fb5c 	bl	8005894 <sulp>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	ec51 0b18 	vmov	r0, r1, d8
 80061e4:	f7fa f872 	bl	80002cc <__adddf3>
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	e7df      	b.n	80061ae <_strtod_l+0x8de>
 80061ee:	4013      	ands	r3, r2
 80061f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80061f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061fc:	f04f 3aff 	mov.w	sl, #4294967295
 8006200:	e7d5      	b.n	80061ae <_strtod_l+0x8de>
 8006202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006204:	ea13 0f0a 	tst.w	r3, sl
 8006208:	e7e0      	b.n	80061cc <_strtod_l+0x8fc>
 800620a:	f7ff fb43 	bl	8005894 <sulp>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec51 0b18 	vmov	r0, r1, d8
 8006216:	f7fa f857 	bl	80002c8 <__aeabi_dsub>
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4682      	mov	sl, r0
 8006220:	468b      	mov	fp, r1
 8006222:	f7fa fc71 	bl	8000b08 <__aeabi_dcmpeq>
 8006226:	2800      	cmp	r0, #0
 8006228:	d0c1      	beq.n	80061ae <_strtod_l+0x8de>
 800622a:	e611      	b.n	8005e50 <_strtod_l+0x580>
 800622c:	fffffc02 	.word	0xfffffc02
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	39500000 	.word	0x39500000
 8006238:	000fffff 	.word	0x000fffff
 800623c:	7fefffff 	.word	0x7fefffff
 8006240:	08008678 	.word	0x08008678
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	f001 f92e 	bl	80074a8 <__ratio>
 800624c:	ec59 8b10 	vmov	r8, r9, d0
 8006250:	ee10 0a10 	vmov	r0, s0
 8006254:	2200      	movs	r2, #0
 8006256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800625a:	4649      	mov	r1, r9
 800625c:	f7fa fc68 	bl	8000b30 <__aeabi_dcmple>
 8006260:	2800      	cmp	r0, #0
 8006262:	d07a      	beq.n	800635a <_strtod_l+0xa8a>
 8006264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04a      	beq.n	8006300 <_strtod_l+0xa30>
 800626a:	4b95      	ldr	r3, [pc, #596]	; (80064c0 <_strtod_l+0xbf0>)
 800626c:	2200      	movs	r2, #0
 800626e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006272:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80064c0 <_strtod_l+0xbf0>
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	4b92      	ldr	r3, [pc, #584]	; (80064c4 <_strtod_l+0xbf4>)
 800627c:	403b      	ands	r3, r7
 800627e:	930d      	str	r3, [sp, #52]	; 0x34
 8006280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006282:	4b91      	ldr	r3, [pc, #580]	; (80064c8 <_strtod_l+0xbf8>)
 8006284:	429a      	cmp	r2, r3
 8006286:	f040 80b0 	bne.w	80063ea <_strtod_l+0xb1a>
 800628a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800628e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006292:	ec4b ab10 	vmov	d0, sl, fp
 8006296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800629a:	f001 f82d 	bl	80072f8 <__ulp>
 800629e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062a2:	ec53 2b10 	vmov	r2, r3, d0
 80062a6:	f7fa f9c7 	bl	8000638 <__aeabi_dmul>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	f7fa f80d 	bl	80002cc <__adddf3>
 80062b2:	460b      	mov	r3, r1
 80062b4:	4983      	ldr	r1, [pc, #524]	; (80064c4 <_strtod_l+0xbf4>)
 80062b6:	4a85      	ldr	r2, [pc, #532]	; (80064cc <_strtod_l+0xbfc>)
 80062b8:	4019      	ands	r1, r3
 80062ba:	4291      	cmp	r1, r2
 80062bc:	4682      	mov	sl, r0
 80062be:	d960      	bls.n	8006382 <_strtod_l+0xab2>
 80062c0:	ee18 3a90 	vmov	r3, s17
 80062c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d104      	bne.n	80062d6 <_strtod_l+0xa06>
 80062cc:	ee18 3a10 	vmov	r3, s16
 80062d0:	3301      	adds	r3, #1
 80062d2:	f43f ad45 	beq.w	8005d60 <_strtod_l+0x490>
 80062d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80064d8 <_strtod_l+0xc08>
 80062da:	f04f 3aff 	mov.w	sl, #4294967295
 80062de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fcd7 	bl	8006c94 <_Bfree>
 80062e6:	9905      	ldr	r1, [sp, #20]
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fcd3 	bl	8006c94 <_Bfree>
 80062ee:	4631      	mov	r1, r6
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fccf 	bl	8006c94 <_Bfree>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fccb 	bl	8006c94 <_Bfree>
 80062fe:	e61a      	b.n	8005f36 <_strtod_l+0x666>
 8006300:	f1ba 0f00 	cmp.w	sl, #0
 8006304:	d11b      	bne.n	800633e <_strtod_l+0xa6e>
 8006306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800630a:	b9f3      	cbnz	r3, 800634a <_strtod_l+0xa7a>
 800630c:	4b6c      	ldr	r3, [pc, #432]	; (80064c0 <_strtod_l+0xbf0>)
 800630e:	2200      	movs	r2, #0
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7fa fc02 	bl	8000b1c <__aeabi_dcmplt>
 8006318:	b9d0      	cbnz	r0, 8006350 <_strtod_l+0xa80>
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <_strtod_l+0xc00>)
 8006320:	2200      	movs	r2, #0
 8006322:	f7fa f989 	bl	8000638 <__aeabi_dmul>
 8006326:	4680      	mov	r8, r0
 8006328:	4689      	mov	r9, r1
 800632a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800632e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006332:	9315      	str	r3, [sp, #84]	; 0x54
 8006334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800633c:	e79d      	b.n	800627a <_strtod_l+0x9aa>
 800633e:	f1ba 0f01 	cmp.w	sl, #1
 8006342:	d102      	bne.n	800634a <_strtod_l+0xa7a>
 8006344:	2f00      	cmp	r7, #0
 8006346:	f43f ad83 	beq.w	8005e50 <_strtod_l+0x580>
 800634a:	4b62      	ldr	r3, [pc, #392]	; (80064d4 <_strtod_l+0xc04>)
 800634c:	2200      	movs	r2, #0
 800634e:	e78e      	b.n	800626e <_strtod_l+0x99e>
 8006350:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80064d0 <_strtod_l+0xc00>
 8006354:	f04f 0800 	mov.w	r8, #0
 8006358:	e7e7      	b.n	800632a <_strtod_l+0xa5a>
 800635a:	4b5d      	ldr	r3, [pc, #372]	; (80064d0 <_strtod_l+0xc00>)
 800635c:	4640      	mov	r0, r8
 800635e:	4649      	mov	r1, r9
 8006360:	2200      	movs	r2, #0
 8006362:	f7fa f969 	bl	8000638 <__aeabi_dmul>
 8006366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006368:	4680      	mov	r8, r0
 800636a:	4689      	mov	r9, r1
 800636c:	b933      	cbnz	r3, 800637c <_strtod_l+0xaac>
 800636e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006372:	900e      	str	r0, [sp, #56]	; 0x38
 8006374:	930f      	str	r3, [sp, #60]	; 0x3c
 8006376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800637a:	e7dd      	b.n	8006338 <_strtod_l+0xa68>
 800637c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006380:	e7f9      	b.n	8006376 <_strtod_l+0xaa6>
 8006382:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1a8      	bne.n	80062de <_strtod_l+0xa0e>
 800638c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006392:	0d1b      	lsrs	r3, r3, #20
 8006394:	051b      	lsls	r3, r3, #20
 8006396:	429a      	cmp	r2, r3
 8006398:	d1a1      	bne.n	80062de <_strtod_l+0xa0e>
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7fa fc6d 	bl	8000c7c <__aeabi_d2lz>
 80063a2:	f7fa f91b 	bl	80005dc <__aeabi_l2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7f9 ff8b 	bl	80002c8 <__aeabi_dsub>
 80063b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063b8:	ea43 030a 	orr.w	r3, r3, sl
 80063bc:	4313      	orrs	r3, r2
 80063be:	4680      	mov	r8, r0
 80063c0:	4689      	mov	r9, r1
 80063c2:	d055      	beq.n	8006470 <_strtod_l+0xba0>
 80063c4:	a336      	add	r3, pc, #216	; (adr r3, 80064a0 <_strtod_l+0xbd0>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f7fa fba7 	bl	8000b1c <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f47f acd0 	bne.w	8005d74 <_strtod_l+0x4a4>
 80063d4:	a334      	add	r3, pc, #208	; (adr r3, 80064a8 <_strtod_l+0xbd8>)
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f af7b 	beq.w	80062de <_strtod_l+0xa0e>
 80063e8:	e4c4      	b.n	8005d74 <_strtod_l+0x4a4>
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	b333      	cbz	r3, 800643c <_strtod_l+0xb6c>
 80063ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063f4:	d822      	bhi.n	800643c <_strtod_l+0xb6c>
 80063f6:	a32e      	add	r3, pc, #184	; (adr r3, 80064b0 <_strtod_l+0xbe0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa fb96 	bl	8000b30 <__aeabi_dcmple>
 8006404:	b1a0      	cbz	r0, 8006430 <_strtod_l+0xb60>
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	f7fa fbaf 	bl	8000b6c <__aeabi_d2uiz>
 800640e:	2801      	cmp	r0, #1
 8006410:	bf38      	it	cc
 8006412:	2001      	movcc	r0, #1
 8006414:	f7fa f896 	bl	8000544 <__aeabi_ui2d>
 8006418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641a:	4680      	mov	r8, r0
 800641c:	4689      	mov	r9, r1
 800641e:	bb23      	cbnz	r3, 800646a <_strtod_l+0xb9a>
 8006420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006424:	9010      	str	r0, [sp, #64]	; 0x40
 8006426:	9311      	str	r3, [sp, #68]	; 0x44
 8006428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800642c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006434:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	9309      	str	r3, [sp, #36]	; 0x24
 800643c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006440:	eeb0 0a48 	vmov.f32	s0, s16
 8006444:	eef0 0a68 	vmov.f32	s1, s17
 8006448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800644c:	f000 ff54 	bl	80072f8 <__ulp>
 8006450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006454:	ec53 2b10 	vmov	r2, r3, d0
 8006458:	f7fa f8ee 	bl	8000638 <__aeabi_dmul>
 800645c:	ec53 2b18 	vmov	r2, r3, d8
 8006460:	f7f9 ff34 	bl	80002cc <__adddf3>
 8006464:	4682      	mov	sl, r0
 8006466:	468b      	mov	fp, r1
 8006468:	e78d      	b.n	8006386 <_strtod_l+0xab6>
 800646a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800646e:	e7db      	b.n	8006428 <_strtod_l+0xb58>
 8006470:	a311      	add	r3, pc, #68	; (adr r3, 80064b8 <_strtod_l+0xbe8>)
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa fb51 	bl	8000b1c <__aeabi_dcmplt>
 800647a:	e7b2      	b.n	80063e2 <_strtod_l+0xb12>
 800647c:	2300      	movs	r3, #0
 800647e:	930a      	str	r3, [sp, #40]	; 0x28
 8006480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	f7ff ba6b 	b.w	8005960 <_strtod_l+0x90>
 800648a:	2a65      	cmp	r2, #101	; 0x65
 800648c:	f43f ab5f 	beq.w	8005b4e <_strtod_l+0x27e>
 8006490:	2a45      	cmp	r2, #69	; 0x45
 8006492:	f43f ab5c 	beq.w	8005b4e <_strtod_l+0x27e>
 8006496:	2301      	movs	r3, #1
 8006498:	f7ff bb94 	b.w	8005bc4 <_strtod_l+0x2f4>
 800649c:	f3af 8000 	nop.w
 80064a0:	94a03595 	.word	0x94a03595
 80064a4:	3fdfffff 	.word	0x3fdfffff
 80064a8:	35afe535 	.word	0x35afe535
 80064ac:	3fe00000 	.word	0x3fe00000
 80064b0:	ffc00000 	.word	0xffc00000
 80064b4:	41dfffff 	.word	0x41dfffff
 80064b8:	94a03595 	.word	0x94a03595
 80064bc:	3fcfffff 	.word	0x3fcfffff
 80064c0:	3ff00000 	.word	0x3ff00000
 80064c4:	7ff00000 	.word	0x7ff00000
 80064c8:	7fe00000 	.word	0x7fe00000
 80064cc:	7c9fffff 	.word	0x7c9fffff
 80064d0:	3fe00000 	.word	0x3fe00000
 80064d4:	bff00000 	.word	0xbff00000
 80064d8:	7fefffff 	.word	0x7fefffff

080064dc <strtod>:
 80064dc:	460a      	mov	r2, r1
 80064de:	4601      	mov	r1, r0
 80064e0:	4802      	ldr	r0, [pc, #8]	; (80064ec <strtod+0x10>)
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <strtod+0x14>)
 80064e4:	6800      	ldr	r0, [r0, #0]
 80064e6:	f7ff b9f3 	b.w	80058d0 <_strtod_l>
 80064ea:	bf00      	nop
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	20000074 	.word	0x20000074

080064f4 <rshift>:
 80064f4:	6903      	ldr	r3, [r0, #16]
 80064f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80064fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006502:	f100 0414 	add.w	r4, r0, #20
 8006506:	dd45      	ble.n	8006594 <rshift+0xa0>
 8006508:	f011 011f 	ands.w	r1, r1, #31
 800650c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006510:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006514:	d10c      	bne.n	8006530 <rshift+0x3c>
 8006516:	f100 0710 	add.w	r7, r0, #16
 800651a:	4629      	mov	r1, r5
 800651c:	42b1      	cmp	r1, r6
 800651e:	d334      	bcc.n	800658a <rshift+0x96>
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	1eea      	subs	r2, r5, #3
 8006526:	4296      	cmp	r6, r2
 8006528:	bf38      	it	cc
 800652a:	2300      	movcc	r3, #0
 800652c:	4423      	add	r3, r4
 800652e:	e015      	b.n	800655c <rshift+0x68>
 8006530:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006534:	f1c1 0820 	rsb	r8, r1, #32
 8006538:	40cf      	lsrs	r7, r1
 800653a:	f105 0e04 	add.w	lr, r5, #4
 800653e:	46a1      	mov	r9, r4
 8006540:	4576      	cmp	r6, lr
 8006542:	46f4      	mov	ip, lr
 8006544:	d815      	bhi.n	8006572 <rshift+0x7e>
 8006546:	1a9a      	subs	r2, r3, r2
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	3a04      	subs	r2, #4
 800654c:	3501      	adds	r5, #1
 800654e:	42ae      	cmp	r6, r5
 8006550:	bf38      	it	cc
 8006552:	2200      	movcc	r2, #0
 8006554:	18a3      	adds	r3, r4, r2
 8006556:	50a7      	str	r7, [r4, r2]
 8006558:	b107      	cbz	r7, 800655c <rshift+0x68>
 800655a:	3304      	adds	r3, #4
 800655c:	1b1a      	subs	r2, r3, r4
 800655e:	42a3      	cmp	r3, r4
 8006560:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006564:	bf08      	it	eq
 8006566:	2300      	moveq	r3, #0
 8006568:	6102      	str	r2, [r0, #16]
 800656a:	bf08      	it	eq
 800656c:	6143      	streq	r3, [r0, #20]
 800656e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006572:	f8dc c000 	ldr.w	ip, [ip]
 8006576:	fa0c fc08 	lsl.w	ip, ip, r8
 800657a:	ea4c 0707 	orr.w	r7, ip, r7
 800657e:	f849 7b04 	str.w	r7, [r9], #4
 8006582:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006586:	40cf      	lsrs	r7, r1
 8006588:	e7da      	b.n	8006540 <rshift+0x4c>
 800658a:	f851 cb04 	ldr.w	ip, [r1], #4
 800658e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006592:	e7c3      	b.n	800651c <rshift+0x28>
 8006594:	4623      	mov	r3, r4
 8006596:	e7e1      	b.n	800655c <rshift+0x68>

08006598 <__hexdig_fun>:
 8006598:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800659c:	2b09      	cmp	r3, #9
 800659e:	d802      	bhi.n	80065a6 <__hexdig_fun+0xe>
 80065a0:	3820      	subs	r0, #32
 80065a2:	b2c0      	uxtb	r0, r0
 80065a4:	4770      	bx	lr
 80065a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d801      	bhi.n	80065b2 <__hexdig_fun+0x1a>
 80065ae:	3847      	subs	r0, #71	; 0x47
 80065b0:	e7f7      	b.n	80065a2 <__hexdig_fun+0xa>
 80065b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d801      	bhi.n	80065be <__hexdig_fun+0x26>
 80065ba:	3827      	subs	r0, #39	; 0x27
 80065bc:	e7f1      	b.n	80065a2 <__hexdig_fun+0xa>
 80065be:	2000      	movs	r0, #0
 80065c0:	4770      	bx	lr
	...

080065c4 <__gethex>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	ed2d 8b02 	vpush	{d8}
 80065cc:	b089      	sub	sp, #36	; 0x24
 80065ce:	ee08 0a10 	vmov	s16, r0
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	4bb4      	ldr	r3, [pc, #720]	; (80068a8 <__gethex+0x2e4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	4618      	mov	r0, r3
 80065dc:	468b      	mov	fp, r1
 80065de:	4690      	mov	r8, r2
 80065e0:	f7f9 fe16 	bl	8000210 <strlen>
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	f8db 2000 	ldr.w	r2, [fp]
 80065ea:	4403      	add	r3, r0
 80065ec:	4682      	mov	sl, r0
 80065ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80065f2:	9305      	str	r3, [sp, #20]
 80065f4:	1c93      	adds	r3, r2, #2
 80065f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80065fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80065fe:	32fe      	adds	r2, #254	; 0xfe
 8006600:	18d1      	adds	r1, r2, r3
 8006602:	461f      	mov	r7, r3
 8006604:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006608:	9100      	str	r1, [sp, #0]
 800660a:	2830      	cmp	r0, #48	; 0x30
 800660c:	d0f8      	beq.n	8006600 <__gethex+0x3c>
 800660e:	f7ff ffc3 	bl	8006598 <__hexdig_fun>
 8006612:	4604      	mov	r4, r0
 8006614:	2800      	cmp	r0, #0
 8006616:	d13a      	bne.n	800668e <__gethex+0xca>
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	4652      	mov	r2, sl
 800661c:	4638      	mov	r0, r7
 800661e:	f001 f87f 	bl	8007720 <strncmp>
 8006622:	4605      	mov	r5, r0
 8006624:	2800      	cmp	r0, #0
 8006626:	d168      	bne.n	80066fa <__gethex+0x136>
 8006628:	f817 000a 	ldrb.w	r0, [r7, sl]
 800662c:	eb07 060a 	add.w	r6, r7, sl
 8006630:	f7ff ffb2 	bl	8006598 <__hexdig_fun>
 8006634:	2800      	cmp	r0, #0
 8006636:	d062      	beq.n	80066fe <__gethex+0x13a>
 8006638:	4633      	mov	r3, r6
 800663a:	7818      	ldrb	r0, [r3, #0]
 800663c:	2830      	cmp	r0, #48	; 0x30
 800663e:	461f      	mov	r7, r3
 8006640:	f103 0301 	add.w	r3, r3, #1
 8006644:	d0f9      	beq.n	800663a <__gethex+0x76>
 8006646:	f7ff ffa7 	bl	8006598 <__hexdig_fun>
 800664a:	2301      	movs	r3, #1
 800664c:	fab0 f480 	clz	r4, r0
 8006650:	0964      	lsrs	r4, r4, #5
 8006652:	4635      	mov	r5, r6
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	463a      	mov	r2, r7
 8006658:	4616      	mov	r6, r2
 800665a:	3201      	adds	r2, #1
 800665c:	7830      	ldrb	r0, [r6, #0]
 800665e:	f7ff ff9b 	bl	8006598 <__hexdig_fun>
 8006662:	2800      	cmp	r0, #0
 8006664:	d1f8      	bne.n	8006658 <__gethex+0x94>
 8006666:	9901      	ldr	r1, [sp, #4]
 8006668:	4652      	mov	r2, sl
 800666a:	4630      	mov	r0, r6
 800666c:	f001 f858 	bl	8007720 <strncmp>
 8006670:	b980      	cbnz	r0, 8006694 <__gethex+0xd0>
 8006672:	b94d      	cbnz	r5, 8006688 <__gethex+0xc4>
 8006674:	eb06 050a 	add.w	r5, r6, sl
 8006678:	462a      	mov	r2, r5
 800667a:	4616      	mov	r6, r2
 800667c:	3201      	adds	r2, #1
 800667e:	7830      	ldrb	r0, [r6, #0]
 8006680:	f7ff ff8a 	bl	8006598 <__hexdig_fun>
 8006684:	2800      	cmp	r0, #0
 8006686:	d1f8      	bne.n	800667a <__gethex+0xb6>
 8006688:	1bad      	subs	r5, r5, r6
 800668a:	00ad      	lsls	r5, r5, #2
 800668c:	e004      	b.n	8006698 <__gethex+0xd4>
 800668e:	2400      	movs	r4, #0
 8006690:	4625      	mov	r5, r4
 8006692:	e7e0      	b.n	8006656 <__gethex+0x92>
 8006694:	2d00      	cmp	r5, #0
 8006696:	d1f7      	bne.n	8006688 <__gethex+0xc4>
 8006698:	7833      	ldrb	r3, [r6, #0]
 800669a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800669e:	2b50      	cmp	r3, #80	; 0x50
 80066a0:	d13b      	bne.n	800671a <__gethex+0x156>
 80066a2:	7873      	ldrb	r3, [r6, #1]
 80066a4:	2b2b      	cmp	r3, #43	; 0x2b
 80066a6:	d02c      	beq.n	8006702 <__gethex+0x13e>
 80066a8:	2b2d      	cmp	r3, #45	; 0x2d
 80066aa:	d02e      	beq.n	800670a <__gethex+0x146>
 80066ac:	1c71      	adds	r1, r6, #1
 80066ae:	f04f 0900 	mov.w	r9, #0
 80066b2:	7808      	ldrb	r0, [r1, #0]
 80066b4:	f7ff ff70 	bl	8006598 <__hexdig_fun>
 80066b8:	1e43      	subs	r3, r0, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b18      	cmp	r3, #24
 80066be:	d82c      	bhi.n	800671a <__gethex+0x156>
 80066c0:	f1a0 0210 	sub.w	r2, r0, #16
 80066c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066c8:	f7ff ff66 	bl	8006598 <__hexdig_fun>
 80066cc:	1e43      	subs	r3, r0, #1
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b18      	cmp	r3, #24
 80066d2:	d91d      	bls.n	8006710 <__gethex+0x14c>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	d000      	beq.n	80066dc <__gethex+0x118>
 80066da:	4252      	negs	r2, r2
 80066dc:	4415      	add	r5, r2
 80066de:	f8cb 1000 	str.w	r1, [fp]
 80066e2:	b1e4      	cbz	r4, 800671e <__gethex+0x15a>
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2700      	movne	r7, #0
 80066ec:	2706      	moveq	r7, #6
 80066ee:	4638      	mov	r0, r7
 80066f0:	b009      	add	sp, #36	; 0x24
 80066f2:	ecbd 8b02 	vpop	{d8}
 80066f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fa:	463e      	mov	r6, r7
 80066fc:	4625      	mov	r5, r4
 80066fe:	2401      	movs	r4, #1
 8006700:	e7ca      	b.n	8006698 <__gethex+0xd4>
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	1cb1      	adds	r1, r6, #2
 8006708:	e7d3      	b.n	80066b2 <__gethex+0xee>
 800670a:	f04f 0901 	mov.w	r9, #1
 800670e:	e7fa      	b.n	8006706 <__gethex+0x142>
 8006710:	230a      	movs	r3, #10
 8006712:	fb03 0202 	mla	r2, r3, r2, r0
 8006716:	3a10      	subs	r2, #16
 8006718:	e7d4      	b.n	80066c4 <__gethex+0x100>
 800671a:	4631      	mov	r1, r6
 800671c:	e7df      	b.n	80066de <__gethex+0x11a>
 800671e:	1bf3      	subs	r3, r6, r7
 8006720:	3b01      	subs	r3, #1
 8006722:	4621      	mov	r1, r4
 8006724:	2b07      	cmp	r3, #7
 8006726:	dc0b      	bgt.n	8006740 <__gethex+0x17c>
 8006728:	ee18 0a10 	vmov	r0, s16
 800672c:	f000 fa72 	bl	8006c14 <_Balloc>
 8006730:	4604      	mov	r4, r0
 8006732:	b940      	cbnz	r0, 8006746 <__gethex+0x182>
 8006734:	4b5d      	ldr	r3, [pc, #372]	; (80068ac <__gethex+0x2e8>)
 8006736:	4602      	mov	r2, r0
 8006738:	21de      	movs	r1, #222	; 0xde
 800673a:	485d      	ldr	r0, [pc, #372]	; (80068b0 <__gethex+0x2ec>)
 800673c:	f001 f812 	bl	8007764 <__assert_func>
 8006740:	3101      	adds	r1, #1
 8006742:	105b      	asrs	r3, r3, #1
 8006744:	e7ee      	b.n	8006724 <__gethex+0x160>
 8006746:	f100 0914 	add.w	r9, r0, #20
 800674a:	f04f 0b00 	mov.w	fp, #0
 800674e:	f1ca 0301 	rsb	r3, sl, #1
 8006752:	f8cd 9008 	str.w	r9, [sp, #8]
 8006756:	f8cd b000 	str.w	fp, [sp]
 800675a:	9306      	str	r3, [sp, #24]
 800675c:	42b7      	cmp	r7, r6
 800675e:	d340      	bcc.n	80067e2 <__gethex+0x21e>
 8006760:	9802      	ldr	r0, [sp, #8]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	f840 3b04 	str.w	r3, [r0], #4
 8006768:	eba0 0009 	sub.w	r0, r0, r9
 800676c:	1080      	asrs	r0, r0, #2
 800676e:	0146      	lsls	r6, r0, #5
 8006770:	6120      	str	r0, [r4, #16]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb40 	bl	8006df8 <__hi0bits>
 8006778:	1a30      	subs	r0, r6, r0
 800677a:	f8d8 6000 	ldr.w	r6, [r8]
 800677e:	42b0      	cmp	r0, r6
 8006780:	dd63      	ble.n	800684a <__gethex+0x286>
 8006782:	1b87      	subs	r7, r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	4620      	mov	r0, r4
 8006788:	f000 fee4 	bl	8007554 <__any_on>
 800678c:	4682      	mov	sl, r0
 800678e:	b1a8      	cbz	r0, 80067bc <__gethex+0x1f8>
 8006790:	1e7b      	subs	r3, r7, #1
 8006792:	1159      	asrs	r1, r3, #5
 8006794:	f003 021f 	and.w	r2, r3, #31
 8006798:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800679c:	f04f 0a01 	mov.w	sl, #1
 80067a0:	fa0a f202 	lsl.w	r2, sl, r2
 80067a4:	420a      	tst	r2, r1
 80067a6:	d009      	beq.n	80067bc <__gethex+0x1f8>
 80067a8:	4553      	cmp	r3, sl
 80067aa:	dd05      	ble.n	80067b8 <__gethex+0x1f4>
 80067ac:	1eb9      	subs	r1, r7, #2
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fed0 	bl	8007554 <__any_on>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d145      	bne.n	8006844 <__gethex+0x280>
 80067b8:	f04f 0a02 	mov.w	sl, #2
 80067bc:	4639      	mov	r1, r7
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff fe98 	bl	80064f4 <rshift>
 80067c4:	443d      	add	r5, r7
 80067c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067ca:	42ab      	cmp	r3, r5
 80067cc:	da4c      	bge.n	8006868 <__gethex+0x2a4>
 80067ce:	ee18 0a10 	vmov	r0, s16
 80067d2:	4621      	mov	r1, r4
 80067d4:	f000 fa5e 	bl	8006c94 <_Bfree>
 80067d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067da:	2300      	movs	r3, #0
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	27a3      	movs	r7, #163	; 0xa3
 80067e0:	e785      	b.n	80066ee <__gethex+0x12a>
 80067e2:	1e73      	subs	r3, r6, #1
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d019      	beq.n	8006824 <__gethex+0x260>
 80067f0:	f1bb 0f20 	cmp.w	fp, #32
 80067f4:	d107      	bne.n	8006806 <__gethex+0x242>
 80067f6:	9b02      	ldr	r3, [sp, #8]
 80067f8:	9a00      	ldr	r2, [sp, #0]
 80067fa:	f843 2b04 	str.w	r2, [r3], #4
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	2300      	movs	r3, #0
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	469b      	mov	fp, r3
 8006806:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800680a:	f7ff fec5 	bl	8006598 <__hexdig_fun>
 800680e:	9b00      	ldr	r3, [sp, #0]
 8006810:	f000 000f 	and.w	r0, r0, #15
 8006814:	fa00 f00b 	lsl.w	r0, r0, fp
 8006818:	4303      	orrs	r3, r0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	f10b 0b04 	add.w	fp, fp, #4
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	e00d      	b.n	8006840 <__gethex+0x27c>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	9a06      	ldr	r2, [sp, #24]
 8006828:	4413      	add	r3, r2
 800682a:	42bb      	cmp	r3, r7
 800682c:	d3e0      	bcc.n	80067f0 <__gethex+0x22c>
 800682e:	4618      	mov	r0, r3
 8006830:	9901      	ldr	r1, [sp, #4]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	4652      	mov	r2, sl
 8006836:	f000 ff73 	bl	8007720 <strncmp>
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	2800      	cmp	r0, #0
 800683e:	d1d7      	bne.n	80067f0 <__gethex+0x22c>
 8006840:	461e      	mov	r6, r3
 8006842:	e78b      	b.n	800675c <__gethex+0x198>
 8006844:	f04f 0a03 	mov.w	sl, #3
 8006848:	e7b8      	b.n	80067bc <__gethex+0x1f8>
 800684a:	da0a      	bge.n	8006862 <__gethex+0x29e>
 800684c:	1a37      	subs	r7, r6, r0
 800684e:	4621      	mov	r1, r4
 8006850:	ee18 0a10 	vmov	r0, s16
 8006854:	463a      	mov	r2, r7
 8006856:	f000 fc39 	bl	80070cc <__lshift>
 800685a:	1bed      	subs	r5, r5, r7
 800685c:	4604      	mov	r4, r0
 800685e:	f100 0914 	add.w	r9, r0, #20
 8006862:	f04f 0a00 	mov.w	sl, #0
 8006866:	e7ae      	b.n	80067c6 <__gethex+0x202>
 8006868:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800686c:	42a8      	cmp	r0, r5
 800686e:	dd72      	ble.n	8006956 <__gethex+0x392>
 8006870:	1b45      	subs	r5, r0, r5
 8006872:	42ae      	cmp	r6, r5
 8006874:	dc36      	bgt.n	80068e4 <__gethex+0x320>
 8006876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d02a      	beq.n	80068d4 <__gethex+0x310>
 800687e:	2b03      	cmp	r3, #3
 8006880:	d02c      	beq.n	80068dc <__gethex+0x318>
 8006882:	2b01      	cmp	r3, #1
 8006884:	d11c      	bne.n	80068c0 <__gethex+0x2fc>
 8006886:	42ae      	cmp	r6, r5
 8006888:	d11a      	bne.n	80068c0 <__gethex+0x2fc>
 800688a:	2e01      	cmp	r6, #1
 800688c:	d112      	bne.n	80068b4 <__gethex+0x2f0>
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	2301      	movs	r3, #1
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	f8c9 3000 	str.w	r3, [r9]
 800689e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068a0:	2762      	movs	r7, #98	; 0x62
 80068a2:	601c      	str	r4, [r3, #0]
 80068a4:	e723      	b.n	80066ee <__gethex+0x12a>
 80068a6:	bf00      	nop
 80068a8:	08008718 	.word	0x08008718
 80068ac:	080086a0 	.word	0x080086a0
 80068b0:	080086b1 	.word	0x080086b1
 80068b4:	1e71      	subs	r1, r6, #1
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 fe4c 	bl	8007554 <__any_on>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d1e6      	bne.n	800688e <__gethex+0x2ca>
 80068c0:	ee18 0a10 	vmov	r0, s16
 80068c4:	4621      	mov	r1, r4
 80068c6:	f000 f9e5 	bl	8006c94 <_Bfree>
 80068ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068cc:	2300      	movs	r3, #0
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	2750      	movs	r7, #80	; 0x50
 80068d2:	e70c      	b.n	80066ee <__gethex+0x12a>
 80068d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f2      	bne.n	80068c0 <__gethex+0x2fc>
 80068da:	e7d8      	b.n	800688e <__gethex+0x2ca>
 80068dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d5      	bne.n	800688e <__gethex+0x2ca>
 80068e2:	e7ed      	b.n	80068c0 <__gethex+0x2fc>
 80068e4:	1e6f      	subs	r7, r5, #1
 80068e6:	f1ba 0f00 	cmp.w	sl, #0
 80068ea:	d131      	bne.n	8006950 <__gethex+0x38c>
 80068ec:	b127      	cbz	r7, 80068f8 <__gethex+0x334>
 80068ee:	4639      	mov	r1, r7
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fe2f 	bl	8007554 <__any_on>
 80068f6:	4682      	mov	sl, r0
 80068f8:	117b      	asrs	r3, r7, #5
 80068fa:	2101      	movs	r1, #1
 80068fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006900:	f007 071f 	and.w	r7, r7, #31
 8006904:	fa01 f707 	lsl.w	r7, r1, r7
 8006908:	421f      	tst	r7, r3
 800690a:	4629      	mov	r1, r5
 800690c:	4620      	mov	r0, r4
 800690e:	bf18      	it	ne
 8006910:	f04a 0a02 	orrne.w	sl, sl, #2
 8006914:	1b76      	subs	r6, r6, r5
 8006916:	f7ff fded 	bl	80064f4 <rshift>
 800691a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800691e:	2702      	movs	r7, #2
 8006920:	f1ba 0f00 	cmp.w	sl, #0
 8006924:	d048      	beq.n	80069b8 <__gethex+0x3f4>
 8006926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d015      	beq.n	800695a <__gethex+0x396>
 800692e:	2b03      	cmp	r3, #3
 8006930:	d017      	beq.n	8006962 <__gethex+0x39e>
 8006932:	2b01      	cmp	r3, #1
 8006934:	d109      	bne.n	800694a <__gethex+0x386>
 8006936:	f01a 0f02 	tst.w	sl, #2
 800693a:	d006      	beq.n	800694a <__gethex+0x386>
 800693c:	f8d9 0000 	ldr.w	r0, [r9]
 8006940:	ea4a 0a00 	orr.w	sl, sl, r0
 8006944:	f01a 0f01 	tst.w	sl, #1
 8006948:	d10e      	bne.n	8006968 <__gethex+0x3a4>
 800694a:	f047 0710 	orr.w	r7, r7, #16
 800694e:	e033      	b.n	80069b8 <__gethex+0x3f4>
 8006950:	f04f 0a01 	mov.w	sl, #1
 8006954:	e7d0      	b.n	80068f8 <__gethex+0x334>
 8006956:	2701      	movs	r7, #1
 8006958:	e7e2      	b.n	8006920 <__gethex+0x35c>
 800695a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800695c:	f1c3 0301 	rsb	r3, r3, #1
 8006960:	9315      	str	r3, [sp, #84]	; 0x54
 8006962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <__gethex+0x386>
 8006968:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800696c:	f104 0314 	add.w	r3, r4, #20
 8006970:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006974:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006978:	f04f 0c00 	mov.w	ip, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006982:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006986:	d01c      	beq.n	80069c2 <__gethex+0x3fe>
 8006988:	3201      	adds	r2, #1
 800698a:	6002      	str	r2, [r0, #0]
 800698c:	2f02      	cmp	r7, #2
 800698e:	f104 0314 	add.w	r3, r4, #20
 8006992:	d13f      	bne.n	8006a14 <__gethex+0x450>
 8006994:	f8d8 2000 	ldr.w	r2, [r8]
 8006998:	3a01      	subs	r2, #1
 800699a:	42b2      	cmp	r2, r6
 800699c:	d10a      	bne.n	80069b4 <__gethex+0x3f0>
 800699e:	1171      	asrs	r1, r6, #5
 80069a0:	2201      	movs	r2, #1
 80069a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069a6:	f006 061f 	and.w	r6, r6, #31
 80069aa:	fa02 f606 	lsl.w	r6, r2, r6
 80069ae:	421e      	tst	r6, r3
 80069b0:	bf18      	it	ne
 80069b2:	4617      	movne	r7, r2
 80069b4:	f047 0720 	orr.w	r7, r7, #32
 80069b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069ba:	601c      	str	r4, [r3, #0]
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	601d      	str	r5, [r3, #0]
 80069c0:	e695      	b.n	80066ee <__gethex+0x12a>
 80069c2:	4299      	cmp	r1, r3
 80069c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80069c8:	d8d8      	bhi.n	800697c <__gethex+0x3b8>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	459b      	cmp	fp, r3
 80069ce:	db19      	blt.n	8006a04 <__gethex+0x440>
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	ee18 0a10 	vmov	r0, s16
 80069d6:	3101      	adds	r1, #1
 80069d8:	f000 f91c 	bl	8006c14 <_Balloc>
 80069dc:	4681      	mov	r9, r0
 80069de:	b918      	cbnz	r0, 80069e8 <__gethex+0x424>
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <__gethex+0x488>)
 80069e2:	4602      	mov	r2, r0
 80069e4:	2184      	movs	r1, #132	; 0x84
 80069e6:	e6a8      	b.n	800673a <__gethex+0x176>
 80069e8:	6922      	ldr	r2, [r4, #16]
 80069ea:	3202      	adds	r2, #2
 80069ec:	f104 010c 	add.w	r1, r4, #12
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	300c      	adds	r0, #12
 80069f4:	f000 f900 	bl	8006bf8 <memcpy>
 80069f8:	4621      	mov	r1, r4
 80069fa:	ee18 0a10 	vmov	r0, s16
 80069fe:	f000 f949 	bl	8006c94 <_Bfree>
 8006a02:	464c      	mov	r4, r9
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a0c:	6122      	str	r2, [r4, #16]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	615a      	str	r2, [r3, #20]
 8006a12:	e7bb      	b.n	800698c <__gethex+0x3c8>
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	455a      	cmp	r2, fp
 8006a18:	dd0b      	ble.n	8006a32 <__gethex+0x46e>
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f7ff fd69 	bl	80064f4 <rshift>
 8006a22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a26:	3501      	adds	r5, #1
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	f6ff aed0 	blt.w	80067ce <__gethex+0x20a>
 8006a2e:	2701      	movs	r7, #1
 8006a30:	e7c0      	b.n	80069b4 <__gethex+0x3f0>
 8006a32:	f016 061f 	ands.w	r6, r6, #31
 8006a36:	d0fa      	beq.n	8006a2e <__gethex+0x46a>
 8006a38:	4453      	add	r3, sl
 8006a3a:	f1c6 0620 	rsb	r6, r6, #32
 8006a3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006a42:	f000 f9d9 	bl	8006df8 <__hi0bits>
 8006a46:	42b0      	cmp	r0, r6
 8006a48:	dbe7      	blt.n	8006a1a <__gethex+0x456>
 8006a4a:	e7f0      	b.n	8006a2e <__gethex+0x46a>
 8006a4c:	080086a0 	.word	0x080086a0

08006a50 <L_shift>:
 8006a50:	f1c2 0208 	rsb	r2, r2, #8
 8006a54:	0092      	lsls	r2, r2, #2
 8006a56:	b570      	push	{r4, r5, r6, lr}
 8006a58:	f1c2 0620 	rsb	r6, r2, #32
 8006a5c:	6843      	ldr	r3, [r0, #4]
 8006a5e:	6804      	ldr	r4, [r0, #0]
 8006a60:	fa03 f506 	lsl.w	r5, r3, r6
 8006a64:	432c      	orrs	r4, r5
 8006a66:	40d3      	lsrs	r3, r2
 8006a68:	6004      	str	r4, [r0, #0]
 8006a6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a6e:	4288      	cmp	r0, r1
 8006a70:	d3f4      	bcc.n	8006a5c <L_shift+0xc>
 8006a72:	bd70      	pop	{r4, r5, r6, pc}

08006a74 <__match>:
 8006a74:	b530      	push	{r4, r5, lr}
 8006a76:	6803      	ldr	r3, [r0, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7e:	b914      	cbnz	r4, 8006a86 <__match+0x12>
 8006a80:	6003      	str	r3, [r0, #0]
 8006a82:	2001      	movs	r0, #1
 8006a84:	bd30      	pop	{r4, r5, pc}
 8006a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a8e:	2d19      	cmp	r5, #25
 8006a90:	bf98      	it	ls
 8006a92:	3220      	addls	r2, #32
 8006a94:	42a2      	cmp	r2, r4
 8006a96:	d0f0      	beq.n	8006a7a <__match+0x6>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e7f3      	b.n	8006a84 <__match+0x10>

08006a9c <__hexnan>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	680b      	ldr	r3, [r1, #0]
 8006aa2:	115e      	asrs	r6, r3, #5
 8006aa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006aa8:	f013 031f 	ands.w	r3, r3, #31
 8006aac:	b087      	sub	sp, #28
 8006aae:	bf18      	it	ne
 8006ab0:	3604      	addne	r6, #4
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	1f37      	subs	r7, r6, #4
 8006ab6:	4690      	mov	r8, r2
 8006ab8:	6802      	ldr	r2, [r0, #0]
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	4682      	mov	sl, r0
 8006abe:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ac2:	46b9      	mov	r9, r7
 8006ac4:	463c      	mov	r4, r7
 8006ac6:	9502      	str	r5, [sp, #8]
 8006ac8:	46ab      	mov	fp, r5
 8006aca:	7851      	ldrb	r1, [r2, #1]
 8006acc:	1c53      	adds	r3, r2, #1
 8006ace:	9303      	str	r3, [sp, #12]
 8006ad0:	b341      	cbz	r1, 8006b24 <__hexnan+0x88>
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	9205      	str	r2, [sp, #20]
 8006ad6:	9104      	str	r1, [sp, #16]
 8006ad8:	f7ff fd5e 	bl	8006598 <__hexdig_fun>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d14f      	bne.n	8006b80 <__hexnan+0xe4>
 8006ae0:	9904      	ldr	r1, [sp, #16]
 8006ae2:	9a05      	ldr	r2, [sp, #20]
 8006ae4:	2920      	cmp	r1, #32
 8006ae6:	d818      	bhi.n	8006b1a <__hexnan+0x7e>
 8006ae8:	9b02      	ldr	r3, [sp, #8]
 8006aea:	459b      	cmp	fp, r3
 8006aec:	dd13      	ble.n	8006b16 <__hexnan+0x7a>
 8006aee:	454c      	cmp	r4, r9
 8006af0:	d206      	bcs.n	8006b00 <__hexnan+0x64>
 8006af2:	2d07      	cmp	r5, #7
 8006af4:	dc04      	bgt.n	8006b00 <__hexnan+0x64>
 8006af6:	462a      	mov	r2, r5
 8006af8:	4649      	mov	r1, r9
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff ffa8 	bl	8006a50 <L_shift>
 8006b00:	4544      	cmp	r4, r8
 8006b02:	d950      	bls.n	8006ba6 <__hexnan+0x10a>
 8006b04:	2300      	movs	r3, #0
 8006b06:	f1a4 0904 	sub.w	r9, r4, #4
 8006b0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b0e:	f8cd b008 	str.w	fp, [sp, #8]
 8006b12:	464c      	mov	r4, r9
 8006b14:	461d      	mov	r5, r3
 8006b16:	9a03      	ldr	r2, [sp, #12]
 8006b18:	e7d7      	b.n	8006aca <__hexnan+0x2e>
 8006b1a:	2929      	cmp	r1, #41	; 0x29
 8006b1c:	d156      	bne.n	8006bcc <__hexnan+0x130>
 8006b1e:	3202      	adds	r2, #2
 8006b20:	f8ca 2000 	str.w	r2, [sl]
 8006b24:	f1bb 0f00 	cmp.w	fp, #0
 8006b28:	d050      	beq.n	8006bcc <__hexnan+0x130>
 8006b2a:	454c      	cmp	r4, r9
 8006b2c:	d206      	bcs.n	8006b3c <__hexnan+0xa0>
 8006b2e:	2d07      	cmp	r5, #7
 8006b30:	dc04      	bgt.n	8006b3c <__hexnan+0xa0>
 8006b32:	462a      	mov	r2, r5
 8006b34:	4649      	mov	r1, r9
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7ff ff8a 	bl	8006a50 <L_shift>
 8006b3c:	4544      	cmp	r4, r8
 8006b3e:	d934      	bls.n	8006baa <__hexnan+0x10e>
 8006b40:	f1a8 0204 	sub.w	r2, r8, #4
 8006b44:	4623      	mov	r3, r4
 8006b46:	f853 1b04 	ldr.w	r1, [r3], #4
 8006b4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8006b4e:	429f      	cmp	r7, r3
 8006b50:	d2f9      	bcs.n	8006b46 <__hexnan+0xaa>
 8006b52:	1b3b      	subs	r3, r7, r4
 8006b54:	f023 0303 	bic.w	r3, r3, #3
 8006b58:	3304      	adds	r3, #4
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	3e03      	subs	r6, #3
 8006b5e:	42b4      	cmp	r4, r6
 8006b60:	bf88      	it	hi
 8006b62:	2304      	movhi	r3, #4
 8006b64:	4443      	add	r3, r8
 8006b66:	2200      	movs	r2, #0
 8006b68:	f843 2b04 	str.w	r2, [r3], #4
 8006b6c:	429f      	cmp	r7, r3
 8006b6e:	d2fb      	bcs.n	8006b68 <__hexnan+0xcc>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	b91b      	cbnz	r3, 8006b7c <__hexnan+0xe0>
 8006b74:	4547      	cmp	r7, r8
 8006b76:	d127      	bne.n	8006bc8 <__hexnan+0x12c>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	2005      	movs	r0, #5
 8006b7e:	e026      	b.n	8006bce <__hexnan+0x132>
 8006b80:	3501      	adds	r5, #1
 8006b82:	2d08      	cmp	r5, #8
 8006b84:	f10b 0b01 	add.w	fp, fp, #1
 8006b88:	dd06      	ble.n	8006b98 <__hexnan+0xfc>
 8006b8a:	4544      	cmp	r4, r8
 8006b8c:	d9c3      	bls.n	8006b16 <__hexnan+0x7a>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b94:	2501      	movs	r5, #1
 8006b96:	3c04      	subs	r4, #4
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	f000 000f 	and.w	r0, r0, #15
 8006b9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	e7b7      	b.n	8006b16 <__hexnan+0x7a>
 8006ba6:	2508      	movs	r5, #8
 8006ba8:	e7b5      	b.n	8006b16 <__hexnan+0x7a>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0df      	beq.n	8006b70 <__hexnan+0xd4>
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	f1c3 0320 	rsb	r3, r3, #32
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	f846 2c04 	str.w	r2, [r6, #-4]
 8006bc6:	e7d3      	b.n	8006b70 <__hexnan+0xd4>
 8006bc8:	3f04      	subs	r7, #4
 8006bca:	e7d1      	b.n	8006b70 <__hexnan+0xd4>
 8006bcc:	2004      	movs	r0, #4
 8006bce:	b007      	add	sp, #28
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bd4 <__ascii_mbtowc>:
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	b901      	cbnz	r1, 8006bda <__ascii_mbtowc+0x6>
 8006bd8:	a901      	add	r1, sp, #4
 8006bda:	b142      	cbz	r2, 8006bee <__ascii_mbtowc+0x1a>
 8006bdc:	b14b      	cbz	r3, 8006bf2 <__ascii_mbtowc+0x1e>
 8006bde:	7813      	ldrb	r3, [r2, #0]
 8006be0:	600b      	str	r3, [r1, #0]
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	1e10      	subs	r0, r2, #0
 8006be6:	bf18      	it	ne
 8006be8:	2001      	movne	r0, #1
 8006bea:	b002      	add	sp, #8
 8006bec:	4770      	bx	lr
 8006bee:	4610      	mov	r0, r2
 8006bf0:	e7fb      	b.n	8006bea <__ascii_mbtowc+0x16>
 8006bf2:	f06f 0001 	mvn.w	r0, #1
 8006bf6:	e7f8      	b.n	8006bea <__ascii_mbtowc+0x16>

08006bf8 <memcpy>:
 8006bf8:	440a      	add	r2, r1
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c00:	d100      	bne.n	8006c04 <memcpy+0xc>
 8006c02:	4770      	bx	lr
 8006c04:	b510      	push	{r4, lr}
 8006c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	d1f9      	bne.n	8006c06 <memcpy+0xe>
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <_Balloc>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	b976      	cbnz	r6, 8006c3c <_Balloc+0x28>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f000 fdd0 	bl	80077c4 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6260      	str	r0, [r4, #36]	; 0x24
 8006c28:	b920      	cbnz	r0, 8006c34 <_Balloc+0x20>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <_Balloc+0x78>)
 8006c2c:	4818      	ldr	r0, [pc, #96]	; (8006c90 <_Balloc+0x7c>)
 8006c2e:	2166      	movs	r1, #102	; 0x66
 8006c30:	f000 fd98 	bl	8007764 <__assert_func>
 8006c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c38:	6006      	str	r6, [r0, #0]
 8006c3a:	60c6      	str	r6, [r0, #12]
 8006c3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c3e:	68f3      	ldr	r3, [r6, #12]
 8006c40:	b183      	cbz	r3, 8006c64 <_Balloc+0x50>
 8006c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c4a:	b9b8      	cbnz	r0, 8006c7c <_Balloc+0x68>
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c52:	1d72      	adds	r2, r6, #5
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fc9d 	bl	8007596 <_calloc_r>
 8006c5c:	b160      	cbz	r0, 8006c78 <_Balloc+0x64>
 8006c5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c62:	e00e      	b.n	8006c82 <_Balloc+0x6e>
 8006c64:	2221      	movs	r2, #33	; 0x21
 8006c66:	2104      	movs	r1, #4
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 fc94 	bl	8007596 <_calloc_r>
 8006c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c70:	60f0      	str	r0, [r6, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e4      	bne.n	8006c42 <_Balloc+0x2e>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	6802      	ldr	r2, [r0, #0]
 8006c7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c82:	2300      	movs	r3, #0
 8006c84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c88:	e7f7      	b.n	8006c7a <_Balloc+0x66>
 8006c8a:	bf00      	nop
 8006c8c:	0800872c 	.word	0x0800872c
 8006c90:	08008743 	.word	0x08008743

08006c94 <_Bfree>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	b976      	cbnz	r6, 8006cbc <_Bfree+0x28>
 8006c9e:	2010      	movs	r0, #16
 8006ca0:	f000 fd90 	bl	80077c4 <malloc>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6268      	str	r0, [r5, #36]	; 0x24
 8006ca8:	b920      	cbnz	r0, 8006cb4 <_Bfree+0x20>
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <_Bfree+0x3c>)
 8006cac:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <_Bfree+0x40>)
 8006cae:	218a      	movs	r1, #138	; 0x8a
 8006cb0:	f000 fd58 	bl	8007764 <__assert_func>
 8006cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb8:	6006      	str	r6, [r0, #0]
 8006cba:	60c6      	str	r6, [r0, #12]
 8006cbc:	b13c      	cbz	r4, 8006cce <_Bfree+0x3a>
 8006cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cc0:	6862      	ldr	r2, [r4, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cc8:	6021      	str	r1, [r4, #0]
 8006cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	0800872c 	.word	0x0800872c
 8006cd4:	08008743 	.word	0x08008743

08006cd8 <__multadd>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	690d      	ldr	r5, [r1, #16]
 8006cde:	4607      	mov	r7, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	461e      	mov	r6, r3
 8006ce4:	f101 0c14 	add.w	ip, r1, #20
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f8dc 3000 	ldr.w	r3, [ip]
 8006cee:	b299      	uxth	r1, r3
 8006cf0:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf4:	0c1e      	lsrs	r6, r3, #16
 8006cf6:	0c0b      	lsrs	r3, r1, #16
 8006cf8:	fb02 3306 	mla	r3, r2, r6, r3
 8006cfc:	b289      	uxth	r1, r1
 8006cfe:	3001      	adds	r0, #1
 8006d00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d04:	4285      	cmp	r5, r0
 8006d06:	f84c 1b04 	str.w	r1, [ip], #4
 8006d0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d0e:	dcec      	bgt.n	8006cea <__multadd+0x12>
 8006d10:	b30e      	cbz	r6, 8006d56 <__multadd+0x7e>
 8006d12:	68a3      	ldr	r3, [r4, #8]
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc19      	bgt.n	8006d4c <__multadd+0x74>
 8006d18:	6861      	ldr	r1, [r4, #4]
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	3101      	adds	r1, #1
 8006d1e:	f7ff ff79 	bl	8006c14 <_Balloc>
 8006d22:	4680      	mov	r8, r0
 8006d24:	b928      	cbnz	r0, 8006d32 <__multadd+0x5a>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <__multadd+0x84>)
 8006d2a:	480d      	ldr	r0, [pc, #52]	; (8006d60 <__multadd+0x88>)
 8006d2c:	21b5      	movs	r1, #181	; 0xb5
 8006d2e:	f000 fd19 	bl	8007764 <__assert_func>
 8006d32:	6922      	ldr	r2, [r4, #16]
 8006d34:	3202      	adds	r2, #2
 8006d36:	f104 010c 	add.w	r1, r4, #12
 8006d3a:	0092      	lsls	r2, r2, #2
 8006d3c:	300c      	adds	r0, #12
 8006d3e:	f7ff ff5b 	bl	8006bf8 <memcpy>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4638      	mov	r0, r7
 8006d46:	f7ff ffa5 	bl	8006c94 <_Bfree>
 8006d4a:	4644      	mov	r4, r8
 8006d4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d50:	3501      	adds	r5, #1
 8006d52:	615e      	str	r6, [r3, #20]
 8006d54:	6125      	str	r5, [r4, #16]
 8006d56:	4620      	mov	r0, r4
 8006d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5c:	080086a0 	.word	0x080086a0
 8006d60:	08008743 	.word	0x08008743

08006d64 <__s2b>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	460c      	mov	r4, r1
 8006d6a:	4615      	mov	r5, r2
 8006d6c:	461f      	mov	r7, r3
 8006d6e:	2209      	movs	r2, #9
 8006d70:	3308      	adds	r3, #8
 8006d72:	4606      	mov	r6, r0
 8006d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	db09      	blt.n	8006d94 <__s2b+0x30>
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff ff47 	bl	8006c14 <_Balloc>
 8006d86:	b940      	cbnz	r0, 8006d9a <__s2b+0x36>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <__s2b+0x8c>)
 8006d8c:	4819      	ldr	r0, [pc, #100]	; (8006df4 <__s2b+0x90>)
 8006d8e:	21ce      	movs	r1, #206	; 0xce
 8006d90:	f000 fce8 	bl	8007764 <__assert_func>
 8006d94:	0052      	lsls	r2, r2, #1
 8006d96:	3101      	adds	r1, #1
 8006d98:	e7f0      	b.n	8006d7c <__s2b+0x18>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	6143      	str	r3, [r0, #20]
 8006d9e:	2d09      	cmp	r5, #9
 8006da0:	f04f 0301 	mov.w	r3, #1
 8006da4:	6103      	str	r3, [r0, #16]
 8006da6:	dd16      	ble.n	8006dd6 <__s2b+0x72>
 8006da8:	f104 0909 	add.w	r9, r4, #9
 8006dac:	46c8      	mov	r8, r9
 8006dae:	442c      	add	r4, r5
 8006db0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006db4:	4601      	mov	r1, r0
 8006db6:	3b30      	subs	r3, #48	; 0x30
 8006db8:	220a      	movs	r2, #10
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ff8c 	bl	8006cd8 <__multadd>
 8006dc0:	45a0      	cmp	r8, r4
 8006dc2:	d1f5      	bne.n	8006db0 <__s2b+0x4c>
 8006dc4:	f1a5 0408 	sub.w	r4, r5, #8
 8006dc8:	444c      	add	r4, r9
 8006dca:	1b2d      	subs	r5, r5, r4
 8006dcc:	1963      	adds	r3, r4, r5
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	db04      	blt.n	8006ddc <__s2b+0x78>
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	340a      	adds	r4, #10
 8006dd8:	2509      	movs	r5, #9
 8006dda:	e7f6      	b.n	8006dca <__s2b+0x66>
 8006ddc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006de0:	4601      	mov	r1, r0
 8006de2:	3b30      	subs	r3, #48	; 0x30
 8006de4:	220a      	movs	r2, #10
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff ff76 	bl	8006cd8 <__multadd>
 8006dec:	e7ee      	b.n	8006dcc <__s2b+0x68>
 8006dee:	bf00      	nop
 8006df0:	080086a0 	.word	0x080086a0
 8006df4:	08008743 	.word	0x08008743

08006df8 <__hi0bits>:
 8006df8:	0c03      	lsrs	r3, r0, #16
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	b9d3      	cbnz	r3, 8006e34 <__hi0bits+0x3c>
 8006dfe:	0400      	lsls	r0, r0, #16
 8006e00:	2310      	movs	r3, #16
 8006e02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e06:	bf04      	itt	eq
 8006e08:	0200      	lsleq	r0, r0, #8
 8006e0a:	3308      	addeq	r3, #8
 8006e0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e10:	bf04      	itt	eq
 8006e12:	0100      	lsleq	r0, r0, #4
 8006e14:	3304      	addeq	r3, #4
 8006e16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e1a:	bf04      	itt	eq
 8006e1c:	0080      	lsleq	r0, r0, #2
 8006e1e:	3302      	addeq	r3, #2
 8006e20:	2800      	cmp	r0, #0
 8006e22:	db05      	blt.n	8006e30 <__hi0bits+0x38>
 8006e24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e28:	f103 0301 	add.w	r3, r3, #1
 8006e2c:	bf08      	it	eq
 8006e2e:	2320      	moveq	r3, #32
 8006e30:	4618      	mov	r0, r3
 8006e32:	4770      	bx	lr
 8006e34:	2300      	movs	r3, #0
 8006e36:	e7e4      	b.n	8006e02 <__hi0bits+0xa>

08006e38 <__lo0bits>:
 8006e38:	6803      	ldr	r3, [r0, #0]
 8006e3a:	f013 0207 	ands.w	r2, r3, #7
 8006e3e:	4601      	mov	r1, r0
 8006e40:	d00b      	beq.n	8006e5a <__lo0bits+0x22>
 8006e42:	07da      	lsls	r2, r3, #31
 8006e44:	d423      	bmi.n	8006e8e <__lo0bits+0x56>
 8006e46:	0798      	lsls	r0, r3, #30
 8006e48:	bf49      	itett	mi
 8006e4a:	085b      	lsrmi	r3, r3, #1
 8006e4c:	089b      	lsrpl	r3, r3, #2
 8006e4e:	2001      	movmi	r0, #1
 8006e50:	600b      	strmi	r3, [r1, #0]
 8006e52:	bf5c      	itt	pl
 8006e54:	600b      	strpl	r3, [r1, #0]
 8006e56:	2002      	movpl	r0, #2
 8006e58:	4770      	bx	lr
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	b9a8      	cbnz	r0, 8006e8a <__lo0bits+0x52>
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	2010      	movs	r0, #16
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	b90a      	cbnz	r2, 8006e6a <__lo0bits+0x32>
 8006e66:	3008      	adds	r0, #8
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	071a      	lsls	r2, r3, #28
 8006e6c:	bf04      	itt	eq
 8006e6e:	091b      	lsreq	r3, r3, #4
 8006e70:	3004      	addeq	r0, #4
 8006e72:	079a      	lsls	r2, r3, #30
 8006e74:	bf04      	itt	eq
 8006e76:	089b      	lsreq	r3, r3, #2
 8006e78:	3002      	addeq	r0, #2
 8006e7a:	07da      	lsls	r2, r3, #31
 8006e7c:	d403      	bmi.n	8006e86 <__lo0bits+0x4e>
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f100 0001 	add.w	r0, r0, #1
 8006e84:	d005      	beq.n	8006e92 <__lo0bits+0x5a>
 8006e86:	600b      	str	r3, [r1, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	e7e9      	b.n	8006e62 <__lo0bits+0x2a>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	4770      	bx	lr
 8006e92:	2020      	movs	r0, #32
 8006e94:	4770      	bx	lr
	...

08006e98 <__i2b>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	f7ff feb9 	bl	8006c14 <_Balloc>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	b928      	cbnz	r0, 8006eb2 <__i2b+0x1a>
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <__i2b+0x24>)
 8006ea8:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <__i2b+0x28>)
 8006eaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006eae:	f000 fc59 	bl	8007764 <__assert_func>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	6144      	str	r4, [r0, #20]
 8006eb6:	6103      	str	r3, [r0, #16]
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	080086a0 	.word	0x080086a0
 8006ec0:	08008743 	.word	0x08008743

08006ec4 <__multiply>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	4691      	mov	r9, r2
 8006eca:	690a      	ldr	r2, [r1, #16]
 8006ecc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	bfb8      	it	lt
 8006ed4:	460b      	movlt	r3, r1
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	bfbc      	itt	lt
 8006eda:	464c      	movlt	r4, r9
 8006edc:	4699      	movlt	r9, r3
 8006ede:	6927      	ldr	r7, [r4, #16]
 8006ee0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	6861      	ldr	r1, [r4, #4]
 8006ee8:	eb07 060a 	add.w	r6, r7, sl
 8006eec:	42b3      	cmp	r3, r6
 8006eee:	b085      	sub	sp, #20
 8006ef0:	bfb8      	it	lt
 8006ef2:	3101      	addlt	r1, #1
 8006ef4:	f7ff fe8e 	bl	8006c14 <_Balloc>
 8006ef8:	b930      	cbnz	r0, 8006f08 <__multiply+0x44>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b44      	ldr	r3, [pc, #272]	; (8007010 <__multiply+0x14c>)
 8006efe:	4845      	ldr	r0, [pc, #276]	; (8007014 <__multiply+0x150>)
 8006f00:	f240 115d 	movw	r1, #349	; 0x15d
 8006f04:	f000 fc2e 	bl	8007764 <__assert_func>
 8006f08:	f100 0514 	add.w	r5, r0, #20
 8006f0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f10:	462b      	mov	r3, r5
 8006f12:	2200      	movs	r2, #0
 8006f14:	4543      	cmp	r3, r8
 8006f16:	d321      	bcc.n	8006f5c <__multiply+0x98>
 8006f18:	f104 0314 	add.w	r3, r4, #20
 8006f1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f20:	f109 0314 	add.w	r3, r9, #20
 8006f24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f28:	9202      	str	r2, [sp, #8]
 8006f2a:	1b3a      	subs	r2, r7, r4
 8006f2c:	3a15      	subs	r2, #21
 8006f2e:	f022 0203 	bic.w	r2, r2, #3
 8006f32:	3204      	adds	r2, #4
 8006f34:	f104 0115 	add.w	r1, r4, #21
 8006f38:	428f      	cmp	r7, r1
 8006f3a:	bf38      	it	cc
 8006f3c:	2204      	movcc	r2, #4
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	9a02      	ldr	r2, [sp, #8]
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d80c      	bhi.n	8006f62 <__multiply+0x9e>
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	dd03      	ble.n	8006f54 <__multiply+0x90>
 8006f4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05a      	beq.n	800700a <__multiply+0x146>
 8006f54:	6106      	str	r6, [r0, #16]
 8006f56:	b005      	add	sp, #20
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	f843 2b04 	str.w	r2, [r3], #4
 8006f60:	e7d8      	b.n	8006f14 <__multiply+0x50>
 8006f62:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f66:	f1ba 0f00 	cmp.w	sl, #0
 8006f6a:	d024      	beq.n	8006fb6 <__multiply+0xf2>
 8006f6c:	f104 0e14 	add.w	lr, r4, #20
 8006f70:	46a9      	mov	r9, r5
 8006f72:	f04f 0c00 	mov.w	ip, #0
 8006f76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f7a:	f8d9 1000 	ldr.w	r1, [r9]
 8006f7e:	fa1f fb82 	uxth.w	fp, r2
 8006f82:	b289      	uxth	r1, r1
 8006f84:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f90:	4461      	add	r1, ip
 8006f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f96:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f9e:	b289      	uxth	r1, r1
 8006fa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fa4:	4577      	cmp	r7, lr
 8006fa6:	f849 1b04 	str.w	r1, [r9], #4
 8006faa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fae:	d8e2      	bhi.n	8006f76 <__multiply+0xb2>
 8006fb0:	9a01      	ldr	r2, [sp, #4]
 8006fb2:	f845 c002 	str.w	ip, [r5, r2]
 8006fb6:	9a03      	ldr	r2, [sp, #12]
 8006fb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	f1b9 0f00 	cmp.w	r9, #0
 8006fc2:	d020      	beq.n	8007006 <__multiply+0x142>
 8006fc4:	6829      	ldr	r1, [r5, #0]
 8006fc6:	f104 0c14 	add.w	ip, r4, #20
 8006fca:	46ae      	mov	lr, r5
 8006fcc:	f04f 0a00 	mov.w	sl, #0
 8006fd0:	f8bc b000 	ldrh.w	fp, [ip]
 8006fd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fd8:	fb09 220b 	mla	r2, r9, fp, r2
 8006fdc:	4492      	add	sl, r2
 8006fde:	b289      	uxth	r1, r1
 8006fe0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fe4:	f84e 1b04 	str.w	r1, [lr], #4
 8006fe8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fec:	f8be 1000 	ldrh.w	r1, [lr]
 8006ff0:	0c12      	lsrs	r2, r2, #16
 8006ff2:	fb09 1102 	mla	r1, r9, r2, r1
 8006ff6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ffa:	4567      	cmp	r7, ip
 8006ffc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007000:	d8e6      	bhi.n	8006fd0 <__multiply+0x10c>
 8007002:	9a01      	ldr	r2, [sp, #4]
 8007004:	50a9      	str	r1, [r5, r2]
 8007006:	3504      	adds	r5, #4
 8007008:	e79a      	b.n	8006f40 <__multiply+0x7c>
 800700a:	3e01      	subs	r6, #1
 800700c:	e79c      	b.n	8006f48 <__multiply+0x84>
 800700e:	bf00      	nop
 8007010:	080086a0 	.word	0x080086a0
 8007014:	08008743 	.word	0x08008743

08007018 <__pow5mult>:
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701c:	4615      	mov	r5, r2
 800701e:	f012 0203 	ands.w	r2, r2, #3
 8007022:	4606      	mov	r6, r0
 8007024:	460f      	mov	r7, r1
 8007026:	d007      	beq.n	8007038 <__pow5mult+0x20>
 8007028:	4c25      	ldr	r4, [pc, #148]	; (80070c0 <__pow5mult+0xa8>)
 800702a:	3a01      	subs	r2, #1
 800702c:	2300      	movs	r3, #0
 800702e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007032:	f7ff fe51 	bl	8006cd8 <__multadd>
 8007036:	4607      	mov	r7, r0
 8007038:	10ad      	asrs	r5, r5, #2
 800703a:	d03d      	beq.n	80070b8 <__pow5mult+0xa0>
 800703c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800703e:	b97c      	cbnz	r4, 8007060 <__pow5mult+0x48>
 8007040:	2010      	movs	r0, #16
 8007042:	f000 fbbf 	bl	80077c4 <malloc>
 8007046:	4602      	mov	r2, r0
 8007048:	6270      	str	r0, [r6, #36]	; 0x24
 800704a:	b928      	cbnz	r0, 8007058 <__pow5mult+0x40>
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <__pow5mult+0xac>)
 800704e:	481e      	ldr	r0, [pc, #120]	; (80070c8 <__pow5mult+0xb0>)
 8007050:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007054:	f000 fb86 	bl	8007764 <__assert_func>
 8007058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800705c:	6004      	str	r4, [r0, #0]
 800705e:	60c4      	str	r4, [r0, #12]
 8007060:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007068:	b94c      	cbnz	r4, 800707e <__pow5mult+0x66>
 800706a:	f240 2171 	movw	r1, #625	; 0x271
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ff12 	bl	8006e98 <__i2b>
 8007074:	2300      	movs	r3, #0
 8007076:	f8c8 0008 	str.w	r0, [r8, #8]
 800707a:	4604      	mov	r4, r0
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	f04f 0900 	mov.w	r9, #0
 8007082:	07eb      	lsls	r3, r5, #31
 8007084:	d50a      	bpl.n	800709c <__pow5mult+0x84>
 8007086:	4639      	mov	r1, r7
 8007088:	4622      	mov	r2, r4
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff ff1a 	bl	8006ec4 <__multiply>
 8007090:	4639      	mov	r1, r7
 8007092:	4680      	mov	r8, r0
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff fdfd 	bl	8006c94 <_Bfree>
 800709a:	4647      	mov	r7, r8
 800709c:	106d      	asrs	r5, r5, #1
 800709e:	d00b      	beq.n	80070b8 <__pow5mult+0xa0>
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	b938      	cbnz	r0, 80070b4 <__pow5mult+0x9c>
 80070a4:	4622      	mov	r2, r4
 80070a6:	4621      	mov	r1, r4
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff ff0b 	bl	8006ec4 <__multiply>
 80070ae:	6020      	str	r0, [r4, #0]
 80070b0:	f8c0 9000 	str.w	r9, [r0]
 80070b4:	4604      	mov	r4, r0
 80070b6:	e7e4      	b.n	8007082 <__pow5mult+0x6a>
 80070b8:	4638      	mov	r0, r7
 80070ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070be:	bf00      	nop
 80070c0:	08008890 	.word	0x08008890
 80070c4:	0800872c 	.word	0x0800872c
 80070c8:	08008743 	.word	0x08008743

080070cc <__lshift>:
 80070cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	460c      	mov	r4, r1
 80070d2:	6849      	ldr	r1, [r1, #4]
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	4607      	mov	r7, r0
 80070de:	4691      	mov	r9, r2
 80070e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070e4:	f108 0601 	add.w	r6, r8, #1
 80070e8:	42b3      	cmp	r3, r6
 80070ea:	db0b      	blt.n	8007104 <__lshift+0x38>
 80070ec:	4638      	mov	r0, r7
 80070ee:	f7ff fd91 	bl	8006c14 <_Balloc>
 80070f2:	4605      	mov	r5, r0
 80070f4:	b948      	cbnz	r0, 800710a <__lshift+0x3e>
 80070f6:	4602      	mov	r2, r0
 80070f8:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <__lshift+0xd8>)
 80070fa:	482b      	ldr	r0, [pc, #172]	; (80071a8 <__lshift+0xdc>)
 80070fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007100:	f000 fb30 	bl	8007764 <__assert_func>
 8007104:	3101      	adds	r1, #1
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	e7ee      	b.n	80070e8 <__lshift+0x1c>
 800710a:	2300      	movs	r3, #0
 800710c:	f100 0114 	add.w	r1, r0, #20
 8007110:	f100 0210 	add.w	r2, r0, #16
 8007114:	4618      	mov	r0, r3
 8007116:	4553      	cmp	r3, sl
 8007118:	db37      	blt.n	800718a <__lshift+0xbe>
 800711a:	6920      	ldr	r0, [r4, #16]
 800711c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007120:	f104 0314 	add.w	r3, r4, #20
 8007124:	f019 091f 	ands.w	r9, r9, #31
 8007128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800712c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007130:	d02f      	beq.n	8007192 <__lshift+0xc6>
 8007132:	f1c9 0e20 	rsb	lr, r9, #32
 8007136:	468a      	mov	sl, r1
 8007138:	f04f 0c00 	mov.w	ip, #0
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	fa02 f209 	lsl.w	r2, r2, r9
 8007142:	ea42 020c 	orr.w	r2, r2, ip
 8007146:	f84a 2b04 	str.w	r2, [sl], #4
 800714a:	f853 2b04 	ldr.w	r2, [r3], #4
 800714e:	4298      	cmp	r0, r3
 8007150:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007154:	d8f2      	bhi.n	800713c <__lshift+0x70>
 8007156:	1b03      	subs	r3, r0, r4
 8007158:	3b15      	subs	r3, #21
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	3304      	adds	r3, #4
 8007160:	f104 0215 	add.w	r2, r4, #21
 8007164:	4290      	cmp	r0, r2
 8007166:	bf38      	it	cc
 8007168:	2304      	movcc	r3, #4
 800716a:	f841 c003 	str.w	ip, [r1, r3]
 800716e:	f1bc 0f00 	cmp.w	ip, #0
 8007172:	d001      	beq.n	8007178 <__lshift+0xac>
 8007174:	f108 0602 	add.w	r6, r8, #2
 8007178:	3e01      	subs	r6, #1
 800717a:	4638      	mov	r0, r7
 800717c:	612e      	str	r6, [r5, #16]
 800717e:	4621      	mov	r1, r4
 8007180:	f7ff fd88 	bl	8006c94 <_Bfree>
 8007184:	4628      	mov	r0, r5
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	f842 0f04 	str.w	r0, [r2, #4]!
 800718e:	3301      	adds	r3, #1
 8007190:	e7c1      	b.n	8007116 <__lshift+0x4a>
 8007192:	3904      	subs	r1, #4
 8007194:	f853 2b04 	ldr.w	r2, [r3], #4
 8007198:	f841 2f04 	str.w	r2, [r1, #4]!
 800719c:	4298      	cmp	r0, r3
 800719e:	d8f9      	bhi.n	8007194 <__lshift+0xc8>
 80071a0:	e7ea      	b.n	8007178 <__lshift+0xac>
 80071a2:	bf00      	nop
 80071a4:	080086a0 	.word	0x080086a0
 80071a8:	08008743 	.word	0x08008743

080071ac <__mcmp>:
 80071ac:	b530      	push	{r4, r5, lr}
 80071ae:	6902      	ldr	r2, [r0, #16]
 80071b0:	690c      	ldr	r4, [r1, #16]
 80071b2:	1b12      	subs	r2, r2, r4
 80071b4:	d10e      	bne.n	80071d4 <__mcmp+0x28>
 80071b6:	f100 0314 	add.w	r3, r0, #20
 80071ba:	3114      	adds	r1, #20
 80071bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071cc:	42a5      	cmp	r5, r4
 80071ce:	d003      	beq.n	80071d8 <__mcmp+0x2c>
 80071d0:	d305      	bcc.n	80071de <__mcmp+0x32>
 80071d2:	2201      	movs	r2, #1
 80071d4:	4610      	mov	r0, r2
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	4283      	cmp	r3, r0
 80071da:	d3f3      	bcc.n	80071c4 <__mcmp+0x18>
 80071dc:	e7fa      	b.n	80071d4 <__mcmp+0x28>
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	e7f7      	b.n	80071d4 <__mcmp+0x28>

080071e4 <__mdiff>:
 80071e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	460c      	mov	r4, r1
 80071ea:	4606      	mov	r6, r0
 80071ec:	4611      	mov	r1, r2
 80071ee:	4620      	mov	r0, r4
 80071f0:	4690      	mov	r8, r2
 80071f2:	f7ff ffdb 	bl	80071ac <__mcmp>
 80071f6:	1e05      	subs	r5, r0, #0
 80071f8:	d110      	bne.n	800721c <__mdiff+0x38>
 80071fa:	4629      	mov	r1, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7ff fd09 	bl	8006c14 <_Balloc>
 8007202:	b930      	cbnz	r0, 8007212 <__mdiff+0x2e>
 8007204:	4b3a      	ldr	r3, [pc, #232]	; (80072f0 <__mdiff+0x10c>)
 8007206:	4602      	mov	r2, r0
 8007208:	f240 2132 	movw	r1, #562	; 0x232
 800720c:	4839      	ldr	r0, [pc, #228]	; (80072f4 <__mdiff+0x110>)
 800720e:	f000 faa9 	bl	8007764 <__assert_func>
 8007212:	2301      	movs	r3, #1
 8007214:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	bfa4      	itt	ge
 800721e:	4643      	movge	r3, r8
 8007220:	46a0      	movge	r8, r4
 8007222:	4630      	mov	r0, r6
 8007224:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007228:	bfa6      	itte	ge
 800722a:	461c      	movge	r4, r3
 800722c:	2500      	movge	r5, #0
 800722e:	2501      	movlt	r5, #1
 8007230:	f7ff fcf0 	bl	8006c14 <_Balloc>
 8007234:	b920      	cbnz	r0, 8007240 <__mdiff+0x5c>
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <__mdiff+0x10c>)
 8007238:	4602      	mov	r2, r0
 800723a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800723e:	e7e5      	b.n	800720c <__mdiff+0x28>
 8007240:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007244:	6926      	ldr	r6, [r4, #16]
 8007246:	60c5      	str	r5, [r0, #12]
 8007248:	f104 0914 	add.w	r9, r4, #20
 800724c:	f108 0514 	add.w	r5, r8, #20
 8007250:	f100 0e14 	add.w	lr, r0, #20
 8007254:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007258:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800725c:	f108 0210 	add.w	r2, r8, #16
 8007260:	46f2      	mov	sl, lr
 8007262:	2100      	movs	r1, #0
 8007264:	f859 3b04 	ldr.w	r3, [r9], #4
 8007268:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800726c:	fa1f f883 	uxth.w	r8, r3
 8007270:	fa11 f18b 	uxtah	r1, r1, fp
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	eba1 0808 	sub.w	r8, r1, r8
 800727a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800727e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007282:	fa1f f888 	uxth.w	r8, r8
 8007286:	1419      	asrs	r1, r3, #16
 8007288:	454e      	cmp	r6, r9
 800728a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800728e:	f84a 3b04 	str.w	r3, [sl], #4
 8007292:	d8e7      	bhi.n	8007264 <__mdiff+0x80>
 8007294:	1b33      	subs	r3, r6, r4
 8007296:	3b15      	subs	r3, #21
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	3304      	adds	r3, #4
 800729e:	3415      	adds	r4, #21
 80072a0:	42a6      	cmp	r6, r4
 80072a2:	bf38      	it	cc
 80072a4:	2304      	movcc	r3, #4
 80072a6:	441d      	add	r5, r3
 80072a8:	4473      	add	r3, lr
 80072aa:	469e      	mov	lr, r3
 80072ac:	462e      	mov	r6, r5
 80072ae:	4566      	cmp	r6, ip
 80072b0:	d30e      	bcc.n	80072d0 <__mdiff+0xec>
 80072b2:	f10c 0203 	add.w	r2, ip, #3
 80072b6:	1b52      	subs	r2, r2, r5
 80072b8:	f022 0203 	bic.w	r2, r2, #3
 80072bc:	3d03      	subs	r5, #3
 80072be:	45ac      	cmp	ip, r5
 80072c0:	bf38      	it	cc
 80072c2:	2200      	movcc	r2, #0
 80072c4:	441a      	add	r2, r3
 80072c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072ca:	b17b      	cbz	r3, 80072ec <__mdiff+0x108>
 80072cc:	6107      	str	r7, [r0, #16]
 80072ce:	e7a3      	b.n	8007218 <__mdiff+0x34>
 80072d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80072d4:	fa11 f288 	uxtah	r2, r1, r8
 80072d8:	1414      	asrs	r4, r2, #16
 80072da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072de:	b292      	uxth	r2, r2
 80072e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072e4:	f84e 2b04 	str.w	r2, [lr], #4
 80072e8:	1421      	asrs	r1, r4, #16
 80072ea:	e7e0      	b.n	80072ae <__mdiff+0xca>
 80072ec:	3f01      	subs	r7, #1
 80072ee:	e7ea      	b.n	80072c6 <__mdiff+0xe2>
 80072f0:	080086a0 	.word	0x080086a0
 80072f4:	08008743 	.word	0x08008743

080072f8 <__ulp>:
 80072f8:	b082      	sub	sp, #8
 80072fa:	ed8d 0b00 	vstr	d0, [sp]
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	4912      	ldr	r1, [pc, #72]	; (800734c <__ulp+0x54>)
 8007302:	4019      	ands	r1, r3
 8007304:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007308:	2900      	cmp	r1, #0
 800730a:	dd05      	ble.n	8007318 <__ulp+0x20>
 800730c:	2200      	movs	r2, #0
 800730e:	460b      	mov	r3, r1
 8007310:	ec43 2b10 	vmov	d0, r2, r3
 8007314:	b002      	add	sp, #8
 8007316:	4770      	bx	lr
 8007318:	4249      	negs	r1, r1
 800731a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800731e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	da04      	bge.n	8007336 <__ulp+0x3e>
 800732c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007330:	fa41 f300 	asr.w	r3, r1, r0
 8007334:	e7ec      	b.n	8007310 <__ulp+0x18>
 8007336:	f1a0 0114 	sub.w	r1, r0, #20
 800733a:	291e      	cmp	r1, #30
 800733c:	bfda      	itte	le
 800733e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007342:	fa20 f101 	lsrle.w	r1, r0, r1
 8007346:	2101      	movgt	r1, #1
 8007348:	460a      	mov	r2, r1
 800734a:	e7e1      	b.n	8007310 <__ulp+0x18>
 800734c:	7ff00000 	.word	0x7ff00000

08007350 <__b2d>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	6905      	ldr	r5, [r0, #16]
 8007354:	f100 0714 	add.w	r7, r0, #20
 8007358:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800735c:	1f2e      	subs	r6, r5, #4
 800735e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007362:	4620      	mov	r0, r4
 8007364:	f7ff fd48 	bl	8006df8 <__hi0bits>
 8007368:	f1c0 0320 	rsb	r3, r0, #32
 800736c:	280a      	cmp	r0, #10
 800736e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80073ec <__b2d+0x9c>
 8007372:	600b      	str	r3, [r1, #0]
 8007374:	dc14      	bgt.n	80073a0 <__b2d+0x50>
 8007376:	f1c0 0e0b 	rsb	lr, r0, #11
 800737a:	fa24 f10e 	lsr.w	r1, r4, lr
 800737e:	42b7      	cmp	r7, r6
 8007380:	ea41 030c 	orr.w	r3, r1, ip
 8007384:	bf34      	ite	cc
 8007386:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800738a:	2100      	movcs	r1, #0
 800738c:	3015      	adds	r0, #21
 800738e:	fa04 f000 	lsl.w	r0, r4, r0
 8007392:	fa21 f10e 	lsr.w	r1, r1, lr
 8007396:	ea40 0201 	orr.w	r2, r0, r1
 800739a:	ec43 2b10 	vmov	d0, r2, r3
 800739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a0:	42b7      	cmp	r7, r6
 80073a2:	bf3a      	itte	cc
 80073a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80073a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80073ac:	2100      	movcs	r1, #0
 80073ae:	380b      	subs	r0, #11
 80073b0:	d017      	beq.n	80073e2 <__b2d+0x92>
 80073b2:	f1c0 0c20 	rsb	ip, r0, #32
 80073b6:	fa04 f500 	lsl.w	r5, r4, r0
 80073ba:	42be      	cmp	r6, r7
 80073bc:	fa21 f40c 	lsr.w	r4, r1, ip
 80073c0:	ea45 0504 	orr.w	r5, r5, r4
 80073c4:	bf8c      	ite	hi
 80073c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80073ca:	2400      	movls	r4, #0
 80073cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80073d0:	fa01 f000 	lsl.w	r0, r1, r0
 80073d4:	fa24 f40c 	lsr.w	r4, r4, ip
 80073d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80073dc:	ea40 0204 	orr.w	r2, r0, r4
 80073e0:	e7db      	b.n	800739a <__b2d+0x4a>
 80073e2:	ea44 030c 	orr.w	r3, r4, ip
 80073e6:	460a      	mov	r2, r1
 80073e8:	e7d7      	b.n	800739a <__b2d+0x4a>
 80073ea:	bf00      	nop
 80073ec:	3ff00000 	.word	0x3ff00000

080073f0 <__d2b>:
 80073f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4689      	mov	r9, r1
 80073f6:	2101      	movs	r1, #1
 80073f8:	ec57 6b10 	vmov	r6, r7, d0
 80073fc:	4690      	mov	r8, r2
 80073fe:	f7ff fc09 	bl	8006c14 <_Balloc>
 8007402:	4604      	mov	r4, r0
 8007404:	b930      	cbnz	r0, 8007414 <__d2b+0x24>
 8007406:	4602      	mov	r2, r0
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <__d2b+0xb0>)
 800740a:	4826      	ldr	r0, [pc, #152]	; (80074a4 <__d2b+0xb4>)
 800740c:	f240 310a 	movw	r1, #778	; 0x30a
 8007410:	f000 f9a8 	bl	8007764 <__assert_func>
 8007414:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800741c:	bb35      	cbnz	r5, 800746c <__d2b+0x7c>
 800741e:	2e00      	cmp	r6, #0
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	d028      	beq.n	8007476 <__d2b+0x86>
 8007424:	4668      	mov	r0, sp
 8007426:	9600      	str	r6, [sp, #0]
 8007428:	f7ff fd06 	bl	8006e38 <__lo0bits>
 800742c:	9900      	ldr	r1, [sp, #0]
 800742e:	b300      	cbz	r0, 8007472 <__d2b+0x82>
 8007430:	9a01      	ldr	r2, [sp, #4]
 8007432:	f1c0 0320 	rsb	r3, r0, #32
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	430b      	orrs	r3, r1
 800743c:	40c2      	lsrs	r2, r0
 800743e:	6163      	str	r3, [r4, #20]
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	61a3      	str	r3, [r4, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	bf14      	ite	ne
 800744a:	2202      	movne	r2, #2
 800744c:	2201      	moveq	r2, #1
 800744e:	6122      	str	r2, [r4, #16]
 8007450:	b1d5      	cbz	r5, 8007488 <__d2b+0x98>
 8007452:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007456:	4405      	add	r5, r0
 8007458:	f8c9 5000 	str.w	r5, [r9]
 800745c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007460:	f8c8 0000 	str.w	r0, [r8]
 8007464:	4620      	mov	r0, r4
 8007466:	b003      	add	sp, #12
 8007468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800746c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007470:	e7d5      	b.n	800741e <__d2b+0x2e>
 8007472:	6161      	str	r1, [r4, #20]
 8007474:	e7e5      	b.n	8007442 <__d2b+0x52>
 8007476:	a801      	add	r0, sp, #4
 8007478:	f7ff fcde 	bl	8006e38 <__lo0bits>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	6163      	str	r3, [r4, #20]
 8007480:	2201      	movs	r2, #1
 8007482:	6122      	str	r2, [r4, #16]
 8007484:	3020      	adds	r0, #32
 8007486:	e7e3      	b.n	8007450 <__d2b+0x60>
 8007488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800748c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007490:	f8c9 0000 	str.w	r0, [r9]
 8007494:	6918      	ldr	r0, [r3, #16]
 8007496:	f7ff fcaf 	bl	8006df8 <__hi0bits>
 800749a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800749e:	e7df      	b.n	8007460 <__d2b+0x70>
 80074a0:	080086a0 	.word	0x080086a0
 80074a4:	08008743 	.word	0x08008743

080074a8 <__ratio>:
 80074a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4688      	mov	r8, r1
 80074ae:	4669      	mov	r1, sp
 80074b0:	4681      	mov	r9, r0
 80074b2:	f7ff ff4d 	bl	8007350 <__b2d>
 80074b6:	a901      	add	r1, sp, #4
 80074b8:	4640      	mov	r0, r8
 80074ba:	ec55 4b10 	vmov	r4, r5, d0
 80074be:	f7ff ff47 	bl	8007350 <__b2d>
 80074c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80074ca:	eba3 0c02 	sub.w	ip, r3, r2
 80074ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80074d8:	ec51 0b10 	vmov	r0, r1, d0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bfd6      	itet	le
 80074e0:	460a      	movle	r2, r1
 80074e2:	462a      	movgt	r2, r5
 80074e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074e8:	468b      	mov	fp, r1
 80074ea:	462f      	mov	r7, r5
 80074ec:	bfd4      	ite	le
 80074ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80074f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074f6:	4620      	mov	r0, r4
 80074f8:	ee10 2a10 	vmov	r2, s0
 80074fc:	465b      	mov	r3, fp
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f9 f9c4 	bl	800088c <__aeabi_ddiv>
 8007504:	ec41 0b10 	vmov	d0, r0, r1
 8007508:	b003      	add	sp, #12
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800750e <__copybits>:
 800750e:	3901      	subs	r1, #1
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	1149      	asrs	r1, r1, #5
 8007514:	6914      	ldr	r4, [r2, #16]
 8007516:	3101      	adds	r1, #1
 8007518:	f102 0314 	add.w	r3, r2, #20
 800751c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007524:	1f05      	subs	r5, r0, #4
 8007526:	42a3      	cmp	r3, r4
 8007528:	d30c      	bcc.n	8007544 <__copybits+0x36>
 800752a:	1aa3      	subs	r3, r4, r2
 800752c:	3b11      	subs	r3, #17
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	3211      	adds	r2, #17
 8007534:	42a2      	cmp	r2, r4
 8007536:	bf88      	it	hi
 8007538:	2300      	movhi	r3, #0
 800753a:	4418      	add	r0, r3
 800753c:	2300      	movs	r3, #0
 800753e:	4288      	cmp	r0, r1
 8007540:	d305      	bcc.n	800754e <__copybits+0x40>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	f853 6b04 	ldr.w	r6, [r3], #4
 8007548:	f845 6f04 	str.w	r6, [r5, #4]!
 800754c:	e7eb      	b.n	8007526 <__copybits+0x18>
 800754e:	f840 3b04 	str.w	r3, [r0], #4
 8007552:	e7f4      	b.n	800753e <__copybits+0x30>

08007554 <__any_on>:
 8007554:	f100 0214 	add.w	r2, r0, #20
 8007558:	6900      	ldr	r0, [r0, #16]
 800755a:	114b      	asrs	r3, r1, #5
 800755c:	4298      	cmp	r0, r3
 800755e:	b510      	push	{r4, lr}
 8007560:	db11      	blt.n	8007586 <__any_on+0x32>
 8007562:	dd0a      	ble.n	800757a <__any_on+0x26>
 8007564:	f011 011f 	ands.w	r1, r1, #31
 8007568:	d007      	beq.n	800757a <__any_on+0x26>
 800756a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800756e:	fa24 f001 	lsr.w	r0, r4, r1
 8007572:	fa00 f101 	lsl.w	r1, r0, r1
 8007576:	428c      	cmp	r4, r1
 8007578:	d10b      	bne.n	8007592 <__any_on+0x3e>
 800757a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800757e:	4293      	cmp	r3, r2
 8007580:	d803      	bhi.n	800758a <__any_on+0x36>
 8007582:	2000      	movs	r0, #0
 8007584:	bd10      	pop	{r4, pc}
 8007586:	4603      	mov	r3, r0
 8007588:	e7f7      	b.n	800757a <__any_on+0x26>
 800758a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800758e:	2900      	cmp	r1, #0
 8007590:	d0f5      	beq.n	800757e <__any_on+0x2a>
 8007592:	2001      	movs	r0, #1
 8007594:	e7f6      	b.n	8007584 <__any_on+0x30>

08007596 <_calloc_r>:
 8007596:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007598:	fba1 2402 	umull	r2, r4, r1, r2
 800759c:	b94c      	cbnz	r4, 80075b2 <_calloc_r+0x1c>
 800759e:	4611      	mov	r1, r2
 80075a0:	9201      	str	r2, [sp, #4]
 80075a2:	f000 f82f 	bl	8007604 <_malloc_r>
 80075a6:	9a01      	ldr	r2, [sp, #4]
 80075a8:	4605      	mov	r5, r0
 80075aa:	b930      	cbnz	r0, 80075ba <_calloc_r+0x24>
 80075ac:	4628      	mov	r0, r5
 80075ae:	b003      	add	sp, #12
 80075b0:	bd30      	pop	{r4, r5, pc}
 80075b2:	220c      	movs	r2, #12
 80075b4:	6002      	str	r2, [r0, #0]
 80075b6:	2500      	movs	r5, #0
 80075b8:	e7f8      	b.n	80075ac <_calloc_r+0x16>
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7fe f95a 	bl	8005874 <memset>
 80075c0:	e7f4      	b.n	80075ac <_calloc_r+0x16>
	...

080075c4 <sbrk_aligned>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4e0e      	ldr	r6, [pc, #56]	; (8007600 <sbrk_aligned+0x3c>)
 80075c8:	460c      	mov	r4, r1
 80075ca:	6831      	ldr	r1, [r6, #0]
 80075cc:	4605      	mov	r5, r0
 80075ce:	b911      	cbnz	r1, 80075d6 <sbrk_aligned+0x12>
 80075d0:	f000 f896 	bl	8007700 <_sbrk_r>
 80075d4:	6030      	str	r0, [r6, #0]
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f891 	bl	8007700 <_sbrk_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d00a      	beq.n	80075f8 <sbrk_aligned+0x34>
 80075e2:	1cc4      	adds	r4, r0, #3
 80075e4:	f024 0403 	bic.w	r4, r4, #3
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	d007      	beq.n	80075fc <sbrk_aligned+0x38>
 80075ec:	1a21      	subs	r1, r4, r0
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f886 	bl	8007700 <_sbrk_r>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d101      	bne.n	80075fc <sbrk_aligned+0x38>
 80075f8:	f04f 34ff 	mov.w	r4, #4294967295
 80075fc:	4620      	mov	r0, r4
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	20000344 	.word	0x20000344

08007604 <_malloc_r>:
 8007604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007608:	1ccd      	adds	r5, r1, #3
 800760a:	f025 0503 	bic.w	r5, r5, #3
 800760e:	3508      	adds	r5, #8
 8007610:	2d0c      	cmp	r5, #12
 8007612:	bf38      	it	cc
 8007614:	250c      	movcc	r5, #12
 8007616:	2d00      	cmp	r5, #0
 8007618:	4607      	mov	r7, r0
 800761a:	db01      	blt.n	8007620 <_malloc_r+0x1c>
 800761c:	42a9      	cmp	r1, r5
 800761e:	d905      	bls.n	800762c <_malloc_r+0x28>
 8007620:	230c      	movs	r3, #12
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	2600      	movs	r6, #0
 8007626:	4630      	mov	r0, r6
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	4e2e      	ldr	r6, [pc, #184]	; (80076e8 <_malloc_r+0xe4>)
 800762e:	f000 f8d1 	bl	80077d4 <__malloc_lock>
 8007632:	6833      	ldr	r3, [r6, #0]
 8007634:	461c      	mov	r4, r3
 8007636:	bb34      	cbnz	r4, 8007686 <_malloc_r+0x82>
 8007638:	4629      	mov	r1, r5
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff ffc2 	bl	80075c4 <sbrk_aligned>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	4604      	mov	r4, r0
 8007644:	d14d      	bne.n	80076e2 <_malloc_r+0xde>
 8007646:	6834      	ldr	r4, [r6, #0]
 8007648:	4626      	mov	r6, r4
 800764a:	2e00      	cmp	r6, #0
 800764c:	d140      	bne.n	80076d0 <_malloc_r+0xcc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	4631      	mov	r1, r6
 8007652:	4638      	mov	r0, r7
 8007654:	eb04 0803 	add.w	r8, r4, r3
 8007658:	f000 f852 	bl	8007700 <_sbrk_r>
 800765c:	4580      	cmp	r8, r0
 800765e:	d13a      	bne.n	80076d6 <_malloc_r+0xd2>
 8007660:	6821      	ldr	r1, [r4, #0]
 8007662:	3503      	adds	r5, #3
 8007664:	1a6d      	subs	r5, r5, r1
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	4629      	mov	r1, r5
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ffa5 	bl	80075c4 <sbrk_aligned>
 800767a:	3001      	adds	r0, #1
 800767c:	d02b      	beq.n	80076d6 <_malloc_r+0xd2>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	442b      	add	r3, r5
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	e00e      	b.n	80076a4 <_malloc_r+0xa0>
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	1b52      	subs	r2, r2, r5
 800768a:	d41e      	bmi.n	80076ca <_malloc_r+0xc6>
 800768c:	2a0b      	cmp	r2, #11
 800768e:	d916      	bls.n	80076be <_malloc_r+0xba>
 8007690:	1961      	adds	r1, r4, r5
 8007692:	42a3      	cmp	r3, r4
 8007694:	6025      	str	r5, [r4, #0]
 8007696:	bf18      	it	ne
 8007698:	6059      	strne	r1, [r3, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	bf08      	it	eq
 800769e:	6031      	streq	r1, [r6, #0]
 80076a0:	5162      	str	r2, [r4, r5]
 80076a2:	604b      	str	r3, [r1, #4]
 80076a4:	4638      	mov	r0, r7
 80076a6:	f104 060b 	add.w	r6, r4, #11
 80076aa:	f000 f899 	bl	80077e0 <__malloc_unlock>
 80076ae:	f026 0607 	bic.w	r6, r6, #7
 80076b2:	1d23      	adds	r3, r4, #4
 80076b4:	1af2      	subs	r2, r6, r3
 80076b6:	d0b6      	beq.n	8007626 <_malloc_r+0x22>
 80076b8:	1b9b      	subs	r3, r3, r6
 80076ba:	50a3      	str	r3, [r4, r2]
 80076bc:	e7b3      	b.n	8007626 <_malloc_r+0x22>
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	bf0c      	ite	eq
 80076c4:	6032      	streq	r2, [r6, #0]
 80076c6:	605a      	strne	r2, [r3, #4]
 80076c8:	e7ec      	b.n	80076a4 <_malloc_r+0xa0>
 80076ca:	4623      	mov	r3, r4
 80076cc:	6864      	ldr	r4, [r4, #4]
 80076ce:	e7b2      	b.n	8007636 <_malloc_r+0x32>
 80076d0:	4634      	mov	r4, r6
 80076d2:	6876      	ldr	r6, [r6, #4]
 80076d4:	e7b9      	b.n	800764a <_malloc_r+0x46>
 80076d6:	230c      	movs	r3, #12
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	4638      	mov	r0, r7
 80076dc:	f000 f880 	bl	80077e0 <__malloc_unlock>
 80076e0:	e7a1      	b.n	8007626 <_malloc_r+0x22>
 80076e2:	6025      	str	r5, [r4, #0]
 80076e4:	e7de      	b.n	80076a4 <_malloc_r+0xa0>
 80076e6:	bf00      	nop
 80076e8:	20000340 	.word	0x20000340
 80076ec:	00000000 	.word	0x00000000

080076f0 <nan>:
 80076f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80076f8 <nan+0x8>
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	00000000 	.word	0x00000000
 80076fc:	7ff80000 	.word	0x7ff80000

08007700 <_sbrk_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d06      	ldr	r5, [pc, #24]	; (800771c <_sbrk_r+0x1c>)
 8007704:	2300      	movs	r3, #0
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fa fa16 	bl	8001b3c <_sbrk>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_sbrk_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_sbrk_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20000348 	.word	0x20000348

08007720 <strncmp>:
 8007720:	b510      	push	{r4, lr}
 8007722:	b17a      	cbz	r2, 8007744 <strncmp+0x24>
 8007724:	4603      	mov	r3, r0
 8007726:	3901      	subs	r1, #1
 8007728:	1884      	adds	r4, r0, r2
 800772a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800772e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007732:	4290      	cmp	r0, r2
 8007734:	d101      	bne.n	800773a <strncmp+0x1a>
 8007736:	42a3      	cmp	r3, r4
 8007738:	d101      	bne.n	800773e <strncmp+0x1e>
 800773a:	1a80      	subs	r0, r0, r2
 800773c:	bd10      	pop	{r4, pc}
 800773e:	2800      	cmp	r0, #0
 8007740:	d1f3      	bne.n	800772a <strncmp+0xa>
 8007742:	e7fa      	b.n	800773a <strncmp+0x1a>
 8007744:	4610      	mov	r0, r2
 8007746:	e7f9      	b.n	800773c <strncmp+0x1c>

08007748 <__ascii_wctomb>:
 8007748:	b149      	cbz	r1, 800775e <__ascii_wctomb+0x16>
 800774a:	2aff      	cmp	r2, #255	; 0xff
 800774c:	bf85      	ittet	hi
 800774e:	238a      	movhi	r3, #138	; 0x8a
 8007750:	6003      	strhi	r3, [r0, #0]
 8007752:	700a      	strbls	r2, [r1, #0]
 8007754:	f04f 30ff 	movhi.w	r0, #4294967295
 8007758:	bf98      	it	ls
 800775a:	2001      	movls	r0, #1
 800775c:	4770      	bx	lr
 800775e:	4608      	mov	r0, r1
 8007760:	4770      	bx	lr
	...

08007764 <__assert_func>:
 8007764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007766:	4614      	mov	r4, r2
 8007768:	461a      	mov	r2, r3
 800776a:	4b09      	ldr	r3, [pc, #36]	; (8007790 <__assert_func+0x2c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4605      	mov	r5, r0
 8007770:	68d8      	ldr	r0, [r3, #12]
 8007772:	b14c      	cbz	r4, 8007788 <__assert_func+0x24>
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <__assert_func+0x30>)
 8007776:	9100      	str	r1, [sp, #0]
 8007778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800777c:	4906      	ldr	r1, [pc, #24]	; (8007798 <__assert_func+0x34>)
 800777e:	462b      	mov	r3, r5
 8007780:	f000 f80e 	bl	80077a0 <fiprintf>
 8007784:	f000 fc2c 	bl	8007fe0 <abort>
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <__assert_func+0x38>)
 800778a:	461c      	mov	r4, r3
 800778c:	e7f3      	b.n	8007776 <__assert_func+0x12>
 800778e:	bf00      	nop
 8007790:	2000000c 	.word	0x2000000c
 8007794:	0800889c 	.word	0x0800889c
 8007798:	080088a9 	.word	0x080088a9
 800779c:	080088d7 	.word	0x080088d7

080077a0 <fiprintf>:
 80077a0:	b40e      	push	{r1, r2, r3}
 80077a2:	b503      	push	{r0, r1, lr}
 80077a4:	4601      	mov	r1, r0
 80077a6:	ab03      	add	r3, sp, #12
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <fiprintf+0x20>)
 80077aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ae:	6800      	ldr	r0, [r0, #0]
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	f000 f891 	bl	80078d8 <_vfiprintf_r>
 80077b6:	b002      	add	sp, #8
 80077b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077bc:	b003      	add	sp, #12
 80077be:	4770      	bx	lr
 80077c0:	2000000c 	.word	0x2000000c

080077c4 <malloc>:
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <malloc+0xc>)
 80077c6:	4601      	mov	r1, r0
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f7ff bf1b 	b.w	8007604 <_malloc_r>
 80077ce:	bf00      	nop
 80077d0:	2000000c 	.word	0x2000000c

080077d4 <__malloc_lock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__malloc_lock+0x8>)
 80077d6:	f000 bdc3 	b.w	8008360 <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	2000034c 	.word	0x2000034c

080077e0 <__malloc_unlock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__malloc_unlock+0x8>)
 80077e2:	f000 bdbe 	b.w	8008362 <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	2000034c 	.word	0x2000034c

080077ec <_free_r>:
 80077ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d044      	beq.n	800787c <_free_r+0x90>
 80077f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f6:	9001      	str	r0, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f1a1 0404 	sub.w	r4, r1, #4
 80077fe:	bfb8      	it	lt
 8007800:	18e4      	addlt	r4, r4, r3
 8007802:	f7ff ffe7 	bl	80077d4 <__malloc_lock>
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <_free_r+0x94>)
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	b933      	cbnz	r3, 800781c <_free_r+0x30>
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007818:	f7ff bfe2 	b.w	80077e0 <__malloc_unlock>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x46>
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	1961      	adds	r1, r4, r5
 8007824:	428b      	cmp	r3, r1
 8007826:	bf01      	itttt	eq
 8007828:	6819      	ldreq	r1, [r3, #0]
 800782a:	685b      	ldreq	r3, [r3, #4]
 800782c:	1949      	addeq	r1, r1, r5
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	e7ed      	b.n	800780e <_free_r+0x22>
 8007832:	461a      	mov	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b10b      	cbz	r3, 800783c <_free_r+0x50>
 8007838:	42a3      	cmp	r3, r4
 800783a:	d9fa      	bls.n	8007832 <_free_r+0x46>
 800783c:	6811      	ldr	r1, [r2, #0]
 800783e:	1855      	adds	r5, r2, r1
 8007840:	42a5      	cmp	r5, r4
 8007842:	d10b      	bne.n	800785c <_free_r+0x70>
 8007844:	6824      	ldr	r4, [r4, #0]
 8007846:	4421      	add	r1, r4
 8007848:	1854      	adds	r4, r2, r1
 800784a:	42a3      	cmp	r3, r4
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	d1e0      	bne.n	8007812 <_free_r+0x26>
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	6053      	str	r3, [r2, #4]
 8007856:	4421      	add	r1, r4
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	e7da      	b.n	8007812 <_free_r+0x26>
 800785c:	d902      	bls.n	8007864 <_free_r+0x78>
 800785e:	230c      	movs	r3, #12
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	e7d6      	b.n	8007812 <_free_r+0x26>
 8007864:	6825      	ldr	r5, [r4, #0]
 8007866:	1961      	adds	r1, r4, r5
 8007868:	428b      	cmp	r3, r1
 800786a:	bf04      	itt	eq
 800786c:	6819      	ldreq	r1, [r3, #0]
 800786e:	685b      	ldreq	r3, [r3, #4]
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	bf04      	itt	eq
 8007874:	1949      	addeq	r1, r1, r5
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	6054      	str	r4, [r2, #4]
 800787a:	e7ca      	b.n	8007812 <_free_r+0x26>
 800787c:	b003      	add	sp, #12
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	20000340 	.word	0x20000340

08007884 <__sfputc_r>:
 8007884:	6893      	ldr	r3, [r2, #8]
 8007886:	3b01      	subs	r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	b410      	push	{r4}
 800788c:	6093      	str	r3, [r2, #8]
 800788e:	da08      	bge.n	80078a2 <__sfputc_r+0x1e>
 8007890:	6994      	ldr	r4, [r2, #24]
 8007892:	42a3      	cmp	r3, r4
 8007894:	db01      	blt.n	800789a <__sfputc_r+0x16>
 8007896:	290a      	cmp	r1, #10
 8007898:	d103      	bne.n	80078a2 <__sfputc_r+0x1e>
 800789a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800789e:	f000 badf 	b.w	8007e60 <__swbuf_r>
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	1c58      	adds	r0, r3, #1
 80078a6:	6010      	str	r0, [r2, #0]
 80078a8:	7019      	strb	r1, [r3, #0]
 80078aa:	4608      	mov	r0, r1
 80078ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <__sfputs_r>:
 80078b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	18d5      	adds	r5, r2, r3
 80078bc:	42ac      	cmp	r4, r5
 80078be:	d101      	bne.n	80078c4 <__sfputs_r+0x12>
 80078c0:	2000      	movs	r0, #0
 80078c2:	e007      	b.n	80078d4 <__sfputs_r+0x22>
 80078c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c8:	463a      	mov	r2, r7
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff ffda 	bl	8007884 <__sfputc_r>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d1f3      	bne.n	80078bc <__sfputs_r+0xa>
 80078d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078d8 <_vfiprintf_r>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	460d      	mov	r5, r1
 80078de:	b09d      	sub	sp, #116	; 0x74
 80078e0:	4614      	mov	r4, r2
 80078e2:	4698      	mov	r8, r3
 80078e4:	4606      	mov	r6, r0
 80078e6:	b118      	cbz	r0, 80078f0 <_vfiprintf_r+0x18>
 80078e8:	6983      	ldr	r3, [r0, #24]
 80078ea:	b90b      	cbnz	r3, 80078f0 <_vfiprintf_r+0x18>
 80078ec:	f000 fc9a 	bl	8008224 <__sinit>
 80078f0:	4b89      	ldr	r3, [pc, #548]	; (8007b18 <_vfiprintf_r+0x240>)
 80078f2:	429d      	cmp	r5, r3
 80078f4:	d11b      	bne.n	800792e <_vfiprintf_r+0x56>
 80078f6:	6875      	ldr	r5, [r6, #4]
 80078f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fa:	07d9      	lsls	r1, r3, #31
 80078fc:	d405      	bmi.n	800790a <_vfiprintf_r+0x32>
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d402      	bmi.n	800790a <_vfiprintf_r+0x32>
 8007904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007906:	f000 fd2b 	bl	8008360 <__retarget_lock_acquire_recursive>
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	071b      	lsls	r3, r3, #28
 800790e:	d501      	bpl.n	8007914 <_vfiprintf_r+0x3c>
 8007910:	692b      	ldr	r3, [r5, #16]
 8007912:	b9eb      	cbnz	r3, 8007950 <_vfiprintf_r+0x78>
 8007914:	4629      	mov	r1, r5
 8007916:	4630      	mov	r0, r6
 8007918:	f000 faf4 	bl	8007f04 <__swsetup_r>
 800791c:	b1c0      	cbz	r0, 8007950 <_vfiprintf_r+0x78>
 800791e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007920:	07dc      	lsls	r4, r3, #31
 8007922:	d50e      	bpl.n	8007942 <_vfiprintf_r+0x6a>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	b01d      	add	sp, #116	; 0x74
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	4b7b      	ldr	r3, [pc, #492]	; (8007b1c <_vfiprintf_r+0x244>)
 8007930:	429d      	cmp	r5, r3
 8007932:	d101      	bne.n	8007938 <_vfiprintf_r+0x60>
 8007934:	68b5      	ldr	r5, [r6, #8]
 8007936:	e7df      	b.n	80078f8 <_vfiprintf_r+0x20>
 8007938:	4b79      	ldr	r3, [pc, #484]	; (8007b20 <_vfiprintf_r+0x248>)
 800793a:	429d      	cmp	r5, r3
 800793c:	bf08      	it	eq
 800793e:	68f5      	ldreq	r5, [r6, #12]
 8007940:	e7da      	b.n	80078f8 <_vfiprintf_r+0x20>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	0598      	lsls	r0, r3, #22
 8007946:	d4ed      	bmi.n	8007924 <_vfiprintf_r+0x4c>
 8007948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794a:	f000 fd0a 	bl	8008362 <__retarget_lock_release_recursive>
 800794e:	e7e9      	b.n	8007924 <_vfiprintf_r+0x4c>
 8007950:	2300      	movs	r3, #0
 8007952:	9309      	str	r3, [sp, #36]	; 0x24
 8007954:	2320      	movs	r3, #32
 8007956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795a:	f8cd 800c 	str.w	r8, [sp, #12]
 800795e:	2330      	movs	r3, #48	; 0x30
 8007960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b24 <_vfiprintf_r+0x24c>
 8007964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007968:	f04f 0901 	mov.w	r9, #1
 800796c:	4623      	mov	r3, r4
 800796e:	469a      	mov	sl, r3
 8007970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007974:	b10a      	cbz	r2, 800797a <_vfiprintf_r+0xa2>
 8007976:	2a25      	cmp	r2, #37	; 0x25
 8007978:	d1f9      	bne.n	800796e <_vfiprintf_r+0x96>
 800797a:	ebba 0b04 	subs.w	fp, sl, r4
 800797e:	d00b      	beq.n	8007998 <_vfiprintf_r+0xc0>
 8007980:	465b      	mov	r3, fp
 8007982:	4622      	mov	r2, r4
 8007984:	4629      	mov	r1, r5
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff ff93 	bl	80078b2 <__sfputs_r>
 800798c:	3001      	adds	r0, #1
 800798e:	f000 80aa 	beq.w	8007ae6 <_vfiprintf_r+0x20e>
 8007992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007994:	445a      	add	r2, fp
 8007996:	9209      	str	r2, [sp, #36]	; 0x24
 8007998:	f89a 3000 	ldrb.w	r3, [sl]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80a2 	beq.w	8007ae6 <_vfiprintf_r+0x20e>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ac:	f10a 0a01 	add.w	sl, sl, #1
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	9307      	str	r3, [sp, #28]
 80079b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b8:	931a      	str	r3, [sp, #104]	; 0x68
 80079ba:	4654      	mov	r4, sl
 80079bc:	2205      	movs	r2, #5
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	4858      	ldr	r0, [pc, #352]	; (8007b24 <_vfiprintf_r+0x24c>)
 80079c4:	f7f8 fc2c 	bl	8000220 <memchr>
 80079c8:	9a04      	ldr	r2, [sp, #16]
 80079ca:	b9d8      	cbnz	r0, 8007a04 <_vfiprintf_r+0x12c>
 80079cc:	06d1      	lsls	r1, r2, #27
 80079ce:	bf44      	itt	mi
 80079d0:	2320      	movmi	r3, #32
 80079d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d6:	0713      	lsls	r3, r2, #28
 80079d8:	bf44      	itt	mi
 80079da:	232b      	movmi	r3, #43	; 0x2b
 80079dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e0:	f89a 3000 	ldrb.w	r3, [sl]
 80079e4:	2b2a      	cmp	r3, #42	; 0x2a
 80079e6:	d015      	beq.n	8007a14 <_vfiprintf_r+0x13c>
 80079e8:	9a07      	ldr	r2, [sp, #28]
 80079ea:	4654      	mov	r4, sl
 80079ec:	2000      	movs	r0, #0
 80079ee:	f04f 0c0a 	mov.w	ip, #10
 80079f2:	4621      	mov	r1, r4
 80079f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f8:	3b30      	subs	r3, #48	; 0x30
 80079fa:	2b09      	cmp	r3, #9
 80079fc:	d94e      	bls.n	8007a9c <_vfiprintf_r+0x1c4>
 80079fe:	b1b0      	cbz	r0, 8007a2e <_vfiprintf_r+0x156>
 8007a00:	9207      	str	r2, [sp, #28]
 8007a02:	e014      	b.n	8007a2e <_vfiprintf_r+0x156>
 8007a04:	eba0 0308 	sub.w	r3, r0, r8
 8007a08:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	46a2      	mov	sl, r4
 8007a12:	e7d2      	b.n	80079ba <_vfiprintf_r+0xe2>
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	1d19      	adds	r1, r3, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	9103      	str	r1, [sp, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bfbb      	ittet	lt
 8007a20:	425b      	neglt	r3, r3
 8007a22:	f042 0202 	orrlt.w	r2, r2, #2
 8007a26:	9307      	strge	r3, [sp, #28]
 8007a28:	9307      	strlt	r3, [sp, #28]
 8007a2a:	bfb8      	it	lt
 8007a2c:	9204      	strlt	r2, [sp, #16]
 8007a2e:	7823      	ldrb	r3, [r4, #0]
 8007a30:	2b2e      	cmp	r3, #46	; 0x2e
 8007a32:	d10c      	bne.n	8007a4e <_vfiprintf_r+0x176>
 8007a34:	7863      	ldrb	r3, [r4, #1]
 8007a36:	2b2a      	cmp	r3, #42	; 0x2a
 8007a38:	d135      	bne.n	8007aa6 <_vfiprintf_r+0x1ce>
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	9203      	str	r2, [sp, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfb8      	it	lt
 8007a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a4a:	3402      	adds	r4, #2
 8007a4c:	9305      	str	r3, [sp, #20]
 8007a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b34 <_vfiprintf_r+0x25c>
 8007a52:	7821      	ldrb	r1, [r4, #0]
 8007a54:	2203      	movs	r2, #3
 8007a56:	4650      	mov	r0, sl
 8007a58:	f7f8 fbe2 	bl	8000220 <memchr>
 8007a5c:	b140      	cbz	r0, 8007a70 <_vfiprintf_r+0x198>
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	eba0 000a 	sub.w	r0, r0, sl
 8007a64:	fa03 f000 	lsl.w	r0, r3, r0
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	4303      	orrs	r3, r0
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a74:	482c      	ldr	r0, [pc, #176]	; (8007b28 <_vfiprintf_r+0x250>)
 8007a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a7a:	2206      	movs	r2, #6
 8007a7c:	f7f8 fbd0 	bl	8000220 <memchr>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d03f      	beq.n	8007b04 <_vfiprintf_r+0x22c>
 8007a84:	4b29      	ldr	r3, [pc, #164]	; (8007b2c <_vfiprintf_r+0x254>)
 8007a86:	bb1b      	cbnz	r3, 8007ad0 <_vfiprintf_r+0x1f8>
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	3307      	adds	r3, #7
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	3308      	adds	r3, #8
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a96:	443b      	add	r3, r7
 8007a98:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9a:	e767      	b.n	800796c <_vfiprintf_r+0x94>
 8007a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7a5      	b.n	80079f2 <_vfiprintf_r+0x11a>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	4619      	mov	r1, r3
 8007aae:	f04f 0c0a 	mov.w	ip, #10
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab8:	3a30      	subs	r2, #48	; 0x30
 8007aba:	2a09      	cmp	r2, #9
 8007abc:	d903      	bls.n	8007ac6 <_vfiprintf_r+0x1ee>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0c5      	beq.n	8007a4e <_vfiprintf_r+0x176>
 8007ac2:	9105      	str	r1, [sp, #20]
 8007ac4:	e7c3      	b.n	8007a4e <_vfiprintf_r+0x176>
 8007ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aca:	4604      	mov	r4, r0
 8007acc:	2301      	movs	r3, #1
 8007ace:	e7f0      	b.n	8007ab2 <_vfiprintf_r+0x1da>
 8007ad0:	ab03      	add	r3, sp, #12
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	462a      	mov	r2, r5
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <_vfiprintf_r+0x258>)
 8007ad8:	a904      	add	r1, sp, #16
 8007ada:	4630      	mov	r0, r6
 8007adc:	f3af 8000 	nop.w
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	1c78      	adds	r0, r7, #1
 8007ae4:	d1d6      	bne.n	8007a94 <_vfiprintf_r+0x1bc>
 8007ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae8:	07d9      	lsls	r1, r3, #31
 8007aea:	d405      	bmi.n	8007af8 <_vfiprintf_r+0x220>
 8007aec:	89ab      	ldrh	r3, [r5, #12]
 8007aee:	059a      	lsls	r2, r3, #22
 8007af0:	d402      	bmi.n	8007af8 <_vfiprintf_r+0x220>
 8007af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007af4:	f000 fc35 	bl	8008362 <__retarget_lock_release_recursive>
 8007af8:	89ab      	ldrh	r3, [r5, #12]
 8007afa:	065b      	lsls	r3, r3, #25
 8007afc:	f53f af12 	bmi.w	8007924 <_vfiprintf_r+0x4c>
 8007b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b02:	e711      	b.n	8007928 <_vfiprintf_r+0x50>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <_vfiprintf_r+0x258>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 f880 	bl	8007c14 <_printf_i>
 8007b14:	e7e4      	b.n	8007ae0 <_vfiprintf_r+0x208>
 8007b16:	bf00      	nop
 8007b18:	08008a2c 	.word	0x08008a2c
 8007b1c:	08008a4c 	.word	0x08008a4c
 8007b20:	08008a0c 	.word	0x08008a0c
 8007b24:	080089d9 	.word	0x080089d9
 8007b28:	080089e3 	.word	0x080089e3
 8007b2c:	00000000 	.word	0x00000000
 8007b30:	080078b3 	.word	0x080078b3
 8007b34:	080089df 	.word	0x080089df

08007b38 <_printf_common>:
 8007b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	4699      	mov	r9, r3
 8007b40:	688a      	ldr	r2, [r1, #8]
 8007b42:	690b      	ldr	r3, [r1, #16]
 8007b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bfb8      	it	lt
 8007b4c:	4613      	movlt	r3, r2
 8007b4e:	6033      	str	r3, [r6, #0]
 8007b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b54:	4607      	mov	r7, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b10a      	cbz	r2, 8007b5e <_printf_common+0x26>
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	0699      	lsls	r1, r3, #26
 8007b62:	bf42      	ittt	mi
 8007b64:	6833      	ldrmi	r3, [r6, #0]
 8007b66:	3302      	addmi	r3, #2
 8007b68:	6033      	strmi	r3, [r6, #0]
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	f015 0506 	ands.w	r5, r5, #6
 8007b70:	d106      	bne.n	8007b80 <_printf_common+0x48>
 8007b72:	f104 0a19 	add.w	sl, r4, #25
 8007b76:	68e3      	ldr	r3, [r4, #12]
 8007b78:	6832      	ldr	r2, [r6, #0]
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	42ab      	cmp	r3, r5
 8007b7e:	dc26      	bgt.n	8007bce <_printf_common+0x96>
 8007b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b84:	1e13      	subs	r3, r2, #0
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	bf18      	it	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	0692      	lsls	r2, r2, #26
 8007b8e:	d42b      	bmi.n	8007be8 <_printf_common+0xb0>
 8007b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b94:	4649      	mov	r1, r9
 8007b96:	4638      	mov	r0, r7
 8007b98:	47c0      	blx	r8
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d01e      	beq.n	8007bdc <_printf_common+0xa4>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	68e5      	ldr	r5, [r4, #12]
 8007ba2:	6832      	ldr	r2, [r6, #0]
 8007ba4:	f003 0306 	and.w	r3, r3, #6
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	bf08      	it	eq
 8007bac:	1aad      	subeq	r5, r5, r2
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	bf0c      	ite	eq
 8007bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb8:	2500      	movne	r5, #0
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bfc4      	itt	gt
 8007bbe:	1a9b      	subgt	r3, r3, r2
 8007bc0:	18ed      	addgt	r5, r5, r3
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	341a      	adds	r4, #26
 8007bc6:	42b5      	cmp	r5, r6
 8007bc8:	d11a      	bne.n	8007c00 <_printf_common+0xc8>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e008      	b.n	8007be0 <_printf_common+0xa8>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	47c0      	blx	r8
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d103      	bne.n	8007be4 <_printf_common+0xac>
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be4:	3501      	adds	r5, #1
 8007be6:	e7c6      	b.n	8007b76 <_printf_common+0x3e>
 8007be8:	18e1      	adds	r1, r4, r3
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	2030      	movs	r0, #48	; 0x30
 8007bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bf2:	4422      	add	r2, r4
 8007bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	e7c7      	b.n	8007b90 <_printf_common+0x58>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4622      	mov	r2, r4
 8007c04:	4649      	mov	r1, r9
 8007c06:	4638      	mov	r0, r7
 8007c08:	47c0      	blx	r8
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d0e6      	beq.n	8007bdc <_printf_common+0xa4>
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7d9      	b.n	8007bc6 <_printf_common+0x8e>
	...

08007c14 <_printf_i>:
 8007c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	7e0f      	ldrb	r7, [r1, #24]
 8007c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c1c:	2f78      	cmp	r7, #120	; 0x78
 8007c1e:	4691      	mov	r9, r2
 8007c20:	4680      	mov	r8, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	469a      	mov	sl, r3
 8007c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c2a:	d807      	bhi.n	8007c3c <_printf_i+0x28>
 8007c2c:	2f62      	cmp	r7, #98	; 0x62
 8007c2e:	d80a      	bhi.n	8007c46 <_printf_i+0x32>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	f000 80d8 	beq.w	8007de6 <_printf_i+0x1d2>
 8007c36:	2f58      	cmp	r7, #88	; 0x58
 8007c38:	f000 80a3 	beq.w	8007d82 <_printf_i+0x16e>
 8007c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c44:	e03a      	b.n	8007cbc <_printf_i+0xa8>
 8007c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c4a:	2b15      	cmp	r3, #21
 8007c4c:	d8f6      	bhi.n	8007c3c <_printf_i+0x28>
 8007c4e:	a101      	add	r1, pc, #4	; (adr r1, 8007c54 <_printf_i+0x40>)
 8007c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cc1 	.word	0x08007cc1
 8007c5c:	08007c3d 	.word	0x08007c3d
 8007c60:	08007c3d 	.word	0x08007c3d
 8007c64:	08007c3d 	.word	0x08007c3d
 8007c68:	08007c3d 	.word	0x08007c3d
 8007c6c:	08007cc1 	.word	0x08007cc1
 8007c70:	08007c3d 	.word	0x08007c3d
 8007c74:	08007c3d 	.word	0x08007c3d
 8007c78:	08007c3d 	.word	0x08007c3d
 8007c7c:	08007c3d 	.word	0x08007c3d
 8007c80:	08007dcd 	.word	0x08007dcd
 8007c84:	08007cf1 	.word	0x08007cf1
 8007c88:	08007daf 	.word	0x08007daf
 8007c8c:	08007c3d 	.word	0x08007c3d
 8007c90:	08007c3d 	.word	0x08007c3d
 8007c94:	08007def 	.word	0x08007def
 8007c98:	08007c3d 	.word	0x08007c3d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c3d 	.word	0x08007c3d
 8007ca4:	08007c3d 	.word	0x08007c3d
 8007ca8:	08007db7 	.word	0x08007db7
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	1d1a      	adds	r2, r3, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	602a      	str	r2, [r5, #0]
 8007cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0a3      	b.n	8007e08 <_printf_i+0x1f4>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	6829      	ldr	r1, [r5, #0]
 8007cc4:	0606      	lsls	r6, r0, #24
 8007cc6:	f101 0304 	add.w	r3, r1, #4
 8007cca:	d50a      	bpl.n	8007ce2 <_printf_i+0xce>
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	da03      	bge.n	8007cdc <_printf_i+0xc8>
 8007cd4:	232d      	movs	r3, #45	; 0x2d
 8007cd6:	4276      	negs	r6, r6
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cdc:	485e      	ldr	r0, [pc, #376]	; (8007e58 <_printf_i+0x244>)
 8007cde:	230a      	movs	r3, #10
 8007ce0:	e019      	b.n	8007d16 <_printf_i+0x102>
 8007ce2:	680e      	ldr	r6, [r1, #0]
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cea:	bf18      	it	ne
 8007cec:	b236      	sxthne	r6, r6
 8007cee:	e7ef      	b.n	8007cd0 <_printf_i+0xbc>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	1d19      	adds	r1, r3, #4
 8007cf6:	6029      	str	r1, [r5, #0]
 8007cf8:	0601      	lsls	r1, r0, #24
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0xec>
 8007cfc:	681e      	ldr	r6, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0xf2>
 8007d00:	0646      	lsls	r6, r0, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0xe8>
 8007d04:	881e      	ldrh	r6, [r3, #0]
 8007d06:	4854      	ldr	r0, [pc, #336]	; (8007e58 <_printf_i+0x244>)
 8007d08:	2f6f      	cmp	r7, #111	; 0x6f
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2308      	moveq	r3, #8
 8007d0e:	230a      	movne	r3, #10
 8007d10:	2100      	movs	r1, #0
 8007d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d16:	6865      	ldr	r5, [r4, #4]
 8007d18:	60a5      	str	r5, [r4, #8]
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	bfa2      	ittt	ge
 8007d1e:	6821      	ldrge	r1, [r4, #0]
 8007d20:	f021 0104 	bicge.w	r1, r1, #4
 8007d24:	6021      	strge	r1, [r4, #0]
 8007d26:	b90e      	cbnz	r6, 8007d2c <_printf_i+0x118>
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	d04d      	beq.n	8007dc8 <_printf_i+0x1b4>
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d32:	fb03 6711 	mls	r7, r3, r1, r6
 8007d36:	5dc7      	ldrb	r7, [r0, r7]
 8007d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d3c:	4637      	mov	r7, r6
 8007d3e:	42bb      	cmp	r3, r7
 8007d40:	460e      	mov	r6, r1
 8007d42:	d9f4      	bls.n	8007d2e <_printf_i+0x11a>
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d10b      	bne.n	8007d60 <_printf_i+0x14c>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	07de      	lsls	r6, r3, #31
 8007d4c:	d508      	bpl.n	8007d60 <_printf_i+0x14c>
 8007d4e:	6923      	ldr	r3, [r4, #16]
 8007d50:	6861      	ldr	r1, [r4, #4]
 8007d52:	4299      	cmp	r1, r3
 8007d54:	bfde      	ittt	le
 8007d56:	2330      	movle	r3, #48	; 0x30
 8007d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d60:	1b52      	subs	r2, r2, r5
 8007d62:	6122      	str	r2, [r4, #16]
 8007d64:	f8cd a000 	str.w	sl, [sp]
 8007d68:	464b      	mov	r3, r9
 8007d6a:	aa03      	add	r2, sp, #12
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4640      	mov	r0, r8
 8007d70:	f7ff fee2 	bl	8007b38 <_printf_common>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d14c      	bne.n	8007e12 <_printf_i+0x1fe>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	b004      	add	sp, #16
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	4835      	ldr	r0, [pc, #212]	; (8007e58 <_printf_i+0x244>)
 8007d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d88:	6829      	ldr	r1, [r5, #0]
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d90:	6029      	str	r1, [r5, #0]
 8007d92:	061d      	lsls	r5, r3, #24
 8007d94:	d514      	bpl.n	8007dc0 <_printf_i+0x1ac>
 8007d96:	07df      	lsls	r7, r3, #31
 8007d98:	bf44      	itt	mi
 8007d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d9e:	6023      	strmi	r3, [r4, #0]
 8007da0:	b91e      	cbnz	r6, 8007daa <_printf_i+0x196>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	f023 0320 	bic.w	r3, r3, #32
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2310      	movs	r3, #16
 8007dac:	e7b0      	b.n	8007d10 <_printf_i+0xfc>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	f043 0320 	orr.w	r3, r3, #32
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	2378      	movs	r3, #120	; 0x78
 8007db8:	4828      	ldr	r0, [pc, #160]	; (8007e5c <_printf_i+0x248>)
 8007dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dbe:	e7e3      	b.n	8007d88 <_printf_i+0x174>
 8007dc0:	0659      	lsls	r1, r3, #25
 8007dc2:	bf48      	it	mi
 8007dc4:	b2b6      	uxthmi	r6, r6
 8007dc6:	e7e6      	b.n	8007d96 <_printf_i+0x182>
 8007dc8:	4615      	mov	r5, r2
 8007dca:	e7bb      	b.n	8007d44 <_printf_i+0x130>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	6826      	ldr	r6, [r4, #0]
 8007dd0:	6961      	ldr	r1, [r4, #20]
 8007dd2:	1d18      	adds	r0, r3, #4
 8007dd4:	6028      	str	r0, [r5, #0]
 8007dd6:	0635      	lsls	r5, r6, #24
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0x1cc>
 8007ddc:	6019      	str	r1, [r3, #0]
 8007dde:	e002      	b.n	8007de6 <_printf_i+0x1d2>
 8007de0:	0670      	lsls	r0, r6, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0x1c8>
 8007de4:	8019      	strh	r1, [r3, #0]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	4615      	mov	r5, r2
 8007dec:	e7ba      	b.n	8007d64 <_printf_i+0x150>
 8007dee:	682b      	ldr	r3, [r5, #0]
 8007df0:	1d1a      	adds	r2, r3, #4
 8007df2:	602a      	str	r2, [r5, #0]
 8007df4:	681d      	ldr	r5, [r3, #0]
 8007df6:	6862      	ldr	r2, [r4, #4]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7f8 fa10 	bl	8000220 <memchr>
 8007e00:	b108      	cbz	r0, 8007e06 <_printf_i+0x1f2>
 8007e02:	1b40      	subs	r0, r0, r5
 8007e04:	6060      	str	r0, [r4, #4]
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e10:	e7a8      	b.n	8007d64 <_printf_i+0x150>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	462a      	mov	r2, r5
 8007e16:	4649      	mov	r1, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	47d0      	blx	sl
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d0ab      	beq.n	8007d78 <_printf_i+0x164>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	079b      	lsls	r3, r3, #30
 8007e24:	d413      	bmi.n	8007e4e <_printf_i+0x23a>
 8007e26:	68e0      	ldr	r0, [r4, #12]
 8007e28:	9b03      	ldr	r3, [sp, #12]
 8007e2a:	4298      	cmp	r0, r3
 8007e2c:	bfb8      	it	lt
 8007e2e:	4618      	movlt	r0, r3
 8007e30:	e7a4      	b.n	8007d7c <_printf_i+0x168>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4632      	mov	r2, r6
 8007e36:	4649      	mov	r1, r9
 8007e38:	4640      	mov	r0, r8
 8007e3a:	47d0      	blx	sl
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d09b      	beq.n	8007d78 <_printf_i+0x164>
 8007e40:	3501      	adds	r5, #1
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	1a5b      	subs	r3, r3, r1
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dcf2      	bgt.n	8007e32 <_printf_i+0x21e>
 8007e4c:	e7eb      	b.n	8007e26 <_printf_i+0x212>
 8007e4e:	2500      	movs	r5, #0
 8007e50:	f104 0619 	add.w	r6, r4, #25
 8007e54:	e7f5      	b.n	8007e42 <_printf_i+0x22e>
 8007e56:	bf00      	nop
 8007e58:	080089ea 	.word	0x080089ea
 8007e5c:	080089fb 	.word	0x080089fb

08007e60 <__swbuf_r>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	460e      	mov	r6, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	4605      	mov	r5, r0
 8007e68:	b118      	cbz	r0, 8007e72 <__swbuf_r+0x12>
 8007e6a:	6983      	ldr	r3, [r0, #24]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <__swbuf_r+0x12>
 8007e6e:	f000 f9d9 	bl	8008224 <__sinit>
 8007e72:	4b21      	ldr	r3, [pc, #132]	; (8007ef8 <__swbuf_r+0x98>)
 8007e74:	429c      	cmp	r4, r3
 8007e76:	d12b      	bne.n	8007ed0 <__swbuf_r+0x70>
 8007e78:	686c      	ldr	r4, [r5, #4]
 8007e7a:	69a3      	ldr	r3, [r4, #24]
 8007e7c:	60a3      	str	r3, [r4, #8]
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	071a      	lsls	r2, r3, #28
 8007e82:	d52f      	bpl.n	8007ee4 <__swbuf_r+0x84>
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	b36b      	cbz	r3, 8007ee4 <__swbuf_r+0x84>
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	6820      	ldr	r0, [r4, #0]
 8007e8c:	1ac0      	subs	r0, r0, r3
 8007e8e:	6963      	ldr	r3, [r4, #20]
 8007e90:	b2f6      	uxtb	r6, r6
 8007e92:	4283      	cmp	r3, r0
 8007e94:	4637      	mov	r7, r6
 8007e96:	dc04      	bgt.n	8007ea2 <__swbuf_r+0x42>
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f000 f92e 	bl	80080fc <_fflush_r>
 8007ea0:	bb30      	cbnz	r0, 8007ef0 <__swbuf_r+0x90>
 8007ea2:	68a3      	ldr	r3, [r4, #8]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	60a3      	str	r3, [r4, #8]
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	6022      	str	r2, [r4, #0]
 8007eae:	701e      	strb	r6, [r3, #0]
 8007eb0:	6963      	ldr	r3, [r4, #20]
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	4283      	cmp	r3, r0
 8007eb6:	d004      	beq.n	8007ec2 <__swbuf_r+0x62>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	07db      	lsls	r3, r3, #31
 8007ebc:	d506      	bpl.n	8007ecc <__swbuf_r+0x6c>
 8007ebe:	2e0a      	cmp	r6, #10
 8007ec0:	d104      	bne.n	8007ecc <__swbuf_r+0x6c>
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f919 	bl	80080fc <_fflush_r>
 8007eca:	b988      	cbnz	r0, 8007ef0 <__swbuf_r+0x90>
 8007ecc:	4638      	mov	r0, r7
 8007ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <__swbuf_r+0x9c>)
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d101      	bne.n	8007eda <__swbuf_r+0x7a>
 8007ed6:	68ac      	ldr	r4, [r5, #8]
 8007ed8:	e7cf      	b.n	8007e7a <__swbuf_r+0x1a>
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <__swbuf_r+0xa0>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	bf08      	it	eq
 8007ee0:	68ec      	ldreq	r4, [r5, #12]
 8007ee2:	e7ca      	b.n	8007e7a <__swbuf_r+0x1a>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 f80c 	bl	8007f04 <__swsetup_r>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d0cb      	beq.n	8007e88 <__swbuf_r+0x28>
 8007ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef4:	e7ea      	b.n	8007ecc <__swbuf_r+0x6c>
 8007ef6:	bf00      	nop
 8007ef8:	08008a2c 	.word	0x08008a2c
 8007efc:	08008a4c 	.word	0x08008a4c
 8007f00:	08008a0c 	.word	0x08008a0c

08007f04 <__swsetup_r>:
 8007f04:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <__swsetup_r+0xcc>)
 8007f06:	b570      	push	{r4, r5, r6, lr}
 8007f08:	681d      	ldr	r5, [r3, #0]
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	b125      	cbz	r5, 8007f1a <__swsetup_r+0x16>
 8007f10:	69ab      	ldr	r3, [r5, #24]
 8007f12:	b913      	cbnz	r3, 8007f1a <__swsetup_r+0x16>
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 f985 	bl	8008224 <__sinit>
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <__swsetup_r+0xd0>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d10f      	bne.n	8007f40 <__swsetup_r+0x3c>
 8007f20:	686c      	ldr	r4, [r5, #4]
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f28:	0719      	lsls	r1, r3, #28
 8007f2a:	d42c      	bmi.n	8007f86 <__swsetup_r+0x82>
 8007f2c:	06dd      	lsls	r5, r3, #27
 8007f2e:	d411      	bmi.n	8007f54 <__swsetup_r+0x50>
 8007f30:	2309      	movs	r3, #9
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	e03e      	b.n	8007fbe <__swsetup_r+0xba>
 8007f40:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <__swsetup_r+0xd4>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d101      	bne.n	8007f4a <__swsetup_r+0x46>
 8007f46:	68ac      	ldr	r4, [r5, #8]
 8007f48:	e7eb      	b.n	8007f22 <__swsetup_r+0x1e>
 8007f4a:	4b24      	ldr	r3, [pc, #144]	; (8007fdc <__swsetup_r+0xd8>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	bf08      	it	eq
 8007f50:	68ec      	ldreq	r4, [r5, #12]
 8007f52:	e7e6      	b.n	8007f22 <__swsetup_r+0x1e>
 8007f54:	0758      	lsls	r0, r3, #29
 8007f56:	d512      	bpl.n	8007f7e <__swsetup_r+0x7a>
 8007f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f5a:	b141      	cbz	r1, 8007f6e <__swsetup_r+0x6a>
 8007f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__swsetup_r+0x66>
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff fc41 	bl	80077ec <_free_r>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	2300      	movs	r3, #0
 8007f78:	6063      	str	r3, [r4, #4]
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f043 0308 	orr.w	r3, r3, #8
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	b94b      	cbnz	r3, 8007f9e <__swsetup_r+0x9a>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f94:	d003      	beq.n	8007f9e <__swsetup_r+0x9a>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 fa09 	bl	80083b0 <__smakebuf_r>
 8007f9e:	89a0      	ldrh	r0, [r4, #12]
 8007fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa4:	f010 0301 	ands.w	r3, r0, #1
 8007fa8:	d00a      	beq.n	8007fc0 <__swsetup_r+0xbc>
 8007faa:	2300      	movs	r3, #0
 8007fac:	60a3      	str	r3, [r4, #8]
 8007fae:	6963      	ldr	r3, [r4, #20]
 8007fb0:	425b      	negs	r3, r3
 8007fb2:	61a3      	str	r3, [r4, #24]
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	b943      	cbnz	r3, 8007fca <__swsetup_r+0xc6>
 8007fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fbc:	d1ba      	bne.n	8007f34 <__swsetup_r+0x30>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	0781      	lsls	r1, r0, #30
 8007fc2:	bf58      	it	pl
 8007fc4:	6963      	ldrpl	r3, [r4, #20]
 8007fc6:	60a3      	str	r3, [r4, #8]
 8007fc8:	e7f4      	b.n	8007fb4 <__swsetup_r+0xb0>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e7f7      	b.n	8007fbe <__swsetup_r+0xba>
 8007fce:	bf00      	nop
 8007fd0:	2000000c 	.word	0x2000000c
 8007fd4:	08008a2c 	.word	0x08008a2c
 8007fd8:	08008a4c 	.word	0x08008a4c
 8007fdc:	08008a0c 	.word	0x08008a0c

08007fe0 <abort>:
 8007fe0:	b508      	push	{r3, lr}
 8007fe2:	2006      	movs	r0, #6
 8007fe4:	f000 fa4c 	bl	8008480 <raise>
 8007fe8:	2001      	movs	r0, #1
 8007fea:	f7f9 fd2f 	bl	8001a4c <_exit>
	...

08007ff0 <__sflush_r>:
 8007ff0:	898a      	ldrh	r2, [r1, #12]
 8007ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	0710      	lsls	r0, r2, #28
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	d458      	bmi.n	80080b0 <__sflush_r+0xc0>
 8007ffe:	684b      	ldr	r3, [r1, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc05      	bgt.n	8008010 <__sflush_r+0x20>
 8008004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	dc02      	bgt.n	8008010 <__sflush_r+0x20>
 800800a:	2000      	movs	r0, #0
 800800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008012:	2e00      	cmp	r6, #0
 8008014:	d0f9      	beq.n	800800a <__sflush_r+0x1a>
 8008016:	2300      	movs	r3, #0
 8008018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800801c:	682f      	ldr	r7, [r5, #0]
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	d032      	beq.n	8008088 <__sflush_r+0x98>
 8008022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	075a      	lsls	r2, r3, #29
 8008028:	d505      	bpl.n	8008036 <__sflush_r+0x46>
 800802a:	6863      	ldr	r3, [r4, #4]
 800802c:	1ac0      	subs	r0, r0, r3
 800802e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008030:	b10b      	cbz	r3, 8008036 <__sflush_r+0x46>
 8008032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008034:	1ac0      	subs	r0, r0, r3
 8008036:	2300      	movs	r3, #0
 8008038:	4602      	mov	r2, r0
 800803a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800803c:	6a21      	ldr	r1, [r4, #32]
 800803e:	4628      	mov	r0, r5
 8008040:	47b0      	blx	r6
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	d106      	bne.n	8008056 <__sflush_r+0x66>
 8008048:	6829      	ldr	r1, [r5, #0]
 800804a:	291d      	cmp	r1, #29
 800804c:	d82c      	bhi.n	80080a8 <__sflush_r+0xb8>
 800804e:	4a2a      	ldr	r2, [pc, #168]	; (80080f8 <__sflush_r+0x108>)
 8008050:	40ca      	lsrs	r2, r1
 8008052:	07d6      	lsls	r6, r2, #31
 8008054:	d528      	bpl.n	80080a8 <__sflush_r+0xb8>
 8008056:	2200      	movs	r2, #0
 8008058:	6062      	str	r2, [r4, #4]
 800805a:	04d9      	lsls	r1, r3, #19
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	d504      	bpl.n	800806c <__sflush_r+0x7c>
 8008062:	1c42      	adds	r2, r0, #1
 8008064:	d101      	bne.n	800806a <__sflush_r+0x7a>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	b903      	cbnz	r3, 800806c <__sflush_r+0x7c>
 800806a:	6560      	str	r0, [r4, #84]	; 0x54
 800806c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800806e:	602f      	str	r7, [r5, #0]
 8008070:	2900      	cmp	r1, #0
 8008072:	d0ca      	beq.n	800800a <__sflush_r+0x1a>
 8008074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008078:	4299      	cmp	r1, r3
 800807a:	d002      	beq.n	8008082 <__sflush_r+0x92>
 800807c:	4628      	mov	r0, r5
 800807e:	f7ff fbb5 	bl	80077ec <_free_r>
 8008082:	2000      	movs	r0, #0
 8008084:	6360      	str	r0, [r4, #52]	; 0x34
 8008086:	e7c1      	b.n	800800c <__sflush_r+0x1c>
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	2301      	movs	r3, #1
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	1c41      	adds	r1, r0, #1
 8008092:	d1c7      	bne.n	8008024 <__sflush_r+0x34>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0c4      	beq.n	8008024 <__sflush_r+0x34>
 800809a:	2b1d      	cmp	r3, #29
 800809c:	d001      	beq.n	80080a2 <__sflush_r+0xb2>
 800809e:	2b16      	cmp	r3, #22
 80080a0:	d101      	bne.n	80080a6 <__sflush_r+0xb6>
 80080a2:	602f      	str	r7, [r5, #0]
 80080a4:	e7b1      	b.n	800800a <__sflush_r+0x1a>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	e7ad      	b.n	800800c <__sflush_r+0x1c>
 80080b0:	690f      	ldr	r7, [r1, #16]
 80080b2:	2f00      	cmp	r7, #0
 80080b4:	d0a9      	beq.n	800800a <__sflush_r+0x1a>
 80080b6:	0793      	lsls	r3, r2, #30
 80080b8:	680e      	ldr	r6, [r1, #0]
 80080ba:	bf08      	it	eq
 80080bc:	694b      	ldreq	r3, [r1, #20]
 80080be:	600f      	str	r7, [r1, #0]
 80080c0:	bf18      	it	ne
 80080c2:	2300      	movne	r3, #0
 80080c4:	eba6 0807 	sub.w	r8, r6, r7
 80080c8:	608b      	str	r3, [r1, #8]
 80080ca:	f1b8 0f00 	cmp.w	r8, #0
 80080ce:	dd9c      	ble.n	800800a <__sflush_r+0x1a>
 80080d0:	6a21      	ldr	r1, [r4, #32]
 80080d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080d4:	4643      	mov	r3, r8
 80080d6:	463a      	mov	r2, r7
 80080d8:	4628      	mov	r0, r5
 80080da:	47b0      	blx	r6
 80080dc:	2800      	cmp	r0, #0
 80080de:	dc06      	bgt.n	80080ee <__sflush_r+0xfe>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	e78e      	b.n	800800c <__sflush_r+0x1c>
 80080ee:	4407      	add	r7, r0
 80080f0:	eba8 0800 	sub.w	r8, r8, r0
 80080f4:	e7e9      	b.n	80080ca <__sflush_r+0xda>
 80080f6:	bf00      	nop
 80080f8:	20400001 	.word	0x20400001

080080fc <_fflush_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	690b      	ldr	r3, [r1, #16]
 8008100:	4605      	mov	r5, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b913      	cbnz	r3, 800810c <_fflush_r+0x10>
 8008106:	2500      	movs	r5, #0
 8008108:	4628      	mov	r0, r5
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	b118      	cbz	r0, 8008116 <_fflush_r+0x1a>
 800810e:	6983      	ldr	r3, [r0, #24]
 8008110:	b90b      	cbnz	r3, 8008116 <_fflush_r+0x1a>
 8008112:	f000 f887 	bl	8008224 <__sinit>
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <_fflush_r+0x6c>)
 8008118:	429c      	cmp	r4, r3
 800811a:	d11b      	bne.n	8008154 <_fflush_r+0x58>
 800811c:	686c      	ldr	r4, [r5, #4]
 800811e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0ef      	beq.n	8008106 <_fflush_r+0xa>
 8008126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008128:	07d0      	lsls	r0, r2, #31
 800812a:	d404      	bmi.n	8008136 <_fflush_r+0x3a>
 800812c:	0599      	lsls	r1, r3, #22
 800812e:	d402      	bmi.n	8008136 <_fflush_r+0x3a>
 8008130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008132:	f000 f915 	bl	8008360 <__retarget_lock_acquire_recursive>
 8008136:	4628      	mov	r0, r5
 8008138:	4621      	mov	r1, r4
 800813a:	f7ff ff59 	bl	8007ff0 <__sflush_r>
 800813e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008140:	07da      	lsls	r2, r3, #31
 8008142:	4605      	mov	r5, r0
 8008144:	d4e0      	bmi.n	8008108 <_fflush_r+0xc>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	059b      	lsls	r3, r3, #22
 800814a:	d4dd      	bmi.n	8008108 <_fflush_r+0xc>
 800814c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814e:	f000 f908 	bl	8008362 <__retarget_lock_release_recursive>
 8008152:	e7d9      	b.n	8008108 <_fflush_r+0xc>
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <_fflush_r+0x70>)
 8008156:	429c      	cmp	r4, r3
 8008158:	d101      	bne.n	800815e <_fflush_r+0x62>
 800815a:	68ac      	ldr	r4, [r5, #8]
 800815c:	e7df      	b.n	800811e <_fflush_r+0x22>
 800815e:	4b04      	ldr	r3, [pc, #16]	; (8008170 <_fflush_r+0x74>)
 8008160:	429c      	cmp	r4, r3
 8008162:	bf08      	it	eq
 8008164:	68ec      	ldreq	r4, [r5, #12]
 8008166:	e7da      	b.n	800811e <_fflush_r+0x22>
 8008168:	08008a2c 	.word	0x08008a2c
 800816c:	08008a4c 	.word	0x08008a4c
 8008170:	08008a0c 	.word	0x08008a0c

08008174 <std>:
 8008174:	2300      	movs	r3, #0
 8008176:	b510      	push	{r4, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	e9c0 3300 	strd	r3, r3, [r0]
 800817e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008182:	6083      	str	r3, [r0, #8]
 8008184:	8181      	strh	r1, [r0, #12]
 8008186:	6643      	str	r3, [r0, #100]	; 0x64
 8008188:	81c2      	strh	r2, [r0, #14]
 800818a:	6183      	str	r3, [r0, #24]
 800818c:	4619      	mov	r1, r3
 800818e:	2208      	movs	r2, #8
 8008190:	305c      	adds	r0, #92	; 0x5c
 8008192:	f7fd fb6f 	bl	8005874 <memset>
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <std+0x38>)
 8008198:	6263      	str	r3, [r4, #36]	; 0x24
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <std+0x3c>)
 800819c:	62a3      	str	r3, [r4, #40]	; 0x28
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <std+0x40>)
 80081a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <std+0x44>)
 80081a4:	6224      	str	r4, [r4, #32]
 80081a6:	6323      	str	r3, [r4, #48]	; 0x30
 80081a8:	bd10      	pop	{r4, pc}
 80081aa:	bf00      	nop
 80081ac:	080084b9 	.word	0x080084b9
 80081b0:	080084db 	.word	0x080084db
 80081b4:	08008513 	.word	0x08008513
 80081b8:	08008537 	.word	0x08008537

080081bc <_cleanup_r>:
 80081bc:	4901      	ldr	r1, [pc, #4]	; (80081c4 <_cleanup_r+0x8>)
 80081be:	f000 b8af 	b.w	8008320 <_fwalk_reent>
 80081c2:	bf00      	nop
 80081c4:	080080fd 	.word	0x080080fd

080081c8 <__sfmoreglue>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	2268      	movs	r2, #104	; 0x68
 80081cc:	1e4d      	subs	r5, r1, #1
 80081ce:	4355      	muls	r5, r2
 80081d0:	460e      	mov	r6, r1
 80081d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081d6:	f7ff fa15 	bl	8007604 <_malloc_r>
 80081da:	4604      	mov	r4, r0
 80081dc:	b140      	cbz	r0, 80081f0 <__sfmoreglue+0x28>
 80081de:	2100      	movs	r1, #0
 80081e0:	e9c0 1600 	strd	r1, r6, [r0]
 80081e4:	300c      	adds	r0, #12
 80081e6:	60a0      	str	r0, [r4, #8]
 80081e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081ec:	f7fd fb42 	bl	8005874 <memset>
 80081f0:	4620      	mov	r0, r4
 80081f2:	bd70      	pop	{r4, r5, r6, pc}

080081f4 <__sfp_lock_acquire>:
 80081f4:	4801      	ldr	r0, [pc, #4]	; (80081fc <__sfp_lock_acquire+0x8>)
 80081f6:	f000 b8b3 	b.w	8008360 <__retarget_lock_acquire_recursive>
 80081fa:	bf00      	nop
 80081fc:	2000034d 	.word	0x2000034d

08008200 <__sfp_lock_release>:
 8008200:	4801      	ldr	r0, [pc, #4]	; (8008208 <__sfp_lock_release+0x8>)
 8008202:	f000 b8ae 	b.w	8008362 <__retarget_lock_release_recursive>
 8008206:	bf00      	nop
 8008208:	2000034d 	.word	0x2000034d

0800820c <__sinit_lock_acquire>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__sinit_lock_acquire+0x8>)
 800820e:	f000 b8a7 	b.w	8008360 <__retarget_lock_acquire_recursive>
 8008212:	bf00      	nop
 8008214:	2000034e 	.word	0x2000034e

08008218 <__sinit_lock_release>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__sinit_lock_release+0x8>)
 800821a:	f000 b8a2 	b.w	8008362 <__retarget_lock_release_recursive>
 800821e:	bf00      	nop
 8008220:	2000034e 	.word	0x2000034e

08008224 <__sinit>:
 8008224:	b510      	push	{r4, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	f7ff fff0 	bl	800820c <__sinit_lock_acquire>
 800822c:	69a3      	ldr	r3, [r4, #24]
 800822e:	b11b      	cbz	r3, 8008238 <__sinit+0x14>
 8008230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008234:	f7ff bff0 	b.w	8008218 <__sinit_lock_release>
 8008238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800823c:	6523      	str	r3, [r4, #80]	; 0x50
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <__sinit+0x68>)
 8008240:	4a13      	ldr	r2, [pc, #76]	; (8008290 <__sinit+0x6c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	62a2      	str	r2, [r4, #40]	; 0x28
 8008246:	42a3      	cmp	r3, r4
 8008248:	bf04      	itt	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	61a3      	streq	r3, [r4, #24]
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f820 	bl	8008294 <__sfp>
 8008254:	6060      	str	r0, [r4, #4]
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f81c 	bl	8008294 <__sfp>
 800825c:	60a0      	str	r0, [r4, #8]
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f818 	bl	8008294 <__sfp>
 8008264:	2200      	movs	r2, #0
 8008266:	60e0      	str	r0, [r4, #12]
 8008268:	2104      	movs	r1, #4
 800826a:	6860      	ldr	r0, [r4, #4]
 800826c:	f7ff ff82 	bl	8008174 <std>
 8008270:	68a0      	ldr	r0, [r4, #8]
 8008272:	2201      	movs	r2, #1
 8008274:	2109      	movs	r1, #9
 8008276:	f7ff ff7d 	bl	8008174 <std>
 800827a:	68e0      	ldr	r0, [r4, #12]
 800827c:	2202      	movs	r2, #2
 800827e:	2112      	movs	r1, #18
 8008280:	f7ff ff78 	bl	8008174 <std>
 8008284:	2301      	movs	r3, #1
 8008286:	61a3      	str	r3, [r4, #24]
 8008288:	e7d2      	b.n	8008230 <__sinit+0xc>
 800828a:	bf00      	nop
 800828c:	08008640 	.word	0x08008640
 8008290:	080081bd 	.word	0x080081bd

08008294 <__sfp>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	4607      	mov	r7, r0
 8008298:	f7ff ffac 	bl	80081f4 <__sfp_lock_acquire>
 800829c:	4b1e      	ldr	r3, [pc, #120]	; (8008318 <__sfp+0x84>)
 800829e:	681e      	ldr	r6, [r3, #0]
 80082a0:	69b3      	ldr	r3, [r6, #24]
 80082a2:	b913      	cbnz	r3, 80082aa <__sfp+0x16>
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff ffbd 	bl	8008224 <__sinit>
 80082aa:	3648      	adds	r6, #72	; 0x48
 80082ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	d503      	bpl.n	80082bc <__sfp+0x28>
 80082b4:	6833      	ldr	r3, [r6, #0]
 80082b6:	b30b      	cbz	r3, 80082fc <__sfp+0x68>
 80082b8:	6836      	ldr	r6, [r6, #0]
 80082ba:	e7f7      	b.n	80082ac <__sfp+0x18>
 80082bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082c0:	b9d5      	cbnz	r5, 80082f8 <__sfp+0x64>
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <__sfp+0x88>)
 80082c4:	60e3      	str	r3, [r4, #12]
 80082c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ca:	6665      	str	r5, [r4, #100]	; 0x64
 80082cc:	f000 f847 	bl	800835e <__retarget_lock_init_recursive>
 80082d0:	f7ff ff96 	bl	8008200 <__sfp_lock_release>
 80082d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082dc:	6025      	str	r5, [r4, #0]
 80082de:	61a5      	str	r5, [r4, #24]
 80082e0:	2208      	movs	r2, #8
 80082e2:	4629      	mov	r1, r5
 80082e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082e8:	f7fd fac4 	bl	8005874 <memset>
 80082ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082f4:	4620      	mov	r0, r4
 80082f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f8:	3468      	adds	r4, #104	; 0x68
 80082fa:	e7d9      	b.n	80082b0 <__sfp+0x1c>
 80082fc:	2104      	movs	r1, #4
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ff62 	bl	80081c8 <__sfmoreglue>
 8008304:	4604      	mov	r4, r0
 8008306:	6030      	str	r0, [r6, #0]
 8008308:	2800      	cmp	r0, #0
 800830a:	d1d5      	bne.n	80082b8 <__sfp+0x24>
 800830c:	f7ff ff78 	bl	8008200 <__sfp_lock_release>
 8008310:	230c      	movs	r3, #12
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	e7ee      	b.n	80082f4 <__sfp+0x60>
 8008316:	bf00      	nop
 8008318:	08008640 	.word	0x08008640
 800831c:	ffff0001 	.word	0xffff0001

08008320 <_fwalk_reent>:
 8008320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008324:	4606      	mov	r6, r0
 8008326:	4688      	mov	r8, r1
 8008328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800832c:	2700      	movs	r7, #0
 800832e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008332:	f1b9 0901 	subs.w	r9, r9, #1
 8008336:	d505      	bpl.n	8008344 <_fwalk_reent+0x24>
 8008338:	6824      	ldr	r4, [r4, #0]
 800833a:	2c00      	cmp	r4, #0
 800833c:	d1f7      	bne.n	800832e <_fwalk_reent+0xe>
 800833e:	4638      	mov	r0, r7
 8008340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008344:	89ab      	ldrh	r3, [r5, #12]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d907      	bls.n	800835a <_fwalk_reent+0x3a>
 800834a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800834e:	3301      	adds	r3, #1
 8008350:	d003      	beq.n	800835a <_fwalk_reent+0x3a>
 8008352:	4629      	mov	r1, r5
 8008354:	4630      	mov	r0, r6
 8008356:	47c0      	blx	r8
 8008358:	4307      	orrs	r7, r0
 800835a:	3568      	adds	r5, #104	; 0x68
 800835c:	e7e9      	b.n	8008332 <_fwalk_reent+0x12>

0800835e <__retarget_lock_init_recursive>:
 800835e:	4770      	bx	lr

08008360 <__retarget_lock_acquire_recursive>:
 8008360:	4770      	bx	lr

08008362 <__retarget_lock_release_recursive>:
 8008362:	4770      	bx	lr

08008364 <__swhatbuf_r>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	460e      	mov	r6, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	2900      	cmp	r1, #0
 800836e:	b096      	sub	sp, #88	; 0x58
 8008370:	4614      	mov	r4, r2
 8008372:	461d      	mov	r5, r3
 8008374:	da08      	bge.n	8008388 <__swhatbuf_r+0x24>
 8008376:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	602a      	str	r2, [r5, #0]
 800837e:	061a      	lsls	r2, r3, #24
 8008380:	d410      	bmi.n	80083a4 <__swhatbuf_r+0x40>
 8008382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008386:	e00e      	b.n	80083a6 <__swhatbuf_r+0x42>
 8008388:	466a      	mov	r2, sp
 800838a:	f000 f8fb 	bl	8008584 <_fstat_r>
 800838e:	2800      	cmp	r0, #0
 8008390:	dbf1      	blt.n	8008376 <__swhatbuf_r+0x12>
 8008392:	9a01      	ldr	r2, [sp, #4]
 8008394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800839c:	425a      	negs	r2, r3
 800839e:	415a      	adcs	r2, r3
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	e7ee      	b.n	8008382 <__swhatbuf_r+0x1e>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	2000      	movs	r0, #0
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	b016      	add	sp, #88	; 0x58
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080083b0 <__smakebuf_r>:
 80083b0:	898b      	ldrh	r3, [r1, #12]
 80083b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083b4:	079d      	lsls	r5, r3, #30
 80083b6:	4606      	mov	r6, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	d507      	bpl.n	80083cc <__smakebuf_r+0x1c>
 80083bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	2301      	movs	r3, #1
 80083c6:	6163      	str	r3, [r4, #20]
 80083c8:	b002      	add	sp, #8
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	ab01      	add	r3, sp, #4
 80083ce:	466a      	mov	r2, sp
 80083d0:	f7ff ffc8 	bl	8008364 <__swhatbuf_r>
 80083d4:	9900      	ldr	r1, [sp, #0]
 80083d6:	4605      	mov	r5, r0
 80083d8:	4630      	mov	r0, r6
 80083da:	f7ff f913 	bl	8007604 <_malloc_r>
 80083de:	b948      	cbnz	r0, 80083f4 <__smakebuf_r+0x44>
 80083e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d4ef      	bmi.n	80083c8 <__smakebuf_r+0x18>
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	f043 0302 	orr.w	r3, r3, #2
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7e3      	b.n	80083bc <__smakebuf_r+0xc>
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <__smakebuf_r+0x7c>)
 80083f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	6020      	str	r0, [r4, #0]
 80083fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	6163      	str	r3, [r4, #20]
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	6120      	str	r0, [r4, #16]
 800840a:	b15b      	cbz	r3, 8008424 <__smakebuf_r+0x74>
 800840c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f8c9 	bl	80085a8 <_isatty_r>
 8008416:	b128      	cbz	r0, 8008424 <__smakebuf_r+0x74>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	f043 0301 	orr.w	r3, r3, #1
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	89a0      	ldrh	r0, [r4, #12]
 8008426:	4305      	orrs	r5, r0
 8008428:	81a5      	strh	r5, [r4, #12]
 800842a:	e7cd      	b.n	80083c8 <__smakebuf_r+0x18>
 800842c:	080081bd 	.word	0x080081bd

08008430 <_raise_r>:
 8008430:	291f      	cmp	r1, #31
 8008432:	b538      	push	{r3, r4, r5, lr}
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	d904      	bls.n	8008444 <_raise_r+0x14>
 800843a:	2316      	movs	r3, #22
 800843c:	6003      	str	r3, [r0, #0]
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008446:	b112      	cbz	r2, 800844e <_raise_r+0x1e>
 8008448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800844c:	b94b      	cbnz	r3, 8008462 <_raise_r+0x32>
 800844e:	4620      	mov	r0, r4
 8008450:	f000 f830 	bl	80084b4 <_getpid_r>
 8008454:	462a      	mov	r2, r5
 8008456:	4601      	mov	r1, r0
 8008458:	4620      	mov	r0, r4
 800845a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800845e:	f000 b817 	b.w	8008490 <_kill_r>
 8008462:	2b01      	cmp	r3, #1
 8008464:	d00a      	beq.n	800847c <_raise_r+0x4c>
 8008466:	1c59      	adds	r1, r3, #1
 8008468:	d103      	bne.n	8008472 <_raise_r+0x42>
 800846a:	2316      	movs	r3, #22
 800846c:	6003      	str	r3, [r0, #0]
 800846e:	2001      	movs	r0, #1
 8008470:	e7e7      	b.n	8008442 <_raise_r+0x12>
 8008472:	2400      	movs	r4, #0
 8008474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008478:	4628      	mov	r0, r5
 800847a:	4798      	blx	r3
 800847c:	2000      	movs	r0, #0
 800847e:	e7e0      	b.n	8008442 <_raise_r+0x12>

08008480 <raise>:
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <raise+0xc>)
 8008482:	4601      	mov	r1, r0
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f7ff bfd3 	b.w	8008430 <_raise_r>
 800848a:	bf00      	nop
 800848c:	2000000c 	.word	0x2000000c

08008490 <_kill_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	; (80084b0 <_kill_r+0x20>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	f7f9 fac5 	bl	8001a2c <_kill>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d102      	bne.n	80084ac <_kill_r+0x1c>
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	b103      	cbz	r3, 80084ac <_kill_r+0x1c>
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	bd38      	pop	{r3, r4, r5, pc}
 80084ae:	bf00      	nop
 80084b0:	20000348 	.word	0x20000348

080084b4 <_getpid_r>:
 80084b4:	f7f9 bab2 	b.w	8001a1c <_getpid>

080084b8 <__sread>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	460c      	mov	r4, r1
 80084bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c0:	f000 f894 	bl	80085ec <_read_r>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	bfab      	itete	ge
 80084c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084ca:	89a3      	ldrhlt	r3, [r4, #12]
 80084cc:	181b      	addge	r3, r3, r0
 80084ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084d2:	bfac      	ite	ge
 80084d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084d6:	81a3      	strhlt	r3, [r4, #12]
 80084d8:	bd10      	pop	{r4, pc}

080084da <__swrite>:
 80084da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084de:	461f      	mov	r7, r3
 80084e0:	898b      	ldrh	r3, [r1, #12]
 80084e2:	05db      	lsls	r3, r3, #23
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	4616      	mov	r6, r2
 80084ea:	d505      	bpl.n	80084f8 <__swrite+0x1e>
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	2302      	movs	r3, #2
 80084f2:	2200      	movs	r2, #0
 80084f4:	f000 f868 	bl	80085c8 <_lseek_r>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	4632      	mov	r2, r6
 8008506:	463b      	mov	r3, r7
 8008508:	4628      	mov	r0, r5
 800850a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850e:	f000 b817 	b.w	8008540 <_write_r>

08008512 <__sseek>:
 8008512:	b510      	push	{r4, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851a:	f000 f855 	bl	80085c8 <_lseek_r>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	bf15      	itete	ne
 8008524:	6560      	strne	r0, [r4, #84]	; 0x54
 8008526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800852a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800852e:	81a3      	strheq	r3, [r4, #12]
 8008530:	bf18      	it	ne
 8008532:	81a3      	strhne	r3, [r4, #12]
 8008534:	bd10      	pop	{r4, pc}

08008536 <__sclose>:
 8008536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853a:	f000 b813 	b.w	8008564 <_close_r>
	...

08008540 <_write_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	; (8008560 <_write_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7f9 faa3 	bl	8001a9a <_write>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_write_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_write_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000348 	.word	0x20000348

08008564 <_close_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	; (8008580 <_close_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f9 faaf 	bl	8001ad2 <_close>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_close_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_close_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000348 	.word	0x20000348

08008584 <_fstat_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_fstat_r+0x20>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f7f9 faaa 	bl	8001aea <_fstat>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_fstat_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_fstat_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	20000348 	.word	0x20000348

080085a8 <_isatty_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_isatty_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f9 faa9 	bl	8001b0a <_isatty>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_isatty_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_isatty_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	20000348 	.word	0x20000348

080085c8 <_lseek_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_lseek_r+0x20>)
 80085cc:	4604      	mov	r4, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7f9 faa2 	bl	8001b20 <_lseek>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_lseek_r+0x1e>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_lseek_r+0x1e>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	20000348 	.word	0x20000348

080085ec <_read_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d07      	ldr	r5, [pc, #28]	; (800860c <_read_r+0x20>)
 80085f0:	4604      	mov	r4, r0
 80085f2:	4608      	mov	r0, r1
 80085f4:	4611      	mov	r1, r2
 80085f6:	2200      	movs	r2, #0
 80085f8:	602a      	str	r2, [r5, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f7f9 fa30 	bl	8001a60 <_read>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_read_r+0x1e>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_read_r+0x1e>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20000348 	.word	0x20000348

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
