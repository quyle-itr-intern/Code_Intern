
USB_UP_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008530  08008530  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  200000fc  08008634  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000177c  08008634  0002177c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013897  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003206  00000000  00000000  000339c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00036bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b29  00000000  00000000  000386f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001623d  00000000  00000000  00051221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890ae  00000000  00000000  0006745e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f050c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  000f055c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080084b0 	.word	0x080084b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080084b0 	.word	0x080084b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_GPIO_Init+0xc4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <MX_GPIO_Init+0xc4>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xc4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_GPIO_Init+0xc4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a22      	ldr	r2, [pc, #136]	; (800059c <MX_GPIO_Init+0xc4>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_GPIO_Init+0xc4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_GPIO_Init+0xc4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a1b      	ldr	r2, [pc, #108]	; (800059c <MX_GPIO_Init+0xc4>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_GPIO_Init+0xc4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xc8>)
 800054a:	f000 fe5f 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4814      	ldr	r0, [pc, #80]	; (80005a4 <MX_GPIO_Init+0xcc>)
 8000554:	f000 fe5a 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4619      	mov	r1, r3
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0xc8>)
 8000572:	f000 fcc7 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000576:	2310      	movs	r3, #16
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_GPIO_Init+0xcc>)
 800058e:	f000 fcb9 	bl	8000f04 <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020000 	.word	0x40020000

080005a8 <HAL_UART_RxCpltCallback>:

uint8_t rx_data[500] = {0};
uint8_t flag_reset_chip = 0;
uint8_t uart1_data = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1 )
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_UART_RxCpltCallback+0x2c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d108      	bne.n	80005cc <HAL_UART_RxCpltCallback+0x24>
	{
		CDC_Transmit_FS((uint8_t*) &uart1_data, 1);
 80005ba:	2101      	movs	r1, #1
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_UART_RxCpltCallback+0x30>)
 80005be:	f007 faf9 	bl	8007bb4 <CDC_Transmit_FS>
		HAL_UART_Receive_IT(&huart1, &uart1_data, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	4904      	ldr	r1, [pc, #16]	; (80005d8 <HAL_UART_RxCpltCallback+0x30>)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <HAL_UART_RxCpltCallback+0x34>)
 80005c8:	f002 fe07 	bl	80031da <HAL_UART_Receive_IT>
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40011000 	.word	0x40011000
 80005d8:	2000030d 	.word	0x2000030d
 80005dc:	20000310 	.word	0x20000310

080005e0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == USART2 )
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_UARTEx_RxEventCallback+0x34>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10a      	bne.n	800060c <HAL_UARTEx_RxEventCallback+0x2c>
	{
		CDC_Transmit_FS(rx_data, size);
 80005f6:	887b      	ldrh	r3, [r7, #2]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <HAL_UARTEx_RxEventCallback+0x38>)
 80005fc:	f007 fada 	bl	8007bb4 <CDC_Transmit_FS>
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, 500);
 8000600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000604:	4904      	ldr	r1, [pc, #16]	; (8000618 <HAL_UARTEx_RxEventCallback+0x38>)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000608:	f002 fe17 	bl	800323a <HAL_UARTEx_ReceiveToIdle_IT>
	}

}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	20000118 	.word	0x20000118
 800061c:	20000354 	.word	0x20000354

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa34 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f834 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ff54 	bl	80004d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000630:	f007 f9da 	bl	80079e8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f94c 	bl	80008d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000638:	f000 f920 	bl	800087c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, 500);
 800063c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000640:	490e      	ldr	r1, [pc, #56]	; (800067c <main+0x5c>)
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0x60>)
 8000644:	f002 fdf9 	bl	800323a <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_data, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <main+0x64>)
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0x68>)
 800064e:	f002 fdc4 	bl	80031da <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if( flag_reset_chip )
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <main+0x6c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0fb      	beq.n	8000652 <main+0x32>
	{
		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0x70>)
 8000660:	f000 fdd4 	bl	800120c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f000 fa85 	bl	8000b74 <HAL_Delay>
		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x70>)
 8000670:	f000 fdcc 	bl	800120c <HAL_GPIO_WritePin>
		flag_reset_chip = 0;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <main+0x6c>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
	if( flag_reset_chip )
 800067a:	e7ea      	b.n	8000652 <main+0x32>
 800067c:	20000118 	.word	0x20000118
 8000680:	20000354 	.word	0x20000354
 8000684:	2000030d 	.word	0x2000030d
 8000688:	20000310 	.word	0x20000310
 800068c:	2000030c 	.word	0x2000030c
 8000690:	40020000 	.word	0x40020000

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fefc 	bl	80084a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd4>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000708:	2319      	movs	r3, #25
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f824 	bl	800276c <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f81f 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fa86 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f809 	bl	800076c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_MspInit+0x4c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f98e 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <USART1_IRQHandler+0x10>)
 8000822:	f002 fd6f 	bl	8003304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000310 	.word	0x20000310

08000830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <USART2_IRQHandler+0x10>)
 8000836:	f002 fd65 	bl	8003304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000354 	.word	0x20000354

08000844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <OTG_FS_IRQHandler+0x10>)
 800084a:	f000 fe62 	bl	8001512 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001050 	.word	0x20001050

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f002 fbb2 	bl	800301c <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f7ff ff55 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000310 	.word	0x20000310
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f002 fb88 	bl	800301c <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f7ff ff2b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000354 	.word	0x20000354
 8000920:	40004400 	.word	0x40004400

08000924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a3a      	ldr	r2, [pc, #232]	; (8000a2c <HAL_UART_MspInit+0x108>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d135      	bne.n	80009b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a38      	ldr	r2, [pc, #224]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800097e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000990:	2307      	movs	r3, #7
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4826      	ldr	r0, [pc, #152]	; (8000a34 <HAL_UART_MspInit+0x110>)
 800099c:	f000 fab2 	bl	8000f04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2025      	movs	r0, #37	; 0x25
 80009a6:	f000 f9e4 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 f9fd 	bl	8000daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009b0:	e038      	b.n	8000a24 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0x114>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d133      	bne.n	8000a24 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x10c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a04:	2307      	movs	r3, #7
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <HAL_UART_MspInit+0x110>)
 8000a10:	f000 fa78 	bl	8000f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f000 f9aa 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1e:	2026      	movs	r0, #38	; 0x26
 8000a20:	f000 f9c3 	bl	8000daa <HAL_NVIC_EnableIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40004400 	.word	0x40004400

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a66:	f7ff fef7 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f007 fcf5 	bl	8008458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fdd7 	bl	8000620 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a80:	08008538 	.word	0x08008538
  ldr r2, =_sbss
 8000a84:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a88:	2000177c 	.word	0x2000177c

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f94f 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fe58 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f967 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f92f 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000398 	.word	0x20000398

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000398 	.word	0x20000398

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff feb6 	bl	8000b5c <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d008      	beq.n	8000e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e052      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0216 	bic.w	r2, r2, #22
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <HAL_DMA_Abort+0x62>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0208 	bic.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e60:	e013      	b.n	8000e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e62:	f7ff fe7b 	bl	8000b5c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d90c      	bls.n	8000e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e015      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e4      	bne.n	8000e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9c:	223f      	movs	r2, #63	; 0x3f
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d004      	beq.n	8000edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2205      	movs	r2, #5
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e159      	b.n	80011d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8148 	bne.w	80011ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a2 	beq.w	80011ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b54      	ldr	r3, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x202>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1fe>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x300>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x304>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f aea2 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43d9      	mvns	r1, r3
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	400b      	ands	r3, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001274:	b08f      	sub	sp, #60	; 0x3c
 8001276:	af0a      	add	r7, sp, #40	; 0x28
 8001278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e10f      	b.n	80014a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f006 fdd0 	bl	8007e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 f88f 	bl	80043e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	687e      	ldr	r6, [r7, #4]
 80012d0:	466d      	mov	r5, sp
 80012d2:	f106 0410 	add.w	r4, r6, #16
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012e6:	1d33      	adds	r3, r6, #4
 80012e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f002 ff66 	bl	80041bc <USB_CoreInit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0d0      	b.n	80014a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f87d 	bl	8004408 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e04a      	b.n	80013aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	333d      	adds	r3, #61	; 0x3d
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	333c      	adds	r3, #60	; 0x3c
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	b298      	uxth	r0, r3
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3344      	adds	r3, #68	; 0x44
 8001350:	4602      	mov	r2, r0
 8001352:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3340      	adds	r3, #64	; 0x40
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3348      	adds	r3, #72	; 0x48
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	334c      	adds	r3, #76	; 0x4c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3354      	adds	r3, #84	; 0x54
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d3af      	bcc.n	8001314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e044      	b.n	8001444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3b5      	bcc.n	80013ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	687e      	ldr	r6, [r7, #4]
 8001456:	466d      	mov	r5, sp
 8001458:	f106 0410 	add.w	r4, r6, #16
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001468:	e885 0003 	stmia.w	r5, {r0, r1}
 800146c:	1d33      	adds	r3, r6, #4
 800146e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f003 f815 	bl	80044a0 <USB_DevInit>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e00d      	b.n	80014a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f964 	bl	800576a <USB_DevDisconnect>

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_PCD_Start+0x1c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e020      	b.n	800150a <HAL_PCD_Start+0x5e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d109      	bne.n	80014ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d005      	beq.n	80014ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 ff67 	bl	80043c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 f914 	bl	8005728 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001512:	b590      	push	{r4, r7, lr}
 8001514:	b08d      	sub	sp, #52	; 0x34
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 f9d2 	bl	80058d2 <USB_GetMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 848a 	bne.w	8001e4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f004 f936 	bl	80057ac <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8480 	beq.w	8001e48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f004 f923 	bl	80057ac <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b02      	cmp	r3, #2
 800156e:	d107      	bne.n	8001580 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f002 0202 	and.w	r2, r2, #2
 800157e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f004 f911 	bl	80057ac <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b10      	cmp	r3, #16
 8001592:	d161      	bne.n	8001658 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0210 	bic.w	r2, r2, #16
 80015a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f003 020f 	and.w	r2, r3, #15
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	0c5b      	lsrs	r3, r3, #17
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d124      	bne.n	800161a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d035      	beq.n	8001648 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	6a38      	ldr	r0, [r7, #32]
 80015f0:	f003 ff48 	bl	8005484 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001600:	441a      	add	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001612:	441a      	add	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	e016      	b.n	8001648 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	0c5b      	lsrs	r3, r3, #17
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	2b06      	cmp	r3, #6
 8001624:	d110      	bne.n	8001648 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800162c:	2208      	movs	r2, #8
 800162e:	4619      	mov	r1, r3
 8001630:	6a38      	ldr	r0, [r7, #32]
 8001632:	f003 ff27 	bl	8005484 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001642:	441a      	add	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f004 f8a5 	bl	80057ac <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800166c:	f040 80a7 	bne.w	80017be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f8aa 	bl	80057d2 <USB_ReadDevAllOutEpInterrupt>
 800167e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001680:	e099      	b.n	80017b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 808e 	beq.w	80017aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f004 f8ce 	bl	800583a <USB_ReadDevOutEPInterrupt>
 800169e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00c      	beq.n	80016c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b6:	461a      	mov	r2, r3
 80016b8:	2301      	movs	r3, #1
 80016ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fec2 	bl	8002448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016da:	461a      	mov	r2, r3
 80016dc:	2308      	movs	r3, #8
 80016de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 ff98 	bl	8002618 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fe:	461a      	mov	r2, r3
 8001700:	2310      	movs	r3, #16
 8001702:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d030      	beq.n	8001770 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	d109      	bne.n	800172e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2200      	movs	r2, #0
 8001750:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f006 fc6f 	bl	800803c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176a:	461a      	mov	r2, r3
 800176c:	2302      	movs	r3, #2
 800176e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001786:	461a      	mov	r2, r3
 8001788:	2320      	movs	r3, #32
 800178a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a2:	461a      	mov	r2, r3
 80017a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	3301      	adds	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f af62 	bne.w	8001682 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fff2 	bl	80057ac <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d2:	f040 80db 	bne.w	800198c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 f813 	bl	8005806 <USB_ReadDevAllInEpInterrupt>
 80017e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017e6:	e0cd      	b.n	8001984 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80c2 	beq.w	8001978 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 f839 	bl	8005876 <USB_ReadDevInEPInterrupt>
 8001804:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d057      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	2201      	movs	r2, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	69f9      	ldr	r1, [r7, #28]
 800182c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001830:	4013      	ands	r3, r2
 8001832:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001840:	461a      	mov	r2, r3
 8001842:	2301      	movs	r3, #1
 8001844:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d132      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	334c      	adds	r3, #76	; 0x4c
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4403      	add	r3, r0
 800186e:	3348      	adds	r3, #72	; 0x48
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4419      	add	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	334c      	adds	r3, #76	; 0x4c
 8001884:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	2b00      	cmp	r3, #0
 800188a:	d113      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x3a2>
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3354      	adds	r3, #84	; 0x54
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018ac:	461a      	mov	r2, r3
 80018ae:	2101      	movs	r1, #1
 80018b0:	f004 f840 	bl	8005934 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f006 fb43 	bl	8007f46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d6:	461a      	mov	r2, r3
 80018d8:	2308      	movs	r3, #8
 80018da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f2:	461a      	mov	r2, r3
 80018f4:	2310      	movs	r3, #16
 80018f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190e:	461a      	mov	r2, r3
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d023      	beq.n	8001966 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800191e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001920:	6a38      	ldr	r0, [r7, #32]
 8001922:	f002 ff21 	bl	8004768 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	3338      	adds	r3, #56	; 0x38
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	78db      	ldrb	r3, [r3, #3]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f006 fb86 	bl	8008060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001960:	461a      	mov	r2, r3
 8001962:	2302      	movs	r3, #2
 8001964:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fcdb 	bl	800232e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3301      	adds	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f af2e 	bne.w	80017e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 ff0b 	bl	80057ac <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800199c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a0:	d122      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019c8:	2100      	movs	r1, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fec2 	bl	8002754 <HAL_PCDEx_LPM_Callback>
 80019d0:	e002      	b.n	80019d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f006 fb24 	bl	8008020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fedd 	bl	80057ac <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fc:	d112      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f006 fae0 	bl	8007fd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 febf 	bl	80057ac <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a38:	f040 80b7 	bne.w	8001baa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2110      	movs	r1, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fe86 	bl	8004768 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a60:	e046      	b.n	8001af0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a86:	0151      	lsls	r1, r2, #5
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	440a      	add	r2, r1
 8001a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aba:	0151      	lsls	r1, r2, #5
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	440a      	add	r2, r1
 8001ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ac4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ada:	0151      	lsls	r1, r2, #5
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	440a      	add	r2, r1
 8001ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3b3      	bcc.n	8001a62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f043 030b 	orr.w	r3, r3, #11
 8001b2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3c:	f043 030b 	orr.w	r3, r3, #11
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	e015      	b.n	8001b70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6a:	f043 030b 	orr.w	r3, r3, #11
 8001b6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b94:	461a      	mov	r2, r3
 8001b96:	f003 fecd 	bl	8005934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fdfc 	bl	80057ac <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbe:	d124      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fe92 	bl	80058ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fe47 	bl	8004862 <USB_GetDevSpeed>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681c      	ldr	r4, [r3, #0]
 8001be0:	f001 f9e8 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8001be4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f002 fb46 	bl	8004280 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f006 f9ce 	bl	8007f96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fdcc 	bl	80057ac <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d10a      	bne.n	8001c34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f006 f9ab 	bl	8007f7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f002 0208 	and.w	r2, r2, #8
 8001c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fdb7 	bl	80057ac <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d122      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e014      	b.n	8001c84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fb27 	bl	80022cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	3301      	adds	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3e5      	bcc.n	8001c5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fd8a 	bl	80057ac <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ca2:	d13b      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e02b      	b.n	8001d02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3340      	adds	r3, #64	; 0x40
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d115      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da12      	bge.n	8001cfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	333f      	adds	r3, #63	; 0x3f
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fae8 	bl	80022cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	3301      	adds	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3ce      	bcc.n	8001caa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fd43 	bl	80057ac <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d30:	d155      	bne.n	8001dde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d32:	2301      	movs	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e045      	b.n	8001dc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d12e      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da2b      	bge.n	8001dbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d121      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6053      	str	r3, [r2, #4]
            break;
 8001dbc:	e007      	b.n	8001dce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3b4      	bcc.n	8001d38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fce2 	bl	80057ac <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d10a      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f006 f945 	bl	8008084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fccc 	bl	80057ac <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d115      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f006 f935 	bl	80080a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e000      	b.n	8001e4a <HAL_PCD_IRQHandler+0x938>
      return;
 8001e48:	bf00      	nop
    }
  }
}
 8001e4a:	3734      	adds	r7, #52	; 0x34
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}

08001e50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_SetAddress+0x1a>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e013      	b.n	8001e92 <HAL_PCD_SetAddress+0x42>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fc2a 	bl	80056dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	70fb      	strb	r3, [r7, #3]
 8001eac:	460b      	mov	r3, r1
 8001eae:	803b      	strh	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da0f      	bge.n	8001ee0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3338      	adds	r3, #56	; 0x38
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	705a      	strb	r2, [r3, #1]
 8001ede:	e00f      	b.n	8001f00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f0c:	883a      	ldrh	r2, [r7, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	78ba      	ldrb	r2, [r7, #2]
 8001f16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f2a:	78bb      	ldrb	r3, [r7, #2]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d102      	bne.n	8001f36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_EP_Open+0xaa>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_Open+0xc8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fcaa 	bl	80048ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f60:	7afb      	ldrb	r3, [r7, #11]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da0f      	bge.n	8001f9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3338      	adds	r3, #56	; 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	705a      	strb	r2, [r3, #1]
 8001f9c:	e00f      	b.n	8001fbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_PCD_EP_Close+0x6e>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e00e      	b.n	8001ff6 <HAL_PCD_EP_Close+0x8c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fce8 	bl	80049bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	460b      	mov	r3, r1
 800200c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	b2da      	uxtb	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d102      	bne.n	800205a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6979      	ldr	r1, [r7, #20]
 8002072:	f002 ffc7 	bl	8005004 <USB_EP0StartXfer>
 8002076:	e008      	b.n	800208a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	6979      	ldr	r1, [r7, #20]
 8002086:	f002 fd75 	bl	8004b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	3338      	adds	r3, #56	; 0x38
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	b2da      	uxtb	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	6979      	ldr	r1, [r7, #20]
 8002136:	f002 ff65 	bl	8005004 <USB_EP0StartXfer>
 800213a:	e008      	b.n	800214e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	6979      	ldr	r1, [r7, #20]
 800214a:	f002 fd13 	bl	8004b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d901      	bls.n	8002176 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e050      	b.n	8002218 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da0f      	bge.n	800219e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3338      	adds	r3, #56	; 0x38
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	705a      	strb	r2, [r3, #1]
 800219c:	e00d      	b.n	80021ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_PCD_EP_SetStall+0x82>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e01e      	b.n	8002218 <HAL_PCD_EP_SetStall+0xc0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f9a3 	bl	8005534 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	b2d9      	uxtb	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002208:	461a      	mov	r2, r3
 800220a:	f003 fb93 	bl	8005934 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 020f 	and.w	r2, r3, #15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d901      	bls.n	800223e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e042      	b.n	80022c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800223e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	da0f      	bge.n	8002266 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 020f 	and.w	r2, r3, #15
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	3338      	adds	r3, #56	; 0x38
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	705a      	strb	r2, [r3, #1]
 8002264:	e00f      	b.n	8002286 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_PCD_EP_ClrStall+0x86>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e00e      	b.n	80022c4 <HAL_PCD_EP_ClrStall+0xa4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f9ab 	bl	8005610 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da0c      	bge.n	80022fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	3338      	adds	r3, #56	; 0x38
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	3304      	adds	r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e00c      	b.n	8002314 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 ffca 	bl	80052b4 <USB_EPStopXfer>
 8002320:	4603      	mov	r3, r0
 8002322:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002324:	7afb      	ldrb	r3, [r7, #11]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	; 0x28
 8002332:	af02      	add	r7, sp, #8
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	3338      	adds	r3, #56	; 0x38
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	d901      	bls.n	8002366 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06c      	b.n	8002440 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	429a      	cmp	r2, r3
 800237a:	d902      	bls.n	8002382 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3303      	adds	r3, #3
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800238a:	e02b      	b.n	80023e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d902      	bls.n	80023a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3303      	adds	r3, #3
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	4603      	mov	r3, r0
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f003 f81e 	bl	8005408 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	441a      	add	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d809      	bhi.n	800240e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002402:	429a      	cmp	r2, r3
 8002404:	d203      	bcs.n	800240e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1be      	bne.n	800238c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	429a      	cmp	r2, r3
 8002418:	d811      	bhi.n	800243e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	2201      	movs	r2, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	43db      	mvns	r3, r3
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800243a:	4013      	ands	r3, r2
 800243c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d17b      	bne.n	8002576 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d015      	beq.n	80024b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4a61      	ldr	r2, [pc, #388]	; (8002610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	f240 80b9 	bls.w	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80b3 	beq.w	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024aa:	461a      	mov	r2, r3
 80024ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b0:	6093      	str	r3, [r2, #8]
 80024b2:	e0a7      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	2320      	movs	r3, #32
 80024ce:	6093      	str	r3, [r2, #8]
 80024d0:	e098      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 8093 	bne.w	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d90f      	bls.n	8002506 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002502:	6093      	str	r3, [r2, #8]
 8002504:	e07e      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	0159      	lsls	r1, r3, #5
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	440b      	add	r3, r1
 8002528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d114      	bne.n	8002568 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	f003 f9ee 	bl	8005934 <USB_EP0_OutStart>
 8002558:	e006      	b.n	8002568 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f005 fcce 	bl	8007f10 <HAL_PCD_DataOutStageCallback>
 8002574:	e046      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d124      	bne.n	80025c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259a:	6093      	str	r3, [r2, #8]
 800259c:	e032      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	2320      	movs	r3, #32
 80025b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f005 fca5 	bl	8007f10 <HAL_PCD_DataOutStageCallback>
 80025c6:	e01d      	b.n	8002604 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d114      	bne.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f0:	461a      	mov	r2, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	f003 f99e 	bl	8005934 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f005 fc86 	bl	8007f10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	4f54300a 	.word	0x4f54300a
 8002614:	4f54310a 	.word	0x4f54310a

08002618 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	3304      	adds	r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d90e      	bls.n	800266c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002664:	461a      	mov	r2, r3
 8002666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f005 fc3d 	bl	8007eec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d90c      	bls.n	8002694 <PCD_EP_OutSetupPacket_int+0x7c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800268c:	461a      	mov	r2, r3
 800268e:	2101      	movs	r1, #1
 8002690:	f003 f950 	bl	8005934 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	4f54300a 	.word	0x4f54300a

080026a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
 80026b0:	4613      	mov	r3, r2
 80026b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026c2:	883b      	ldrh	r3, [r7, #0]
 80026c4:	0419      	lsls	r1, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
 80026d0:	e028      	b.n	8002724 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	4413      	add	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e00d      	b.n	8002702 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	3301      	adds	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	3b01      	subs	r3, #1
 8002708:	429a      	cmp	r2, r3
 800270a:	d3ec      	bcc.n	80026e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800270c:	883b      	ldrh	r3, [r7, #0]
 800270e:	0418      	lsls	r0, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	3b01      	subs	r3, #1
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	4302      	orrs	r2, r0
 800271c:	3340      	adds	r3, #64	; 0x40
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e267      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05b      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d157      	bne.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e242      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x74>
 80027d2:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6c      	ldr	r2, [pc, #432]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe f99a 	bl	8000b5c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe f996 	bl	8000b5c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e207      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xc0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe f986 	bl	8000b5c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe f982 	bl	8000b5c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1f3      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c7      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe f93b 	bl	8000b5c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe f937 	bl	8000b5c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a8      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe f91a 	bl	8000b5c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe f916 	bl	8000b5c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e187      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe f8fa 	bl	8000b5c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe f8f6 	bl	8000b5c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e167      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x200>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe f8e3 	bl	8000b5c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe f8df 	bl	8000b5c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e150      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b81      	ldr	r3, [pc, #516]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a7c      	ldr	r2, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f89f 	bl	8000b5c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe f89b 	bl	8000b5c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e10c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2ea>
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a63      	ldr	r2, [pc, #396]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x30c>
 8002a5e:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a5e      	ldr	r2, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe f860 	bl	8000b5c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f85c 	bl	8000b5c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0cb      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f84a 	bl	8000b5c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe f846 	bl	8000b5c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b5      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a1 	beq.w	8002c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d05c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d141      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe f81a 	bl	8000b5c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe f816 	bl	8000b5c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e087      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fd ffef 	bl	8000b5c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fd ffeb 	bl	8000b5c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x416>
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fd ffd8 	bl	8000b5c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fd ffd4 	bl	8000b5c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e045      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x444>
 8002bce:	e03d      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e038      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d028      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fd ff06 	bl	8000b5c <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fd ff02 	bl	8000b5c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fe66 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	08008510 	.word	0x08008510
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b090      	sub	sp, #64	; 0x40
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
 8002e34:	2300      	movs	r3, #0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	2300      	movs	r3, #0
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d00d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f200 80a1 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5a:	e09b      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e60:	e09b      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e66:	e098      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d028      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	2200      	movs	r2, #0
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	627a      	str	r2, [r7, #36]	; 0x24
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e90:	2100      	movs	r1, #0
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e94:	fb03 f201 	mul.w	r2, r3, r1
 8002e98:	2300      	movs	r3, #0
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eae:	4413      	add	r3, r2
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ec2:	f7fd f987 	bl	80001d4 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4613      	mov	r3, r2
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ece:	e053      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	617a      	str	r2, [r7, #20]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ee2:	f04f 0b00 	mov.w	fp, #0
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	465b      	mov	r3, fp
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	ebb2 080a 	subs.w	r8, r2, sl
 8002f02:	eb63 090b 	sbc.w	r9, r3, fp
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	00eb      	lsls	r3, r5, #3
 8002f2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f30:	00e2      	lsls	r2, r4, #3
 8002f32:	4614      	mov	r4, r2
 8002f34:	461d      	mov	r5, r3
 8002f36:	eb14 030a 	adds.w	r3, r4, sl
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	eb45 030b 	adc.w	r3, r5, fp
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	028b      	lsls	r3, r1, #10
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f58:	4621      	mov	r1, r4
 8002f5a:	028a      	lsls	r2, r1, #10
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f62:	2200      	movs	r2, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	60fa      	str	r2, [r7, #12]
 8002f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f6c:	f7fd f932 	bl	80001d4 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetSysClockFreq+0x184>)
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	017d7840 	.word	0x017d7840

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08008520 	.word	0x08008520

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ff8:	f7ff ffdc 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0b5b      	lsrs	r3, r3, #13
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	08008520 	.word	0x08008520

0800301c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e03f      	b.n	80030ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fc6e 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fe37 	bl	8003cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b08a      	sub	sp, #40	; 0x28
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d17c      	bne.n	80031d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_UART_Transmit+0x2c>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e075      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x3e>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e06e      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2221      	movs	r2, #33	; 0x21
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800310a:	f7fd fd27 	bl	8000b5c <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d108      	bne.n	8003138 <HAL_UART_Transmit+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e003      	b.n	8003140 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003148:	e02a      	b.n	80031a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb77 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e036      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3302      	adds	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e007      	b.n	8003192 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1cf      	bne.n	800314a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fb47 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e006      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d11d      	bne.n	8003230 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Receive_IT+0x26>
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e016      	b.n	8003232 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_UART_Receive_IT+0x38>
 800320e:	2302      	movs	r3, #2
 8003210:	e00f      	b.n	8003232 <HAL_UART_Receive_IT+0x58>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	461a      	mov	r2, r3
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fb7c 	bl	8003924 <UART_Start_Receive_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	e000      	b.n	8003232 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08c      	sub	sp, #48	; 0x30
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	d152      	bne.n	80032fa <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04b      	b.n	80032fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800326e:	2302      	movs	r3, #2
 8003270:	e044      	b.n	80032fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	461a      	mov	r2, r3
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fb4c 	bl	8003924 <UART_Start_Receive_IT>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12c      	bne.n	80032f4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d125      	bne.n	80032ee <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	617b      	str	r3, [r7, #20]
   return(result);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f043 0310 	orr.w	r3, r3, #16
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d8:	627a      	str	r2, [r7, #36]	; 0x24
 80032da:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80032ec:	e002      	b.n	80032f4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80032f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f8:	e000      	b.n	80032fc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3730      	adds	r7, #48	; 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0ba      	sub	sp, #232	; 0xe8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fbfb 	bl	8003b5e <UART_Receive_IT>
      return;
 8003368:	e256      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80de 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80d1 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 81ed 	beq.w	800380e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb86 	bl	8003b5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_UART_IRQHandler+0x17a>
 8003476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04f      	beq.n	800351e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa8e 	bl	80039a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d141      	bne.n	8003516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1d9      	bne.n	8003492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_UART_IRQHandler+0x3dc>)
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fce3 	bl	8000ebe <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f990 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f98c 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f988 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800352a:	e170      	b.n	800380e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e16e      	b.n	800380e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 814a 	bne.w	80037ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8143 	beq.w	80037ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 813c 	beq.w	80037ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	f040 80b4 	bne.w	80036e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8140 	beq.w	8003812 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800359a:	429a      	cmp	r2, r3
 800359c:	f080 8139 	bcs.w	8003812 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b2:	f000 8088 	beq.w	80036c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d9      	bne.n	80035b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800362a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800362e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e1      	bne.n	8003602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	f023 0310 	bic.w	r3, r3, #16
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80036aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e3      	bne.n	8003684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fb8c 	bl	8000dde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fc ff82 	bl	80005e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036dc:	e099      	b.n	8003812 <HAL_UART_IRQHandler+0x50e>
 80036de:	bf00      	nop
 80036e0:	08003a67 	.word	0x08003a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 808b 	beq.w	8003816 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8086 	beq.w	8003816 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800372e:	647a      	str	r2, [r7, #68]	; 0x44
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003766:	633a      	str	r2, [r7, #48]	; 0x30
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e3      	bne.n	8003742 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	60fb      	str	r3, [r7, #12]
   return(result);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0310 	bic.w	r3, r3, #16
 800379e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037ac:	61fa      	str	r2, [r7, #28]
 80037ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	617b      	str	r3, [r7, #20]
   return(result);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e3      	bne.n	8003788 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fc ff0a 	bl	80005e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037cc:	e023      	b.n	8003816 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_UART_IRQHandler+0x4ea>
 80037da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f951 	bl	8003a8e <UART_Transmit_IT>
    return;
 80037ec:	e014      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_UART_IRQHandler+0x514>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f991 	bl	8003b2e <UART_EndTransmit_IT>
    return;
 800380c:	e004      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
    return;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
      return;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
      return;
 8003816:	bf00      	nop
  }
}
 8003818:	37e8      	adds	r7, #232	; 0xe8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b090      	sub	sp, #64	; 0x40
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003858:	e050      	b.n	80038fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d04c      	beq.n	80038fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x30>
 8003868:	f7fd f978 	bl	8000b5c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003874:	429a      	cmp	r2, r3
 8003876:	d241      	bcs.n	80038fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003898:	637a      	str	r2, [r7, #52]	; 0x34
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	613b      	str	r3, [r7, #16]
   return(result);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038cc:	623a      	str	r2, [r7, #32]
 80038ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	69f9      	ldr	r1, [r7, #28]
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e00f      	b.n	800391c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	429a      	cmp	r2, r3
 8003918:	d09f      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3740      	adds	r7, #64	; 0x40
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2222      	movs	r2, #34	; 0x22
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003970:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b095      	sub	sp, #84	; 0x54
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039c8:	643a      	str	r2, [r7, #64]	; 0x40
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d119      	bne.n	8003a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a38:	61ba      	str	r2, [r7, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	613b      	str	r3, [r7, #16]
   return(result);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a5a:	bf00      	nop
 8003a5c:	3754      	adds	r7, #84	; 0x54
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff fed7 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b21      	cmp	r3, #33	; 0x21
 8003aa0:	d13e      	bne.n	8003b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d114      	bne.n	8003ad6 <UART_Transmit_IT+0x48>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d110      	bne.n	8003ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]
 8003ad4:	e008      	b.n	8003ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	1c59      	adds	r1, r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6211      	str	r1, [r2, #32]
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4619      	mov	r1, r3
 8003af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fe66 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b22      	cmp	r3, #34	; 0x22
 8003b70:	f040 80ab 	bne.w	8003cca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d117      	bne.n	8003bae <UART_Receive_IT+0x50>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	1c9a      	adds	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
 8003bac:	e026      	b.n	8003bfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d007      	beq.n	8003bd2 <UART_Receive_IT+0x74>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <UART_Receive_IT+0x82>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e008      	b.n	8003bf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d15a      	bne.n	8003cc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0220 	bic.w	r2, r2, #32
 8003c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d135      	bne.n	8003cbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	613b      	str	r3, [r7, #16]
   return(result);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f023 0310 	bic.w	r3, r3, #16
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	623a      	str	r2, [r7, #32]
 8003c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e5      	bne.n	8003c56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d10a      	bne.n	8003cae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fc fc93 	bl	80005e0 <HAL_UARTEx_RxEventCallback>
 8003cba:	e002      	b.n	8003cc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fc fc73 	bl	80005a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e002      	b.n	8003ccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3730      	adds	r7, #48	; 0x30
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd8:	b0c0      	sub	sp, #256	; 0x100
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	68d9      	ldr	r1, [r3, #12]
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	ea40 0301 	orr.w	r3, r0, r1
 8003cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d2c:	f021 010c 	bic.w	r1, r1, #12
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	6999      	ldr	r1, [r3, #24]
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	ea40 0301 	orr.w	r3, r0, r1
 8003d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4b8f      	ldr	r3, [pc, #572]	; (8003fa0 <UART_SetConfig+0x2cc>)
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d005      	beq.n	8003d74 <UART_SetConfig+0xa0>
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <UART_SetConfig+0x2d0>)
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d104      	bne.n	8003d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7ff f93e 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8003d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d7c:	e003      	b.n	8003d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7e:	f7ff f925 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8003d82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d90:	f040 810c 	bne.w	8003fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003da6:	4622      	mov	r2, r4
 8003da8:	462b      	mov	r3, r5
 8003daa:	1891      	adds	r1, r2, r2
 8003dac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dae:	415b      	adcs	r3, r3
 8003db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003db6:	4621      	mov	r1, r4
 8003db8:	eb12 0801 	adds.w	r8, r2, r1
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	eb43 0901 	adc.w	r9, r3, r1
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	4699      	mov	r9, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	eb18 0303 	adds.w	r3, r8, r3
 8003de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003de4:	462b      	mov	r3, r5
 8003de6:	eb49 0303 	adc.w	r3, r9, r3
 8003dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e02:	460b      	mov	r3, r1
 8003e04:	18db      	adds	r3, r3, r3
 8003e06:	653b      	str	r3, [r7, #80]	; 0x50
 8003e08:	4613      	mov	r3, r2
 8003e0a:	eb42 0303 	adc.w	r3, r2, r3
 8003e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e18:	f7fc f9dc 	bl	80001d4 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <UART_SetConfig+0x2d4>)
 8003e22:	fba3 2302 	umull	r2, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	011c      	lsls	r4, r3, #4
 8003e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	1891      	adds	r1, r2, r2
 8003e42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e44:	415b      	adcs	r3, r3
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb43 0b01 	adc.w	fp, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e6c:	4692      	mov	sl, r2
 8003e6e:	469b      	mov	fp, r3
 8003e70:	4643      	mov	r3, r8
 8003e72:	eb1a 0303 	adds.w	r3, sl, r3
 8003e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	18db      	adds	r3, r3, r3
 8003e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eae:	f7fc f991 	bl	80001d4 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <UART_SetConfig+0x2d4>)
 8003eba:	fba3 2301 	umull	r2, r3, r3, r1
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2264      	movs	r2, #100	; 0x64
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	1acb      	subs	r3, r1, r3
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <UART_SetConfig+0x2d4>)
 8003ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003edc:	441c      	add	r4, r3
 8003ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	1891      	adds	r1, r2, r2
 8003ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ef8:	415b      	adcs	r3, r3
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f00:	4641      	mov	r1, r8
 8003f02:	1851      	adds	r1, r2, r1
 8003f04:	6339      	str	r1, [r7, #48]	; 0x30
 8003f06:	4649      	mov	r1, r9
 8003f08:	414b      	adcs	r3, r1
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f18:	4659      	mov	r1, fp
 8003f1a:	00cb      	lsls	r3, r1, #3
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f22:	4651      	mov	r1, sl
 8003f24:	00ca      	lsls	r2, r1, #3
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	189b      	adds	r3, r3, r2
 8003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f34:	464b      	mov	r3, r9
 8003f36:	460a      	mov	r2, r1
 8003f38:	eb42 0303 	adc.w	r3, r2, r3
 8003f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f54:	460b      	mov	r3, r1
 8003f56:	18db      	adds	r3, r3, r3
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	eb42 0303 	adc.w	r3, r2, r3
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f6a:	f7fc f933 	bl	80001d4 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <UART_SetConfig+0x2d4>)
 8003f74:	fba3 1302 	umull	r1, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	2164      	movs	r1, #100	; 0x64
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	3332      	adds	r3, #50	; 0x32
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <UART_SetConfig+0x2d4>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	f003 0207 	and.w	r2, r3, #7
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4422      	add	r2, r4
 8003f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f9c:	e105      	b.n	80041aa <UART_SetConfig+0x4d6>
 8003f9e:	bf00      	nop
 8003fa0:	40011000 	.word	0x40011000
 8003fa4:	40011400 	.word	0x40011400
 8003fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fbe:	4642      	mov	r2, r8
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	1891      	adds	r1, r2, r2
 8003fc4:	6239      	str	r1, [r7, #32]
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fce:	4641      	mov	r1, r8
 8003fd0:	1854      	adds	r4, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb43 0501 	adc.w	r5, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	00eb      	lsls	r3, r5, #3
 8003fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe6:	00e2      	lsls	r2, r4, #3
 8003fe8:	4614      	mov	r4, r2
 8003fea:	461d      	mov	r5, r3
 8003fec:	4643      	mov	r3, r8
 8003fee:	18e3      	adds	r3, r4, r3
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	eb45 0303 	adc.w	r3, r5, r3
 8003ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800400a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800401a:	4629      	mov	r1, r5
 800401c:	008b      	lsls	r3, r1, #2
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004024:	4621      	mov	r1, r4
 8004026:	008a      	lsls	r2, r1, #2
 8004028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800402c:	f7fc f8d2 	bl	80001d4 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b60      	ldr	r3, [pc, #384]	; (80041b8 <UART_SetConfig+0x4e4>)
 8004036:	fba3 2302 	umull	r2, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	011c      	lsls	r4, r3, #4
 800403e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800404c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	61b9      	str	r1, [r7, #24]
 8004058:	415b      	adcs	r3, r3
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004060:	4641      	mov	r1, r8
 8004062:	1851      	adds	r1, r2, r1
 8004064:	6139      	str	r1, [r7, #16]
 8004066:	4649      	mov	r1, r9
 8004068:	414b      	adcs	r3, r1
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004078:	4659      	mov	r1, fp
 800407a:	00cb      	lsls	r3, r1, #3
 800407c:	4651      	mov	r1, sl
 800407e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004082:	4651      	mov	r1, sl
 8004084:	00ca      	lsls	r2, r1, #3
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	4603      	mov	r3, r0
 800408c:	4642      	mov	r2, r8
 800408e:	189b      	adds	r3, r3, r2
 8004090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004094:	464b      	mov	r3, r9
 8004096:	460a      	mov	r2, r1
 8004098:	eb42 0303 	adc.w	r3, r2, r3
 800409c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80040aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040b8:	4649      	mov	r1, r9
 80040ba:	008b      	lsls	r3, r1, #2
 80040bc:	4641      	mov	r1, r8
 80040be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c2:	4641      	mov	r1, r8
 80040c4:	008a      	lsls	r2, r1, #2
 80040c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040ca:	f7fc f883 	bl	80001d4 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <UART_SetConfig+0x4e4>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	3332      	adds	r3, #50	; 0x32
 80040e6:	4a34      	ldr	r2, [pc, #208]	; (80041b8 <UART_SetConfig+0x4e4>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f2:	441c      	add	r4, r3
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	673b      	str	r3, [r7, #112]	; 0x70
 80040fc:	677a      	str	r2, [r7, #116]	; 0x74
 80040fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004102:	4642      	mov	r2, r8
 8004104:	464b      	mov	r3, r9
 8004106:	1891      	adds	r1, r2, r2
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	415b      	adcs	r3, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004112:	4641      	mov	r1, r8
 8004114:	1851      	adds	r1, r2, r1
 8004116:	6039      	str	r1, [r7, #0]
 8004118:	4649      	mov	r1, r9
 800411a:	414b      	adcs	r3, r1
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800412a:	4659      	mov	r1, fp
 800412c:	00cb      	lsls	r3, r1, #3
 800412e:	4651      	mov	r1, sl
 8004130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004134:	4651      	mov	r1, sl
 8004136:	00ca      	lsls	r2, r1, #3
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	4603      	mov	r3, r0
 800413e:	4642      	mov	r2, r8
 8004140:	189b      	adds	r3, r3, r2
 8004142:	66bb      	str	r3, [r7, #104]	; 0x68
 8004144:	464b      	mov	r3, r9
 8004146:	460a      	mov	r2, r1
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	663b      	str	r3, [r7, #96]	; 0x60
 8004158:	667a      	str	r2, [r7, #100]	; 0x64
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004166:	4649      	mov	r1, r9
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	4641      	mov	r1, r8
 800416c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004170:	4641      	mov	r1, r8
 8004172:	008a      	lsls	r2, r1, #2
 8004174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004178:	f7fc f82c 	bl	80001d4 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <UART_SetConfig+0x4e4>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <UART_SetConfig+0x4e4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4422      	add	r2, r4
 80041a8:	609a      	str	r2, [r3, #8]
}
 80041aa:	bf00      	nop
 80041ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	51eb851f 	.word	0x51eb851f

080041bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041bc:	b084      	sub	sp, #16
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	f107 001c 	add.w	r0, r7, #28
 80041ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d122      	bne.n	800421a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f001 fbee 	bl	80059f0 <USB_CoreReset>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e01a      	b.n	8004250 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f001 fbe2 	bl	80059f0 <USB_CoreReset>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
 8004242:	e005      	b.n	8004250 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10b      	bne.n	800426e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f043 0206 	orr.w	r2, r3, #6
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800427a:	b004      	add	sp, #16
 800427c:	4770      	bx	lr
	...

08004280 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d165      	bne.n	8004360 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a41      	ldr	r2, [pc, #260]	; (800439c <USB_SetTurnaroundTime+0x11c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d906      	bls.n	80042aa <USB_SetTurnaroundTime+0x2a>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <USB_SetTurnaroundTime+0x120>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d202      	bcs.n	80042aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042a4:	230f      	movs	r3, #15
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e062      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <USB_SetTurnaroundTime+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d306      	bcc.n	80042c0 <USB_SetTurnaroundTime+0x40>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a3b      	ldr	r2, [pc, #236]	; (80043a4 <USB_SetTurnaroundTime+0x124>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d202      	bcs.n	80042c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042ba:	230e      	movs	r3, #14
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e057      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <USB_SetTurnaroundTime+0x124>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d306      	bcc.n	80042d6 <USB_SetTurnaroundTime+0x56>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <USB_SetTurnaroundTime+0x128>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d202      	bcs.n	80042d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042d0:	230d      	movs	r3, #13
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e04c      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <USB_SetTurnaroundTime+0x128>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d306      	bcc.n	80042ec <USB_SetTurnaroundTime+0x6c>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a32      	ldr	r2, [pc, #200]	; (80043ac <USB_SetTurnaroundTime+0x12c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d802      	bhi.n	80042ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042e6:	230c      	movs	r3, #12
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e041      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <USB_SetTurnaroundTime+0x12c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d906      	bls.n	8004302 <USB_SetTurnaroundTime+0x82>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <USB_SetTurnaroundTime+0x130>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d802      	bhi.n	8004302 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042fc:	230b      	movs	r3, #11
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e036      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <USB_SetTurnaroundTime+0x130>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d906      	bls.n	8004318 <USB_SetTurnaroundTime+0x98>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <USB_SetTurnaroundTime+0x134>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d802      	bhi.n	8004318 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004312:	230a      	movs	r3, #10
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e02b      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <USB_SetTurnaroundTime+0x134>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d906      	bls.n	800432e <USB_SetTurnaroundTime+0xae>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <USB_SetTurnaroundTime+0x138>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d202      	bcs.n	800432e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004328:	2309      	movs	r3, #9
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e020      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <USB_SetTurnaroundTime+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d306      	bcc.n	8004344 <USB_SetTurnaroundTime+0xc4>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a20      	ldr	r2, [pc, #128]	; (80043bc <USB_SetTurnaroundTime+0x13c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d802      	bhi.n	8004344 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800433e:	2308      	movs	r3, #8
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e015      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <USB_SetTurnaroundTime+0x13c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d906      	bls.n	800435a <USB_SetTurnaroundTime+0xda>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <USB_SetTurnaroundTime+0x140>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d202      	bcs.n	800435a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004354:	2307      	movs	r3, #7
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e00a      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800435a:	2306      	movs	r3, #6
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e007      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004366:	2309      	movs	r3, #9
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e001      	b.n	8004370 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800436c:	2309      	movs	r3, #9
 800436e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	00d8acbf 	.word	0x00d8acbf
 80043a0:	00e4e1c0 	.word	0x00e4e1c0
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	01067380 	.word	0x01067380
 80043ac:	011a499f 	.word	0x011a499f
 80043b0:	01312cff 	.word	0x01312cff
 80043b4:	014ca43f 	.word	0x014ca43f
 80043b8:	016e3600 	.word	0x016e3600
 80043bc:	01a6ab1f 	.word	0x01a6ab1f
 80043c0:	01e84800 	.word	0x01e84800

080043c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d115      	bne.n	8004456 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004436:	2001      	movs	r0, #1
 8004438:	f7fc fb9c 	bl	8000b74 <HAL_Delay>
      ms++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 fa45 	bl	80058d2 <USB_GetMode>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d01e      	beq.n	800448c <USB_SetCurrentMode+0x84>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b31      	cmp	r3, #49	; 0x31
 8004452:	d9f0      	bls.n	8004436 <USB_SetCurrentMode+0x2e>
 8004454:	e01a      	b.n	800448c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d115      	bne.n	8004488 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004468:	2001      	movs	r0, #1
 800446a:	f7fc fb83 	bl	8000b74 <HAL_Delay>
      ms++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 fa2c 	bl	80058d2 <USB_GetMode>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <USB_SetCurrentMode+0x84>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b31      	cmp	r3, #49	; 0x31
 8004484:	d9f0      	bls.n	8004468 <USB_SetCurrentMode+0x60>
 8004486:	e001      	b.n	800448c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e005      	b.n	8004498 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b32      	cmp	r3, #50	; 0x32
 8004490:	d101      	bne.n	8004496 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a0:	b084      	sub	sp, #16
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	e009      	b.n	80044d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3340      	adds	r3, #64	; 0x40
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3301      	adds	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b0e      	cmp	r3, #14
 80044d8:	d9f2      	bls.n	80044c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11c      	bne.n	800451a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
 8004518:	e00b      	b.n	8004532 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004538:	461a      	mov	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	4619      	mov	r1, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	461a      	mov	r2, r3
 800454e:	680b      	ldr	r3, [r1, #0]
 8004550:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	2b01      	cmp	r3, #1
 8004556:	d10c      	bne.n	8004572 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800455e:	2100      	movs	r1, #0
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f965 	bl	8004830 <USB_SetDevSpeed>
 8004566:	e008      	b.n	800457a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004568:	2101      	movs	r1, #1
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f960 	bl	8004830 <USB_SetDevSpeed>
 8004570:	e003      	b.n	800457a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004572:	2103      	movs	r1, #3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f95b 	bl	8004830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800457a:	2110      	movs	r1, #16
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8f3 	bl	8004768 <USB_FlushTxFifo>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f91f 	bl	80047d0 <USB_FlushRxFifo>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	461a      	mov	r2, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	461a      	mov	r2, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e043      	b.n	800464e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045dc:	d118      	bne.n	8004610 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e013      	b.n	8004622 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e008      	b.n	8004622 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	461a      	mov	r2, r3
 8004642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3301      	adds	r3, #1
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d3b7      	bcc.n	80045c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e043      	b.n	80046e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004672:	d118      	bne.n	80046a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e013      	b.n	80046b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e008      	b.n	80046b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d3b7      	bcc.n	800465c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800470c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <USB_DevInit+0x2c4>)
 8004726:	4313      	orrs	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f043 0208 	orr.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d107      	bne.n	8004754 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004754:	7dfb      	ldrb	r3, [r7, #23]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004760:	b004      	add	sp, #16
 8004762:	4770      	bx	lr
 8004764:	803c3800 	.word	0x803c3800

08004768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <USB_FlushTxFifo+0x64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e01b      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	daf2      	bge.n	8004776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <USB_FlushTxFifo+0x64>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e006      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d0f0      	beq.n	80047a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	00030d40 	.word	0x00030d40

080047d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <USB_FlushRxFifo+0x5c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e018      	b.n	8004820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	daf2      	bge.n	80047dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2210      	movs	r2, #16
 80047fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <USB_FlushRxFifo+0x5c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d0f0      	beq.n	8004800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00030d40 	.word	0x00030d40

08004830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
 8004886:	e00a      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d002      	beq.n	8004894 <USB_GetDevSpeed+0x32>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b06      	cmp	r3, #6
 8004892:	d102      	bne.n	800489a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
 8004898:	e001      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800489a:	230f      	movs	r3, #15
 800489c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800489e:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d13a      	bne.n	800493e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d155      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	791b      	ldrb	r3, [r3, #4]
 800491a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	4313      	orrs	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e036      	b.n	80049ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4313      	orrs	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11a      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004992:	430b      	orrs	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d161      	bne.n	8004a9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ee:	d11f      	bne.n	8004a30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a50:	4013      	ands	r3, r2
 8004a52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a74:	4013      	ands	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	4619      	mov	r1, r3
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <USB_DeactivateEndpoint+0x1b0>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	e060      	b.n	8004b5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab2:	d11f      	bne.n	8004af4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b14:	4013      	ands	r3, r2
 8004b16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	4619      	mov	r1, r3
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <USB_DeactivateEndpoint+0x1b4>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	ec337800 	.word	0xec337800
 8004b70:	eff37800 	.word	0xeff37800

08004b74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 815c 	bne.w	8004e4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d132      	bne.n	8004c04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfc:	0cdb      	lsrs	r3, r3, #19
 8004bfe:	04db      	lsls	r3, r3, #19
 8004c00:	6113      	str	r3, [r2, #16]
 8004c02:	e074      	b.n	8004cee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1e:	0cdb      	lsrs	r3, r3, #19
 8004c20:	04db      	lsls	r3, r3, #19
 8004c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	440b      	add	r3, r1
 8004c60:	1e59      	subs	r1, r3, #1
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c6c:	4b9d      	ldr	r3, [pc, #628]	; (8004ee4 <USB_EPStartXfer+0x370>)
 8004c6e:	400b      	ands	r3, r1
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	0148      	lsls	r0, r1, #5
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	4401      	add	r1, r0
 8004c78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	69b9      	ldr	r1, [r7, #24]
 8004c98:	0148      	lsls	r0, r1, #5
 8004c9a:	69f9      	ldr	r1, [r7, #28]
 8004c9c:	4401      	add	r1, r0
 8004c9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	791b      	ldrb	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11f      	bne.n	8004cee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ccc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d14b      	bne.n	8004d8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	791b      	ldrb	r3, [r3, #4]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d128      	bne.n	8004d6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d110      	bne.n	8004d4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e00f      	b.n	8004d6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e133      	b.n	8004ff4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004daa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d015      	beq.n	8004de0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 811b 	beq.w	8004ff4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	634b      	str	r3, [r1, #52]	; 0x34
 8004dde:	e109      	b.n	8004ff4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e00f      	b.n	8004e32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6919      	ldr	r1, [r3, #16]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	b298      	uxth	r0, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fade 	bl	8005408 <USB_WritePacket>
 8004e4c:	e0d2      	b.n	8004ff4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	0cdb      	lsrs	r3, r3, #19
 8004e6a:	04db      	lsls	r3, r3, #19
 8004e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d126      	bne.n	8004ee8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	0148      	lsls	r0, r1, #5
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	4401      	add	r1, r0
 8004eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ede:	6113      	str	r3, [r2, #16]
 8004ee0:	e03a      	b.n	8004f58 <USB_EPStartXfer+0x3e4>
 8004ee2:	bf00      	nop
 8004ee4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	8afa      	ldrh	r2, [r7, #22]
 8004f04:	fb03 f202 	mul.w	r2, r3, r2
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	04d9      	lsls	r1, r3, #19
 8004f1e:	4b38      	ldr	r3, [pc, #224]	; (8005000 <USB_EPStartXfer+0x48c>)
 8004f20:	400b      	ands	r3, r1
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	0148      	lsls	r0, r1, #5
 8004f26:	69f9      	ldr	r1, [r7, #28]
 8004f28:	4401      	add	r1, r0
 8004f2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	0148      	lsls	r0, r1, #5
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	4401      	add	r1, r0
 8004f50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6919      	ldr	r1, [r3, #16]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	460a      	mov	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	791b      	ldrb	r3, [r3, #4]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d128      	bne.n	8004fd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d110      	bne.n	8004fb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00f      	b.n	8004fd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	1ff80000 	.word	0x1ff80000

08005004 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	f040 80ce 	bne.w	80051c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d132      	bne.n	8005094 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	0cdb      	lsrs	r3, r3, #19
 800508e:	04db      	lsls	r3, r3, #19
 8005090:	6113      	str	r3, [r2, #16]
 8005092:	e04e      	b.n	8005132 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ae:	0cdb      	lsrs	r3, r3, #19
 80050b0:	04db      	lsls	r3, r3, #19
 80050b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d903      	bls.n	80050ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	6939      	ldr	r1, [r7, #16]
 8005124:	0148      	lsls	r0, r1, #5
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	4401      	add	r1, r0
 800512a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d11e      	bne.n	8005176 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e097      	b.n	80052a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005194:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8083 	beq.w	80052a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051bc:	4313      	orrs	r3, r2
 80051be:	634b      	str	r3, [r1, #52]	; 0x34
 80051c0:	e071      	b.n	80052a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	0cdb      	lsrs	r3, r3, #19
 80051de:	04db      	lsls	r3, r3, #19
 80051e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005204:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800523c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005254:	6939      	ldr	r1, [r7, #16]
 8005256:	0148      	lsls	r0, r1, #5
 8005258:	6979      	ldr	r1, [r7, #20]
 800525a:	4401      	add	r1, r0
 800525c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005260:	4313      	orrs	r3, r2
 8005262:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10d      	bne.n	8005286 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6919      	ldr	r1, [r3, #16]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	460a      	mov	r2, r1
 8005284:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d14a      	bne.n	8005368 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	f040 8086 	bne.w	80053fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005310:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005334:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005342:	4293      	cmp	r3, r2
 8005344:	d902      	bls.n	800534c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
          break;
 800534a:	e056      	b.n	80053fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005364:	d0e7      	beq.n	8005336 <USB_EPStopXfer+0x82>
 8005366:	e048      	b.n	80053fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005380:	d13b      	bne.n	80053fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d902      	bls.n	80053e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
          break;
 80053de:	e00c      	b.n	80053fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d0e7      	beq.n	80053ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4611      	mov	r1, r2
 8005414:	461a      	mov	r2, r3
 8005416:	460b      	mov	r3, r1
 8005418:	71fb      	strb	r3, [r7, #7]
 800541a:	4613      	mov	r3, r2
 800541c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800542a:	2b00      	cmp	r3, #0
 800542c:	d123      	bne.n	8005476 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800542e:	88bb      	ldrh	r3, [r7, #4]
 8005430:	3303      	adds	r3, #3
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e018      	b.n	800546e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	031a      	lsls	r2, r3, #12
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005448:	461a      	mov	r2, r3
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	3301      	adds	r3, #1
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3e2      	bcc.n	800543c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3724      	adds	r7, #36	; 0x24
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005484:	b480      	push	{r7}
 8005486:	b08b      	sub	sp, #44	; 0x2c
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	e014      	b.n	80054da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	3301      	adds	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3301      	adds	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	3301      	adds	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	3301      	adds	r3, #1
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	6a3a      	ldr	r2, [r7, #32]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3e6      	bcc.n	80054b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054e2:	8bfb      	ldrh	r3, [r7, #30]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01e      	beq.n	8005526 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	461a      	mov	r2, r3
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	701a      	strb	r2, [r3, #0]
      i++;
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	3301      	adds	r3, #1
 8005512:	623b      	str	r3, [r7, #32]
      pDest++;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	3301      	adds	r3, #1
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800551a:	8bfb      	ldrh	r3, [r7, #30]
 800551c:	3b01      	subs	r3, #1
 800551e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005520:	8bfb      	ldrh	r3, [r7, #30]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ea      	bne.n	80054fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005528:	4618      	mov	r0, r3
 800552a:	372c      	adds	r7, #44	; 0x2c
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d12c      	bne.n	80055aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	db12      	blt.n	8005588 <USB_EPSetStall+0x54>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005586:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e02b      	b.n	8005602 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db12      	blt.n	80055e2 <USB_EPSetStall+0xae>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00f      	beq.n	80055e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005600:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d128      	bne.n	800567e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800564a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d003      	beq.n	800565c <USB_EPClearStall+0x4c>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	791b      	ldrb	r3, [r3, #4]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d138      	bne.n	80056ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	e027      	b.n	80056ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005698:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800569c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	791b      	ldrb	r3, [r3, #4]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d003      	beq.n	80056ae <USB_EPClearStall+0x9e>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	791b      	ldrb	r3, [r3, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d10f      	bne.n	80056ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005716:	4313      	orrs	r3, r2
 8005718:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005756:	f023 0302 	bic.w	r3, r3, #2
 800575a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005784:	f023 0303 	bic.w	r3, r3, #3
 8005788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005798:	f043 0302 	orr.w	r3, r3, #2
 800579c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4013      	ands	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	0c1b      	lsrs	r3, r3, #16
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	b29b      	uxth	r3, r3
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005868:	68bb      	ldr	r3, [r7, #8]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4013      	ands	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058c4:	68bb      	ldr	r3, [r7, #8]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0301 	and.w	r3, r3, #1
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005908:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800590c:	f023 0307 	bic.w	r3, r3, #7
 8005910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	460b      	mov	r3, r1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	333c      	adds	r3, #60	; 0x3c
 800594a:	3304      	adds	r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4a26      	ldr	r2, [pc, #152]	; (80059ec <USB_EP0_OutStart+0xb8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d90a      	bls.n	800596e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005968:	d101      	bne.n	800596e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e037      	b.n	80059de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	461a      	mov	r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	f043 0318 	orr.w	r3, r3, #24
 80059a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10f      	bne.n	80059dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	461a      	mov	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	4f54300a 	.word	0x4f54300a

080059f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <USB_CoreReset+0x64>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e01b      	b.n	8005a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	daf2      	bge.n	80059fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <USB_CoreReset+0x64>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e006      	b.n	8005a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d0f0      	beq.n	8005a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	00030d40 	.word	0x00030d40

08005a58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a68:	f002 fcb2 	bl	80083d0 <USBD_static_malloc>
 8005a6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	32b0      	adds	r2, #176	; 0xb0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a84:	2302      	movs	r3, #2
 8005a86:	e0d4      	b.n	8005c32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f002 fd06 	bl	80084a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	32b0      	adds	r2, #176	; 0xb0
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32b0      	adds	r2, #176	; 0xb0
 8005aae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	7c1b      	ldrb	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d138      	bne.n	8005b32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ac0:	4b5e      	ldr	r3, [pc, #376]	; (8005c3c <USBD_CDC_Init+0x1e4>)
 8005ac2:	7819      	ldrb	r1, [r3, #0]
 8005ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac8:	2202      	movs	r2, #2
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f002 fb5d 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ad0:	4b5a      	ldr	r3, [pc, #360]	; (8005c3c <USBD_CDC_Init+0x1e4>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f003 020f 	and.w	r2, r3, #15
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3324      	adds	r3, #36	; 0x24
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005aec:	7819      	ldrb	r1, [r3, #0]
 8005aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af2:	2202      	movs	r2, #2
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f002 fb48 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005afa:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b12:	2201      	movs	r2, #1
 8005b14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b16:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <USBD_CDC_Init+0x1ec>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3326      	adds	r3, #38	; 0x26
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e035      	b.n	8005b9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b32:	4b42      	ldr	r3, [pc, #264]	; (8005c3c <USBD_CDC_Init+0x1e4>)
 8005b34:	7819      	ldrb	r1, [r3, #0]
 8005b36:	2340      	movs	r3, #64	; 0x40
 8005b38:	2202      	movs	r2, #2
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f002 fb25 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b40:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <USBD_CDC_Init+0x1e4>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	2201      	movs	r2, #1
 8005b58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005b5c:	7819      	ldrb	r1, [r3, #0]
 8005b5e:	2340      	movs	r3, #64	; 0x40
 8005b60:	2202      	movs	r2, #2
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fb11 	bl	800818a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b68:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b80:	2201      	movs	r2, #1
 8005b82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <USBD_CDC_Init+0x1ec>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 020f 	and.w	r2, r3, #15
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3326      	adds	r3, #38	; 0x26
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <USBD_CDC_Init+0x1ec>)
 8005ba0:	7819      	ldrb	r1, [r3, #0]
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f002 faef 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <USBD_CDC_Init+0x1ec>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3324      	adds	r3, #36	; 0x24
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	33b0      	adds	r3, #176	; 0xb0
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e018      	b.n	8005c32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7c1b      	ldrb	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c08:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005c0a:	7819      	ldrb	r1, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f002 fba6 	bl	8008368 <USBD_LL_PrepareReceive>
 8005c1c:	e008      	b.n	8005c30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <USBD_CDC_Init+0x1e8>)
 8005c20:	7819      	ldrb	r1, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f002 fb9c 	bl	8008368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000093 	.word	0x20000093
 8005c40:	20000094 	.word	0x20000094
 8005c44:	20000095 	.word	0x20000095

08005c48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005c54:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <USBD_CDC_DeInit+0xf8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f002 fabb 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <USBD_CDC_DeInit+0xf8>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	2200      	movs	r2, #0
 8005c78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005c7a:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <USBD_CDC_DeInit+0xfc>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 faa8 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c86:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <USBD_CDC_DeInit+0xfc>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ca2:	4b29      	ldr	r3, [pc, #164]	; (8005d48 <USBD_CDC_DeInit+0x100>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f002 fa94 	bl	80081d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005cae:	4b26      	ldr	r3, [pc, #152]	; (8005d48 <USBD_CDC_DeInit+0x100>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f003 020f 	and.w	r2, r3, #15
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3324      	adds	r3, #36	; 0x24
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005cc8:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <USBD_CDC_DeInit+0x100>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 020f 	and.w	r2, r3, #15
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	3326      	adds	r3, #38	; 0x26
 8005cde:	2200      	movs	r2, #0
 8005ce0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	32b0      	adds	r2, #176	; 0xb0
 8005cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01f      	beq.n	8005d34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	33b0      	adds	r3, #176	; 0xb0
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	32b0      	adds	r2, #176	; 0xb0
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f002 fb68 	bl	80083ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32b0      	adds	r2, #176	; 0xb0
 8005d26:	2100      	movs	r1, #0
 8005d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000093 	.word	0x20000093
 8005d44:	20000094 	.word	0x20000094
 8005d48:	20000095 	.word	0x20000095

08005d4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	32b0      	adds	r2, #176	; 0xb0
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0bf      	b.n	8005efc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d050      	beq.n	8005e2a <USBD_CDC_Setup+0xde>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	f040 80af 	bne.w	8005eec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	88db      	ldrh	r3, [r3, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d03a      	beq.n	8005e0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da1b      	bge.n	8005dd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	33b0      	adds	r3, #176	; 0xb0
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005db6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	88d2      	ldrh	r2, [r2, #6]
 8005dbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	88db      	ldrh	r3, [r3, #6]
 8005dc2:	2b07      	cmp	r3, #7
 8005dc4:	bf28      	it	cs
 8005dc6:	2307      	movcs	r3, #7
 8005dc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	89fa      	ldrh	r2, [r7, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fd89 	bl	80078e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005dd6:	e090      	b.n	8005efa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	785a      	ldrb	r2, [r3, #1]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	88db      	ldrh	r3, [r3, #6]
 8005de6:	2b3f      	cmp	r3, #63	; 0x3f
 8005de8:	d803      	bhi.n	8005df2 <USBD_CDC_Setup+0xa6>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	88db      	ldrh	r3, [r3, #6]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	e000      	b.n	8005df4 <USBD_CDC_Setup+0xa8>
 8005df2:	2240      	movs	r2, #64	; 0x40
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005dfa:	6939      	ldr	r1, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005e02:	461a      	mov	r2, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 fd9b 	bl	8007940 <USBD_CtlPrepareRx>
      break;
 8005e0a:	e076      	b.n	8005efa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	33b0      	adds	r3, #176	; 0xb0
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	7850      	ldrb	r0, [r2, #1]
 8005e22:	2200      	movs	r2, #0
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	4798      	blx	r3
      break;
 8005e28:	e067      	b.n	8005efa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b0b      	cmp	r3, #11
 8005e30:	d851      	bhi.n	8005ed6 <USBD_CDC_Setup+0x18a>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <USBD_CDC_Setup+0xec>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005ee5 	.word	0x08005ee5
 8005e40:	08005ed7 	.word	0x08005ed7
 8005e44:	08005ed7 	.word	0x08005ed7
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005ed7 	.word	0x08005ed7
 8005e50:	08005ed7 	.word	0x08005ed7
 8005e54:	08005ed7 	.word	0x08005ed7
 8005e58:	08005ed7 	.word	0x08005ed7
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005ebd 	.word	0x08005ebd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d107      	bne.n	8005e84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e74:	f107 030a 	add.w	r3, r7, #10
 8005e78:	2202      	movs	r2, #2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 fd33 	bl	80078e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e82:	e032      	b.n	8005eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fcbd 	bl	8007806 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e90:	e02b      	b.n	8005eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d107      	bne.n	8005eae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e9e:	f107 030d 	add.w	r3, r7, #13
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fd1e 	bl	80078e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eac:	e01d      	b.n	8005eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fca8 	bl	8007806 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eba:	e016      	b.n	8005eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d00f      	beq.n	8005ee8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 fc9b 	bl	8007806 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ed4:	e008      	b.n	8005ee8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fc94 	bl	8007806 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee2:	e002      	b.n	8005eea <USBD_CDC_Setup+0x19e>
          break;
 8005ee4:	bf00      	nop
 8005ee6:	e008      	b.n	8005efa <USBD_CDC_Setup+0x1ae>
          break;
 8005ee8:	bf00      	nop
      }
      break;
 8005eea:	e006      	b.n	8005efa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 fc89 	bl	8007806 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005f16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32b0      	adds	r2, #176	; 0xb0
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e065      	b.n	8005ffa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	32b0      	adds	r2, #176	; 0xb0
 8005f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3318      	adds	r3, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02f      	beq.n	8005fb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	f003 010f 	and.w	r1, r3, #15
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	460b      	mov	r3, r1
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4403      	add	r3, r0
 8005f80:	3348      	adds	r3, #72	; 0x48
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d112      	bne.n	8005fb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005faa:	78f9      	ldrb	r1, [r7, #3]
 8005fac:	2300      	movs	r3, #0
 8005fae:	2200      	movs	r2, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f002 f9b8 	bl	8008326 <USBD_LL_Transmit>
 8005fb6:	e01f      	b.n	8005ff8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	33b0      	adds	r3, #176	; 0xb0
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	33b0      	adds	r3, #176	; 0xb0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32b0      	adds	r2, #176	; 0xb0
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	32b0      	adds	r2, #176	; 0xb0
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006030:	2303      	movs	r3, #3
 8006032:	e01a      	b.n	800606a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 f9b6 	bl	80083aa <USBD_LL_GetRxDataSize>
 800603e:	4602      	mov	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	33b0      	adds	r3, #176	; 0xb0
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006064:	4611      	mov	r1, r2
 8006066:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	32b0      	adds	r2, #176	; 0xb0
 8006084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006088:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	e025      	b.n	80060e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	33b0      	adds	r3, #176	; 0xb0
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01a      	beq.n	80060de <USBD_CDC_EP0_RxReady+0x6c>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060ae:	2bff      	cmp	r3, #255	; 0xff
 80060b0:	d015      	beq.n	80060de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	33b0      	adds	r3, #176	; 0xb0
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80060ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80060d2:	b292      	uxth	r2, r2
 80060d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060f0:	2182      	movs	r1, #130	; 0x82
 80060f2:	4818      	ldr	r0, [pc, #96]	; (8006154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060f4:	f000 fd4f 	bl	8006b96 <USBD_GetEpDesc>
 80060f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060fa:	2101      	movs	r1, #1
 80060fc:	4815      	ldr	r0, [pc, #84]	; (8006154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060fe:	f000 fd4a 	bl	8006b96 <USBD_GetEpDesc>
 8006102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006104:	2181      	movs	r1, #129	; 0x81
 8006106:	4813      	ldr	r0, [pc, #76]	; (8006154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006108:	f000 fd45 	bl	8006b96 <USBD_GetEpDesc>
 800610c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2210      	movs	r2, #16
 8006118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d006      	beq.n	800612e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2200      	movs	r2, #0
 8006124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006128:	711a      	strb	r2, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613c:	711a      	strb	r2, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2243      	movs	r2, #67	; 0x43
 8006146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000050 	.word	0x20000050

08006158 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006160:	2182      	movs	r1, #130	; 0x82
 8006162:	4818      	ldr	r0, [pc, #96]	; (80061c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006164:	f000 fd17 	bl	8006b96 <USBD_GetEpDesc>
 8006168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800616a:	2101      	movs	r1, #1
 800616c:	4815      	ldr	r0, [pc, #84]	; (80061c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800616e:	f000 fd12 	bl	8006b96 <USBD_GetEpDesc>
 8006172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006174:	2181      	movs	r1, #129	; 0x81
 8006176:	4813      	ldr	r0, [pc, #76]	; (80061c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006178:	f000 fd0d 	bl	8006b96 <USBD_GetEpDesc>
 800617c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2210      	movs	r2, #16
 8006188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2200      	movs	r2, #0
 8006194:	711a      	strb	r2, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f042 0202 	orr.w	r2, r2, #2
 800619c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	711a      	strb	r2, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f042 0202 	orr.w	r2, r2, #2
 80061b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2243      	movs	r2, #67	; 0x43
 80061b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000050 	.word	0x20000050

080061c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061d0:	2182      	movs	r1, #130	; 0x82
 80061d2:	4818      	ldr	r0, [pc, #96]	; (8006234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061d4:	f000 fcdf 	bl	8006b96 <USBD_GetEpDesc>
 80061d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061da:	2101      	movs	r1, #1
 80061dc:	4815      	ldr	r0, [pc, #84]	; (8006234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061de:	f000 fcda 	bl	8006b96 <USBD_GetEpDesc>
 80061e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061e4:	2181      	movs	r1, #129	; 0x81
 80061e6:	4813      	ldr	r0, [pc, #76]	; (8006234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061e8:	f000 fcd5 	bl	8006b96 <USBD_GetEpDesc>
 80061ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2210      	movs	r2, #16
 80061f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d006      	beq.n	800620e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2200      	movs	r2, #0
 8006204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006208:	711a      	strb	r2, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d006      	beq.n	8006222 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621c:	711a      	strb	r2, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2243      	movs	r2, #67	; 0x43
 8006226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006228:	4b02      	ldr	r3, [pc, #8]	; (8006234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000050 	.word	0x20000050

08006238 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	220a      	movs	r2, #10
 8006244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006246:	4b03      	ldr	r3, [pc, #12]	; (8006254 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	2000000c 	.word	0x2000000c

08006258 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	e009      	b.n	8006280 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	33b0      	adds	r3, #176	; 0xb0
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	32b0      	adds	r2, #176	; 0xb0
 80062a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e008      	b.n	80062c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	; 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e004      	b.n	80062fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	32b0      	adds	r2, #176	; 0xb0
 800631e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006322:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	32b0      	adds	r2, #176	; 0xb0
 8006332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	e025      	b.n	800638a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11f      	bne.n	8006388 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2201      	movs	r2, #1
 800634c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <USBD_CDC_TransmitPacket+0x88>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4403      	add	r3, r0
 800636a:	3318      	adds	r3, #24
 800636c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <USBD_CDC_TransmitPacket+0x88>)
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 ffd1 	bl	8008326 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000093 	.word	0x20000093

08006398 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	32b0      	adds	r2, #176	; 0xb0
 80063aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32b0      	adds	r2, #176	; 0xb0
 80063ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e018      	b.n	80063f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7c1b      	ldrb	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <USBD_CDC_ReceivePacket+0x68>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 ffc3 	bl	8008368 <USBD_LL_PrepareReceive>
 80063e2:	e008      	b.n	80063f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <USBD_CDC_ReceivePacket+0x68>)
 80063e6:	7819      	ldrb	r1, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ffb9 	bl	8008368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000094 	.word	0x20000094

08006404 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	e01f      	b.n	800645c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 fe33 	bl	80080bc <USBD_LL_Init>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]

  return ret;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006478:	2303      	movs	r3, #3
 800647a:	e025      	b.n	80064c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	32ae      	adds	r2, #174	; 0xae
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00f      	beq.n	80064b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	32ae      	adds	r2, #174	; 0xae
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	f107 020e 	add.w	r2, r7, #14
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	4602      	mov	r2, r0
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 fe3b 	bl	8008154 <USBD_LL_Start>
 80064de:	4603      	mov	r3, r0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	4611      	mov	r1, r2
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	4611      	mov	r1, r2
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f001 f908 	bl	8007792 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d01a      	beq.n	80065dc <USBD_LL_SetupStage+0x72>
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d822      	bhi.n	80065f0 <USBD_LL_SetupStage+0x86>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <USBD_LL_SetupStage+0x4a>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d00a      	beq.n	80065c8 <USBD_LL_SetupStage+0x5e>
 80065b2:	e01d      	b.n	80065f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fb5f 	bl	8006c80 <USBD_StdDevReq>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
      break;
 80065c6:	e020      	b.n	800660a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fbc7 	bl	8006d64 <USBD_StdItfReq>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
      break;
 80065da:	e016      	b.n	800660a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc29 	bl	8006e3c <USBD_StdEPReq>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
      break;
 80065ee:	e00c      	b.n	800660a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fe08 	bl	8008214 <USBD_LL_StallEP>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
      break;
 8006608:	bf00      	nop
  }

  return ret;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	460b      	mov	r3, r1
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006626:	7afb      	ldrb	r3, [r7, #11]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d16e      	bne.n	800670a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800663a:	2b03      	cmp	r3, #3
 800663c:	f040 8098 	bne.w	8006770 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d913      	bls.n	8006674 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	1ad2      	subs	r2, r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	4293      	cmp	r3, r2
 8006664:	bf28      	it	cs
 8006666:	4613      	movcs	r3, r2
 8006668:	461a      	mov	r2, r3
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 f984 	bl	800797a <USBD_CtlContinueRx>
 8006672:	e07d      	b.n	8006770 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b02      	cmp	r3, #2
 8006680:	d014      	beq.n	80066ac <USBD_LL_DataOutStage+0x98>
 8006682:	2b02      	cmp	r3, #2
 8006684:	d81d      	bhi.n	80066c2 <USBD_LL_DataOutStage+0xae>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <USBD_LL_DataOutStage+0x7c>
 800668a:	2b01      	cmp	r3, #1
 800668c:	d003      	beq.n	8006696 <USBD_LL_DataOutStage+0x82>
 800668e:	e018      	b.n	80066c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	75bb      	strb	r3, [r7, #22]
            break;
 8006694:	e018      	b.n	80066c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800669c:	b2db      	uxtb	r3, r3
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fa5e 	bl	8006b62 <USBD_CoreFindIF>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75bb      	strb	r3, [r7, #22]
            break;
 80066aa:	e00d      	b.n	80066c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	4619      	mov	r1, r3
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fa60 	bl	8006b7c <USBD_CoreFindEP>
 80066bc:	4603      	mov	r3, r0
 80066be:	75bb      	strb	r3, [r7, #22]
            break;
 80066c0:	e002      	b.n	80066c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75bb      	strb	r3, [r7, #22]
            break;
 80066c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80066c8:	7dbb      	ldrb	r3, [r7, #22]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d113      	bne.n	8006702 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80066da:	7dba      	ldrb	r2, [r7, #22]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	32ae      	adds	r2, #174	; 0xae
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00b      	beq.n	8006702 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80066ea:	7dba      	ldrb	r2, [r7, #22]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80066f2:	7dba      	ldrb	r2, [r7, #22]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	32ae      	adds	r2, #174	; 0xae
 80066f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 f94a 	bl	800799c <USBD_CtlSendStatus>
 8006708:	e032      	b.n	8006770 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006710:	b2db      	uxtb	r3, r3
 8006712:	4619      	mov	r1, r3
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa31 	bl	8006b7c <USBD_CoreFindEP>
 800671a:	4603      	mov	r3, r0
 800671c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800671e:	7dbb      	ldrb	r3, [r7, #22]
 8006720:	2bff      	cmp	r3, #255	; 0xff
 8006722:	d025      	beq.n	8006770 <USBD_LL_DataOutStage+0x15c>
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d122      	bne.n	8006770 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b03      	cmp	r3, #3
 8006734:	d117      	bne.n	8006766 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006736:	7dba      	ldrb	r2, [r7, #22]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	32ae      	adds	r2, #174	; 0xae
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00f      	beq.n	8006766 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006746:	7dba      	ldrb	r2, [r7, #22]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800674e:	7dba      	ldrb	r2, [r7, #22]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	32ae      	adds	r2, #174	; 0xae
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	7afa      	ldrb	r2, [r7, #11]
 800675c:	4611      	mov	r1, r2
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	4798      	blx	r3
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	e000      	b.n	8006772 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	460b      	mov	r3, r1
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d16f      	bne.n	800686e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3314      	adds	r3, #20
 8006792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800679a:	2b02      	cmp	r3, #2
 800679c:	d15a      	bne.n	8006854 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d914      	bls.n	80067d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	461a      	mov	r2, r3
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 f8ac 	bl	800791e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067c6:	2300      	movs	r3, #0
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f001 fdcb 	bl	8008368 <USBD_LL_PrepareReceive>
 80067d2:	e03f      	b.n	8006854 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d11c      	bne.n	800681a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d316      	bcc.n	800681a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d20f      	bcs.n	800681a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f001 f88d 	bl	800791e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800680c:	2300      	movs	r3, #0
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f001 fda8 	bl	8008368 <USBD_LL_PrepareReceive>
 8006818:	e01c      	b.n	8006854 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d10f      	bne.n	8006846 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f001 fce3 	bl	8008214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 f8b7 	bl	80079c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d03a      	beq.n	80068d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff fe42 	bl	80064e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800686c:	e032      	b.n	80068d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006874:	b2db      	uxtb	r3, r3
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f97f 	bl	8006b7c <USBD_CoreFindEP>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2bff      	cmp	r3, #255	; 0xff
 8006886:	d025      	beq.n	80068d4 <USBD_LL_DataInStage+0x15a>
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d122      	bne.n	80068d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d11c      	bne.n	80068d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800689a:	7dfa      	ldrb	r2, [r7, #23]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	32ae      	adds	r2, #174	; 0xae
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d014      	beq.n	80068d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80068aa:	7dfa      	ldrb	r2, [r7, #23]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80068b2:	7dfa      	ldrb	r2, [r7, #23]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	32ae      	adds	r2, #174	; 0xae
 80068b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	7afa      	ldrb	r2, [r7, #11]
 80068c0:	4611      	mov	r1, r2
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	4798      	blx	r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80068ca:	7dbb      	ldrb	r3, [r7, #22]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80068d0:	7dbb      	ldrb	r3, [r7, #22]
 80068d2:	e000      	b.n	80068d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6852      	ldr	r2, [r2, #4]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	4611      	mov	r1, r2
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	2200      	movs	r2, #0
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fc1d 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2200      	movs	r2, #0
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fc0f 	bl	800818a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2240      	movs	r2, #64	; 0x40
 8006976:	621a      	str	r2, [r3, #32]

  return ret;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2204      	movs	r2, #4
 80069bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d106      	bne.n	80069f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d110      	bne.n	8006a34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32ae      	adds	r2, #174	; 0xae
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e01c      	b.n	8006a9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d115      	bne.n	8006a98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32ae      	adds	r2, #174	; 0xae
 8006a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32ae      	adds	r2, #174	; 0xae
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	4611      	mov	r1, r2
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	32ae      	adds	r2, #174	; 0xae
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e01c      	b.n	8006afe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d115      	bne.n	8006afc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	32ae      	adds	r2, #174	; 0xae
 8006ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32ae      	adds	r2, #174	; 0xae
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	4611      	mov	r1, r2
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6852      	ldr	r2, [r2, #4]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	4611      	mov	r1, r2
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d920      	bls.n	8006c00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006bc6:	e013      	b.n	8006bf0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006bc8:	f107 030a 	add.w	r3, r7, #10
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f000 f81b 	bl	8006c0a <USBD_GetNextDesc>
 8006bd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d108      	bne.n	8006bf0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	789b      	ldrb	r3, [r3, #2]
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d008      	beq.n	8006bfe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	897b      	ldrh	r3, [r7, #10]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d8e5      	bhi.n	8006bc8 <USBD_GetEpDesc+0x32>
 8006bfc:	e000      	b.n	8006c00 <USBD_GetEpDesc+0x6a>
          break;
 8006bfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c00:	693b      	ldr	r3, [r7, #16]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	881a      	ldrh	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4413      	add	r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c36:	68fb      	ldr	r3, [r7, #12]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c62:	8a3b      	ldrh	r3, [r7, #16]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	b21a      	sxth	r2, r3
 8006c68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b21b      	sxth	r3, r3
 8006c70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c72:	89fb      	ldrh	r3, [r7, #14]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d005      	beq.n	8006ca6 <USBD_StdDevReq+0x26>
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	d857      	bhi.n	8006d4e <USBD_StdDevReq+0xce>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <USBD_StdDevReq+0x42>
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d153      	bne.n	8006d4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	32ae      	adds	r2, #174	; 0xae
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc0:	e04a      	b.n	8006d58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d83b      	bhi.n	8006d42 <USBD_StdDevReq+0xc2>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <USBD_StdDevReq+0x50>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006d43 	.word	0x08006d43
 8006cdc:	08006d2f 	.word	0x08006d2f
 8006ce0:	08006d43 	.word	0x08006d43
 8006ce4:	08006d03 	.word	0x08006d03
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d43 	.word	0x08006d43
 8006cf0:	08006d1b 	.word	0x08006d1b
 8006cf4:	08006d0d 	.word	0x08006d0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa3c 	bl	8007178 <USBD_GetDescriptor>
          break;
 8006d00:	e024      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fba1 	bl	800744c <USBD_SetAddress>
          break;
 8006d0a:	e01f      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fbe0 	bl	80074d4 <USBD_SetConfig>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
          break;
 8006d18:	e018      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc83 	bl	8007628 <USBD_GetConfig>
          break;
 8006d22:	e013      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fcb4 	bl	8007694 <USBD_GetStatus>
          break;
 8006d2c:	e00e      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fce3 	bl	80076fc <USBD_SetFeature>
          break;
 8006d36:	e009      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fd07 	bl	800774e <USBD_ClrFeature>
          break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fd5e 	bl	8007806 <USBD_CtlError>
          break;
 8006d4a:	bf00      	nop
      }
      break;
 8006d4c:	e004      	b.n	8006d58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fd58 	bl	8007806 <USBD_CtlError>
      break;
 8006d56:	bf00      	nop
  }

  return ret;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop

08006d64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d005      	beq.n	8006d8a <USBD_StdItfReq+0x26>
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d852      	bhi.n	8006e28 <USBD_StdItfReq+0xc4>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USBD_StdItfReq+0x26>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d14e      	bne.n	8006e28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d840      	bhi.n	8006e1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	889b      	ldrh	r3, [r3, #4]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d836      	bhi.n	8006e10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fed9 	bl	8006b62 <USBD_CoreFindIF>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2bff      	cmp	r3, #255	; 0xff
 8006db8:	d01d      	beq.n	8006df6 <USBD_StdItfReq+0x92>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11a      	bne.n	8006df6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006dc0:	7bba      	ldrb	r2, [r7, #14]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32ae      	adds	r2, #174	; 0xae
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00f      	beq.n	8006df0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006dd0:	7bba      	ldrb	r2, [r7, #14]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006dd8:	7bba      	ldrb	r2, [r7, #14]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32ae      	adds	r2, #174	; 0xae
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006dee:	e004      	b.n	8006dfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006df4:	e001      	b.n	8006dfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	88db      	ldrh	r3, [r3, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <USBD_StdItfReq+0xc0>
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fdc7 	bl	800799c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e0e:	e009      	b.n	8006e24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fcf7 	bl	8007806 <USBD_CtlError>
          break;
 8006e18:	e004      	b.n	8006e24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fcf2 	bl	8007806 <USBD_CtlError>
          break;
 8006e22:	e000      	b.n	8006e26 <USBD_StdItfReq+0xc2>
          break;
 8006e24:	bf00      	nop
      }
      break;
 8006e26:	e004      	b.n	8006e32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fceb 	bl	8007806 <USBD_CtlError>
      break;
 8006e30:	bf00      	nop
  }

  return ret;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	889b      	ldrh	r3, [r3, #4]
 8006e4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d007      	beq.n	8006e6c <USBD_StdEPReq+0x30>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	f200 817f 	bhi.w	8007160 <USBD_StdEPReq+0x324>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d02a      	beq.n	8006ebc <USBD_StdEPReq+0x80>
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	f040 817a 	bne.w	8007160 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fe83 	bl	8006b7c <USBD_CoreFindEP>
 8006e76:	4603      	mov	r3, r0
 8006e78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e7a:	7b7b      	ldrb	r3, [r7, #13]
 8006e7c:	2bff      	cmp	r3, #255	; 0xff
 8006e7e:	f000 8174 	beq.w	800716a <USBD_StdEPReq+0x32e>
 8006e82:	7b7b      	ldrb	r3, [r7, #13]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8170 	bne.w	800716a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e8a:	7b7a      	ldrb	r2, [r7, #13]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	32ae      	adds	r2, #174	; 0xae
 8006e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8163 	beq.w	800716a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ea4:	7b7a      	ldrb	r2, [r7, #13]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32ae      	adds	r2, #174	; 0xae
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006eba:	e156      	b.n	800716a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d008      	beq.n	8006ed6 <USBD_StdEPReq+0x9a>
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	f300 8145 	bgt.w	8007154 <USBD_StdEPReq+0x318>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 809b 	beq.w	8007006 <USBD_StdEPReq+0x1ca>
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d03c      	beq.n	8006f4e <USBD_StdEPReq+0x112>
 8006ed4:	e13e      	b.n	8007154 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <USBD_StdEPReq+0xac>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d016      	beq.n	8006f14 <USBD_StdEPReq+0xd8>
 8006ee6:	e02c      	b.n	8006f42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <USBD_StdEPReq+0xce>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d00a      	beq.n	8006f0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f98b 	bl	8008214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f987 	bl	8008214 <USBD_LL_StallEP>
 8006f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f08:	e020      	b.n	8006f4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc7a 	bl	8007806 <USBD_CtlError>
              break;
 8006f12:	e01b      	b.n	8006f4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10e      	bne.n	8006f3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <USBD_StdEPReq+0xfe>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d008      	beq.n	8006f3a <USBD_StdEPReq+0xfe>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	88db      	ldrh	r3, [r3, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f96d 	bl	8008214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fd2e 	bl	800799c <USBD_CtlSendStatus>

              break;
 8006f40:	e004      	b.n	8006f4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc5e 	bl	8007806 <USBD_CtlError>
              break;
 8006f4a:	bf00      	nop
          }
          break;
 8006f4c:	e107      	b.n	800715e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d002      	beq.n	8006f60 <USBD_StdEPReq+0x124>
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d016      	beq.n	8006f8c <USBD_StdEPReq+0x150>
 8006f5e:	e04b      	b.n	8006ff8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <USBD_StdEPReq+0x146>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d00a      	beq.n	8006f82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f94f 	bl	8008214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f94b 	bl	8008214 <USBD_LL_StallEP>
 8006f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f80:	e040      	b.n	8007004 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc3e 	bl	8007806 <USBD_CtlError>
              break;
 8006f8a:	e03b      	b.n	8007004 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	885b      	ldrh	r3, [r3, #2]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d136      	bne.n	8007002 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f955 	bl	8008252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fcf7 	bl	800799c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fde2 	bl	8006b7c <USBD_CoreFindEP>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fbc:	7b7b      	ldrb	r3, [r7, #13]
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d01f      	beq.n	8007002 <USBD_StdEPReq+0x1c6>
 8006fc2:	7b7b      	ldrb	r3, [r7, #13]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11c      	bne.n	8007002 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006fc8:	7b7a      	ldrb	r2, [r7, #13]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006fd0:	7b7a      	ldrb	r2, [r7, #13]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32ae      	adds	r2, #174	; 0xae
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fe0:	7b7a      	ldrb	r2, [r7, #13]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32ae      	adds	r2, #174	; 0xae
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ff6:	e004      	b.n	8007002 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fc03 	bl	8007806 <USBD_CtlError>
              break;
 8007000:	e000      	b.n	8007004 <USBD_StdEPReq+0x1c8>
              break;
 8007002:	bf00      	nop
          }
          break;
 8007004:	e0ab      	b.n	800715e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d002      	beq.n	8007018 <USBD_StdEPReq+0x1dc>
 8007012:	2b03      	cmp	r3, #3
 8007014:	d032      	beq.n	800707c <USBD_StdEPReq+0x240>
 8007016:	e097      	b.n	8007148 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <USBD_StdEPReq+0x1f2>
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d004      	beq.n	800702e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fbed 	bl	8007806 <USBD_CtlError>
                break;
 800702c:	e091      	b.n	8007152 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800702e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	da0b      	bge.n	800704e <USBD_StdEPReq+0x212>
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	3310      	adds	r3, #16
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	3304      	adds	r3, #4
 800704c:	e00b      	b.n	8007066 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4413      	add	r3, r2
 8007064:	3304      	adds	r3, #4
 8007066:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2202      	movs	r2, #2
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc37 	bl	80078e8 <USBD_CtlSendData>
              break;
 800707a:	e06a      	b.n	8007152 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	da11      	bge.n	80070a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d117      	bne.n	80070ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fbb0 	bl	8007806 <USBD_CtlError>
                  break;
 80070a6:	e054      	b.n	8007152 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb9d 	bl	8007806 <USBD_CtlError>
                  break;
 80070cc:	e041      	b.n	8007152 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da0b      	bge.n	80070ee <USBD_StdEPReq+0x2b2>
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	3310      	adds	r3, #16
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	3304      	adds	r3, #4
 80070ec:	e00b      	b.n	8007106 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <USBD_StdEPReq+0x2d8>
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d103      	bne.n	800711c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e00e      	b.n	800713a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f8b5 	bl	8008290 <USBD_LL_IsStallEP>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e002      	b.n	800713a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2202      	movs	r2, #2
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fbd1 	bl	80078e8 <USBD_CtlSendData>
              break;
 8007146:	e004      	b.n	8007152 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb5b 	bl	8007806 <USBD_CtlError>
              break;
 8007150:	bf00      	nop
          }
          break;
 8007152:	e004      	b.n	800715e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb55 	bl	8007806 <USBD_CtlError>
          break;
 800715c:	bf00      	nop
      }
      break;
 800715e:	e005      	b.n	800716c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fb4f 	bl	8007806 <USBD_CtlError>
      break;
 8007168:	e000      	b.n	800716c <USBD_StdEPReq+0x330>
      break;
 800716a:	bf00      	nop
  }

  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	2b06      	cmp	r3, #6
 800719a:	f200 8128 	bhi.w	80073ee <USBD_GetDescriptor+0x276>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBD_GetDescriptor+0x2c>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	08007219 	.word	0x08007219
 80071b0:	080073ef 	.word	0x080073ef
 80071b4:	080073ef 	.word	0x080073ef
 80071b8:	0800738f 	.word	0x0800738f
 80071bc:	080073bb 	.word	0x080073bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
      break;
 80071d6:	e112      	b.n	80073fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7c1b      	ldrb	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10d      	bne.n	80071fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f107 0208 	add.w	r2, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3301      	adds	r3, #1
 80071f6:	2202      	movs	r2, #2
 80071f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071fa:	e100      	b.n	80073fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f107 0208 	add.w	r2, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	2202      	movs	r2, #2
 8007214:	701a      	strb	r2, [r3, #0]
      break;
 8007216:	e0f2      	b.n	80073fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	885b      	ldrh	r3, [r3, #2]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b05      	cmp	r3, #5
 8007220:	f200 80ac 	bhi.w	800737c <USBD_GetDescriptor+0x204>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <USBD_GetDescriptor+0xb4>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007245 	.word	0x08007245
 8007230:	08007279 	.word	0x08007279
 8007234:	080072ad 	.word	0x080072ad
 8007238:	080072e1 	.word	0x080072e1
 800723c:	08007315 	.word	0x08007315
 8007240:	08007349 	.word	0x08007349
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e091      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 facb 	bl	8007806 <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e089      	b.n	800738c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729a:	e077      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fab1 	bl	8007806 <USBD_CtlError>
            err++;
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	3301      	adds	r3, #1
 80072a8:	72fb      	strb	r3, [r7, #11]
          break;
 80072aa:	e06f      	b.n	800738c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7c12      	ldrb	r2, [r2, #16]
 80072c4:	f107 0108 	add.w	r1, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ce:	e05d      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa97 	bl	8007806 <USBD_CtlError>
            err++;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	3301      	adds	r3, #1
 80072dc:	72fb      	strb	r3, [r7, #11]
          break;
 80072de:	e055      	b.n	800738c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7c12      	ldrb	r2, [r2, #16]
 80072f8:	f107 0108 	add.w	r1, r7, #8
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
 8007300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007302:	e043      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa7d 	bl	8007806 <USBD_CtlError>
            err++;
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	3301      	adds	r3, #1
 8007310:	72fb      	strb	r3, [r7, #11]
          break;
 8007312:	e03b      	b.n	800738c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	7c12      	ldrb	r2, [r2, #16]
 800732c:	f107 0108 	add.w	r1, r7, #8
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
 8007334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007336:	e029      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa63 	bl	8007806 <USBD_CtlError>
            err++;
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	3301      	adds	r3, #1
 8007344:	72fb      	strb	r3, [r7, #11]
          break;
 8007346:	e021      	b.n	800738c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	7c12      	ldrb	r2, [r2, #16]
 8007360:	f107 0108 	add.w	r1, r7, #8
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
 8007368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800736a:	e00f      	b.n	800738c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa49 	bl	8007806 <USBD_CtlError>
            err++;
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	3301      	adds	r3, #1
 8007378:	72fb      	strb	r3, [r7, #11]
          break;
 800737a:	e007      	b.n	800738c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa41 	bl	8007806 <USBD_CtlError>
          err++;
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	3301      	adds	r3, #1
 8007388:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800738a:	bf00      	nop
      }
      break;
 800738c:	e037      	b.n	80073fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7c1b      	ldrb	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	f107 0208 	add.w	r2, r7, #8
 80073a2:	4610      	mov	r0, r2
 80073a4:	4798      	blx	r3
 80073a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073a8:	e029      	b.n	80073fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa2a 	bl	8007806 <USBD_CtlError>
        err++;
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	3301      	adds	r3, #1
 80073b6:	72fb      	strb	r3, [r7, #11]
      break;
 80073b8:	e021      	b.n	80073fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	7c1b      	ldrb	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10d      	bne.n	80073de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f107 0208 	add.w	r2, r7, #8
 80073ce:	4610      	mov	r0, r2
 80073d0:	4798      	blx	r3
 80073d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	2207      	movs	r2, #7
 80073da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073dc:	e00f      	b.n	80073fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa10 	bl	8007806 <USBD_CtlError>
        err++;
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	3301      	adds	r3, #1
 80073ea:	72fb      	strb	r3, [r7, #11]
      break;
 80073ec:	e007      	b.n	80073fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa08 	bl	8007806 <USBD_CtlError>
      err++;
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	3301      	adds	r3, #1
 80073fa:	72fb      	strb	r3, [r7, #11]
      break;
 80073fc:	bf00      	nop
  }

  if (err != 0U)
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d11e      	bne.n	8007442 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	88da      	ldrh	r2, [r3, #6]
 8007416:	893b      	ldrh	r3, [r7, #8]
 8007418:	4293      	cmp	r3, r2
 800741a:	bf28      	it	cs
 800741c:	4613      	movcs	r3, r2
 800741e:	b29b      	uxth	r3, r3
 8007420:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	461a      	mov	r2, r3
 8007426:	68f9      	ldr	r1, [r7, #12]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa5d 	bl	80078e8 <USBD_CtlSendData>
 800742e:	e009      	b.n	8007444 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9e7 	bl	8007806 <USBD_CtlError>
 8007438:	e004      	b.n	8007444 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 faae 	bl	800799c <USBD_CtlSendStatus>
 8007440:	e000      	b.n	8007444 <USBD_GetDescriptor+0x2cc>
    return;
 8007442:	bf00      	nop
  }
}
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop

0800744c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d131      	bne.n	80074c2 <USBD_SetAddress+0x76>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d12d      	bne.n	80074c2 <USBD_SetAddress+0x76>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	2b7f      	cmp	r3, #127	; 0x7f
 800746c:	d829      	bhi.n	80074c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d104      	bne.n	8007490 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9bc 	bl	8007806 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748e:	e01d      	b.n	80074cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7bfa      	ldrb	r2, [r7, #15]
 8007494:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 ff23 	bl	80082e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa7a 	bl	800799c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b6:	e009      	b.n	80074cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c0:	e004      	b.n	80074cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f99e 	bl	8007806 <USBD_CtlError>
  }
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	4b4e      	ldr	r3, [pc, #312]	; (8007624 <USBD_SetConfig+0x150>)
 80074ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074ec:	4b4d      	ldr	r3, [pc, #308]	; (8007624 <USBD_SetConfig+0x150>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d905      	bls.n	8007500 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f985 	bl	8007806 <USBD_CtlError>
    return USBD_FAIL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e08c      	b.n	800761a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d002      	beq.n	8007512 <USBD_SetConfig+0x3e>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d029      	beq.n	8007564 <USBD_SetConfig+0x90>
 8007510:	e075      	b.n	80075fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007512:	4b44      	ldr	r3, [pc, #272]	; (8007624 <USBD_SetConfig+0x150>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d020      	beq.n	800755c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800751a:	4b42      	ldr	r3, [pc, #264]	; (8007624 <USBD_SetConfig+0x150>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007524:	4b3f      	ldr	r3, [pc, #252]	; (8007624 <USBD_SetConfig+0x150>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fe ffe7 	bl	80064fe <USBD_SetClassConfig>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f962 	bl	8007806 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800754a:	e065      	b.n	8007618 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa25 	bl	800799c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2203      	movs	r2, #3
 8007556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800755a:	e05d      	b.n	8007618 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa1d 	bl	800799c <USBD_CtlSendStatus>
      break;
 8007562:	e059      	b.n	8007618 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007564:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <USBD_SetConfig+0x150>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d112      	bne.n	8007592 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007574:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <USBD_SetConfig+0x150>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800757e:	4b29      	ldr	r3, [pc, #164]	; (8007624 <USBD_SetConfig+0x150>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fe ffd6 	bl	8006536 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa06 	bl	800799c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007590:	e042      	b.n	8007618 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007592:	4b24      	ldr	r3, [pc, #144]	; (8007624 <USBD_SetConfig+0x150>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d02a      	beq.n	80075f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fe ffc4 	bl	8006536 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075ae:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <USBD_SetConfig+0x150>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075b8:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <USBD_SetConfig+0x150>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe ff9d 	bl	80064fe <USBD_SetClassConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00f      	beq.n	80075ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f918 	bl	8007806 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fe ffa9 	bl	8006536 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075ec:	e014      	b.n	8007618 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9d4 	bl	800799c <USBD_CtlSendStatus>
      break;
 80075f4:	e010      	b.n	8007618 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9d0 	bl	800799c <USBD_CtlSendStatus>
      break;
 80075fc:	e00c      	b.n	8007618 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f900 	bl	8007806 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <USBD_SetConfig+0x150>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fe ff92 	bl	8006536 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	73fb      	strb	r3, [r7, #15]
      break;
 8007616:	bf00      	nop
  }

  return ret;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	2000039c 	.word	0x2000039c

08007628 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	88db      	ldrh	r3, [r3, #6]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d004      	beq.n	8007644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8e2 	bl	8007806 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007642:	e023      	b.n	800768c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	dc02      	bgt.n	8007656 <USBD_GetConfig+0x2e>
 8007650:	2b00      	cmp	r3, #0
 8007652:	dc03      	bgt.n	800765c <USBD_GetConfig+0x34>
 8007654:	e015      	b.n	8007682 <USBD_GetConfig+0x5a>
 8007656:	2b03      	cmp	r3, #3
 8007658:	d00b      	beq.n	8007672 <USBD_GetConfig+0x4a>
 800765a:	e012      	b.n	8007682 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3308      	adds	r3, #8
 8007666:	2201      	movs	r2, #1
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f93c 	bl	80078e8 <USBD_CtlSendData>
        break;
 8007670:	e00c      	b.n	800768c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3304      	adds	r3, #4
 8007676:	2201      	movs	r2, #1
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f934 	bl	80078e8 <USBD_CtlSendData>
        break;
 8007680:	e004      	b.n	800768c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f8be 	bl	8007806 <USBD_CtlError>
        break;
 800768a:	bf00      	nop
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d81e      	bhi.n	80076ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	88db      	ldrh	r3, [r3, #6]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d004      	beq.n	80076be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8a5 	bl	8007806 <USBD_CtlError>
        break;
 80076bc:	e01a      	b.n	80076f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	330c      	adds	r3, #12
 80076de:	2202      	movs	r2, #2
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f900 	bl	80078e8 <USBD_CtlSendData>
      break;
 80076e8:	e004      	b.n	80076f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f88a 	bl	8007806 <USBD_CtlError>
      break;
 80076f2:	bf00      	nop
  }
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f940 	bl	800799c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800771c:	e013      	b.n	8007746 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	885b      	ldrh	r3, [r3, #2]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d10b      	bne.n	800773e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	b29b      	uxth	r3, r3
 800772e:	b2da      	uxtb	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f930 	bl	800799c <USBD_CtlSendStatus>
}
 800773c:	e003      	b.n	8007746 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f860 	bl	8007806 <USBD_CtlError>
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775e:	b2db      	uxtb	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	2b02      	cmp	r3, #2
 8007764:	d80b      	bhi.n	800777e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d10c      	bne.n	8007788 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f910 	bl	800799c <USBD_CtlSendStatus>
      }
      break;
 800777c:	e004      	b.n	8007788 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f840 	bl	8007806 <USBD_CtlError>
      break;
 8007786:	e000      	b.n	800778a <USBD_ClrFeature+0x3c>
      break;
 8007788:	bf00      	nop
  }
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781a      	ldrb	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff fa41 	bl	8006c44 <SWAPBYTE>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fa34 	bl	8006c44 <SWAPBYTE>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7ff fa27 	bl	8006c44 <SWAPBYTE>
 80077f6:	4603      	mov	r3, r0
 80077f8:	461a      	mov	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	80da      	strh	r2, [r3, #6]
}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007810:	2180      	movs	r1, #128	; 0x80
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fcfe 	bl	8008214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fcfa 	bl	8008214 <USBD_LL_StallEP>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d036      	beq.n	80078ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007842:	6938      	ldr	r0, [r7, #16]
 8007844:	f000 f836 	bl	80078b4 <USBD_GetLen>
 8007848:	4603      	mov	r3, r0
 800784a:	3301      	adds	r3, #1
 800784c:	b29b      	uxth	r3, r3
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	4413      	add	r3, r2
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	701a      	strb	r2, [r3, #0]
  idx++;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	3301      	adds	r3, #1
 8007866:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	2203      	movs	r2, #3
 8007870:	701a      	strb	r2, [r3, #0]
  idx++;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	3301      	adds	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007878:	e013      	b.n	80078a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4413      	add	r3, r2
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	3301      	adds	r3, #1
 800788a:	613b      	str	r3, [r7, #16]
    idx++;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	3301      	adds	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	4413      	add	r3, r2
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
    idx++;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	3301      	adds	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e7      	bne.n	800787a <USBD_GetString+0x52>
 80078aa:	e000      	b.n	80078ae <USBD_GetString+0x86>
    return;
 80078ac:	bf00      	nop
  }
}
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80078c4:	e005      	b.n	80078d2 <USBD_GetLen+0x1e>
  {
    len++;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	3301      	adds	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f5      	bne.n	80078c6 <USBD_GetLen+0x12>
  }

  return len;
 80078da:	7bfb      	ldrb	r3, [r7, #15]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	2100      	movs	r1, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fd09 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	2100      	movs	r1, #0
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fcf8 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2203      	movs	r2, #3
 8007950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	2100      	movs	r1, #0
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fcfc 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	2100      	movs	r1, #0
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fceb 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2204      	movs	r2, #4
 80079a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079ac:	2300      	movs	r3, #0
 80079ae:	2200      	movs	r2, #0
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fcb7 	bl	8008326 <USBD_LL_Transmit>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2205      	movs	r2, #5
 80079ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079d2:	2300      	movs	r3, #0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fcc5 	bl	8008368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079ec:	2200      	movs	r2, #0
 80079ee:	4912      	ldr	r1, [pc, #72]	; (8007a38 <MX_USB_DEVICE_Init+0x50>)
 80079f0:	4812      	ldr	r0, [pc, #72]	; (8007a3c <MX_USB_DEVICE_Init+0x54>)
 80079f2:	f7fe fd07 	bl	8006404 <USBD_Init>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079fc:	f7f8 feb6 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a00:	490f      	ldr	r1, [pc, #60]	; (8007a40 <MX_USB_DEVICE_Init+0x58>)
 8007a02:	480e      	ldr	r0, [pc, #56]	; (8007a3c <MX_USB_DEVICE_Init+0x54>)
 8007a04:	f7fe fd2e 	bl	8006464 <USBD_RegisterClass>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a0e:	f7f8 fead 	bl	800076c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a12:	490c      	ldr	r1, [pc, #48]	; (8007a44 <MX_USB_DEVICE_Init+0x5c>)
 8007a14:	4809      	ldr	r0, [pc, #36]	; (8007a3c <MX_USB_DEVICE_Init+0x54>)
 8007a16:	f7fe fc1f 	bl	8006258 <USBD_CDC_RegisterInterface>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a20:	f7f8 fea4 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <MX_USB_DEVICE_Init+0x54>)
 8007a26:	f7fe fd53 	bl	80064d0 <USBD_Start>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a30:	f7f8 fe9c 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a34:	bf00      	nop
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200000ac 	.word	0x200000ac
 8007a3c:	200003a0 	.word	0x200003a0
 8007a40:	20000018 	.word	0x20000018
 8007a44:	20000098 	.word	0x20000098

08007a48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4905      	ldr	r1, [pc, #20]	; (8007a64 <CDC_Init_FS+0x1c>)
 8007a50:	4805      	ldr	r0, [pc, #20]	; (8007a68 <CDC_Init_FS+0x20>)
 8007a52:	f7fe fc1b 	bl	800628c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a56:	4905      	ldr	r1, [pc, #20]	; (8007a6c <CDC_Init_FS+0x24>)
 8007a58:	4803      	ldr	r0, [pc, #12]	; (8007a68 <CDC_Init_FS+0x20>)
 8007a5a:	f7fe fc39 	bl	80062d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20000a68 	.word	0x20000a68
 8007a68:	200003a0 	.word	0x200003a0
 8007a6c:	20000680 	.word	0x20000680

08007a70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	2b23      	cmp	r3, #35	; 0x23
 8007a94:	d84a      	bhi.n	8007b2c <CDC_Control_FS+0xac>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <CDC_Control_FS+0x1c>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007b2d 	.word	0x08007b2d
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b2d 	.word	0x08007b2d
 8007aa8:	08007b2d 	.word	0x08007b2d
 8007aac:	08007b2d 	.word	0x08007b2d
 8007ab0:	08007b2d 	.word	0x08007b2d
 8007ab4:	08007b2d 	.word	0x08007b2d
 8007ab8:	08007b2d 	.word	0x08007b2d
 8007abc:	08007b2d 	.word	0x08007b2d
 8007ac0:	08007b2d 	.word	0x08007b2d
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007b2d 	.word	0x08007b2d
 8007acc:	08007b2d 	.word	0x08007b2d
 8007ad0:	08007b2d 	.word	0x08007b2d
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007b2d 	.word	0x08007b2d
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b2d 	.word	0x08007b2d
 8007aec:	08007b2d 	.word	0x08007b2d
 8007af0:	08007b2d 	.word	0x08007b2d
 8007af4:	08007b2d 	.word	0x08007b2d
 8007af8:	08007b2d 	.word	0x08007b2d
 8007afc:	08007b2d 	.word	0x08007b2d
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007b2d 	.word	0x08007b2d
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b2d 	.word	0x08007b2d
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b2d 	.word	0x08007b2d
 8007b24:	08007b2d 	.word	0x08007b2d
 8007b28:	08007b2d 	.word	0x08007b2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b2c:	bf00      	nop
  }

  return (USBD_OK);
 8007b2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4815      	ldr	r0, [pc, #84]	; (8007ba0 <CDC_Receive_FS+0x64>)
 8007b4a:	f7fe fbc1 	bl	80062d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b4e:	4814      	ldr	r0, [pc, #80]	; (8007ba0 <CDC_Receive_FS+0x64>)
 8007b50:	f7fe fc22 	bl	8006398 <USBD_CDC_ReceivePacket>

  if( ( Buf[0] == 'U' ) && ( *Len == 1 ) && lastchar != 'U' )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b55      	cmp	r3, #85	; 0x55
 8007b5a:	d10a      	bne.n	8007b72 <CDC_Receive_FS+0x36>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d106      	bne.n	8007b72 <CDC_Receive_FS+0x36>
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <CDC_Receive_FS+0x68>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b55      	cmp	r3, #85	; 0x55
 8007b6a:	d002      	beq.n	8007b72 <CDC_Receive_FS+0x36>
	  flag_reset_chip = 1;
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <CDC_Receive_FS+0x6c>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	701a      	strb	r2, [r3, #0]

  lastchar = Buf[0];
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <CDC_Receive_FS+0x68>)
 8007b78:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Buf, *Len, 100);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	2364      	movs	r3, #100	; 0x64
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4809      	ldr	r0, [pc, #36]	; (8007bac <CDC_Receive_FS+0x70>)
 8007b86:	f7fb fa96 	bl	80030b6 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b8e:	4808      	ldr	r0, [pc, #32]	; (8007bb0 <CDC_Receive_FS+0x74>)
 8007b90:	f7f9 fb55 	bl	800123e <HAL_GPIO_TogglePin>

  return (USBD_OK);
 8007b94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200003a0 	.word	0x200003a0
 8007ba4:	2000067c 	.word	0x2000067c
 8007ba8:	2000030c 	.word	0x2000030c
 8007bac:	20000354 	.word	0x20000354
 8007bb0:	40020800 	.word	0x40020800

08007bb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <CDC_Transmit_FS+0x48>)
 8007bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e00b      	b.n	8007bf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4806      	ldr	r0, [pc, #24]	; (8007bfc <CDC_Transmit_FS+0x48>)
 8007be2:	f7fe fb53 	bl	800628c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007be6:	4805      	ldr	r0, [pc, #20]	; (8007bfc <CDC_Transmit_FS+0x48>)
 8007be8:	f7fe fb90 	bl	800630c <USBD_CDC_TransmitPacket>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200003a0 	.word	0x200003a0

08007c00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2212      	movs	r2, #18
 8007c34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	200000c8 	.word	0x200000c8

08007c48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	6039      	str	r1, [r7, #0]
 8007c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2204      	movs	r2, #4
 8007c58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c5a:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	200000dc 	.word	0x200000dc

08007c6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d105      	bne.n	8007c8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	4907      	ldr	r1, [pc, #28]	; (8007ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c82:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c84:	f7ff fdd0 	bl	8007828 <USBD_GetString>
 8007c88:	e004      	b.n	8007c94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4904      	ldr	r1, [pc, #16]	; (8007ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c90:	f7ff fdca 	bl	8007828 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c94:	4b02      	ldr	r3, [pc, #8]	; (8007ca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000e50 	.word	0x20000e50
 8007ca4:	080084c8 	.word	0x080084c8

08007ca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cb8:	4804      	ldr	r0, [pc, #16]	; (8007ccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cba:	f7ff fdb5 	bl	8007828 <USBD_GetString>
  return USBD_StrDesc;
 8007cbe:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000e50 	.word	0x20000e50
 8007ccc:	080084e0 	.word	0x080084e0

08007cd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	221a      	movs	r2, #26
 8007ce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ce2:	f000 f843 	bl	8007d6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ce6:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200000e0 	.word	0x200000e0

08007cf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4907      	ldr	r1, [pc, #28]	; (8007d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d0a:	4808      	ldr	r0, [pc, #32]	; (8007d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d0c:	f7ff fd8c 	bl	8007828 <USBD_GetString>
 8007d10:	e004      	b.n	8007d1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4904      	ldr	r1, [pc, #16]	; (8007d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d16:	4805      	ldr	r0, [pc, #20]	; (8007d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d18:	f7ff fd86 	bl	8007828 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d1c:	4b02      	ldr	r3, [pc, #8]	; (8007d28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000e50 	.word	0x20000e50
 8007d2c:	080084f4 	.word	0x080084f4

08007d30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4907      	ldr	r1, [pc, #28]	; (8007d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d46:	4808      	ldr	r0, [pc, #32]	; (8007d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d48:	f7ff fd6e 	bl	8007828 <USBD_GetString>
 8007d4c:	e004      	b.n	8007d58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4904      	ldr	r1, [pc, #16]	; (8007d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d52:	4805      	ldr	r0, [pc, #20]	; (8007d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d54:	f7ff fd68 	bl	8007828 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000e50 	.word	0x20000e50
 8007d68:	08008500 	.word	0x08008500

08007d6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <Get_SerialNum+0x44>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d78:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <Get_SerialNum+0x48>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <Get_SerialNum+0x4c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d92:	2208      	movs	r2, #8
 8007d94:	4909      	ldr	r1, [pc, #36]	; (8007dbc <Get_SerialNum+0x50>)
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f814 	bl	8007dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	4908      	ldr	r1, [pc, #32]	; (8007dc0 <Get_SerialNum+0x54>)
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f000 f80f 	bl	8007dc4 <IntToUnicode>
  }
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	1fff7a10 	.word	0x1fff7a10
 8007db4:	1fff7a14 	.word	0x1fff7a14
 8007db8:	1fff7a18 	.word	0x1fff7a18
 8007dbc:	200000e2 	.word	0x200000e2
 8007dc0:	200000f2 	.word	0x200000f2

08007dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]
 8007dda:	e027      	b.n	8007e2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	0f1b      	lsrs	r3, r3, #28
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	d80b      	bhi.n	8007dfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	0f1b      	lsrs	r3, r3, #28
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	4619      	mov	r1, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	440b      	add	r3, r1
 8007df4:	3230      	adds	r2, #48	; 0x30
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	e00a      	b.n	8007e12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	0f1b      	lsrs	r3, r3, #28
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	4619      	mov	r1, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3237      	adds	r2, #55	; 0x37
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
 8007e2c:	7dfa      	ldrb	r2, [r7, #23]
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d3d3      	bcc.n	8007ddc <IntToUnicode+0x18>
  }
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08a      	sub	sp, #40	; 0x28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e64:	d13a      	bne.n	8007edc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	6313      	str	r3, [r2, #48]	; 0x30
 8007e76:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e90:	2303      	movs	r3, #3
 8007e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e94:	230a      	movs	r3, #10
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4812      	ldr	r0, [pc, #72]	; (8007ee8 <HAL_PCD_MspInit+0xa4>)
 8007ea0:	f7f9 f830 	bl	8000f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eae:	6353      	str	r3, [r2, #52]	; 0x34
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	4a0a      	ldr	r2, [pc, #40]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8007ec0:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <HAL_PCD_MspInit+0xa0>)
 8007ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	2043      	movs	r0, #67	; 0x43
 8007ed2:	f7f8 ff4e 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ed6:	2043      	movs	r0, #67	; 0x43
 8007ed8:	f7f8 ff67 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007edc:	bf00      	nop
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	40020000 	.word	0x40020000

08007eec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4610      	mov	r0, r2
 8007f04:	f7fe fb31 	bl	800656a <USBD_LL_SetupStage>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f7fe fb6b 	bl	8006614 <USBD_LL_DataOutStage>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	334c      	adds	r3, #76	; 0x4c
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7fe fc04 	bl	800677a <USBD_LL_DataInStage>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe fd38 	bl	80069fe <USBD_LL_SOF>
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d001      	beq.n	8007fae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007faa:	f7f8 fbdf 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fb4:	7bfa      	ldrb	r2, [r7, #15]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fce2 	bl	8006982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe fc8a 	bl	80068de <USBD_LL_Reset>
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fcdd 	bl	80069a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <HAL_PCD_SuspendCallback+0x48>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	4a03      	ldr	r2, [pc, #12]	; (800801c <HAL_PCD_SuspendCallback+0x48>)
 800800e:	f043 0306 	orr.w	r3, r3, #6
 8008012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed00 	.word	0xe000ed00

08008020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fccd 	bl	80069ce <USBD_LL_Resume>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fd25 	bl	8006aa2 <USBD_LL_IsoOUTIncomplete>
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fce1 	bl	8006a3e <USBD_LL_IsoINIncomplete>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd37 	bl	8006b06 <USBD_LL_DevConnected>
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fd34 	bl	8006b1c <USBD_LL_DevDisconnected>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d13c      	bne.n	8008146 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080cc:	4a20      	ldr	r2, [pc, #128]	; (8008150 <USBD_LL_Init+0x94>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1e      	ldr	r2, [pc, #120]	; (8008150 <USBD_LL_Init+0x94>)
 80080d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080dc:	4b1c      	ldr	r3, [pc, #112]	; (8008150 <USBD_LL_Init+0x94>)
 80080de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080e4:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <USBD_LL_Init+0x94>)
 80080e6:	2204      	movs	r2, #4
 80080e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080ea:	4b19      	ldr	r3, [pc, #100]	; (8008150 <USBD_LL_Init+0x94>)
 80080ec:	2202      	movs	r2, #2
 80080ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <USBD_LL_Init+0x94>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080f6:	4b16      	ldr	r3, [pc, #88]	; (8008150 <USBD_LL_Init+0x94>)
 80080f8:	2202      	movs	r2, #2
 80080fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080fc:	4b14      	ldr	r3, [pc, #80]	; (8008150 <USBD_LL_Init+0x94>)
 80080fe:	2200      	movs	r2, #0
 8008100:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008102:	4b13      	ldr	r3, [pc, #76]	; (8008150 <USBD_LL_Init+0x94>)
 8008104:	2200      	movs	r2, #0
 8008106:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008108:	4b11      	ldr	r3, [pc, #68]	; (8008150 <USBD_LL_Init+0x94>)
 800810a:	2200      	movs	r2, #0
 800810c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <USBD_LL_Init+0x94>)
 8008110:	2200      	movs	r2, #0
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008114:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <USBD_LL_Init+0x94>)
 8008116:	2200      	movs	r2, #0
 8008118:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800811a:	480d      	ldr	r0, [pc, #52]	; (8008150 <USBD_LL_Init+0x94>)
 800811c:	f7f9 f8a9 	bl	8001272 <HAL_PCD_Init>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008126:	f7f8 fb21 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	4808      	ldr	r0, [pc, #32]	; (8008150 <USBD_LL_Init+0x94>)
 800812e:	f7fa fb00 	bl	8002732 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008132:	2240      	movs	r2, #64	; 0x40
 8008134:	2100      	movs	r1, #0
 8008136:	4806      	ldr	r0, [pc, #24]	; (8008150 <USBD_LL_Init+0x94>)
 8008138:	f7fa fab4 	bl	80026a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800813c:	2280      	movs	r2, #128	; 0x80
 800813e:	2101      	movs	r1, #1
 8008140:	4803      	ldr	r0, [pc, #12]	; (8008150 <USBD_LL_Init+0x94>)
 8008142:	f7fa faaf 	bl	80026a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20001050 	.word	0x20001050

08008154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 f99e 	bl	80014ac <HAL_PCD_Start>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f942 	bl	8008400 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	4608      	mov	r0, r1
 8008194:	4611      	mov	r1, r2
 8008196:	461a      	mov	r2, r3
 8008198:	4603      	mov	r3, r0
 800819a:	70fb      	strb	r3, [r7, #3]
 800819c:	460b      	mov	r3, r1
 800819e:	70bb      	strb	r3, [r7, #2]
 80081a0:	4613      	mov	r3, r2
 80081a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081b2:	78bb      	ldrb	r3, [r7, #2]
 80081b4:	883a      	ldrh	r2, [r7, #0]
 80081b6:	78f9      	ldrb	r1, [r7, #3]
 80081b8:	f7f9 fe6f 	bl	8001e9a <HAL_PCD_EP_Open>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f91c 	bl	8008400 <USBD_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7f9 feb8 	bl	8001f6a <HAL_PCD_EP_Close>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f8fd 	bl	8008400 <USBD_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f7f9 ff90 	bl	8002158 <HAL_PCD_EP_SetStall>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f8de 	bl	8008400 <USBD_Get_USB_Status>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008248:	7bbb      	ldrb	r3, [r7, #14]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7f9 ffd5 	bl	8002220 <HAL_PCD_EP_ClrStall>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f8bf 	bl	8008400 <USBD_Get_USB_Status>
 8008282:	4603      	mov	r3, r0
 8008284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008286:	7bbb      	ldrb	r3, [r7, #14]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da0b      	bge.n	80082c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	333e      	adds	r3, #62	; 0x3e
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	e00b      	b.n	80082dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80082da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 fda2 	bl	8001e50 <HAL_PCD_SetAddress>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f874 	bl	8008400 <USBD_Get_USB_Status>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	460b      	mov	r3, r1
 8008334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008344:	7af9      	ldrb	r1, [r7, #11]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f7f9 febb 	bl	80020c4 <HAL_PCD_EP_Transmit>
 800834e:	4603      	mov	r3, r0
 8008350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f853 	bl	8008400 <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800835e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	460b      	mov	r3, r1
 8008376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008386:	7af9      	ldrb	r1, [r7, #11]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	f7f9 fe37 	bl	8001ffe <HAL_PCD_EP_Receive>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f832 	bl	8008400 <USBD_Get_USB_Status>
 800839c:	4603      	mov	r3, r0
 800839e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7f9 fe67 	bl	8002094 <HAL_PCD_EP_GetRxCount>
 80083c6:	4603      	mov	r3, r0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083d8:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <USBD_static_malloc+0x18>)
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	2000155c 	.word	0x2000155c

080083ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d817      	bhi.n	8008444 <USBD_Get_USB_Status+0x44>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <USBD_Get_USB_Status+0x1c>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	0800842d 	.word	0x0800842d
 8008420:	08008433 	.word	0x08008433
 8008424:	08008439 	.word	0x08008439
 8008428:	0800843f 	.word	0x0800843f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
    break;
 8008430:	e00b      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	73fb      	strb	r3, [r7, #15]
    break;
 8008436:	e008      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e005      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e002      	b.n	800844a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	bf00      	nop
  }
  return usb_status;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <__libc_init_array>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4d0d      	ldr	r5, [pc, #52]	; (8008490 <__libc_init_array+0x38>)
 800845c:	4c0d      	ldr	r4, [pc, #52]	; (8008494 <__libc_init_array+0x3c>)
 800845e:	1b64      	subs	r4, r4, r5
 8008460:	10a4      	asrs	r4, r4, #2
 8008462:	2600      	movs	r6, #0
 8008464:	42a6      	cmp	r6, r4
 8008466:	d109      	bne.n	800847c <__libc_init_array+0x24>
 8008468:	4d0b      	ldr	r5, [pc, #44]	; (8008498 <__libc_init_array+0x40>)
 800846a:	4c0c      	ldr	r4, [pc, #48]	; (800849c <__libc_init_array+0x44>)
 800846c:	f000 f820 	bl	80084b0 <_init>
 8008470:	1b64      	subs	r4, r4, r5
 8008472:	10a4      	asrs	r4, r4, #2
 8008474:	2600      	movs	r6, #0
 8008476:	42a6      	cmp	r6, r4
 8008478:	d105      	bne.n	8008486 <__libc_init_array+0x2e>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008480:	4798      	blx	r3
 8008482:	3601      	adds	r6, #1
 8008484:	e7ee      	b.n	8008464 <__libc_init_array+0xc>
 8008486:	f855 3b04 	ldr.w	r3, [r5], #4
 800848a:	4798      	blx	r3
 800848c:	3601      	adds	r6, #1
 800848e:	e7f2      	b.n	8008476 <__libc_init_array+0x1e>
 8008490:	08008530 	.word	0x08008530
 8008494:	08008530 	.word	0x08008530
 8008498:	08008530 	.word	0x08008530
 800849c:	08008534 	.word	0x08008534

080084a0 <memset>:
 80084a0:	4402      	add	r2, r0
 80084a2:	4603      	mov	r3, r0
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d100      	bne.n	80084aa <memset+0xa>
 80084a8:	4770      	bx	lr
 80084aa:	f803 1b01 	strb.w	r1, [r3], #1
 80084ae:	e7f9      	b.n	80084a4 <memset+0x4>

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
