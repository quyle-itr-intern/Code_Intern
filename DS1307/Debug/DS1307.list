
DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006698  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be0  08006be0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be0  08006be0  00016be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08006be8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000d8  08006cc0  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006cc0  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6b0  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022682  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fae8  00000000  00000000  000532da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca69  00000000  00000000  00062dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f82b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  0012f87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006850 	.word	0x08006850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08006850 	.word	0x08006850

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <bsp_i2c1_init>:
/* Function definitions ----------------------------------------------- */

/* ===================================== BSP I2C INIT ===================================== */

bsp_i2c_status_t bsp_i2c1_init(I2C_HandleTypeDef *hi2c1)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (bsp_i2c_init.bsp_i2c1_init)
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <bsp_i2c1_init+0x48>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <bsp_i2c1_init+0x14>
    return bsp_i2c_success;
 80005f4:	2303      	movs	r3, #3
 80005f6:	e012      	b.n	800061e <bsp_i2c1_init+0x3a>
  /* Check the I2C handle allocation */
  if (hi2c1 == NULL)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <bsp_i2c1_init+0x1e>
    return bsp_i2c_error;
 80005fe:	2302      	movs	r3, #2
 8000600:	e00d      	b.n	800061e <bsp_i2c1_init+0x3a>
  if (hi2c1->Instance != I2C1)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <bsp_i2c1_init+0x4c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d001      	beq.n	8000610 <bsp_i2c1_init+0x2c>
    return bsp_i2c_invalid_parameter;
 800060c:	2304      	movs	r3, #4
 800060e:	e006      	b.n	800061e <bsp_i2c1_init+0x3a>
  bsp_i2c1                   = hi2c1;
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <bsp_i2c1_init+0x50>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  bsp_i2c_init.bsp_i2c1_init = 1;
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <bsp_i2c1_init+0x48>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
  return bsp_i2c_success;
 800061c:	2303      	movs	r3, #3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000100 	.word	0x20000100
 8000630:	40005400 	.word	0x40005400
 8000634:	200000f4 	.word	0x200000f4

08000638 <bsp_i2c2_init>:

bsp_i2c_status_t bsp_i2c2_init(I2C_HandleTypeDef *hi2c2)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if (bsp_i2c_init.bsp_i2c2_init)
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <bsp_i2c2_init+0x48>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <bsp_i2c2_init+0x14>
    return bsp_i2c_success;
 8000648:	2303      	movs	r3, #3
 800064a:	e012      	b.n	8000672 <bsp_i2c2_init+0x3a>
  /* Check the I2C handle allocation */
  if (hi2c2 == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <bsp_i2c2_init+0x1e>
    return bsp_i2c_error;
 8000652:	2302      	movs	r3, #2
 8000654:	e00d      	b.n	8000672 <bsp_i2c2_init+0x3a>
  if (hi2c2->Instance != I2C2)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <bsp_i2c2_init+0x4c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d001      	beq.n	8000664 <bsp_i2c2_init+0x2c>
    return bsp_i2c_invalid_parameter;
 8000660:	2304      	movs	r3, #4
 8000662:	e006      	b.n	8000672 <bsp_i2c2_init+0x3a>
  bsp_i2c2                   = hi2c2;
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <bsp_i2c2_init+0x50>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  bsp_i2c_init.bsp_i2c2_init = 1;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <bsp_i2c2_init+0x48>)
 800066c:	2201      	movs	r2, #1
 800066e:	705a      	strb	r2, [r3, #1]
  return bsp_i2c_success;
 8000670:	2303      	movs	r3, #3
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000100 	.word	0x20000100
 8000684:	40005800 	.word	0x40005800
 8000688:	200000f8 	.word	0x200000f8

0800068c <bsp_i2c3_init>:

bsp_i2c_status_t bsp_i2c3_init(I2C_HandleTypeDef *hi2c3)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if (bsp_i2c_init.bsp_i2c3_init)
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <bsp_i2c3_init+0x48>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <bsp_i2c3_init+0x14>
    return bsp_i2c_success;
 800069c:	2303      	movs	r3, #3
 800069e:	e012      	b.n	80006c6 <bsp_i2c3_init+0x3a>
  /* Check the I2C handle allocation */
  if (hi2c3 == NULL)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <bsp_i2c3_init+0x1e>
    return bsp_i2c_error;
 80006a6:	2302      	movs	r3, #2
 80006a8:	e00d      	b.n	80006c6 <bsp_i2c3_init+0x3a>
  if (hi2c3->Instance != I2C3)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <bsp_i2c3_init+0x4c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d001      	beq.n	80006b8 <bsp_i2c3_init+0x2c>
    return bsp_i2c_invalid_parameter;
 80006b4:	2304      	movs	r3, #4
 80006b6:	e006      	b.n	80006c6 <bsp_i2c3_init+0x3a>
  bsp_i2c3                   = hi2c3;
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <bsp_i2c3_init+0x50>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6013      	str	r3, [r2, #0]
  bsp_i2c_init.bsp_i2c3_init = 1;
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <bsp_i2c3_init+0x48>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	709a      	strb	r2, [r3, #2]
  return bsp_i2c_success;
 80006c4:	2303      	movs	r3, #3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000100 	.word	0x20000100
 80006d8:	40005c00 	.word	0x40005c00
 80006dc:	200000fc 	.word	0x200000fc

080006e0 <bsp_i2c1_write>:

/* ===================================== BSP I2C1 READ/WRITE ===================================== */

bsp_i2c_status_t bsp_i2c1_write(uint8_t address_slave, uint8_t reg_write, uint8_t data_write)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	460b      	mov	r3, r1
 80006ec:	71bb      	strb	r3, [r7, #6]
 80006ee:	4613      	mov	r3, r2
 80006f0:	717b      	strb	r3, [r7, #5]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c1_init);
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <bsp_i2c1_write+0x64>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <bsp_i2c1_write+0x1e>
 80006fa:	2305      	movs	r3, #5
 80006fc:	e01e      	b.n	800073c <bsp_i2c1_write+0x5c>
  uint8_t data[2] = { reg_write, data_write };
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	733b      	strb	r3, [r7, #12]
 8000702:	797b      	ldrb	r3, [r7, #5]
 8000704:	737b      	strb	r3, [r7, #13]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c1) == HAL_I2C_STATE_BUSY)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <bsp_i2c1_write+0x68>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fd9e 	bl	800324c <HAL_I2C_GetState>
 8000710:	4603      	mov	r3, r0
 8000712:	2b24      	cmp	r3, #36	; 0x24
 8000714:	d101      	bne.n	800071a <bsp_i2c1_write+0x3a>
    return bsp_i2c_busy;
 8000716:	2300      	movs	r3, #0
 8000718:	e010      	b.n	800073c <bsp_i2c1_write+0x5c>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c1, address_slave, data, 2, BSP_I2C_TIMEOUT) == HAL_ERROR)
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <bsp_i2c1_write+0x68>)
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	b299      	uxth	r1, r3
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2302      	movs	r3, #2
 800072c:	f002 fa6a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d101      	bne.n	800073a <bsp_i2c1_write+0x5a>
    return bsp_i2c_error;
 8000736:	2302      	movs	r3, #2
 8000738:	e000      	b.n	800073c <bsp_i2c1_write+0x5c>
  return bsp_i2c_success;
 800073a:	2303      	movs	r3, #3
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000100 	.word	0x20000100
 8000748:	200000f4 	.word	0x200000f4

0800074c <bsp_i2c1_write_multi>:

bsp_i2c_status_t bsp_i2c1_write_multi(uint8_t address_slave, uint8_t *data_write, uint16_t size_data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af02      	add	r7, sp, #8
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c1_init);
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <bsp_i2c1_write_multi+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <bsp_i2c1_write_multi+0x1c>
 8000764:	2305      	movs	r3, #5
 8000766:	e019      	b.n	800079c <bsp_i2c1_write_multi+0x50>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c1) == HAL_I2C_STATE_BUSY)
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <bsp_i2c1_write_multi+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f002 fd6d 	bl	800324c <HAL_I2C_GetState>
 8000772:	4603      	mov	r3, r0
 8000774:	2b24      	cmp	r3, #36	; 0x24
 8000776:	d101      	bne.n	800077c <bsp_i2c1_write_multi+0x30>
    return bsp_i2c_busy;
 8000778:	2300      	movs	r3, #0
 800077a:	e00f      	b.n	800079c <bsp_i2c1_write_multi+0x50>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c1, address_slave, data_write, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <bsp_i2c1_write_multi+0x5c>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b299      	uxth	r1, r3
 8000784:	88bb      	ldrh	r3, [r7, #4]
 8000786:	2264      	movs	r2, #100	; 0x64
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	f002 fa3a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <bsp_i2c1_write_multi+0x4e>
    return bsp_i2c_error;
 8000796:	2302      	movs	r3, #2
 8000798:	e000      	b.n	800079c <bsp_i2c1_write_multi+0x50>
  return bsp_i2c_success;
 800079a:	2303      	movs	r3, #3
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000100 	.word	0x20000100
 80007a8:	200000f4 	.word	0x200000f4

080007ac <bsp_i2c1_read>:

bsp_i2c_status_t bsp_i2c1_read(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	4603      	mov	r3, r0
 80007b4:	603a      	str	r2, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	460b      	mov	r3, r1
 80007ba:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c1_init);
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <bsp_i2c1_read+0x78>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <bsp_i2c1_read+0x1c>
 80007c4:	2305      	movs	r3, #5
 80007c6:	e028      	b.n	800081a <bsp_i2c1_read+0x6e>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c1) == HAL_I2C_STATE_BUSY)
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <bsp_i2c1_read+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fd3d 	bl	800324c <HAL_I2C_GetState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b24      	cmp	r3, #36	; 0x24
 80007d6:	d101      	bne.n	80007dc <bsp_i2c1_read+0x30>
    return bsp_i2c_busy;
 80007d8:	2300      	movs	r3, #0
 80007da:	e01e      	b.n	800081a <bsp_i2c1_read+0x6e>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c1, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <bsp_i2c1_read+0x7c>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	b299      	uxth	r1, r3
 80007e4:	1dba      	adds	r2, r7, #6
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	f002 fa0a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d101      	bne.n	80007fa <bsp_i2c1_read+0x4e>
    return bsp_i2c_error;
 80007f6:	2302      	movs	r3, #2
 80007f8:	e00f      	b.n	800081a <bsp_i2c1_read+0x6e>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c1, address_slave, data_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <bsp_i2c1_read+0x7c>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	b299      	uxth	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	f002 faf9 	bl	8002e00 <HAL_I2C_Master_Receive>
 800080e:	4603      	mov	r3, r0
 8000810:	2b01      	cmp	r3, #1
 8000812:	d101      	bne.n	8000818 <bsp_i2c1_read+0x6c>
    return bsp_i2c_error;
 8000814:	2302      	movs	r3, #2
 8000816:	e000      	b.n	800081a <bsp_i2c1_read+0x6e>
  return bsp_i2c_success;
 8000818:	2303      	movs	r3, #3
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000100 	.word	0x20000100
 8000828:	200000f4 	.word	0x200000f4

0800082c <bsp_i2c1_read_multi>:

bsp_i2c_status_t bsp_i2c1_read_multi(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read, uint16_t size_data)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
 8000832:	603a      	str	r2, [r7, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	460b      	mov	r3, r1
 800083c:	71bb      	strb	r3, [r7, #6]
 800083e:	4613      	mov	r3, r2
 8000840:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c1_init);
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <bsp_i2c1_read_multi+0x7c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <bsp_i2c1_read_multi+0x22>
 800084a:	2305      	movs	r3, #5
 800084c:	e028      	b.n	80008a0 <bsp_i2c1_read_multi+0x74>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c1) == HAL_I2C_STATE_BUSY)
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <bsp_i2c1_read_multi+0x80>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fcfa 	bl	800324c <HAL_I2C_GetState>
 8000858:	4603      	mov	r3, r0
 800085a:	2b24      	cmp	r3, #36	; 0x24
 800085c:	d101      	bne.n	8000862 <bsp_i2c1_read_multi+0x36>
    return bsp_i2c_busy;
 800085e:	2300      	movs	r3, #0
 8000860:	e01e      	b.n	80008a0 <bsp_i2c1_read_multi+0x74>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c1, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <bsp_i2c1_read_multi+0x80>)
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	b299      	uxth	r1, r3
 800086a:	1dba      	adds	r2, r7, #6
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	f002 f9c7 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <bsp_i2c1_read_multi+0x54>
    return bsp_i2c_error;
 800087c:	2302      	movs	r3, #2
 800087e:	e00f      	b.n	80008a0 <bsp_i2c1_read_multi+0x74>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c1, address_slave, data_read, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <bsp_i2c1_read_multi+0x80>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	b299      	uxth	r1, r3
 8000888:	88bb      	ldrh	r3, [r7, #4]
 800088a:	2264      	movs	r2, #100	; 0x64
 800088c:	9200      	str	r2, [sp, #0]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	f002 fab6 	bl	8002e00 <HAL_I2C_Master_Receive>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <bsp_i2c1_read_multi+0x72>
    return bsp_i2c_error;
 800089a:	2302      	movs	r3, #2
 800089c:	e000      	b.n	80008a0 <bsp_i2c1_read_multi+0x74>
  return bsp_i2c_success;
 800089e:	2303      	movs	r3, #3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000100 	.word	0x20000100
 80008ac:	200000f4 	.word	0x200000f4

080008b0 <bsp_i2c2_write>:

/* ===================================== BSP I2C2 READ/WRITE ===================================== */

bsp_i2c_status_t bsp_i2c2_write(uint8_t address_slave, uint8_t reg_write, uint8_t data_write)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	460b      	mov	r3, r1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	717b      	strb	r3, [r7, #5]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c2_init);
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <bsp_i2c2_write+0x64>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <bsp_i2c2_write+0x1e>
 80008ca:	2305      	movs	r3, #5
 80008cc:	e01e      	b.n	800090c <bsp_i2c2_write+0x5c>
  uint8_t data[2] = { reg_write, data_write };
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	733b      	strb	r3, [r7, #12]
 80008d2:	797b      	ldrb	r3, [r7, #5]
 80008d4:	737b      	strb	r3, [r7, #13]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c2) == HAL_I2C_STATE_BUSY)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <bsp_i2c2_write+0x68>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fcb6 	bl	800324c <HAL_I2C_GetState>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b24      	cmp	r3, #36	; 0x24
 80008e4:	d101      	bne.n	80008ea <bsp_i2c2_write+0x3a>
    return bsp_i2c_busy;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e010      	b.n	800090c <bsp_i2c2_write+0x5c>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c2, address_slave, data, 2, BSP_I2C_TIMEOUT) == HAL_ERROR)
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <bsp_i2c2_write+0x68>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	b299      	uxth	r1, r3
 80008f2:	f107 020c 	add.w	r2, r7, #12
 80008f6:	2364      	movs	r3, #100	; 0x64
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	f002 f982 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <bsp_i2c2_write+0x5a>
    return bsp_i2c_error;
 8000906:	2302      	movs	r3, #2
 8000908:	e000      	b.n	800090c <bsp_i2c2_write+0x5c>
  return bsp_i2c_success;
 800090a:	2303      	movs	r3, #3
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000100 	.word	0x20000100
 8000918:	200000f8 	.word	0x200000f8

0800091c <bsp_i2c2_write_multi>:

bsp_i2c_status_t bsp_i2c2_write_multi(uint8_t address_slave, uint8_t *data_write, uint16_t size_data)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c2_init);
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <bsp_i2c2_write_multi+0x58>)
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d101      	bne.n	8000938 <bsp_i2c2_write_multi+0x1c>
 8000934:	2305      	movs	r3, #5
 8000936:	e019      	b.n	800096c <bsp_i2c2_write_multi+0x50>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c2) == HAL_I2C_STATE_BUSY)
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <bsp_i2c2_write_multi+0x5c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fc85 	bl	800324c <HAL_I2C_GetState>
 8000942:	4603      	mov	r3, r0
 8000944:	2b24      	cmp	r3, #36	; 0x24
 8000946:	d101      	bne.n	800094c <bsp_i2c2_write_multi+0x30>
    return bsp_i2c_busy;
 8000948:	2300      	movs	r3, #0
 800094a:	e00f      	b.n	800096c <bsp_i2c2_write_multi+0x50>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c2, address_slave, data_write, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <bsp_i2c2_write_multi+0x5c>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	b299      	uxth	r1, r3
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	9200      	str	r2, [sp, #0]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	f002 f952 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <bsp_i2c2_write_multi+0x4e>
    return bsp_i2c_error;
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <bsp_i2c2_write_multi+0x50>
  return bsp_i2c_success;
 800096a:	2303      	movs	r3, #3
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000100 	.word	0x20000100
 8000978:	200000f8 	.word	0x200000f8

0800097c <bsp_i2c2_read>:

bsp_i2c_status_t bsp_i2c2_read(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af02      	add	r7, sp, #8
 8000982:	4603      	mov	r3, r0
 8000984:	603a      	str	r2, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	460b      	mov	r3, r1
 800098a:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c2_init);
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <bsp_i2c2_read+0x78>)
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <bsp_i2c2_read+0x1c>
 8000994:	2305      	movs	r3, #5
 8000996:	e028      	b.n	80009ea <bsp_i2c2_read+0x6e>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c2) == HAL_I2C_STATE_BUSY)
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <bsp_i2c2_read+0x7c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f002 fc55 	bl	800324c <HAL_I2C_GetState>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b24      	cmp	r3, #36	; 0x24
 80009a6:	d101      	bne.n	80009ac <bsp_i2c2_read+0x30>
    return bsp_i2c_busy;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e01e      	b.n	80009ea <bsp_i2c2_read+0x6e>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c2, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <bsp_i2c2_read+0x7c>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	1dba      	adds	r2, r7, #6
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	f002 f922 	bl	8002c04 <HAL_I2C_Master_Transmit>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d101      	bne.n	80009ca <bsp_i2c2_read+0x4e>
    return bsp_i2c_error;
 80009c6:	2302      	movs	r3, #2
 80009c8:	e00f      	b.n	80009ea <bsp_i2c2_read+0x6e>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c2, address_slave, data_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <bsp_i2c2_read+0x7c>)
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	b299      	uxth	r1, r3
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	f002 fa11 	bl	8002e00 <HAL_I2C_Master_Receive>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <bsp_i2c2_read+0x6c>
    return bsp_i2c_error;
 80009e4:	2302      	movs	r3, #2
 80009e6:	e000      	b.n	80009ea <bsp_i2c2_read+0x6e>
  return bsp_i2c_success;
 80009e8:	2303      	movs	r3, #3
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000100 	.word	0x20000100
 80009f8:	200000f8 	.word	0x200000f8

080009fc <bsp_i2c2_read_multi>:

bsp_i2c_status_t bsp_i2c2_read_multi(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read, uint16_t size_data)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	603a      	str	r2, [r7, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c2_init);
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <bsp_i2c2_read_multi+0x7c>)
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <bsp_i2c2_read_multi+0x22>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e028      	b.n	8000a70 <bsp_i2c2_read_multi+0x74>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c2) == HAL_I2C_STATE_BUSY)
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <bsp_i2c2_read_multi+0x80>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fc12 	bl	800324c <HAL_I2C_GetState>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b24      	cmp	r3, #36	; 0x24
 8000a2c:	d101      	bne.n	8000a32 <bsp_i2c2_read_multi+0x36>
    return bsp_i2c_busy;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e01e      	b.n	8000a70 <bsp_i2c2_read_multi+0x74>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c2, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <bsp_i2c2_read_multi+0x80>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	1dba      	adds	r2, r7, #6
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2301      	movs	r3, #1
 8000a42:	f002 f8df 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d101      	bne.n	8000a50 <bsp_i2c2_read_multi+0x54>
    return bsp_i2c_error;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	e00f      	b.n	8000a70 <bsp_i2c2_read_multi+0x74>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c2, address_slave, data_read, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <bsp_i2c2_read_multi+0x80>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	b299      	uxth	r1, r3
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	2264      	movs	r2, #100	; 0x64
 8000a5c:	9200      	str	r2, [sp, #0]
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	f002 f9ce 	bl	8002e00 <HAL_I2C_Master_Receive>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <bsp_i2c2_read_multi+0x72>
    return bsp_i2c_error;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e000      	b.n	8000a70 <bsp_i2c2_read_multi+0x74>
  return bsp_i2c_success;
 8000a6e:	2303      	movs	r3, #3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000100 	.word	0x20000100
 8000a7c:	200000f8 	.word	0x200000f8

08000a80 <bsp_i2c3_write>:

/* ===================================== BSP I2C3 READ/WRITE ===================================== */

bsp_i2c_status_t bsp_i2c3_write(uint8_t address_slave, uint8_t reg_write, uint8_t data_write)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	717b      	strb	r3, [r7, #5]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c3_init);
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <bsp_i2c3_write+0x64>)
 8000a94:	789b      	ldrb	r3, [r3, #2]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <bsp_i2c3_write+0x1e>
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	e01e      	b.n	8000adc <bsp_i2c3_write+0x5c>
  uint8_t data[2] = { reg_write, data_write };
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	733b      	strb	r3, [r7, #12]
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	737b      	strb	r3, [r7, #13]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c3) == HAL_I2C_STATE_BUSY)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <bsp_i2c3_write+0x68>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fbce 	bl	800324c <HAL_I2C_GetState>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b24      	cmp	r3, #36	; 0x24
 8000ab4:	d101      	bne.n	8000aba <bsp_i2c3_write+0x3a>
    return bsp_i2c_busy;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e010      	b.n	8000adc <bsp_i2c3_write+0x5c>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c3, address_slave, data, 2, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <bsp_i2c3_write+0x68>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2302      	movs	r3, #2
 8000acc:	f002 f89a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <bsp_i2c3_write+0x5a>
    return bsp_i2c_error;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e000      	b.n	8000adc <bsp_i2c3_write+0x5c>
  return bsp_i2c_success;
 8000ada:	2303      	movs	r3, #3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000100 	.word	0x20000100
 8000ae8:	200000fc 	.word	0x200000fc

08000aec <bsp_i2c3_write_multi>:

bsp_i2c_status_t bsp_i2c3_write_multi(uint8_t address_slave, uint8_t *data_write, uint16_t size_data)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c3_init);
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <bsp_i2c3_write_multi+0x58>)
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <bsp_i2c3_write_multi+0x1c>
 8000b04:	2305      	movs	r3, #5
 8000b06:	e019      	b.n	8000b3c <bsp_i2c3_write_multi+0x50>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c3) == HAL_I2C_STATE_BUSY)
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <bsp_i2c3_write_multi+0x5c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fb9d 	bl	800324c <HAL_I2C_GetState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b24      	cmp	r3, #36	; 0x24
 8000b16:	d101      	bne.n	8000b1c <bsp_i2c3_write_multi+0x30>
    return bsp_i2c_busy;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e00f      	b.n	8000b3c <bsp_i2c3_write_multi+0x50>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c3, address_slave, data_write, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <bsp_i2c3_write_multi+0x5c>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	b299      	uxth	r1, r3
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	2264      	movs	r2, #100	; 0x64
 8000b28:	9200      	str	r2, [sp, #0]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	f002 f86a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d101      	bne.n	8000b3a <bsp_i2c3_write_multi+0x4e>
    return bsp_i2c_error;
 8000b36:	2302      	movs	r3, #2
 8000b38:	e000      	b.n	8000b3c <bsp_i2c3_write_multi+0x50>
  return bsp_i2c_success;
 8000b3a:	2303      	movs	r3, #3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000100 	.word	0x20000100
 8000b48:	200000fc 	.word	0x200000fc

08000b4c <bsp_i2c3_read>:

bsp_i2c_status_t bsp_i2c3_read(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	603a      	str	r2, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	71bb      	strb	r3, [r7, #6]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c3_init);
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <bsp_i2c3_read+0x78>)
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <bsp_i2c3_read+0x1c>
 8000b64:	2305      	movs	r3, #5
 8000b66:	e028      	b.n	8000bba <bsp_i2c3_read+0x6e>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c3) == HAL_I2C_STATE_BUSY)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <bsp_i2c3_read+0x7c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fb6d 	bl	800324c <HAL_I2C_GetState>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b24      	cmp	r3, #36	; 0x24
 8000b76:	d101      	bne.n	8000b7c <bsp_i2c3_read+0x30>
    return bsp_i2c_busy;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e01e      	b.n	8000bba <bsp_i2c3_read+0x6e>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c3, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <bsp_i2c3_read+0x7c>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	b299      	uxth	r1, r3
 8000b84:	1dba      	adds	r2, r7, #6
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f002 f83a 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d101      	bne.n	8000b9a <bsp_i2c3_read+0x4e>
    return bsp_i2c_error;
 8000b96:	2302      	movs	r3, #2
 8000b98:	e00f      	b.n	8000bba <bsp_i2c3_read+0x6e>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c3, address_slave, data_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <bsp_i2c3_read+0x7c>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	f002 f929 	bl	8002e00 <HAL_I2C_Master_Receive>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <bsp_i2c3_read+0x6c>
    return bsp_i2c_error;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e000      	b.n	8000bba <bsp_i2c3_read+0x6e>
  return bsp_i2c_success;
 8000bb8:	2303      	movs	r3, #3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000100 	.word	0x20000100
 8000bc8:	200000fc 	.word	0x200000fc

08000bcc <bsp_i2c3_read_multi>:

bsp_i2c_status_t bsp_i2c3_read_multi(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read, uint16_t size_data)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	603a      	str	r2, [r7, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	71bb      	strb	r3, [r7, #6]
 8000bde:	4613      	mov	r3, r2
 8000be0:	80bb      	strh	r3, [r7, #4]
  /* Check initialize bsp i2c */
  BSP_I2C_CHECK_INITIALIZE(bsp_i2c_init.bsp_i2c3_init);
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <bsp_i2c3_read_multi+0x7c>)
 8000be4:	789b      	ldrb	r3, [r3, #2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <bsp_i2c3_read_multi+0x22>
 8000bea:	2305      	movs	r3, #5
 8000bec:	e028      	b.n	8000c40 <bsp_i2c3_read_multi+0x74>
  /* Get status bus I2C */
  if (HAL_I2C_GetState(bsp_i2c3) == HAL_I2C_STATE_BUSY)
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <bsp_i2c3_read_multi+0x80>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fb2a 	bl	800324c <HAL_I2C_GetState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b24      	cmp	r3, #36	; 0x24
 8000bfc:	d101      	bne.n	8000c02 <bsp_i2c3_read_multi+0x36>
    return bsp_i2c_busy;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e01e      	b.n	8000c40 <bsp_i2c3_read_multi+0x74>
  /* Transmit data */
  if (HAL_I2C_Master_Transmit(bsp_i2c3, address_slave, &reg_read, 1, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <bsp_i2c3_read_multi+0x80>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	1dba      	adds	r2, r7, #6
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	f001 fff7 	bl	8002c04 <HAL_I2C_Master_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d101      	bne.n	8000c20 <bsp_i2c3_read_multi+0x54>
    return bsp_i2c_error;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e00f      	b.n	8000c40 <bsp_i2c3_read_multi+0x74>
  /* Receive data */
  if (HAL_I2C_Master_Receive(bsp_i2c3, address_slave, data_read, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <bsp_i2c3_read_multi+0x80>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b299      	uxth	r1, r3
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	2264      	movs	r2, #100	; 0x64
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	f002 f8e6 	bl	8002e00 <HAL_I2C_Master_Receive>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d101      	bne.n	8000c3e <bsp_i2c3_read_multi+0x72>
    return bsp_i2c_error;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e000      	b.n	8000c40 <bsp_i2c3_read_multi+0x74>
  return bsp_i2c_success;
 8000c3e:	2303      	movs	r3, #3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000100 	.word	0x20000100
 8000c4c:	200000fc 	.word	0x200000fc

08000c50 <drv_ds1307_bcd_to_bin>:
static drv_ds1307_status_t drv_ds1307_check_time_set(drv_ds1307_config_t drv_ds1307, drv_ds1307_time_t time_set);

/* Function definitions ----------------------------------------------- */

static uint8_t drv_ds1307_bcd_to_bin(uint8_t bcd)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  uint8_t dec = 10 * (bcd >> 4);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  dec += bcd & 0x0F;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4413      	add	r3, r2
 8000c76:	73fb      	strb	r3, [r7, #15]
  return dec;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <drv_ds1307_bin_to_bcd>:

static uint8_t drv_ds1307_bin_to_bcd(uint8_t bin)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  uint8_t high = bin / 10;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <drv_ds1307_bin_to_bcd+0x48>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = bin - (high * 10);
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0152      	lsls	r2, r2, #5
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	73bb      	strb	r3, [r7, #14]
  return high << 4 | low;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	cccccccd 	.word	0xcccccccd

08000cd4 <drv_ds1307_init>:

drv_ds1307_status_t drv_ds1307_init(drv_ds1307_config_t *drv_ds1307)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check device ID */
  DRV_DS1307_CHECK_ID(drv_ds1307->drv_ds1307_id);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	795b      	ldrb	r3, [r3, #5]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d901      	bls.n	8000ce8 <drv_ds1307_init+0x14>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e0b3      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000ce8:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <drv_ds1307_init+0x184>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	fa42 f303 	asr.w	r3, r2, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <drv_ds1307_init+0x2e>
 8000cfe:	2305      	movs	r3, #5
 8000d00:	e0a6      	b.n	8000e50 <drv_ds1307_init+0x17c>
  DRV_DS1307_CHECK_I2C(drv_ds1307->drv_ds1307_i2c);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <drv_ds1307_init+0x3a>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e0a0      	b.n	8000e50 <drv_ds1307_init+0x17c>
  if (drv_ds1307->drv_ds1307_mode_time != 12)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	799b      	ldrb	r3, [r3, #6]
 8000d12:	2b0c      	cmp	r3, #12
 8000d14:	d002      	beq.n	8000d1c <drv_ds1307_init+0x48>
    drv_ds1307->drv_ds1307_mode_time = 24;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2218      	movs	r2, #24
 8000d1a:	719a      	strb	r2, [r3, #6]

  if (drv_ds1307->drv_ds1307_i2c->Instance == I2C1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a4e      	ldr	r2, [pc, #312]	; (8000e5c <drv_ds1307_init+0x188>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d11f      	bne.n	8000d68 <drv_ds1307_init+0x94>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_init(drv_ds1307->drv_ds1307_i2c))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc59 	bl	80005e4 <bsp_i2c1_init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d863      	bhi.n	8000e00 <drv_ds1307_init+0x12c>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <drv_ds1307_init+0x6c>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d5d 	.word	0x08000d5d
 8000d44:	08000e01 	.word	0x08000e01
 8000d48:	08000d61 	.word	0x08000d61
 8000d4c:	08000e01 	.word	0x08000e01
 8000d50:	08000d65 	.word	0x08000d65
 8000d54:	08000d59 	.word	0x08000d59
 8000d58:	2307      	movs	r3, #7
 8000d5a:	e079      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e077      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000d60:	2300      	movs	r3, #0
 8000d62:	e075      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e073      	b.n	8000e50 <drv_ds1307_init+0x17c>
  else if (drv_ds1307->drv_ds1307_i2c->Instance == I2C2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <drv_ds1307_init+0x18c>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d11f      	bne.n	8000db4 <drv_ds1307_init+0xe0>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_init(drv_ds1307->drv_ds1307_i2c))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fc5d 	bl	8000638 <bsp_i2c2_init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b05      	cmp	r3, #5
 8000d82:	d83f      	bhi.n	8000e04 <drv_ds1307_init+0x130>
 8000d84:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <drv_ds1307_init+0xb8>)
 8000d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8a:	bf00      	nop
 8000d8c:	08000da9 	.word	0x08000da9
 8000d90:	08000e05 	.word	0x08000e05
 8000d94:	08000dad 	.word	0x08000dad
 8000d98:	08000e05 	.word	0x08000e05
 8000d9c:	08000db1 	.word	0x08000db1
 8000da0:	08000da5 	.word	0x08000da5
 8000da4:	2307      	movs	r3, #7
 8000da6:	e053      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e051      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000dac:	2300      	movs	r3, #0
 8000dae:	e04f      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e04d      	b.n	8000e50 <drv_ds1307_init+0x17c>
  else if (drv_ds1307->drv_ds1307_i2c->Instance == I2C3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <drv_ds1307_init+0x190>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d123      	bne.n	8000e08 <drv_ds1307_init+0x134>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_init(drv_ds1307->drv_ds1307_i2c))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc61 	bl	800068c <bsp_i2c3_init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	d81d      	bhi.n	8000e0c <drv_ds1307_init+0x138>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <drv_ds1307_init+0x104>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000df5 	.word	0x08000df5
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000df9 	.word	0x08000df9
 8000de4:	08000e0d 	.word	0x08000e0d
 8000de8:	08000dfd 	.word	0x08000dfd
 8000dec:	08000df1 	.word	0x08000df1
 8000df0:	2307      	movs	r3, #7
 8000df2:	e02d      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e02b      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e029      	b.n	8000e50 <drv_ds1307_init+0x17c>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e027      	b.n	8000e50 <drv_ds1307_init+0x17c>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_init(drv_ds1307->drv_ds1307_i2c))
 8000e00:	bf00      	nop
 8000e02:	e004      	b.n	8000e0e <drv_ds1307_init+0x13a>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_init(drv_ds1307->drv_ds1307_i2c))
 8000e04:	bf00      	nop
 8000e06:	e002      	b.n	8000e0e <drv_ds1307_init+0x13a>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_init(drv_ds1307->drv_ds1307_i2c))
 8000e08:	bf00      	nop
 8000e0a:	e000      	b.n	8000e0e <drv_ds1307_init+0x13a>
 8000e0c:	bf00      	nop

  /* Add device to private variable */
  drv_ds1307_initialize |= (1 << drv_ds1307->drv_ds1307_id);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	795b      	ldrb	r3, [r3, #5]
 8000e12:	461a      	mov	r2, r3
 8000e14:	2301      	movs	r3, #1
 8000e16:	4093      	lsls	r3, r2
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <drv_ds1307_init+0x184>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <drv_ds1307_init+0x184>)
 8000e28:	701a      	strb	r2, [r3, #0]

  /* Set mode default mode 24h */
  DRV_DS1307_CHECK_STATUS(drv_ds1307_set_mode_time(*drv_ds1307, drv_ds1307->drv_ds1307_mode_time));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	799a      	ldrb	r2, [r3, #6]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e34:	f000 fb58 	bl	80014e8 <drv_ds1307_set_mode_time>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <drv_ds1307_init+0x194>)
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <drv_ds1307_init+0x194>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d002      	beq.n	8000e4e <drv_ds1307_init+0x17a>
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <drv_ds1307_init+0x194>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	e000      	b.n	8000e50 <drv_ds1307_init+0x17c>
  return drv_ds1307_success;
 8000e4e:	2302      	movs	r3, #2
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000103 	.word	0x20000103
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40005800 	.word	0x40005800
 8000e64:	40005c00 	.word	0x40005c00
 8000e68:	20000104 	.word	0x20000104

08000e6c <drv_ds1307_write_reg>:

static drv_ds1307_status_t drv_ds1307_write_reg(drv_ds1307_config_t drv_ds1307, uint8_t reg_write, uint8_t data_write)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	f107 0408 	add.w	r4, r7, #8
 8000e76:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71bb      	strb	r3, [r7, #6]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <drv_ds1307_write_reg+0x12c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	fa42 f303 	asr.w	r3, r2, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <drv_ds1307_write_reg+0x32>
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e078      	b.n	8000f90 <drv_ds1307_write_reg+0x124>

  if (drv_ds1307.drv_ds1307_i2c->Instance == I2C1)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <drv_ds1307_write_reg+0x130>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d11f      	bne.n	8000ee8 <drv_ds1307_write_reg+0x7c>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	79ba      	ldrb	r2, [r7, #6]
 8000eac:	79f9      	ldrb	r1, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc16 	bl	80006e0 <bsp_i2c1_write>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d864      	bhi.n	8000f84 <drv_ds1307_write_reg+0x118>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <drv_ds1307_write_reg+0x54>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000f85 	.word	0x08000f85
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000f85 	.word	0x08000f85
 8000ed0:	08000ee5 	.word	0x08000ee5
 8000ed4:	08000ed9 	.word	0x08000ed9
 8000ed8:	2307      	movs	r3, #7
 8000eda:	e059      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e057      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e055      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e053      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C2)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <drv_ds1307_write_reg+0x134>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d120      	bne.n	8000f34 <drv_ds1307_write_reg+0xc8>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	79f9      	ldrb	r1, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fcd9 	bl	80008b0 <bsp_i2c2_write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d841      	bhi.n	8000f88 <drv_ds1307_write_reg+0x11c>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <drv_ds1307_write_reg+0xa0>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f29 	.word	0x08000f29
 8000f10:	08000f89 	.word	0x08000f89
 8000f14:	08000f2d 	.word	0x08000f2d
 8000f18:	08000f89 	.word	0x08000f89
 8000f1c:	08000f31 	.word	0x08000f31
 8000f20:	08000f25 	.word	0x08000f25
 8000f24:	2307      	movs	r3, #7
 8000f26:	e033      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e031      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e02f      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e02d      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C3)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <drv_ds1307_write_reg+0x138>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d120      	bne.n	8000f80 <drv_ds1307_write_reg+0x114>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000f3e:	7b3b      	ldrb	r3, [r7, #12]
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	79f9      	ldrb	r1, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fd9b 	bl	8000a80 <bsp_i2c3_write>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d81d      	bhi.n	8000f8c <drv_ds1307_write_reg+0x120>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <drv_ds1307_write_reg+0xec>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f75 	.word	0x08000f75
 8000f5c:	08000f8d 	.word	0x08000f8d
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f8d 	.word	0x08000f8d
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000f71 	.word	0x08000f71
 8000f70:	2307      	movs	r3, #7
 8000f72:	e00d      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e00b      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e009      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e007      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
  else
    return drv_ds1307_error;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e005      	b.n	8000f90 <drv_ds1307_write_reg+0x124>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <drv_ds1307_write_reg+0x122>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <drv_ds1307_write_reg+0x122>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_write(drv_ds1307.drv_ds1307_address, reg_write, data_write))
 8000f8c:	bf00      	nop
  return drv_ds1307_success;
 8000f8e:	2302      	movs	r3, #2
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	20000103 	.word	0x20000103
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40005800 	.word	0x40005800
 8000fa4:	40005c00 	.word	0x40005c00

08000fa8 <drv_ds1307_write_multi_reg>:

static drv_ds1307_status_t drv_ds1307_write_multi_reg(drv_ds1307_config_t drv_ds1307, uint8_t *data_write, uint8_t size_data)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	f107 0408 	add.w	r4, r7, #8
 8000fb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	70fb      	strb	r3, [r7, #3]
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <drv_ds1307_write_multi_reg+0x128>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	fa42 f303 	asr.w	r3, r2, r3
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <drv_ds1307_write_multi_reg+0x2a>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e07a      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>

  if (drv_ds1307.drv_ds1307_i2c->Instance == I2C1)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a3f      	ldr	r2, [pc, #252]	; (80010d4 <drv_ds1307_write_multi_reg+0x12c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d121      	bne.n	8001020 <drv_ds1307_write_multi_reg+0x78>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	78fa      	ldrb	r2, [r7, #3]
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fbb1 	bl	800074c <bsp_i2c1_write_multi>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d865      	bhi.n	80010bc <drv_ds1307_write_multi_reg+0x114>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <drv_ds1307_write_multi_reg+0x50>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001015 	.word	0x08001015
 8000ffc:	080010bd 	.word	0x080010bd
 8001000:	08001019 	.word	0x08001019
 8001004:	080010bd 	.word	0x080010bd
 8001008:	0800101d 	.word	0x0800101d
 800100c:	08001011 	.word	0x08001011
 8001010:	2307      	movs	r3, #7
 8001012:	e059      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 8001014:	2301      	movs	r3, #1
 8001016:	e057      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 8001018:	2300      	movs	r3, #0
 800101a:	e055      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 800101c:	2303      	movs	r3, #3
 800101e:	e053      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C2)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <drv_ds1307_write_multi_reg+0x130>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d120      	bne.n	800106c <drv_ds1307_write_multi_reg+0xc4>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	b292      	uxth	r2, r2
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc72 	bl	800091c <bsp_i2c2_write_multi>
 8001038:	4603      	mov	r3, r0
 800103a:	2b05      	cmp	r3, #5
 800103c:	d840      	bhi.n	80010c0 <drv_ds1307_write_multi_reg+0x118>
 800103e:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <drv_ds1307_write_multi_reg+0x9c>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001061 	.word	0x08001061
 8001048:	080010c1 	.word	0x080010c1
 800104c:	08001065 	.word	0x08001065
 8001050:	080010c1 	.word	0x080010c1
 8001054:	08001069 	.word	0x08001069
 8001058:	0800105d 	.word	0x0800105d
 800105c:	2307      	movs	r3, #7
 800105e:	e033      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 8001060:	2301      	movs	r3, #1
 8001062:	e031      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 8001064:	2300      	movs	r3, #0
 8001066:	e02f      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 8001068:	2303      	movs	r3, #3
 800106a:	e02d      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C3)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <drv_ds1307_write_multi_reg+0x134>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d120      	bne.n	80010b8 <drv_ds1307_write_multi_reg+0x110>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	b292      	uxth	r2, r2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd34 	bl	8000aec <bsp_i2c3_write_multi>
 8001084:	4603      	mov	r3, r0
 8001086:	2b05      	cmp	r3, #5
 8001088:	d81c      	bhi.n	80010c4 <drv_ds1307_write_multi_reg+0x11c>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <drv_ds1307_write_multi_reg+0xe8>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010ad 	.word	0x080010ad
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010c5 	.word	0x080010c5
 80010a0:	080010b5 	.word	0x080010b5
 80010a4:	080010a9 	.word	0x080010a9
 80010a8:	2307      	movs	r3, #7
 80010aa:	e00d      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e00b      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 80010b0:	2300      	movs	r3, #0
 80010b2:	e009      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
 80010b4:	2303      	movs	r3, #3
 80010b6:	e007      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
  else
    return drv_ds1307_error;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e005      	b.n	80010c8 <drv_ds1307_write_multi_reg+0x120>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <drv_ds1307_write_multi_reg+0x11e>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <drv_ds1307_write_multi_reg+0x11e>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_write_multi(drv_ds1307.drv_ds1307_address, data_write, size_data))
 80010c4:	bf00      	nop
  return drv_ds1307_success;
 80010c6:	2302      	movs	r3, #2
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000103 	.word	0x20000103
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40005800 	.word	0x40005800
 80010dc:	40005c00 	.word	0x40005c00

080010e0 <drv_ds1307_read_reg>:

static drv_ds1307_status_t drv_ds1307_read_reg(drv_ds1307_config_t drv_ds1307, uint8_t reg_read, uint8_t *data_read)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	f107 0408 	add.w	r4, r7, #8
 80010ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71fb      	strb	r3, [r7, #7]
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 80010f4:	4b44      	ldr	r3, [pc, #272]	; (8001208 <drv_ds1307_read_reg+0x128>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	fa42 f303 	asr.w	r3, r2, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <drv_ds1307_read_reg+0x2c>
 8001108:	2306      	movs	r3, #6
 800110a:	e079      	b.n	8001200 <drv_ds1307_read_reg+0x120>

  if (drv_ds1307.drv_ds1307_i2c->Instance == I2C1)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <drv_ds1307_read_reg+0x12c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d120      	bne.n	8001158 <drv_ds1307_read_reg+0x78>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	79f9      	ldrb	r1, [r7, #7]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb45 	bl	80007ac <bsp_i2c1_read>
 8001122:	4603      	mov	r3, r0
 8001124:	2b05      	cmp	r3, #5
 8001126:	d865      	bhi.n	80011f4 <drv_ds1307_read_reg+0x114>
 8001128:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <drv_ds1307_read_reg+0x50>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	0800114d 	.word	0x0800114d
 8001134:	080011f5 	.word	0x080011f5
 8001138:	08001151 	.word	0x08001151
 800113c:	080011f5 	.word	0x080011f5
 8001140:	08001155 	.word	0x08001155
 8001144:	08001149 	.word	0x08001149
 8001148:	2307      	movs	r3, #7
 800114a:	e059      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 800114c:	2301      	movs	r3, #1
 800114e:	e057      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 8001150:	2300      	movs	r3, #0
 8001152:	e055      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 8001154:	2303      	movs	r3, #3
 8001156:	e053      	b.n	8001200 <drv_ds1307_read_reg+0x120>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C2)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <drv_ds1307_read_reg+0x130>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d120      	bne.n	80011a4 <drv_ds1307_read_reg+0xc4>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 8001162:	7b3b      	ldrb	r3, [r7, #12]
 8001164:	79f9      	ldrb	r1, [r7, #7]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc07 	bl	800097c <bsp_i2c2_read>
 800116e:	4603      	mov	r3, r0
 8001170:	2b05      	cmp	r3, #5
 8001172:	d841      	bhi.n	80011f8 <drv_ds1307_read_reg+0x118>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <drv_ds1307_read_reg+0x9c>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	08001199 	.word	0x08001199
 8001180:	080011f9 	.word	0x080011f9
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011f9 	.word	0x080011f9
 800118c:	080011a1 	.word	0x080011a1
 8001190:	08001195 	.word	0x08001195
 8001194:	2307      	movs	r3, #7
 8001196:	e033      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 8001198:	2301      	movs	r3, #1
 800119a:	e031      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 800119c:	2300      	movs	r3, #0
 800119e:	e02f      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e02d      	b.n	8001200 <drv_ds1307_read_reg+0x120>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C3)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <drv_ds1307_read_reg+0x134>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d120      	bne.n	80011f0 <drv_ds1307_read_reg+0x110>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 80011ae:	7b3b      	ldrb	r3, [r7, #12]
 80011b0:	79f9      	ldrb	r1, [r7, #7]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fcc9 	bl	8000b4c <bsp_i2c3_read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d81d      	bhi.n	80011fc <drv_ds1307_read_reg+0x11c>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <drv_ds1307_read_reg+0xe8>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011e5 	.word	0x080011e5
 80011cc:	080011fd 	.word	0x080011fd
 80011d0:	080011e9 	.word	0x080011e9
 80011d4:	080011fd 	.word	0x080011fd
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011e1 	.word	0x080011e1
 80011e0:	2307      	movs	r3, #7
 80011e2:	e00d      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00b      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 80011e8:	2300      	movs	r3, #0
 80011ea:	e009      	b.n	8001200 <drv_ds1307_read_reg+0x120>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e007      	b.n	8001200 <drv_ds1307_read_reg+0x120>
  else
    return drv_ds1307_error;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e005      	b.n	8001200 <drv_ds1307_read_reg+0x120>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 80011f4:	bf00      	nop
 80011f6:	e002      	b.n	80011fe <drv_ds1307_read_reg+0x11e>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 80011f8:	bf00      	nop
 80011fa:	e000      	b.n	80011fe <drv_ds1307_read_reg+0x11e>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_read(drv_ds1307.drv_ds1307_address, reg_read, data_read))
 80011fc:	bf00      	nop
  return drv_ds1307_success;
 80011fe:	2302      	movs	r3, #2
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	20000103 	.word	0x20000103
 800120c:	40005400 	.word	0x40005400
 8001210:	40005800 	.word	0x40005800
 8001214:	40005c00 	.word	0x40005c00

08001218 <drv_ds1307_read_multi_reg>:

static drv_ds1307_status_t drv_ds1307_read_multi_reg(drv_ds1307_config_t drv_ds1307, uint8_t reg_read, uint8_t *data_read, uint8_t size_data)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	f107 0408 	add.w	r4, r7, #8
 8001222:	e884 0003 	stmia.w	r4, {r0, r1}
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	71fb      	strb	r3, [r7, #7]
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 800122c:	4b47      	ldr	r3, [pc, #284]	; (800134c <drv_ds1307_read_multi_reg+0x134>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	fa42 f303 	asr.w	r3, r2, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <drv_ds1307_read_multi_reg+0x2c>
 8001240:	2306      	movs	r3, #6
 8001242:	e07f      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>

  if (drv_ds1307.drv_ds1307_i2c->Instance == I2C1)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a41      	ldr	r2, [pc, #260]	; (8001350 <drv_ds1307_read_multi_reg+0x138>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d122      	bne.n	8001294 <drv_ds1307_read_multi_reg+0x7c>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 800124e:	7b38      	ldrb	r0, [r7, #12]
 8001250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001254:	b29b      	uxth	r3, r3
 8001256:	79f9      	ldrb	r1, [r7, #7]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	f7ff fae7 	bl	800082c <bsp_i2c1_read_multi>
 800125e:	4603      	mov	r3, r0
 8001260:	2b05      	cmp	r3, #5
 8001262:	d869      	bhi.n	8001338 <drv_ds1307_read_multi_reg+0x120>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <drv_ds1307_read_multi_reg+0x54>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	08001289 	.word	0x08001289
 8001270:	08001339 	.word	0x08001339
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001339 	.word	0x08001339
 800127c:	08001291 	.word	0x08001291
 8001280:	08001285 	.word	0x08001285
 8001284:	2307      	movs	r3, #7
 8001286:	e05d      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 8001288:	2301      	movs	r3, #1
 800128a:	e05b      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 800128c:	2300      	movs	r3, #0
 800128e:	e059      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 8001290:	2303      	movs	r3, #3
 8001292:	e057      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C2)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <drv_ds1307_read_multi_reg+0x13c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d122      	bne.n	80012e4 <drv_ds1307_read_multi_reg+0xcc>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 800129e:	7b38      	ldrb	r0, [r7, #12]
 80012a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	79f9      	ldrb	r1, [r7, #7]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	f7ff fba7 	bl	80009fc <bsp_i2c2_read_multi>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d843      	bhi.n	800133c <drv_ds1307_read_multi_reg+0x124>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <drv_ds1307_read_multi_reg+0xa4>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012d9 	.word	0x080012d9
 80012c0:	0800133d 	.word	0x0800133d
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	0800133d 	.word	0x0800133d
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	080012d5 	.word	0x080012d5
 80012d4:	2307      	movs	r3, #7
 80012d6:	e035      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 80012d8:	2301      	movs	r3, #1
 80012da:	e033      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 80012dc:	2300      	movs	r3, #0
 80012de:	e031      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e02f      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
  else if (drv_ds1307.drv_ds1307_i2c->Instance == I2C3)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <drv_ds1307_read_multi_reg+0x140>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d122      	bne.n	8001334 <drv_ds1307_read_multi_reg+0x11c>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 80012ee:	7b38      	ldrb	r0, [r7, #12]
 80012f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	79f9      	ldrb	r1, [r7, #7]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	f7ff fc67 	bl	8000bcc <bsp_i2c3_read_multi>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b05      	cmp	r3, #5
 8001302:	d81d      	bhi.n	8001340 <drv_ds1307_read_multi_reg+0x128>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <drv_ds1307_read_multi_reg+0xf4>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	08001329 	.word	0x08001329
 8001310:	08001341 	.word	0x08001341
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	08001331 	.word	0x08001331
 8001320:	08001325 	.word	0x08001325
 8001324:	2307      	movs	r3, #7
 8001326:	e00d      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 8001328:	2301      	movs	r3, #1
 800132a:	e00b      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 800132c:	2300      	movs	r3, #0
 800132e:	e009      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
 8001330:	2303      	movs	r3, #3
 8001332:	e007      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
  else
    return drv_ds1307_error;
 8001334:	2300      	movs	r3, #0
 8001336:	e005      	b.n	8001344 <drv_ds1307_read_multi_reg+0x12c>
    DRV_DS1307_CHECK_FAULT(bsp_i2c1_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 8001338:	bf00      	nop
 800133a:	e002      	b.n	8001342 <drv_ds1307_read_multi_reg+0x12a>
    DRV_DS1307_CHECK_FAULT(bsp_i2c2_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <drv_ds1307_read_multi_reg+0x12a>
    DRV_DS1307_CHECK_FAULT(bsp_i2c3_read_multi(drv_ds1307.drv_ds1307_address, reg_read, data_read, size_data))
 8001340:	bf00      	nop
  return drv_ds1307_success;
 8001342:	2302      	movs	r3, #2
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	20000103 	.word	0x20000103
 8001350:	40005400 	.word	0x40005400
 8001354:	40005800 	.word	0x40005800
 8001358:	40005c00 	.word	0x40005c00

0800135c <check_leap_year>:

static uint8_t check_leap_year(uint16_t year)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	b29b      	uxth	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10b      	bne.n	800138a <check_leap_year+0x2e>
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <check_leap_year+0x5c>)
 8001376:	fba2 1203 	umull	r1, r2, r2, r3
 800137a:	0952      	lsrs	r2, r2, #5
 800137c:	2164      	movs	r1, #100	; 0x64
 800137e:	fb01 f202 	mul.w	r2, r1, r2
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <check_leap_year+0x48>
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <check_leap_year+0x5c>)
 800138e:	fba2 1203 	umull	r1, r2, r2, r3
 8001392:	09d2      	lsrs	r2, r2, #7
 8001394:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001398:	fb01 f202 	mul.w	r2, r1, r2
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <check_leap_year+0x4c>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <check_leap_year+0x4e>
 80013a8:	2300      	movs	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	51eb851f 	.word	0x51eb851f

080013bc <day_of_month>:

static uint8_t day_of_month(uint8_t month, uint8_t year)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
  switch (month)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	2b0b      	cmp	r3, #11
 80013d2:	d82e      	bhi.n	8001432 <day_of_month+0x76>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <day_of_month+0x20>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	0800140d 	.word	0x0800140d
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800140d 	.word	0x0800140d
 80013e8:	08001411 	.word	0x08001411
 80013ec:	0800140d 	.word	0x0800140d
 80013f0:	08001411 	.word	0x08001411
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	0800140d 	.word	0x0800140d
 80013fc:	08001411 	.word	0x08001411
 8001400:	0800140d 	.word	0x0800140d
 8001404:	08001411 	.word	0x08001411
 8001408:	0800140d 	.word	0x0800140d
  case 3:
  case 5:
  case 7:
  case 8:
  case 10:
  case 12: return 31;
 800140c:	231f      	movs	r3, #31
 800140e:	e011      	b.n	8001434 <day_of_month+0x78>
  case 4:
  case 6:
  case 9:
  case 11: return 30;
 8001410:	231e      	movs	r3, #30
 8001412:	e00f      	b.n	8001434 <day_of_month+0x78>
  case 2:
    if (check_leap_year(2000 + year))
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	b29b      	uxth	r3, r3
 8001418:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff9c 	bl	800135c <check_leap_year>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <day_of_month+0x72>
      return 29;
 800142a:	231d      	movs	r3, #29
 800142c:	e002      	b.n	8001434 <day_of_month+0x78>
    else
      return 28;
 800142e:	231c      	movs	r3, #28
 8001430:	e000      	b.n	8001434 <day_of_month+0x78>
  default: break;
  }
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <drv_ds1307_check_time_set>:

static drv_ds1307_status_t drv_ds1307_check_time_set(drv_ds1307_config_t drv_ds1307, drv_ds1307_time_t time_set)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	f107 0408 	add.w	r4, r7, #8
 8001446:	e884 0003 	stmia.w	r4, {r0, r1}
 800144a:	4639      	mov	r1, r7
 800144c:	e881 000c 	stmia.w	r1, {r2, r3}
  if (time_set.seconds < 0 || time_set.seconds > 59)
 8001450:	783b      	ldrb	r3, [r7, #0]
 8001452:	2b3b      	cmp	r3, #59	; 0x3b
 8001454:	d901      	bls.n	800145a <drv_ds1307_check_time_set+0x1e>
    return drv_ds1307_invalid_parameter;
 8001456:	2303      	movs	r3, #3
 8001458:	e042      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.minutes < 0 || time_set.minutes > 59)
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	2b3b      	cmp	r3, #59	; 0x3b
 800145e:	d901      	bls.n	8001464 <drv_ds1307_check_time_set+0x28>
    return drv_ds1307_invalid_parameter;
 8001460:	2303      	movs	r3, #3
 8001462:	e03d      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.hours < 0 || (time_set.hours > ((drv_ds1307.drv_ds1307_mode_time == 12) ? 12 : 24)))
 8001464:	78bb      	ldrb	r3, [r7, #2]
 8001466:	461a      	mov	r2, r3
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d101      	bne.n	8001472 <drv_ds1307_check_time_set+0x36>
 800146e:	230c      	movs	r3, #12
 8001470:	e000      	b.n	8001474 <drv_ds1307_check_time_set+0x38>
 8001472:	2318      	movs	r3, #24
 8001474:	4293      	cmp	r3, r2
 8001476:	da01      	bge.n	800147c <drv_ds1307_check_time_set+0x40>
    return drv_ds1307_invalid_parameter;
 8001478:	2303      	movs	r3, #3
 800147a:	e031      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.day < 1 || time_set.day > 7)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <drv_ds1307_check_time_set+0x4c>
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	2b07      	cmp	r3, #7
 8001486:	d901      	bls.n	800148c <drv_ds1307_check_time_set+0x50>
    return drv_ds1307_invalid_parameter;
 8001488:	2303      	movs	r3, #3
 800148a:	e029      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.year < 0 || time_set.year > 99)
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b63      	cmp	r3, #99	; 0x63
 8001490:	d901      	bls.n	8001496 <drv_ds1307_check_time_set+0x5a>
    return drv_ds1307_invalid_parameter;
 8001492:	2303      	movs	r3, #3
 8001494:	e024      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.month < 0 || time_set.month > 12)
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d901      	bls.n	80014a0 <drv_ds1307_check_time_set+0x64>
    return drv_ds1307_invalid_parameter;
 800149c:	2303      	movs	r3, #3
 800149e:	e01f      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (time_set.date < 1 || (time_set.date > day_of_month(time_set.month, time_set.year)))
 80014a0:	793b      	ldrb	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <drv_ds1307_check_time_set+0x7e>
 80014a6:	793c      	ldrb	r4, [r7, #4]
 80014a8:	797b      	ldrb	r3, [r7, #5]
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff84 	bl	80013bc <day_of_month>
 80014b4:	4603      	mov	r3, r0
 80014b6:	429c      	cmp	r4, r3
 80014b8:	d901      	bls.n	80014be <drv_ds1307_check_time_set+0x82>
    return drv_ds1307_invalid_parameter;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e010      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  if (drv_ds1307.drv_ds1307_mode_time == 12)
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	2b0c      	cmp	r3, #12
 80014c2:	d107      	bne.n	80014d4 <drv_ds1307_check_time_set+0x98>
  {
    if (time_set.am_pm != 0 && time_set.am_pm != 1)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <drv_ds1307_check_time_set+0xa2>
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d006      	beq.n	80014de <drv_ds1307_check_time_set+0xa2>
      return drv_ds1307_invalid_parameter;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e005      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  }
  else
  {
    if (time_set.am_pm != 2)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d001      	beq.n	80014de <drv_ds1307_check_time_set+0xa2>
      return drv_ds1307_invalid_parameter;
 80014da:	2303      	movs	r3, #3
 80014dc:	e000      	b.n	80014e0 <drv_ds1307_check_time_set+0xa4>
  }
  return drv_ds1307_success;
 80014de:	2302      	movs	r3, #2
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd90      	pop	{r4, r7, pc}

080014e8 <drv_ds1307_set_mode_time>:
    return drv_ds1307_error;
  return drv_ds1307_success;
}

drv_ds1307_status_t drv_ds1307_set_mode_time(drv_ds1307_config_t drv_ds1307, uint8_t mode)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80014f6:	4613      	mov	r3, r2
 80014f8:	71fb      	strb	r3, [r7, #7]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <drv_ds1307_set_mode_time+0x144>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	fa42 f303 	asr.w	r3, r2, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <drv_ds1307_set_mode_time+0x2a>
 800150e:	2306      	movs	r3, #6
 8001510:	e087      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>

  uint8_t data_reg = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	757b      	strb	r3, [r7, #21]
  switch (mode)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d002      	beq.n	8001522 <drv_ds1307_set_mode_time+0x3a>
 800151c:	2b18      	cmp	r3, #24
 800151e:	d045      	beq.n	80015ac <drv_ds1307_set_mode_time+0xc4>
 8001520:	e07e      	b.n	8001620 <drv_ds1307_set_mode_time+0x138>
  {
  case 12:
  {
    DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_HOURS, &data_reg));
 8001522:	f107 0315 	add.w	r3, r7, #21
 8001526:	2202      	movs	r2, #2
 8001528:	f107 0108 	add.w	r1, r7, #8
 800152c:	c903      	ldmia	r1, {r0, r1}
 800152e:	f7ff fdd7 	bl	80010e0 <drv_ds1307_read_reg>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d002      	beq.n	8001548 <drv_ds1307_set_mode_time+0x60>
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	e06c      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>

    if (data_reg & DRV_DS1307_MODE_HOURS)
 8001548:	7d7b      	ldrb	r3, [r7, #21]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <drv_ds1307_set_mode_time+0x6e>
      return drv_ds1307_success;
 8001552:	2302      	movs	r3, #2
 8001554:	e065      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>

    uint8_t hour = drv_ds1307_bcd_to_bin(data_reg & 0x3F);
 8001556:	7d7b      	ldrb	r3, [r7, #21]
 8001558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb76 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
    data_reg     = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	757b      	strb	r3, [r7, #21]
    if (hour > 12)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d904      	bls.n	800157c <drv_ds1307_set_mode_time+0x94>
    {
      data_reg = DRV_DS1307_AM_PM;
 8001572:	2320      	movs	r3, #32
 8001574:	757b      	strb	r3, [r7, #21]
      hour -= 12;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	3b0c      	subs	r3, #12
 800157a:	75fb      	strb	r3, [r7, #23]
    }
    data_reg |= DRV_DS1307_MODE_HOURS | drv_ds1307_bin_to_bcd(hour);
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fb82 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 8001584:	4603      	mov	r3, r0
 8001586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b25a      	sxtb	r2, r3
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	757b      	strb	r3, [r7, #21]
    return drv_ds1307_write_reg(drv_ds1307, DRV_DS1307_HOURS, data_reg);
 800159a:	7d7b      	ldrb	r3, [r7, #21]
 800159c:	2202      	movs	r2, #2
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	c903      	ldmia	r1, {r0, r1}
 80015a4:	f7ff fc62 	bl	8000e6c <drv_ds1307_write_reg>
 80015a8:	4603      	mov	r3, r0
 80015aa:	e03a      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>
  }
  case 24:
  {
    DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_HOURS, &data_reg));
 80015ac:	f107 0315 	add.w	r3, r7, #21
 80015b0:	2202      	movs	r2, #2
 80015b2:	f107 0108 	add.w	r1, r7, #8
 80015b6:	c903      	ldmia	r1, {r0, r1}
 80015b8:	f7ff fd92 	bl	80010e0 <drv_ds1307_read_reg>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d002      	beq.n	80015d2 <drv_ds1307_set_mode_time+0xea>
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <drv_ds1307_set_mode_time+0x148>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	e027      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>

    if (!(data_reg & DRV_DS1307_MODE_HOURS))
 80015d2:	7d7b      	ldrb	r3, [r7, #21]
 80015d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <drv_ds1307_set_mode_time+0xf8>
      return drv_ds1307_success;
 80015dc:	2302      	movs	r3, #2
 80015de:	e020      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>

    uint8_t hour = drv_ds1307_bcd_to_bin(data_reg & 0x1F);
 80015e0:	7d7b      	ldrb	r3, [r7, #21]
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb31 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75bb      	strb	r3, [r7, #22]
    if (data_reg & DRV_DS1307_AM_PM)
 80015f2:	7d7b      	ldrb	r3, [r7, #21]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <drv_ds1307_set_mode_time+0x11a>
      hour += 12;
 80015fc:	7dbb      	ldrb	r3, [r7, #22]
 80015fe:	330c      	adds	r3, #12
 8001600:	75bb      	strb	r3, [r7, #22]
    data_reg = drv_ds1307_bin_to_bcd(hour);
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb3f 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 800160a:	4603      	mov	r3, r0
 800160c:	757b      	strb	r3, [r7, #21]
    return drv_ds1307_write_reg(drv_ds1307, DRV_DS1307_HOURS, data_reg);
 800160e:	7d7b      	ldrb	r3, [r7, #21]
 8001610:	2202      	movs	r2, #2
 8001612:	f107 0108 	add.w	r1, r7, #8
 8001616:	c903      	ldmia	r1, {r0, r1}
 8001618:	f7ff fc28 	bl	8000e6c <drv_ds1307_write_reg>
 800161c:	4603      	mov	r3, r0
 800161e:	e000      	b.n	8001622 <drv_ds1307_set_mode_time+0x13a>
  }
  default: return drv_ds1307_invalid_parameter;
 8001620:	2303      	movs	r3, #3
  }
  return drv_ds1307_error;
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000103 	.word	0x20000103
 8001630:	20000104 	.word	0x20000104

08001634 <drv_ds1307_get_time>:

drv_ds1307_status_t drv_ds1307_get_time(drv_ds1307_config_t drv_ds1307, drv_ds1307_time_t *get_time)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001642:	607a      	str	r2, [r7, #4]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <drv_ds1307_get_time+0x118>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	fa42 f303 	asr.w	r3, r2, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <drv_ds1307_get_time+0x28>
 8001658:	2306      	movs	r3, #6
 800165a:	e072      	b.n	8001742 <drv_ds1307_get_time+0x10e>

  uint8_t data_time[7] = { 0 };
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2100      	movs	r1, #0
 8001666:	460a      	mov	r2, r1
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	460a      	mov	r2, r1
 800166c:	709a      	strb	r2, [r3, #2]
  DRV_DS1307_CHECK_STATUS(drv_ds1307_read_multi_reg(drv_ds1307, DRV_DS1307_SECONDS, data_time, 7));
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	2207      	movs	r2, #7
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	c903      	ldmia	r1, {r0, r1}
 800167e:	f7ff fdcb 	bl	8001218 <drv_ds1307_read_multi_reg>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <drv_ds1307_get_time+0x11c>)
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <drv_ds1307_get_time+0x11c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d002      	beq.n	8001698 <drv_ds1307_get_time+0x64>
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <drv_ds1307_get_time+0x11c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	e054      	b.n	8001742 <drv_ds1307_get_time+0x10e>
  get_time->seconds = drv_ds1307_bcd_to_bin(data_time[0] & 0x7F);
 8001698:	7c3b      	ldrb	r3, [r7, #16]
 800169a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fad5 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	701a      	strb	r2, [r3, #0]
  get_time->minutes = drv_ds1307_bcd_to_bin(data_time[1]);
 80016ae:	7c7b      	ldrb	r3, [r7, #17]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff facd 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	705a      	strb	r2, [r3, #1]
  get_time->hours   = drv_ds1307_bcd_to_bin(data_time[2] & (drv_ds1307.drv_ds1307_mode_time == 24 ? 0x3F : 0x1F));
 80016be:	7cbb      	ldrb	r3, [r7, #18]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	2a18      	cmp	r2, #24
 80016c6:	d101      	bne.n	80016cc <drv_ds1307_get_time+0x98>
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	e000      	b.n	80016ce <drv_ds1307_get_time+0x9a>
 80016cc:	221f      	movs	r2, #31
 80016ce:	4013      	ands	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fabb 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	709a      	strb	r2, [r3, #2]
  if (drv_ds1307.drv_ds1307_mode_time == 12)
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d108      	bne.n	80016fa <drv_ds1307_get_time+0xc6>
    get_time->am_pm = (data_time[2] >> 5) & 0x01;
 80016e8:	7cbb      	ldrb	r3, [r7, #18]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	71da      	strb	r2, [r3, #7]
 80016f8:	e002      	b.n	8001700 <drv_ds1307_get_time+0xcc>
  else
    get_time->am_pm = 2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2202      	movs	r2, #2
 80016fe:	71da      	strb	r2, [r3, #7]
  get_time->day   = drv_ds1307_bcd_to_bin(data_time[3]);
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff faa4 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	70da      	strb	r2, [r3, #3]
  get_time->date  = drv_ds1307_bcd_to_bin(data_time[4]);
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa9c 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	711a      	strb	r2, [r3, #4]
  get_time->month = drv_ds1307_bcd_to_bin(data_time[5]);
 8001720:	7d7b      	ldrb	r3, [r7, #21]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fa94 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	715a      	strb	r2, [r3, #5]
  get_time->year  = drv_ds1307_bcd_to_bin(data_time[6]);
 8001730:	7dbb      	ldrb	r3, [r7, #22]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fa8c 	bl	8000c50 <drv_ds1307_bcd_to_bin>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	719a      	strb	r2, [r3, #6]
  return drv_ds1307_success;
 8001740:	2302      	movs	r3, #2
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000103 	.word	0x20000103
 8001750:	20000104 	.word	0x20000104

08001754 <drv_ds1307_get_epoch_time>:

  return drv_ds1307_success;
}

drv_ds1307_status_t drv_ds1307_get_epoch_time(drv_ds1307_config_t drv_ds1307, uint32_t *epoch_time)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001762:	607a      	str	r2, [r7, #4]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <drv_ds1307_get_epoch_time+0xbc>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	fa42 f303 	asr.w	r3, r2, r3
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <drv_ds1307_get_epoch_time+0x28>
 8001778:	2306      	movs	r3, #6
 800177a:	e044      	b.n	8001806 <drv_ds1307_get_epoch_time+0xb2>

  drv_ds1307_time_t time;
  DRV_DS1307_CHECK_STATUS(drv_ds1307_get_time(drv_ds1307, &time));
 800177c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001780:	461a      	mov	r2, r3
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	e893 0003 	ldmia.w	r3, {r0, r1}
 800178a:	f7ff ff53 	bl	8001634 <drv_ds1307_get_time>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <drv_ds1307_get_epoch_time+0xc0>)
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <drv_ds1307_get_epoch_time+0xc0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d002      	beq.n	80017a4 <drv_ds1307_get_epoch_time+0x50>
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <drv_ds1307_get_epoch_time+0xc0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	e030      	b.n	8001806 <drv_ds1307_get_epoch_time+0xb2>

  struct tm time_date;
  memset((void *) &time_date, 0, sizeof(time_date));
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2224      	movs	r2, #36	; 0x24
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 f9df 	bl	8004b70 <memset>

  time_date.tm_year = time.year;
 80017b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  time_date.tm_mon  = time.month - 1;
 80017b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017bc:	3b01      	subs	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  time_date.tm_mday = time.date;
 80017c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017c4:	623b      	str	r3, [r7, #32]
  if (time.am_pm == 1)
 80017c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d104      	bne.n	80017d8 <drv_ds1307_get_epoch_time+0x84>
    time_date.tm_hour = time.hours + 12; /* PM */
 80017ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80017d2:	330c      	adds	r3, #12
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e002      	b.n	80017de <drv_ds1307_get_epoch_time+0x8a>
  else
    time_date.tm_hour = time.hours;
 80017d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80017dc:	61fb      	str	r3, [r7, #28]
  time_date.tm_min = time.minutes;
 80017de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017e2:	61bb      	str	r3, [r7, #24]
  time_date.tm_sec = time.seconds;
 80017e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017e8:	617b      	str	r3, [r7, #20]

  time_date.tm_year = (2000 + time.year) - 1900;
 80017ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017ee:	3364      	adds	r3, #100	; 0x64
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  *epoch_time       = mktime(&time_date);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 fa9a 	bl	8004d30 <mktime>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
  return drv_ds1307_success;
 8001804:	2302      	movs	r3, #2
}
 8001806:	4618      	mov	r0, r3
 8001808:	3740      	adds	r7, #64	; 0x40
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000103 	.word	0x20000103
 8001814:	20000104 	.word	0x20000104

08001818 <drv_ds1307_set_time>:

drv_ds1307_status_t drv_ds1307_set_time(drv_ds1307_config_t drv_ds1307, drv_ds1307_time_t set_time)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	f107 0408 	add.w	r4, r7, #8
 8001822:	e884 0003 	stmia.w	r4, {r0, r1}
 8001826:	4639      	mov	r1, r7
 8001828:	e881 000c 	stmia.w	r1, {r2, r3}
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 800182c:	4b52      	ldr	r3, [pc, #328]	; (8001978 <drv_ds1307_set_time+0x160>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	fa42 f303 	asr.w	r3, r2, r3
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <drv_ds1307_set_time+0x2c>
 8001840:	2306      	movs	r3, #6
 8001842:	e095      	b.n	8001970 <drv_ds1307_set_time+0x158>
  DRV_DS1307_CHECK_STATUS(drv_ds1307_check_time_set(drv_ds1307, set_time));
 8001844:	463b      	mov	r3, r7
 8001846:	cb0c      	ldmia	r3, {r2, r3}
 8001848:	f107 0108 	add.w	r1, r7, #8
 800184c:	c903      	ldmia	r1, {r0, r1}
 800184e:	f7ff fdf5 	bl	800143c <drv_ds1307_check_time_set>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <drv_ds1307_set_time+0x164>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <drv_ds1307_set_time+0x164>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d002      	beq.n	8001868 <drv_ds1307_set_time+0x50>
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <drv_ds1307_set_time+0x164>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	e083      	b.n	8001970 <drv_ds1307_set_time+0x158>

  uint8_t data_time[8] = { 0 };
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  uint8_t reg_data     = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]
  data_time[0]         = DRV_DS1307_SECONDS;
 8001874:	2300      	movs	r3, #0
 8001876:	763b      	strb	r3, [r7, #24]
  DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_SECONDS, &reg_data));
 8001878:	f107 0317 	add.w	r3, r7, #23
 800187c:	2200      	movs	r2, #0
 800187e:	f107 0108 	add.w	r1, r7, #8
 8001882:	c903      	ldmia	r1, {r0, r1}
 8001884:	f7ff fc2c 	bl	80010e0 <drv_ds1307_read_reg>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <drv_ds1307_set_time+0x164>)
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <drv_ds1307_set_time+0x164>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d002      	beq.n	800189e <drv_ds1307_set_time+0x86>
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <drv_ds1307_set_time+0x164>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	e068      	b.n	8001970 <drv_ds1307_set_time+0x158>
  data_time[1] = (reg_data & 0x80) | drv_ds1307_bin_to_bcd(set_time.seconds);
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018a6:	b25c      	sxtb	r4, r3
 80018a8:	783b      	ldrb	r3, [r7, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9ec 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	4323      	orrs	r3, r4
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	767b      	strb	r3, [r7, #25]
  data_time[2] = drv_ds1307_bin_to_bcd(set_time.minutes);
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f9e2 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 80018c4:	4603      	mov	r3, r0
 80018c6:	76bb      	strb	r3, [r7, #26]
  if (drv_ds1307.drv_ds1307_mode_time == 12)
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d115      	bne.n	80018fa <drv_ds1307_set_time+0xe2>
  {
    if (set_time.am_pm)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <drv_ds1307_set_time+0xc0>
      data_time[3] = DRV_DS1307_AM_PM;
 80018d4:	2320      	movs	r3, #32
 80018d6:	76fb      	strb	r3, [r7, #27]
    data_time[3] |= DRV_DS1307_MODE_HOURS | drv_ds1307_bin_to_bcd(set_time.hours);
 80018d8:	78bb      	ldrb	r3, [r7, #2]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9d4 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4619      	mov	r1, r3
 80018ea:	7efb      	ldrb	r3, [r7, #27]
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	b24b      	sxtb	r3, r1
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	76fb      	strb	r3, [r7, #27]
 80018f8:	e005      	b.n	8001906 <drv_ds1307_set_time+0xee>
  }
  else
    data_time[3] = drv_ds1307_bin_to_bcd(set_time.hours);
 80018fa:	78bb      	ldrb	r3, [r7, #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9c3 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 8001902:	4603      	mov	r3, r0
 8001904:	76fb      	strb	r3, [r7, #27]
  data_time[4] = drv_ds1307_bin_to_bcd(set_time.day);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9bd 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 800190e:	4603      	mov	r3, r0
 8001910:	773b      	strb	r3, [r7, #28]
  data_time[5] = drv_ds1307_bin_to_bcd(set_time.date);
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f9b7 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 800191a:	4603      	mov	r3, r0
 800191c:	777b      	strb	r3, [r7, #29]
  data_time[6] = drv_ds1307_bin_to_bcd(set_time.month);
 800191e:	797b      	ldrb	r3, [r7, #5]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9b1 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 8001926:	4603      	mov	r3, r0
 8001928:	77bb      	strb	r3, [r7, #30]
  data_time[7] = drv_ds1307_bin_to_bcd(set_time.year % 100);
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <drv_ds1307_set_time+0x168>)
 800192e:	fba2 1203 	umull	r1, r2, r2, r3
 8001932:	0952      	lsrs	r2, r2, #5
 8001934:	2164      	movs	r1, #100	; 0x64
 8001936:	fb01 f202 	mul.w	r2, r1, r2
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f9a2 	bl	8000c88 <drv_ds1307_bin_to_bcd>
 8001944:	4603      	mov	r3, r0
 8001946:	77fb      	strb	r3, [r7, #31]

  DRV_DS1307_CHECK_STATUS(drv_ds1307_write_multi_reg(drv_ds1307, data_time, 8));
 8001948:	f107 0218 	add.w	r2, r7, #24
 800194c:	2308      	movs	r3, #8
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	c903      	ldmia	r1, {r0, r1}
 8001954:	f7ff fb28 	bl	8000fa8 <drv_ds1307_write_multi_reg>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <drv_ds1307_set_time+0x164>)
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <drv_ds1307_set_time+0x164>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d002      	beq.n	800196e <drv_ds1307_set_time+0x156>
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <drv_ds1307_set_time+0x164>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	e000      	b.n	8001970 <drv_ds1307_set_time+0x158>
  return drv_ds1307_success;
 800196e:	2302      	movs	r3, #2
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	20000103 	.word	0x20000103
 800197c:	20000104 	.word	0x20000104
 8001980:	51eb851f 	.word	0x51eb851f

08001984 <drv_ds1307_set_output_sqw>:
  DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_SECONDS, &reg_data));
  return drv_ds1307_write_reg(drv_ds1307, DRV_DS1307_SECONDS, value | (reg_data & 0x7F));
}

drv_ds1307_status_t drv_ds1307_set_output_sqw(drv_ds1307_config_t drv_ds1307, drv_ds1307_output_sqw_t out_sqw)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001992:	4613      	mov	r3, r2
 8001994:	71fb      	strb	r3, [r7, #7]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <drv_ds1307_set_output_sqw+0x80>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	7b7b      	ldrb	r3, [r7, #13]
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <drv_ds1307_set_output_sqw+0x2a>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e025      	b.n	80019fa <drv_ds1307_set_output_sqw+0x76>

  uint8_t reg_data = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
  DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_CONTROL, &reg_data));
 80019b2:	f107 0317 	add.w	r3, r7, #23
 80019b6:	2207      	movs	r2, #7
 80019b8:	f107 0108 	add.w	r1, r7, #8
 80019bc:	c903      	ldmia	r1, {r0, r1}
 80019be:	f7ff fb8f 	bl	80010e0 <drv_ds1307_read_reg>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <drv_ds1307_set_output_sqw+0x84>)
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <drv_ds1307_set_output_sqw+0x84>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d002      	beq.n	80019d8 <drv_ds1307_set_output_sqw+0x54>
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <drv_ds1307_set_output_sqw+0x84>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	e010      	b.n	80019fa <drv_ds1307_set_output_sqw+0x76>
  return drv_ds1307_write_reg(drv_ds1307, DRV_DS1307_CONTROL, out_sqw | (reg_data & 0xFC));
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	f023 0303 	bic.w	r3, r3, #3
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2207      	movs	r2, #7
 80019ee:	f107 0108 	add.w	r1, r7, #8
 80019f2:	c903      	ldmia	r1, {r0, r1}
 80019f4:	f7ff fa3a 	bl	8000e6c <drv_ds1307_write_reg>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000103 	.word	0x20000103
 8001a08:	20000104 	.word	0x20000104

08001a0c <drv_ds1307_config_swq>:

drv_ds1307_status_t drv_ds1307_config_swq(drv_ds1307_config_t drv_ds1307, uint8_t swq_mode)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	71fb      	strb	r3, [r7, #7]
  /* Check device init */
  DRV_DS1307_CHECK_INIT(drv_ds1307.drv_ds1307_id);
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <drv_ds1307_config_swq+0x8c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	fa42 f303 	asr.w	r3, r2, r3
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <drv_ds1307_config_swq+0x2a>
 8001a32:	2306      	movs	r3, #6
 8001a34:	e02b      	b.n	8001a8e <drv_ds1307_config_swq+0x82>

  uint8_t reg_data = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
  DRV_DS1307_CHECK_STATUS(drv_ds1307_read_reg(drv_ds1307, DRV_DS1307_CONTROL, &reg_data));
 8001a3a:	f107 0317 	add.w	r3, r7, #23
 8001a3e:	2207      	movs	r2, #7
 8001a40:	f107 0108 	add.w	r1, r7, #8
 8001a44:	c903      	ldmia	r1, {r0, r1}
 8001a46:	f7ff fb4b 	bl	80010e0 <drv_ds1307_read_reg>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <drv_ds1307_config_swq+0x90>)
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <drv_ds1307_config_swq+0x90>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d002      	beq.n	8001a60 <drv_ds1307_config_swq+0x54>
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <drv_ds1307_config_swq+0x90>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	e016      	b.n	8001a8e <drv_ds1307_config_swq+0x82>
  return drv_ds1307_write_reg(drv_ds1307, DRV_DS1307_CONTROL, (swq_mode ? swq_mode << 4 : 0) | (reg_data & 0xEF));
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <drv_ds1307_config_swq+0x62>
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	e000      	b.n	8001a70 <drv_ds1307_config_swq+0x64>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	7dfa      	ldrb	r2, [r7, #23]
 8001a72:	b252      	sxtb	r2, r2
 8001a74:	f022 0210 	bic.w	r2, r2, #16
 8001a78:	b252      	sxtb	r2, r2
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2207      	movs	r2, #7
 8001a82:	f107 0108 	add.w	r1, r7, #8
 8001a86:	c903      	ldmia	r1, {r0, r1}
 8001a88:	f7ff f9f0 	bl	8000e6c <drv_ds1307_write_reg>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000103 	.word	0x20000103
 8001a9c:	20000104 	.word	0x20000104

08001aa0 <drv_ds1307_set_mode_12h>:

drv_ds1307_status_t drv_ds1307_set_mode_12h(drv_ds1307_config_t *drv_ds1307)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  drv_ds1307->drv_ds1307_mode_time = 12;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	220c      	movs	r2, #12
 8001aac:	719a      	strb	r2, [r3, #6]
  return drv_ds1307_set_mode_time(*drv_ds1307, 12);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ab6:	f7ff fd17 	bl	80014e8 <drv_ds1307_set_mode_time>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <drv_ds1307_set_out_8192Hz>:
{
  return drv_ds1307_set_output_sqw(drv_ds1307, drv_ds1307_output_sqw_4096Hz);
}

drv_ds1307_status_t drv_ds1307_set_out_8192Hz(drv_ds1307_config_t drv_ds1307)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	463b      	mov	r3, r7
 8001acc:	e883 0003 	stmia.w	r3, {r0, r1}
  return drv_ds1307_set_output_sqw(drv_ds1307, drv_ds1307_output_sqw_8192Hz);
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ad8:	f7ff ff54 	bl	8001984 <drv_ds1307_set_output_sqw>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <drv_ds1307_enable_swq>:
{
  return drv_ds1307_set_output_sqw(drv_ds1307, drv_ds1307_output_sqw_32768Hz);
}

drv_ds1307_status_t drv_ds1307_enable_swq(drv_ds1307_config_t drv_ds1307)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	463b      	mov	r3, r7
 8001aee:	e883 0003 	stmia.w	r3, {r0, r1}
  return drv_ds1307_config_swq(drv_ds1307, 1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	463b      	mov	r3, r7
 8001af6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001afa:	f7ff ff87 	bl	8001a0c <drv_ds1307_config_swq>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
 8001b0c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0e:	f000 fc25 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b12:	f000 f8c5 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b16:	f000 f9d7 	bl	8001ec8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b1a:	f000 f921 	bl	8001d60 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001b1e:	f000 f9a9 	bl	8001e74 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001b22:	f000 f94b 	bl	8001dbc <MX_I2C2_Init>
  MX_I2C3_Init();
 8001b26:	f000 f977 	bl	8001e18 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  drv_ds1307.drv_ds1307_address   = 0xD0;
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <main+0x170>)
 8001b2c:	22d0      	movs	r2, #208	; 0xd0
 8001b2e:	711a      	strb	r2, [r3, #4]
  drv_ds1307.drv_ds1307_i2c       = &hi2c3;
 8001b30:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <main+0x170>)
 8001b32:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <main+0x174>)
 8001b34:	601a      	str	r2, [r3, #0]
  drv_ds1307.drv_ds1307_id        = 1;
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <main+0x170>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	715a      	strb	r2, [r3, #5]
  drv_ds1307.drv_ds1307_mode_time = 24;
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <main+0x170>)
 8001b3e:	2218      	movs	r2, #24
 8001b40:	719a      	strb	r2, [r3, #6]

  sprintf(RX, "Status Init: %d\r\n", drv_ds1307_init(&drv_ds1307));
 8001b42:	484d      	ldr	r0, [pc, #308]	; (8001c78 <main+0x170>)
 8001b44:	f7ff f8c6 	bl	8000cd4 <drv_ds1307_init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	494c      	ldr	r1, [pc, #304]	; (8001c80 <main+0x178>)
 8001b4e:	484d      	ldr	r0, [pc, #308]	; (8001c84 <main+0x17c>)
 8001b50:	f003 fb78 	bl	8005244 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	2296      	movs	r2, #150	; 0x96
 8001b58:	494a      	ldr	r1, [pc, #296]	; (8001c84 <main+0x17c>)
 8001b5a:	484b      	ldr	r0, [pc, #300]	; (8001c88 <main+0x180>)
 8001b5c:	f002 fc61 	bl	8004422 <HAL_UART_Transmit>

   drv_ds1307_set_mode_12h(&drv_ds1307);
 8001b60:	4845      	ldr	r0, [pc, #276]	; (8001c78 <main+0x170>)
 8001b62:	f7ff ff9d 	bl	8001aa0 <drv_ds1307_set_mode_12h>

  time_ds1307.seconds = 58;
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <main+0x184>)
 8001b68:	223a      	movs	r2, #58	; 0x3a
 8001b6a:	701a      	strb	r2, [r3, #0]
  time_ds1307.minutes = 55;
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <main+0x184>)
 8001b6e:	2237      	movs	r2, #55	; 0x37
 8001b70:	705a      	strb	r2, [r3, #1]
  time_ds1307.hours   = 4;
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <main+0x184>)
 8001b74:	2204      	movs	r2, #4
 8001b76:	709a      	strb	r2, [r3, #2]
  time_ds1307.day     = 1;
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <main+0x184>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	70da      	strb	r2, [r3, #3]
  time_ds1307.date    = 20;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <main+0x184>)
 8001b80:	2214      	movs	r2, #20
 8001b82:	711a      	strb	r2, [r3, #4]
  time_ds1307.month   = 8;
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <main+0x184>)
 8001b86:	2208      	movs	r2, #8
 8001b88:	715a      	strb	r2, [r3, #5]
  time_ds1307.year    = 23;
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <main+0x184>)
 8001b8c:	2217      	movs	r2, #23
 8001b8e:	719a      	strb	r2, [r3, #6]
  time_ds1307.am_pm   = 1;
 8001b90:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <main+0x184>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	71da      	strb	r2, [r3, #7]

  sprintf(RX, "Status Config: %d\r\n", drv_ds1307_set_time(drv_ds1307, time_ds1307));
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <main+0x184>)
 8001b98:	4937      	ldr	r1, [pc, #220]	; (8001c78 <main+0x170>)
 8001b9a:	cb0c      	ldmia	r3, {r2, r3}
 8001b9c:	c903      	ldmia	r1, {r0, r1}
 8001b9e:	f7ff fe3b 	bl	8001818 <drv_ds1307_set_time>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	493a      	ldr	r1, [pc, #232]	; (8001c90 <main+0x188>)
 8001ba8:	4836      	ldr	r0, [pc, #216]	; (8001c84 <main+0x17c>)
 8001baa:	f003 fb4b 	bl	8005244 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	2296      	movs	r2, #150	; 0x96
 8001bb2:	4934      	ldr	r1, [pc, #208]	; (8001c84 <main+0x17c>)
 8001bb4:	4834      	ldr	r0, [pc, #208]	; (8001c88 <main+0x180>)
 8001bb6:	f002 fc34 	bl	8004422 <HAL_UART_Transmit>

  drv_ds1307_enable_swq(drv_ds1307);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <main+0x170>)
 8001bbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bc0:	f7ff ff91 	bl	8001ae6 <drv_ds1307_enable_swq>

  drv_ds1307_set_out_8192Hz(drv_ds1307);
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <main+0x170>)
 8001bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bca:	f7ff ff7b 	bl	8001ac4 <drv_ds1307_set_out_8192Hz>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    drv_ds1307_get_epoch_time(drv_ds1307, &time_epoch);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <main+0x170>)
 8001bd0:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <main+0x18c>)
 8001bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bd6:	f7ff fdbd 	bl	8001754 <drv_ds1307_get_epoch_time>
    drv_ds1307_status_t status = drv_ds1307_get_time(drv_ds1307, &time_ds1307);
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <main+0x170>)
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <main+0x184>)
 8001bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be2:	f7ff fd27 	bl	8001634 <drv_ds1307_get_time>
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
    if (status != drv_ds1307_success)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d010      	beq.n	8001c12 <main+0x10a>
    {
      sprintf(RX, "Error: %d\r\n", status);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4928      	ldr	r1, [pc, #160]	; (8001c98 <main+0x190>)
 8001bf6:	4823      	ldr	r0, [pc, #140]	; (8001c84 <main+0x17c>)
 8001bf8:	f003 fb24 	bl	8005244 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	2296      	movs	r2, #150	; 0x96
 8001c00:	4920      	ldr	r1, [pc, #128]	; (8001c84 <main+0x17c>)
 8001c02:	4821      	ldr	r0, [pc, #132]	; (8001c88 <main+0x180>)
 8001c04:	f002 fc0d 	bl	8004422 <HAL_UART_Transmit>
      HAL_Delay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f000 fc18 	bl	8002440 <HAL_Delay>
 8001c10:	e7dd      	b.n	8001bce <main+0xc6>
    }
    else
    {
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <main+0x184>)
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	469c      	mov	ip, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <main+0x184>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c1c:	469e      	mov	lr, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <main+0x184>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c22:	461a      	mov	r2, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <main+0x184>)
 8001c26:	78db      	ldrb	r3, [r3, #3]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c28:	4619      	mov	r1, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <main+0x184>)
 8001c2c:	791b      	ldrb	r3, [r3, #4]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c2e:	4618      	mov	r0, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <main+0x184>)
 8001c32:	795b      	ldrb	r3, [r3, #5]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c34:	461c      	mov	r4, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <main+0x184>)
 8001c38:	799b      	ldrb	r3, [r3, #6]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c3a:	461d      	mov	r5, r3
              time_ds1307.minutes, time_ds1307.seconds, time_ds1307.day, time_ds1307.date, time_ds1307.month, time_ds1307.year, time_ds1307.am_pm, time_epoch);
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <main+0x184>)
 8001c3e:	79db      	ldrb	r3, [r3, #7]
      sprintf(RX, "Hours: %d- Minutes: %d- Seconds: %d- Day: %d- Date: %d- Month: %d- Year: %d- AM/PM: %d- Epoch time: %ld\r\n", time_ds1307.hours,
 8001c40:	461e      	mov	r6, r3
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <main+0x18c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	9306      	str	r3, [sp, #24]
 8001c48:	9605      	str	r6, [sp, #20]
 8001c4a:	9504      	str	r5, [sp, #16]
 8001c4c:	9403      	str	r4, [sp, #12]
 8001c4e:	9002      	str	r0, [sp, #8]
 8001c50:	9101      	str	r1, [sp, #4]
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	4673      	mov	r3, lr
 8001c56:	4662      	mov	r2, ip
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <main+0x194>)
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <main+0x17c>)
 8001c5c:	f003 faf2 	bl	8005244 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *) RX, sizeof(RX), 100);
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	2296      	movs	r2, #150	; 0x96
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <main+0x17c>)
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <main+0x180>)
 8001c68:	f002 fbdb 	bl	8004422 <HAL_UART_Transmit>
      HAL_Delay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f000 fbe6 	bl	8002440 <HAL_Delay>
  {
 8001c74:	e7ab      	b.n	8001bce <main+0xc6>
 8001c76:	bf00      	nop
 8001c78:	20000248 	.word	0x20000248
 8001c7c:	200001b0 	.word	0x200001b0
 8001c80:	08006868 	.word	0x08006868
 8001c84:	20000258 	.word	0x20000258
 8001c88:	20000204 	.word	0x20000204
 8001c8c:	20000250 	.word	0x20000250
 8001c90:	0800687c 	.word	0x0800687c
 8001c94:	200002f0 	.word	0x200002f0
 8001c98:	08006890 	.word	0x08006890
 8001c9c:	0800689c 	.word	0x0800689c

08001ca0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	2234      	movs	r2, #52	; 0x34
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 ff5e 	bl	8004b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <SystemClock_Config+0xb8>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <SystemClock_Config+0xb8>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <SystemClock_Config+0xb8>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <SystemClock_Config+0xbc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cec:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <SystemClock_Config+0xbc>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <SystemClock_Config+0xbc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8001d04:	2301      	movs	r3, #1
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f899 	bl	8003e4c <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d20:	f000 f916 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d24:	230f      	movs	r3, #15
 8001d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fdc0 	bl	80038c4 <HAL_RCC_ClockConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d4a:	f000 f901 	bl	8001f50 <Error_Handler>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3750      	adds	r7, #80	; 0x50
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000

08001d60 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance             = I2C1;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <MX_I2C1_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_I2C1_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d9e:	f000 fded 	bl	800297c <HAL_I2C_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da8:	f000 f8d2 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000108 	.word	0x20000108
 8001db4:	40005400 	.word	0x40005400
 8001db8:	000186a0 	.word	0x000186a0

08001dbc <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance             = I2C2;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_I2C2_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed      = 100000;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_I2C2_Init+0x58>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1     = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2     = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C2_Init+0x50>)
 8001dfa:	f000 fdbf 	bl	800297c <HAL_I2C_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e04:	f000 f8a4 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000015c 	.word	0x2000015c
 8001e10:	40005800 	.word	0x40005800
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance             = I2C3;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <MX_I2C3_Init+0x54>)
 8001e20:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed      = 100000;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_I2C3_Init+0x58>)
 8001e26:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1     = 0;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2     = 0;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_I2C3_Init+0x50>)
 8001e56:	f000 fd91 	bl	800297c <HAL_I2C_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e60:	f000 f876 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200001b0 	.word	0x200001b0
 8001e6c:	40005c00 	.word	0x40005c00
 8001e70:	000186a0 	.word	0x000186a0

08001e74 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001eac:	f002 fa6c 	bl	8004388 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f000 f84b 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000204 	.word	0x20000204
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_GPIO_Init+0x84>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x8>
	...

08001f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_MspInit+0x4c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	; 0x40
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_I2C_MspInit+0x1cc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12c      	bne.n	8002028 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fee:	2312      	movs	r3, #18
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002002:	4619      	mov	r1, r3
 8002004:	485e      	ldr	r0, [pc, #376]	; (8002180 <HAL_I2C_MspInit+0x1d4>)
 8002006:	f000 fb25 	bl	8002654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002026:	e0a2      	b.n	800216e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_I2C_MspInit+0x1d8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d14c      	bne.n	80020cc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800206a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002070:	2312      	movs	r3, #18
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800207c:	2304      	movs	r3, #4
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	483e      	ldr	r0, [pc, #248]	; (8002180 <HAL_I2C_MspInit+0x1d4>)
 8002088:	f000 fae4 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002092:	2312      	movs	r3, #18
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209e:	2304      	movs	r3, #4
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a6:	4619      	mov	r1, r3
 80020a8:	4837      	ldr	r0, [pc, #220]	; (8002188 <HAL_I2C_MspInit+0x1dc>)
 80020aa:	f000 fad3 	bl	8002654 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a31      	ldr	r2, [pc, #196]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
}
 80020ca:	e050      	b.n	800216e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2e      	ldr	r2, [pc, #184]	; (800218c <HAL_I2C_MspInit+0x1e0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d14b      	bne.n	800216e <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002120:	2304      	movs	r3, #4
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <HAL_I2C_MspInit+0x1dc>)
 800212c:	f000 fa92 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002136:	2312      	movs	r3, #18
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002142:	2304      	movs	r3, #4
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800214a:	4619      	mov	r1, r3
 800214c:	4810      	ldr	r0, [pc, #64]	; (8002190 <HAL_I2C_MspInit+0x1e4>)
 800214e:	f000 fa81 	bl	8002654 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 800215c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_I2C_MspInit+0x1d0>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	bf00      	nop
 8002170:	3740      	adds	r7, #64	; 0x40
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40005400 	.word	0x40005400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020400 	.word	0x40020400
 8002184:	40005800 	.word	0x40005800
 8002188:	40020800 	.word	0x40020800
 800218c:	40005c00 	.word	0x40005c00
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_UART_MspInit+0x84>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_UART_MspInit+0x88>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_UART_MspInit+0x88>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_MspInit+0x88>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_UART_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_UART_MspInit+0x88>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_UART_MspInit+0x88>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021ee:	230c      	movs	r3, #12
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fe:	2307      	movs	r3, #7
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <HAL_UART_MspInit+0x8c>)
 800220a:	f000 fa23 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40004400 	.word	0x40004400
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 f8c6 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f002 fc30 	bl	8004b0c <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20020000 	.word	0x20020000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	200002f8 	.word	0x200002f8
 80022e0:	20000338 	.word	0x20000338

080022e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002332:	f7ff ffd7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f002 fbef 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff fbe5 	bl	8001b08 <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800234c:	08006be8 	.word	0x08006be8
  ldr r2, =_sbss
 8002350:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002354:	20000334 	.word	0x20000334

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f931 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fde4 	bl	8001f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f93b 	bl	800263a <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f911 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000004 	.word	0x20000004
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c
 8002424:	200002fc 	.word	0x200002fc

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200002fc 	.word	0x200002fc

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000000c 	.word	0x2000000c

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff47 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff5c 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffb0 	bl	80025a8 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e165      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8154 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80ae 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_GPIO_Init+0x300>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_GPIO_Init+0x300>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_GPIO_Init+0x300>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_GPIO_Init+0x304>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x308>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x30c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x216>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x310>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x20a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x206>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a49      	ldr	r2, [pc, #292]	; (8002974 <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x202>
 8002852:	2306      	movs	r3, #6
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002856:	2307      	movs	r3, #7
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x304>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a31      	ldr	r2, [pc, #196]	; (8002978 <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_GPIO_Init+0x324>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_GPIO_Init+0x324>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_GPIO_Init+0x324>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_GPIO_Init+0x324>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <HAL_GPIO_Init+0x324>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae96 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12b      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fb02 	bl	8001fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f001 f862 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a81      	ldr	r2, [pc, #516]	; (8002bf0 <HAL_I2C_Init+0x274>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_I2C_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_I2C_Init+0x27c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0e7      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a78      	ldr	r2, [pc, #480]	; (8002bfc <HAL_I2C_Init+0x280>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a69      	ldr	r2, [pc, #420]	; (8002c00 <HAL_I2C_Init+0x284>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	495c      	ldr	r1, [pc, #368]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d819      	bhi.n	8002ab8 <HAL_I2C_Init+0x13c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a98:	400b      	ands	r3, r1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_I2C_Init+0x138>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	e051      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e04f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_I2C_Init+0x168>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_I2C_Init+0x18e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x196>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e022      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_I2C_Init+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6911      	ldr	r1, [r2, #16]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	000186a0 	.word	0x000186a0
 8002bf4:	001e847f 	.word	0x001e847f
 8002bf8:	003d08ff 	.word	0x003d08ff
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
 8002c14:	4613      	mov	r3, r2
 8002c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff fc06 	bl	8002428 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	f040 80e0 	bne.w	8002dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2319      	movs	r3, #25
 8002c32:	2201      	movs	r2, #1
 8002c34:	4970      	ldr	r1, [pc, #448]	; (8002df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fc66 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0d3      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x50>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0cc      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d007      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	; 0x21
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2210      	movs	r2, #16
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	893a      	ldrh	r2, [r7, #8]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a50      	ldr	r2, [pc, #320]	; (8002dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fad0 	bl	8003268 <I2C_MasterRequestWrite>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08d      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ce8:	e066      	b.n	8002db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6a39      	ldr	r1, [r7, #32]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fce0 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x188>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	6a39      	ldr	r1, [r7, #32]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fcd0 	bl	8003736 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d107      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e01a      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d194      	bne.n	8002cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fb08 	bl	8002428 <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 820b 	bne.w	800323e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	497c      	ldr	r1, [pc, #496]	; (8003024 <HAL_I2C_Master_Receive+0x224>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb68 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e1fe      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Receive+0x50>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e1f7      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d007      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2222      	movs	r2, #34	; 0x22
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a5c      	ldr	r2, [pc, #368]	; (8003028 <HAL_I2C_Master_Receive+0x228>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa54 	bl	800336c <I2C_MasterRequestRead>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1b8      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d113      	bne.n	8002efe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e18c      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d11b      	bne.n	8002f3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e16c      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d11b      	bne.n	8002f7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	e14c      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fa4:	e138      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	f200 80f1 	bhi.w	8003192 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d123      	bne.n	8003000 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fbfb 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e139      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ffe:	e10b      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b02      	cmp	r3, #2
 8003006:	d14e      	bne.n	80030a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	2200      	movs	r2, #0
 8003010:	4906      	ldr	r1, [pc, #24]	; (800302c <HAL_I2C_Master_Receive+0x22c>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa78 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e10e      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
 8003022:	bf00      	nop
 8003024:	00100002 	.word	0x00100002
 8003028:	ffff0000 	.word	0xffff0000
 800302c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a4:	e0b8      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	4966      	ldr	r1, [pc, #408]	; (8003248 <HAL_I2C_Master_Receive+0x448>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fa29 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0bf      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	494f      	ldr	r1, [pc, #316]	; (8003248 <HAL_I2C_Master_Receive+0x448>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f9fb 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e091      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003190:	e042      	b.n	8003218 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fb0e 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e04c      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d118      	bne.n	8003218 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f aec2 	bne.w	8002fa6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	00010004 	.word	0x00010004

0800324c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	460b      	mov	r3, r1
 8003276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d006      	beq.n	8003292 <I2C_MasterRequestWrite+0x2a>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d003      	beq.n	8003292 <I2C_MasterRequestWrite+0x2a>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003290:	d108      	bne.n	80032a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e00b      	b.n	80032bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d107      	bne.n	80032bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f91d 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e2:	d103      	bne.n	80032ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e035      	b.n	800335c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f8:	d108      	bne.n	800330c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003308:	611a      	str	r2, [r3, #16]
 800330a:	e01b      	b.n	8003344 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	11db      	asrs	r3, r3, #7
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 0306 	and.w	r3, r3, #6
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f063 030f 	orn	r3, r3, #15
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	490e      	ldr	r1, [pc, #56]	; (8003364 <I2C_MasterRequestWrite+0xfc>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f943 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e010      	b.n	800335c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <I2C_MasterRequestWrite+0x100>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f933 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	00010008 	.word	0x00010008
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003390:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d006      	beq.n	80033a6 <I2C_MasterRequestRead+0x3a>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d003      	beq.n	80033a6 <I2C_MasterRequestRead+0x3a>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a4:	d108      	bne.n	80033b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00b      	b.n	80033d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	2b11      	cmp	r3, #17
 80033be:	d107      	bne.n	80033d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f893 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d103      	bne.n	8003400 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e079      	b.n	80034f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340c:	d108      	bne.n	8003420 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	e05f      	b.n	80034e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	11db      	asrs	r3, r3, #7
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f063 030f 	orn	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4930      	ldr	r1, [pc, #192]	; (8003500 <I2C_MasterRequestRead+0x194>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f8b9 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e054      	b.n	80034f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4929      	ldr	r1, [pc, #164]	; (8003504 <I2C_MasterRequestRead+0x198>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8a9 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e044      	b.n	80034f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003492:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f831 	bl	8003508 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ba:	d103      	bne.n	80034c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e017      	b.n	80034f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034c8:	897b      	ldrh	r3, [r7, #10]
 80034ca:	11db      	asrs	r3, r3, #7
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f003 0306 	and.w	r3, r3, #6
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f063 030e 	orn	r3, r3, #14
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <I2C_MasterRequestRead+0x198>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f865 	bl	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	00010008 	.word	0x00010008
 8003504:	00010002 	.word	0x00010002

08003508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003518:	e025      	b.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d021      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe ff81 	bl	8002428 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e023      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10d      	bne.n	800358c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	e00c      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0b6      	beq.n	800351a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c4:	e051      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d123      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e046      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d021      	beq.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe feff 	bl	8002428 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e020      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e00b      	b.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d18d      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c0:	e02d      	b.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8ce 	bl	8003864 <I2C_IsAcknowledgeFailed>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e02d      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fea5 	bl	8002428 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e007      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d1ca      	bne.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003742:	e02d      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f88d 	bl	8003864 <I2C_IsAcknowledgeFailed>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e02d      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d021      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7fe fe64 	bl	8002428 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d1ca      	bne.n	8003744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c4:	e042      	b.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d119      	bne.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e029      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fe0e 	bl	8002428 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d1b5      	bne.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d11b      	bne.n	80038b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e067      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fd38 	bl	8002428 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fe fd34 	bl	8002428 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f855 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490a      	ldr	r1, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fc98 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08006914 	.word	0x08006914
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	20000008 	.word	0x20000008

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000004 	.word	0x20000004

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08006924 	.word	0x08006924

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffdc 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08006924 	.word	0x08006924

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b0a6      	sub	sp, #152	; 0x98
 8003afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b1e:	4bc8      	ldr	r3, [pc, #800]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	f200 817e 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x330>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003e29 	.word	0x08003e29
 8003b3c:	08003e29 	.word	0x08003e29
 8003b40:	08003e29 	.word	0x08003e29
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003e29 	.word	0x08003e29
 8003b4c:	08003e29 	.word	0x08003e29
 8003b50:	08003e29 	.word	0x08003e29
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003e29 	.word	0x08003e29
 8003b5c:	08003e29 	.word	0x08003e29
 8003b60:	08003e29 	.word	0x08003e29
 8003b64:	08003ce3 	.word	0x08003ce3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4bb6      	ldr	r3, [pc, #728]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003b6e:	e15f      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b70:	4bb5      	ldr	r3, [pc, #724]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b76:	e15b      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b78:	4bb1      	ldr	r3, [pc, #708]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b84:	4bae      	ldr	r3, [pc, #696]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d031      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b90:	4bab      	ldr	r3, [pc, #684]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	2200      	movs	r2, #0
 8003b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba8:	4ba7      	ldr	r3, [pc, #668]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8003baa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bae:	462a      	mov	r2, r5
 8003bb0:	fb03 f202 	mul.w	r2, r3, r2
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4aa2      	ldr	r2, [pc, #648]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	fba1 1202 	umull	r1, r2, r1, r2
 8003bc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bc8:	460a      	mov	r2, r1
 8003bca:	67ba      	str	r2, [r7, #120]	; 0x78
 8003bcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bce:	4413      	add	r3, r2
 8003bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003be0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003be4:	f7fc fb7c 	bl	80002e0 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bf2:	e064      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4b92      	ldr	r3, [pc, #584]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfe:	657a      	str	r2, [r7, #84]	; 0x54
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c08:	2300      	movs	r3, #0
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c10:	4622      	mov	r2, r4
 8003c12:	462b      	mov	r3, r5
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	0159      	lsls	r1, r3, #5
 8003c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c22:	0150      	lsls	r0, r2, #5
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4621      	mov	r1, r4
 8003c2a:	1a51      	subs	r1, r2, r1
 8003c2c:	6139      	str	r1, [r7, #16]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	eb63 0301 	sbc.w	r3, r3, r1
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c42:	4659      	mov	r1, fp
 8003c44:	018b      	lsls	r3, r1, #6
 8003c46:	4651      	mov	r1, sl
 8003c48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	018a      	lsls	r2, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ebb2 0801 	subs.w	r8, r2, r1
 8003c56:	4659      	mov	r1, fp
 8003c58:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c70:	4690      	mov	r8, r2
 8003c72:	4699      	mov	r9, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	eb18 0303 	adds.w	r3, r8, r3
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	eb49 0303 	adc.w	r3, r9, r3
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c90:	4629      	mov	r1, r5
 8003c92:	028b      	lsls	r3, r1, #10
 8003c94:	4621      	mov	r1, r4
 8003c96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	028a      	lsls	r2, r1, #10
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8003caa:	647a      	str	r2, [r7, #68]	; 0x44
 8003cac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb0:	f7fc fb16 	bl	80002e0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cbe:	4b60      	ldr	r3, [pc, #384]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003cd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003ce0:	e0a6      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce2:	4b57      	ldr	r3, [pc, #348]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02a      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfa:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d10:	fb03 f201 	mul.w	r2, r3, r1
 8003d14:	2300      	movs	r3, #0
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d22:	677a      	str	r2, [r7, #116]	; 0x74
 8003d24:	460a      	mov	r2, r1
 8003d26:	673a      	str	r2, [r7, #112]	; 0x70
 8003d28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d2a:	4413      	add	r3, r2
 8003d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d32:	2200      	movs	r2, #0
 8003d34:	633b      	str	r3, [r7, #48]	; 0x30
 8003d36:	637a      	str	r2, [r7, #52]	; 0x34
 8003d38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d40:	f7fc face 	bl	80002e0 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d4e:	e05b      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	0159      	lsls	r1, r3, #5
 8003d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7e:	0150      	lsls	r0, r2, #5
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4641      	mov	r1, r8
 8003d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003da4:	ebb2 040a 	subs.w	r4, r2, sl
 8003da8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	00eb      	lsls	r3, r5, #3
 8003db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dba:	00e2      	lsls	r2, r4, #3
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	18e3      	adds	r3, r4, r3
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	eb45 0303 	adc.w	r3, r5, r3
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	028b      	lsls	r3, r1, #10
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de4:	4621      	mov	r1, r4
 8003de6:	028a      	lsls	r2, r1, #10
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df0:	2200      	movs	r2, #0
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	61fa      	str	r2, [r7, #28]
 8003df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfa:	f7fc fa71 	bl	80002e0 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0f1b      	lsrs	r3, r3, #28
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003e16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e26:	e003      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3798      	adds	r7, #152	; 0x98
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	017d7840 	.word	0x017d7840

08003e4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e28d      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8083 	beq.w	8003f72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e6c:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d019      	beq.n	8003eac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e78:	4b91      	ldr	r3, [pc, #580]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e84:	4b8e      	ldr	r3, [pc, #568]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e90:	d00c      	beq.n	8003eac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b8b      	ldr	r3, [pc, #556]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d112      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	4b84      	ldr	r3, [pc, #528]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d05b      	beq.n	8003f70 <HAL_RCC_OscConfig+0x124>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d157      	bne.n	8003f70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e25a      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x90>
 8003ece:	4b7c      	ldr	r3, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7b      	ldr	r2, [pc, #492]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e01d      	b.n	8003f18 <HAL_RCC_OscConfig+0xcc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0xb4>
 8003ee6:	4b76      	ldr	r3, [pc, #472]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a75      	ldr	r2, [pc, #468]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b73      	ldr	r3, [pc, #460]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a72      	ldr	r2, [pc, #456]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xcc>
 8003f00:	4b6f      	ldr	r3, [pc, #444]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6e      	ldr	r2, [pc, #440]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a6b      	ldr	r2, [pc, #428]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fa82 	bl	8002428 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fe fa7e 	bl	8002428 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e21f      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b61      	ldr	r3, [pc, #388]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xdc>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe fa6e 	bl	8002428 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe fa6a 	bl	8002428 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e20b      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	4b57      	ldr	r3, [pc, #348]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x104>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d06f      	beq.n	800405e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f7e:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f8a:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f96:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d11c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x186>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1d3      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4937      	ldr	r1, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	e03a      	b.n	800405e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d020      	beq.n	8004032 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_RCC_OscConfig+0x278>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fe fa17 	bl	8002428 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fe fa13 	bl	8002428 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1b4      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4925      	ldr	r1, [pc, #148]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
 8004030:	e015      	b.n	800405e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCC_OscConfig+0x278>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe f9f6 	bl	8002428 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004040:	f7fe f9f2 	bl	8002428 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e193      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d036      	beq.n	80040d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <HAL_RCC_OscConfig+0x27c>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fe f9d6 	bl	8002428 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004080:	f7fe f9d2 	bl	8002428 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e173      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_OscConfig+0x274>)
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x234>
 800409e:	e01b      	b.n	80040d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fe f9bf 	bl	8002428 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	e00e      	b.n	80040cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ae:	f7fe f9bb 	bl	8002428 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d907      	bls.n	80040cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e15c      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	42470000 	.word	0x42470000
 80040c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	4b8a      	ldr	r3, [pc, #552]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ea      	bne.n	80040ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8097 	beq.w	8004214 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ea:	4b83      	ldr	r3, [pc, #524]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b7f      	ldr	r3, [pc, #508]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a7e      	ldr	r2, [pc, #504]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b7c      	ldr	r3, [pc, #496]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	4b79      	ldr	r3, [pc, #484]	; (80042fc <HAL_RCC_OscConfig+0x4b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004122:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCC_OscConfig+0x4b0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a75      	ldr	r2, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x4b0>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fe f97b 	bl	8002428 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe f977 	bl	8002428 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e118      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b6c      	ldr	r3, [pc, #432]	; (80042fc <HAL_RCC_OscConfig+0x4b0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x31e>
 800415c:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a65      	ldr	r2, [pc, #404]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	e01c      	b.n	80041a4 <HAL_RCC_OscConfig+0x358>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b05      	cmp	r3, #5
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x340>
 8004172:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a60      	ldr	r2, [pc, #384]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
 800417e:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a5d      	ldr	r2, [pc, #372]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0x358>
 800418c:	4b5a      	ldr	r3, [pc, #360]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800419e:	f023 0304 	bic.w	r3, r3, #4
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fe f93c 	bl	8002428 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fe f938 	bl	8002428 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0d7      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <HAL_RCC_OscConfig+0x368>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fe f926 	bl	8002428 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fe f922 	bl	8002428 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0c1      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ee      	bne.n	80041e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80ad 	beq.w	8004378 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b08      	cmp	r3, #8
 8004228:	d060      	beq.n	80042ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d145      	bne.n	80042be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b33      	ldr	r3, [pc, #204]	; (8004300 <HAL_RCC_OscConfig+0x4b4>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe f8f6 	bl	8002428 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe f8f2 	bl	8002428 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e093      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	019b      	lsls	r3, r3, #6
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	3b01      	subs	r3, #1
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4b4>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe f8c7 	bl	8002428 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429e:	f7fe f8c3 	bl	8002428 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e064      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x452>
 80042bc:	e05c      	b.n	8004378 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x4b4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fe f8b0 	bl	8002428 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe f8ac 	bl	8002428 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04d      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x480>
 80042ea:	e045      	b.n	8004378 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e040      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
 8004300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCC_OscConfig+0x538>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d030      	beq.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d129      	bne.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d122      	bne.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	4293      	cmp	r3, r2
 800433e:	d119      	bne.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	3b01      	subs	r3, #1
 800434e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d10f      	bne.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800

08004388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e03f      	b.n	800441a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd fef0 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f929 	bl	8004624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08a      	sub	sp, #40	; 0x28
 8004426:	af02      	add	r7, sp, #8
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	d17c      	bne.n	800453c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_Transmit+0x2c>
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e075      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UART_Transmit+0x3e>
 800445c:	2302      	movs	r3, #2
 800445e:	e06e      	b.n	800453e <HAL_UART_Transmit+0x11c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	; 0x21
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004476:	f7fd ffd7 	bl	8002428 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b4:	e02a      	b.n	800450c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f840 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e036      	b.n	800453e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3302      	adds	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e007      	b.n	80044fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cf      	bne.n	80044b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f810 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b090      	sub	sp, #64	; 0x40
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	e050      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d04c      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <UART_WaitOnFlagUntilTimeout+0x30>
 8004566:	f7fd ff5f 	bl	8002428 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004572:	429a      	cmp	r2, r3
 8004574:	d241      	bcs.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004596:	637a      	str	r2, [r7, #52]	; 0x34
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e5      	bne.n	8004576 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ca:	623a      	str	r2, [r7, #32]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00f      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d09f      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3740      	adds	r7, #64	; 0x40
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b0c0      	sub	sp, #256	; 0x100
 800462a:	af00      	add	r7, sp, #0
 800462c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	68d9      	ldr	r1, [r3, #12]
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	ea40 0301 	orr.w	r3, r0, r1
 800464c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	431a      	orrs	r2, r3
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800467c:	f021 010c 	bic.w	r1, r1, #12
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800468a:	430b      	orrs	r3, r1
 800468c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	6999      	ldr	r1, [r3, #24]
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	ea40 0301 	orr.w	r3, r0, r1
 80046aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b8f      	ldr	r3, [pc, #572]	; (80048f0 <UART_SetConfig+0x2cc>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d005      	beq.n	80046c4 <UART_SetConfig+0xa0>
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b8d      	ldr	r3, [pc, #564]	; (80048f4 <UART_SetConfig+0x2d0>)
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d104      	bne.n	80046ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7ff fa04 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 80046c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046cc:	e003      	b.n	80046d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ce:	f7ff f9eb 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80046d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e0:	f040 810c 	bne.w	80048fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	1891      	adds	r1, r2, r2
 80046fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80046fe:	415b      	adcs	r3, r3
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004706:	4621      	mov	r1, r4
 8004708:	eb12 0801 	adds.w	r8, r2, r1
 800470c:	4629      	mov	r1, r5
 800470e:	eb43 0901 	adc.w	r9, r3, r1
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004726:	4690      	mov	r8, r2
 8004728:	4699      	mov	r9, r3
 800472a:	4623      	mov	r3, r4
 800472c:	eb18 0303 	adds.w	r3, r8, r3
 8004730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004734:	462b      	mov	r3, r5
 8004736:	eb49 0303 	adc.w	r3, r9, r3
 800473a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800474a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800474e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004752:	460b      	mov	r3, r1
 8004754:	18db      	adds	r3, r3, r3
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	4613      	mov	r3, r2
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
 8004760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004768:	f7fb fdba 	bl	80002e0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <UART_SetConfig+0x2d4>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011c      	lsls	r4, r3, #4
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004784:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	64b9      	str	r1, [r7, #72]	; 0x48
 8004794:	415b      	adcs	r3, r3
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800479c:	4641      	mov	r1, r8
 800479e:	eb12 0a01 	adds.w	sl, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0b01 	adc.w	fp, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047bc:	4692      	mov	sl, r2
 80047be:	469b      	mov	fp, r3
 80047c0:	4643      	mov	r3, r8
 80047c2:	eb1a 0303 	adds.w	r3, sl, r3
 80047c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ca:	464b      	mov	r3, r9
 80047cc:	eb4b 0303 	adc.w	r3, fp, r3
 80047d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047e8:	460b      	mov	r3, r1
 80047ea:	18db      	adds	r3, r3, r3
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
 80047ee:	4613      	mov	r3, r2
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
 80047f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047fe:	f7fb fd6f 	bl	80002e0 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4611      	mov	r1, r2
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <UART_SetConfig+0x2d4>)
 800480a:	fba3 2301 	umull	r2, r3, r3, r1
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2264      	movs	r2, #100	; 0x64
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	1acb      	subs	r3, r1, r3
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <UART_SetConfig+0x2d4>)
 8004820:	fba3 2302 	umull	r2, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800482c:	441c      	add	r4, r3
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800483c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	63b9      	str	r1, [r7, #56]	; 0x38
 8004848:	415b      	adcs	r3, r3
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6339      	str	r1, [r7, #48]	; 0x30
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800489c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a4:	460b      	mov	r3, r1
 80048a6:	18db      	adds	r3, r3, r3
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048aa:	4613      	mov	r3, r2
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ba:	f7fb fd11 	bl	80002e0 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <UART_SetConfig+0x2d4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <UART_SetConfig+0x2d4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 0207 	and.w	r2, r3, #7
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ec:	e105      	b.n	8004afa <UART_SetConfig+0x4d6>
 80048ee:	bf00      	nop
 80048f0:	40011000 	.word	0x40011000
 80048f4:	40011400 	.word	0x40011400
 80048f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004900:	2200      	movs	r2, #0
 8004902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800490a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800490e:	4642      	mov	r2, r8
 8004910:	464b      	mov	r3, r9
 8004912:	1891      	adds	r1, r2, r2
 8004914:	6239      	str	r1, [r7, #32]
 8004916:	415b      	adcs	r3, r3
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491e:	4641      	mov	r1, r8
 8004920:	1854      	adds	r4, r2, r1
 8004922:	4649      	mov	r1, r9
 8004924:	eb43 0501 	adc.w	r5, r3, r1
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004944:	464b      	mov	r3, r9
 8004946:	eb45 0303 	adc.w	r3, r5, r3
 800494a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800496a:	4629      	mov	r1, r5
 800496c:	008b      	lsls	r3, r1, #2
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004974:	4621      	mov	r1, r4
 8004976:	008a      	lsls	r2, r1, #2
 8004978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800497c:	f7fb fcb0 	bl	80002e0 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004986:	fba3 2302 	umull	r2, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	011c      	lsls	r4, r3, #4
 800498e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800499c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	1891      	adds	r1, r2, r2
 80049a6:	61b9      	str	r1, [r7, #24]
 80049a8:	415b      	adcs	r3, r3
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b0:	4641      	mov	r1, r8
 80049b2:	1851      	adds	r1, r2, r1
 80049b4:	6139      	str	r1, [r7, #16]
 80049b6:	4649      	mov	r1, r9
 80049b8:	414b      	adcs	r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	00cb      	lsls	r3, r1, #3
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d2:	4651      	mov	r1, sl
 80049d4:	00ca      	lsls	r2, r1, #3
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	4642      	mov	r2, r8
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e4:	464b      	mov	r3, r9
 80049e6:	460a      	mov	r2, r1
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a08:	4649      	mov	r1, r9
 8004a0a:	008b      	lsls	r3, r1, #2
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a12:	4641      	mov	r1, r8
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a1a:	f7fb fc61 	bl	80002e0 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	; 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	3332      	adds	r3, #50	; 0x32
 8004a36:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a42:	441c      	add	r4, r3
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a62:	4641      	mov	r1, r8
 8004a64:	1851      	adds	r1, r2, r1
 8004a66:	6039      	str	r1, [r7, #0]
 8004a68:	4649      	mov	r1, r9
 8004a6a:	414b      	adcs	r3, r1
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	00cb      	lsls	r3, r1, #3
 8004a7e:	4651      	mov	r1, sl
 8004a80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a84:	4651      	mov	r1, sl
 8004a86:	00ca      	lsls	r2, r1, #3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4642      	mov	r2, r8
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa8:	667a      	str	r2, [r7, #100]	; 0x64
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	008b      	lsls	r3, r1, #2
 8004aba:	4641      	mov	r1, r8
 8004abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	008a      	lsls	r2, r1, #2
 8004ac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ac8:	f7fb fc0a 	bl	80002e0 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2164      	movs	r1, #100	; 0x64
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4422      	add	r2, r4
 8004af8:	609a      	str	r2, [r3, #8]
}
 8004afa:	bf00      	nop
 8004afc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	51eb851f 	.word	0x51eb851f

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000010 	.word	0x20000010

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f001 fe90 	bl	8006850 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08006be0 	.word	0x08006be0
 8004b54:	08006be0 	.word	0x08006be0
 8004b58:	08006be0 	.word	0x08006be0
 8004b5c:	08006be4 	.word	0x08006be4

08004b60 <free>:
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <free+0xc>)
 8004b62:	4601      	mov	r1, r0
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	f000 ba7d 	b.w	8005064 <_free_r>
 8004b6a:	bf00      	nop
 8004b6c:	20000010 	.word	0x20000010

08004b70 <memset>:
 8004b70:	4402      	add	r2, r0
 8004b72:	4603      	mov	r3, r0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d100      	bne.n	8004b7a <memset+0xa>
 8004b78:	4770      	bx	lr
 8004b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7e:	e7f9      	b.n	8004b74 <memset+0x4>

08004b80 <validate_structure>:
 8004b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b82:	6801      	ldr	r1, [r0, #0]
 8004b84:	293b      	cmp	r1, #59	; 0x3b
 8004b86:	4604      	mov	r4, r0
 8004b88:	d911      	bls.n	8004bae <validate_structure+0x2e>
 8004b8a:	223c      	movs	r2, #60	; 0x3c
 8004b8c:	4668      	mov	r0, sp
 8004b8e:	f000 fdb5 	bl	80056fc <div>
 8004b92:	9a01      	ldr	r2, [sp, #4]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	9900      	ldr	r1, [sp, #0]
 8004b98:	2a00      	cmp	r2, #0
 8004b9a:	440b      	add	r3, r1
 8004b9c:	6063      	str	r3, [r4, #4]
 8004b9e:	bfbb      	ittet	lt
 8004ba0:	323c      	addlt	r2, #60	; 0x3c
 8004ba2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004ba6:	6022      	strge	r2, [r4, #0]
 8004ba8:	6022      	strlt	r2, [r4, #0]
 8004baa:	bfb8      	it	lt
 8004bac:	6063      	strlt	r3, [r4, #4]
 8004bae:	6861      	ldr	r1, [r4, #4]
 8004bb0:	293b      	cmp	r1, #59	; 0x3b
 8004bb2:	d911      	bls.n	8004bd8 <validate_structure+0x58>
 8004bb4:	223c      	movs	r2, #60	; 0x3c
 8004bb6:	4668      	mov	r0, sp
 8004bb8:	f000 fda0 	bl	80056fc <div>
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	9900      	ldr	r1, [sp, #0]
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	440b      	add	r3, r1
 8004bc6:	60a3      	str	r3, [r4, #8]
 8004bc8:	bfbb      	ittet	lt
 8004bca:	323c      	addlt	r2, #60	; 0x3c
 8004bcc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004bd0:	6062      	strge	r2, [r4, #4]
 8004bd2:	6062      	strlt	r2, [r4, #4]
 8004bd4:	bfb8      	it	lt
 8004bd6:	60a3      	strlt	r3, [r4, #8]
 8004bd8:	68a1      	ldr	r1, [r4, #8]
 8004bda:	2917      	cmp	r1, #23
 8004bdc:	d911      	bls.n	8004c02 <validate_structure+0x82>
 8004bde:	2218      	movs	r2, #24
 8004be0:	4668      	mov	r0, sp
 8004be2:	f000 fd8b 	bl	80056fc <div>
 8004be6:	9a01      	ldr	r2, [sp, #4]
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	9900      	ldr	r1, [sp, #0]
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	440b      	add	r3, r1
 8004bf0:	60e3      	str	r3, [r4, #12]
 8004bf2:	bfbb      	ittet	lt
 8004bf4:	3218      	addlt	r2, #24
 8004bf6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004bfa:	60a2      	strge	r2, [r4, #8]
 8004bfc:	60a2      	strlt	r2, [r4, #8]
 8004bfe:	bfb8      	it	lt
 8004c00:	60e3      	strlt	r3, [r4, #12]
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	290b      	cmp	r1, #11
 8004c06:	d911      	bls.n	8004c2c <validate_structure+0xac>
 8004c08:	220c      	movs	r2, #12
 8004c0a:	4668      	mov	r0, sp
 8004c0c:	f000 fd76 	bl	80056fc <div>
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	6963      	ldr	r3, [r4, #20]
 8004c14:	9900      	ldr	r1, [sp, #0]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	440b      	add	r3, r1
 8004c1a:	6163      	str	r3, [r4, #20]
 8004c1c:	bfbb      	ittet	lt
 8004c1e:	320c      	addlt	r2, #12
 8004c20:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004c24:	6122      	strge	r2, [r4, #16]
 8004c26:	6122      	strlt	r2, [r4, #16]
 8004c28:	bfb8      	it	lt
 8004c2a:	6163      	strlt	r3, [r4, #20]
 8004c2c:	6963      	ldr	r3, [r4, #20]
 8004c2e:	0798      	lsls	r0, r3, #30
 8004c30:	d120      	bne.n	8004c74 <validate_structure+0xf4>
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	fb93 f2f1 	sdiv	r2, r3, r1
 8004c38:	fb01 3212 	mls	r2, r1, r2, r3
 8004c3c:	b9e2      	cbnz	r2, 8004c78 <validate_structure+0xf8>
 8004c3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8004c42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004c46:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c4a:	fb02 3311 	mls	r3, r2, r1, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf14      	ite	ne
 8004c52:	231c      	movne	r3, #28
 8004c54:	231d      	moveq	r3, #29
 8004c56:	68e2      	ldr	r2, [r4, #12]
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	dc0f      	bgt.n	8004c7c <validate_structure+0xfc>
 8004c5c:	4f33      	ldr	r7, [pc, #204]	; (8004d2c <validate_structure+0x1ac>)
 8004c5e:	260b      	movs	r6, #11
 8004c60:	2064      	movs	r0, #100	; 0x64
 8004c62:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004c66:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8004c6a:	f1bc 0f00 	cmp.w	ip, #0
 8004c6e:	dd31      	ble.n	8004cd4 <validate_structure+0x154>
 8004c70:	b003      	add	sp, #12
 8004c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c74:	231c      	movs	r3, #28
 8004c76:	e7ee      	b.n	8004c56 <validate_structure+0xd6>
 8004c78:	231d      	movs	r3, #29
 8004c7a:	e7ec      	b.n	8004c56 <validate_structure+0xd6>
 8004c7c:	4e2b      	ldr	r6, [pc, #172]	; (8004d2c <validate_structure+0x1ac>)
 8004c7e:	2700      	movs	r7, #0
 8004c80:	2064      	movs	r0, #100	; 0x64
 8004c82:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004c86:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8004c8a:	2a01      	cmp	r2, #1
 8004c8c:	bf14      	ite	ne
 8004c8e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8004c92:	469c      	moveq	ip, r3
 8004c94:	4561      	cmp	r1, ip
 8004c96:	ddeb      	ble.n	8004c70 <validate_structure+0xf0>
 8004c98:	3201      	adds	r2, #1
 8004c9a:	eba1 010c 	sub.w	r1, r1, ip
 8004c9e:	2a0c      	cmp	r2, #12
 8004ca0:	60e1      	str	r1, [r4, #12]
 8004ca2:	6122      	str	r2, [r4, #16]
 8004ca4:	d1ef      	bne.n	8004c86 <validate_structure+0x106>
 8004ca6:	6963      	ldr	r3, [r4, #20]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	0791      	lsls	r1, r2, #30
 8004cac:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8004cb0:	d137      	bne.n	8004d22 <validate_structure+0x1a2>
 8004cb2:	fb92 f1f0 	sdiv	r1, r2, r0
 8004cb6:	fb00 2211 	mls	r2, r0, r1, r2
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	d133      	bne.n	8004d26 <validate_structure+0x1a6>
 8004cbe:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8004cc2:	fb93 f2f5 	sdiv	r2, r3, r5
 8004cc6:	fb05 3312 	mls	r3, r5, r2, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	231c      	movne	r3, #28
 8004cd0:	231d      	moveq	r3, #29
 8004cd2:	e7d8      	b.n	8004c86 <validate_structure+0x106>
 8004cd4:	6921      	ldr	r1, [r4, #16]
 8004cd6:	3901      	subs	r1, #1
 8004cd8:	6121      	str	r1, [r4, #16]
 8004cda:	3101      	adds	r1, #1
 8004cdc:	d114      	bne.n	8004d08 <validate_structure+0x188>
 8004cde:	6963      	ldr	r3, [r4, #20]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	0791      	lsls	r1, r2, #30
 8004ce4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8004ce8:	d117      	bne.n	8004d1a <validate_structure+0x19a>
 8004cea:	fb92 f1f0 	sdiv	r1, r2, r0
 8004cee:	fb00 2211 	mls	r2, r0, r1, r2
 8004cf2:	b9a2      	cbnz	r2, 8004d1e <validate_structure+0x19e>
 8004cf4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8004cf8:	fb93 f2f5 	sdiv	r2, r3, r5
 8004cfc:	fb05 3312 	mls	r3, r5, r2, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	231c      	movne	r3, #28
 8004d06:	231d      	moveq	r3, #29
 8004d08:	6922      	ldr	r2, [r4, #16]
 8004d0a:	2a01      	cmp	r2, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8004d12:	461a      	moveq	r2, r3
 8004d14:	4462      	add	r2, ip
 8004d16:	60e2      	str	r2, [r4, #12]
 8004d18:	e7a5      	b.n	8004c66 <validate_structure+0xe6>
 8004d1a:	231c      	movs	r3, #28
 8004d1c:	e7f4      	b.n	8004d08 <validate_structure+0x188>
 8004d1e:	231d      	movs	r3, #29
 8004d20:	e7f2      	b.n	8004d08 <validate_structure+0x188>
 8004d22:	231c      	movs	r3, #28
 8004d24:	e7af      	b.n	8004c86 <validate_structure+0x106>
 8004d26:	231d      	movs	r3, #29
 8004d28:	e7ad      	b.n	8004c86 <validate_structure+0x106>
 8004d2a:	bf00      	nop
 8004d2c:	0800692c 	.word	0x0800692c

08004d30 <mktime>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	b085      	sub	sp, #20
 8004d36:	4607      	mov	r7, r0
 8004d38:	f000 fd38 	bl	80057ac <__gettzinfo>
 8004d3c:	4681      	mov	r9, r0
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7ff ff1e 	bl	8004b80 <validate_structure>
 8004d44:	e9d7 4000 	ldrd	r4, r0, [r7]
 8004d48:	233c      	movs	r3, #60	; 0x3c
 8004d4a:	fb03 4400 	mla	r4, r3, r0, r4
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	4abc      	ldr	r2, [pc, #752]	; (8005044 <mktime+0x314>)
 8004d52:	697e      	ldr	r6, [r7, #20]
 8004d54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004d58:	fb03 4400 	mla	r4, r3, r0, r4
 8004d5c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8004d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d64:	3d01      	subs	r5, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	4415      	add	r5, r2
 8004d6a:	dd11      	ble.n	8004d90 <mktime+0x60>
 8004d6c:	07b1      	lsls	r1, r6, #30
 8004d6e:	d10f      	bne.n	8004d90 <mktime+0x60>
 8004d70:	2264      	movs	r2, #100	; 0x64
 8004d72:	fb96 f3f2 	sdiv	r3, r6, r2
 8004d76:	fb02 6313 	mls	r3, r2, r3, r6
 8004d7a:	b943      	cbnz	r3, 8004d8e <mktime+0x5e>
 8004d7c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8004d80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004d84:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d88:	fb02 3311 	mls	r3, r2, r1, r3
 8004d8c:	b903      	cbnz	r3, 8004d90 <mktime+0x60>
 8004d8e:	3501      	adds	r5, #1
 8004d90:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8004d94:	3310      	adds	r3, #16
 8004d96:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	61fd      	str	r5, [r7, #28]
 8004d9e:	f200 815d 	bhi.w	800505c <mktime+0x32c>
 8004da2:	2e46      	cmp	r6, #70	; 0x46
 8004da4:	dd71      	ble.n	8004e8a <mktime+0x15a>
 8004da6:	2346      	movs	r3, #70	; 0x46
 8004da8:	f240 1c6d 	movw	ip, #365	; 0x16d
 8004dac:	2164      	movs	r1, #100	; 0x64
 8004dae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004db2:	079a      	lsls	r2, r3, #30
 8004db4:	d163      	bne.n	8004e7e <mktime+0x14e>
 8004db6:	fb93 f2f1 	sdiv	r2, r3, r1
 8004dba:	fb01 3212 	mls	r2, r1, r2, r3
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d160      	bne.n	8004e84 <mktime+0x154>
 8004dc2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8004dc6:	fb92 fef0 	sdiv	lr, r2, r0
 8004dca:	fb00 221e 	mls	r2, r0, lr, r2
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	4662      	movne	r2, ip
 8004dd4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004dd8:	3301      	adds	r3, #1
 8004dda:	429e      	cmp	r6, r3
 8004ddc:	4415      	add	r5, r2
 8004dde:	d1e8      	bne.n	8004db2 <mktime+0x82>
 8004de0:	4b99      	ldr	r3, [pc, #612]	; (8005048 <mktime+0x318>)
 8004de2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8004de6:	fbc5 4803 	smlal	r4, r8, r5, r3
 8004dea:	f000 faf5 	bl	80053d8 <__tz_lock>
 8004dee:	f000 faff 	bl	80053f0 <_tzset_unlocked>
 8004df2:	4b96      	ldr	r3, [pc, #600]	; (800504c <mktime+0x31c>)
 8004df4:	f8d3 b000 	ldr.w	fp, [r3]
 8004df8:	f1bb 0f00 	cmp.w	fp, #0
 8004dfc:	d039      	beq.n	8004e72 <mktime+0x142>
 8004dfe:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004e08:	f1bb 0f01 	cmp.w	fp, #1
 8004e0c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8004e10:	46da      	mov	sl, fp
 8004e12:	bfa8      	it	ge
 8004e14:	f04f 0a01 	movge.w	sl, #1
 8004e18:	4283      	cmp	r3, r0
 8004e1a:	d178      	bne.n	8004f0e <mktime+0x1de>
 8004e1c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8004e20:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8004e24:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8004e28:	1a5b      	subs	r3, r3, r1
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8004e36:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	ebb3 0c02 	subs.w	ip, r3, r2
 8004e40:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8004e44:	4564      	cmp	r4, ip
 8004e46:	eb78 0300 	sbcs.w	r3, r8, r0
 8004e4a:	da66      	bge.n	8004f1a <mktime+0x1ea>
 8004e4c:	f8d9 3000 	ldr.w	r3, [r9]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d06f      	beq.n	8004f34 <mktime+0x204>
 8004e54:	9b02      	ldr	r3, [sp, #8]
 8004e56:	429c      	cmp	r4, r3
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	eb78 0303 	sbcs.w	r3, r8, r3
 8004e5e:	db03      	blt.n	8004e68 <mktime+0x138>
 8004e60:	4564      	cmp	r4, ip
 8004e62:	eb78 0300 	sbcs.w	r3, r8, r0
 8004e66:	db6b      	blt.n	8004f40 <mktime+0x210>
 8004e68:	f1bb 0f00 	cmp.w	fp, #0
 8004e6c:	f04f 0b00 	mov.w	fp, #0
 8004e70:	da6b      	bge.n	8004f4a <mktime+0x21a>
 8004e72:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8004e76:	190c      	adds	r4, r1, r4
 8004e78:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8004e7c:	e0a9      	b.n	8004fd2 <mktime+0x2a2>
 8004e7e:	f240 126d 	movw	r2, #365	; 0x16d
 8004e82:	e7a9      	b.n	8004dd8 <mktime+0xa8>
 8004e84:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004e88:	e7a6      	b.n	8004dd8 <mktime+0xa8>
 8004e8a:	d0a9      	beq.n	8004de0 <mktime+0xb0>
 8004e8c:	2345      	movs	r3, #69	; 0x45
 8004e8e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8004e92:	2164      	movs	r1, #100	; 0x64
 8004e94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004e98:	e012      	b.n	8004ec0 <mktime+0x190>
 8004e9a:	bb62      	cbnz	r2, 8004ef6 <mktime+0x1c6>
 8004e9c:	fb93 f2f1 	sdiv	r2, r3, r1
 8004ea0:	fb01 3212 	mls	r2, r1, r2, r3
 8004ea4:	bb52      	cbnz	r2, 8004efc <mktime+0x1cc>
 8004ea6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8004eaa:	fb92 fef0 	sdiv	lr, r2, r0
 8004eae:	fb00 221e 	mls	r2, r0, lr, r2
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	4662      	movne	r2, ip
 8004eb8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004ebc:	1aad      	subs	r5, r5, r2
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	429e      	cmp	r6, r3
 8004ec2:	f003 0203 	and.w	r2, r3, #3
 8004ec6:	dbe8      	blt.n	8004e9a <mktime+0x16a>
 8004ec8:	b9da      	cbnz	r2, 8004f02 <mktime+0x1d2>
 8004eca:	2264      	movs	r2, #100	; 0x64
 8004ecc:	fb96 f3f2 	sdiv	r3, r6, r2
 8004ed0:	fb02 6313 	mls	r3, r2, r3, r6
 8004ed4:	b9c3      	cbnz	r3, 8004f08 <mktime+0x1d8>
 8004ed6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8004eda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ede:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ee2:	fb02 3311 	mls	r3, r2, r1, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f240 136d 	movw	r3, #365	; 0x16d
 8004eec:	bf08      	it	eq
 8004eee:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8004ef2:	1aed      	subs	r5, r5, r3
 8004ef4:	e774      	b.n	8004de0 <mktime+0xb0>
 8004ef6:	f240 126d 	movw	r2, #365	; 0x16d
 8004efa:	e7df      	b.n	8004ebc <mktime+0x18c>
 8004efc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004f00:	e7dc      	b.n	8004ebc <mktime+0x18c>
 8004f02:	f240 136d 	movw	r3, #365	; 0x16d
 8004f06:	e7f4      	b.n	8004ef2 <mktime+0x1c2>
 8004f08:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8004f0c:	e7f1      	b.n	8004ef2 <mktime+0x1c2>
 8004f0e:	f000 f9b9 	bl	8005284 <__tzcalc_limits>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d182      	bne.n	8004e1c <mktime+0xec>
 8004f16:	46d3      	mov	fp, sl
 8004f18:	e050      	b.n	8004fbc <mktime+0x28c>
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	1a5b      	subs	r3, r3, r1
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8004f24:	eb6e 0e03 	sbc.w	lr, lr, r3
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	429c      	cmp	r4, r3
 8004f2c:	eb78 030e 	sbcs.w	r3, r8, lr
 8004f30:	dbf1      	blt.n	8004f16 <mktime+0x1e6>
 8004f32:	e78b      	b.n	8004e4c <mktime+0x11c>
 8004f34:	9b02      	ldr	r3, [sp, #8]
 8004f36:	429c      	cmp	r4, r3
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	eb78 0303 	sbcs.w	r3, r8, r3
 8004f3e:	db8f      	blt.n	8004e60 <mktime+0x130>
 8004f40:	f1bb 0f00 	cmp.w	fp, #0
 8004f44:	db3e      	blt.n	8004fc4 <mktime+0x294>
 8004f46:	f04f 0b01 	mov.w	fp, #1
 8004f4a:	ea8a 0a0b 	eor.w	sl, sl, fp
 8004f4e:	f1ba 0f01 	cmp.w	sl, #1
 8004f52:	d133      	bne.n	8004fbc <mktime+0x28c>
 8004f54:	f1bb 0f00 	cmp.w	fp, #0
 8004f58:	d04e      	beq.n	8004ff8 <mktime+0x2c8>
 8004f5a:	1a52      	subs	r2, r2, r1
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	1914      	adds	r4, r2, r4
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4638      	mov	r0, r7
 8004f6a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8004f6e:	f7ff fe07 	bl	8004b80 <validate_structure>
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	ebb2 020a 	subs.w	r2, r2, sl
 8004f78:	d020      	beq.n	8004fbc <mktime+0x28c>
 8004f7a:	2a01      	cmp	r2, #1
 8004f7c:	dc3e      	bgt.n	8004ffc <mktime+0x2cc>
 8004f7e:	1c90      	adds	r0, r2, #2
 8004f80:	bfd8      	it	le
 8004f82:	2201      	movle	r2, #1
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	18d3      	adds	r3, r2, r3
 8004f88:	4415      	add	r5, r2
 8004f8a:	d540      	bpl.n	800500e <mktime+0x2de>
 8004f8c:	1e73      	subs	r3, r6, #1
 8004f8e:	0799      	lsls	r1, r3, #30
 8004f90:	d137      	bne.n	8005002 <mktime+0x2d2>
 8004f92:	2264      	movs	r2, #100	; 0x64
 8004f94:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f98:	fb02 3311 	mls	r3, r2, r1, r3
 8004f9c:	bba3      	cbnz	r3, 8005008 <mktime+0x2d8>
 8004f9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004fa2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8004fa6:	fb96 f2f3 	sdiv	r2, r6, r3
 8004faa:	fb03 6612 	mls	r6, r3, r2, r6
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	f240 136d 	movw	r3, #365	; 0x16d
 8004fb4:	bf18      	it	ne
 8004fb6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	f1bb 0f01 	cmp.w	fp, #1
 8004fc0:	f47f af57 	bne.w	8004e72 <mktime+0x142>
 8004fc4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8004fc8:	190c      	adds	r4, r1, r4
 8004fca:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8004fce:	f04f 0b01 	mov.w	fp, #1
 8004fd2:	f000 fa07 	bl	80053e4 <__tz_unlock>
 8004fd6:	3504      	adds	r5, #4
 8004fd8:	2307      	movs	r3, #7
 8004fda:	fb95 f3f3 	sdiv	r3, r5, r3
 8004fde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004fe2:	1aed      	subs	r5, r5, r3
 8004fe4:	bf48      	it	mi
 8004fe6:	3507      	addmi	r5, #7
 8004fe8:	f8c7 b020 	str.w	fp, [r7, #32]
 8004fec:	61bd      	str	r5, [r7, #24]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	b005      	add	sp, #20
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	1a8a      	subs	r2, r1, r2
 8004ffa:	e7af      	b.n	8004f5c <mktime+0x22c>
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	e7c0      	b.n	8004f84 <mktime+0x254>
 8005002:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8005006:	e7d8      	b.n	8004fba <mktime+0x28a>
 8005008:	f240 136d 	movw	r3, #365	; 0x16d
 800500c:	e7d5      	b.n	8004fba <mktime+0x28a>
 800500e:	07b2      	lsls	r2, r6, #30
 8005010:	d11e      	bne.n	8005050 <mktime+0x320>
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	fb96 f2f1 	sdiv	r2, r6, r1
 8005018:	fb01 6212 	mls	r2, r1, r2, r6
 800501c:	b9da      	cbnz	r2, 8005056 <mktime+0x326>
 800501e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005022:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8005026:	fb96 f1f2 	sdiv	r1, r6, r2
 800502a:	fb02 6611 	mls	r6, r2, r1, r6
 800502e:	2e00      	cmp	r6, #0
 8005030:	f240 126d 	movw	r2, #365	; 0x16d
 8005034:	bf08      	it	eq
 8005036:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800503a:	4293      	cmp	r3, r2
 800503c:	bfa8      	it	ge
 800503e:	1a9b      	subge	r3, r3, r2
 8005040:	e7bb      	b.n	8004fba <mktime+0x28a>
 8005042:	bf00      	nop
 8005044:	0800695c 	.word	0x0800695c
 8005048:	00015180 	.word	0x00015180
 800504c:	20000324 	.word	0x20000324
 8005050:	f240 126d 	movw	r2, #365	; 0x16d
 8005054:	e7f1      	b.n	800503a <mktime+0x30a>
 8005056:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800505a:	e7ee      	b.n	800503a <mktime+0x30a>
 800505c:	f04f 34ff 	mov.w	r4, #4294967295
 8005060:	46a0      	mov	r8, r4
 8005062:	e7c4      	b.n	8004fee <mktime+0x2be>

08005064 <_free_r>:
 8005064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005066:	2900      	cmp	r1, #0
 8005068:	d044      	beq.n	80050f4 <_free_r+0x90>
 800506a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506e:	9001      	str	r0, [sp, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f1a1 0404 	sub.w	r4, r1, #4
 8005076:	bfb8      	it	lt
 8005078:	18e4      	addlt	r4, r4, r3
 800507a:	f000 fb9f 	bl	80057bc <__malloc_lock>
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <_free_r+0x94>)
 8005080:	9801      	ldr	r0, [sp, #4]
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	b933      	cbnz	r3, 8005094 <_free_r+0x30>
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	6014      	str	r4, [r2, #0]
 800508a:	b003      	add	sp, #12
 800508c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005090:	f000 bb9a 	b.w	80057c8 <__malloc_unlock>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d908      	bls.n	80050aa <_free_r+0x46>
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1961      	adds	r1, r4, r5
 800509c:	428b      	cmp	r3, r1
 800509e:	bf01      	itttt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	1949      	addeq	r1, r1, r5
 80050a6:	6021      	streq	r1, [r4, #0]
 80050a8:	e7ed      	b.n	8005086 <_free_r+0x22>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x50>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x46>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1855      	adds	r5, r2, r1
 80050b8:	42a5      	cmp	r5, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x70>
 80050bc:	6824      	ldr	r4, [r4, #0]
 80050be:	4421      	add	r1, r4
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1e0      	bne.n	800508a <_free_r+0x26>
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6053      	str	r3, [r2, #4]
 80050ce:	4421      	add	r1, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	e7da      	b.n	800508a <_free_r+0x26>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x78>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	e7d6      	b.n	800508a <_free_r+0x26>
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	6054      	str	r4, [r2, #4]
 80050f2:	e7ca      	b.n	800508a <_free_r+0x26>
 80050f4:	b003      	add	sp, #12
 80050f6:	bd30      	pop	{r4, r5, pc}
 80050f8:	20000300 	.word	0x20000300

080050fc <sbrk_aligned>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4e0e      	ldr	r6, [pc, #56]	; (8005138 <sbrk_aligned+0x3c>)
 8005100:	460c      	mov	r4, r1
 8005102:	6831      	ldr	r1, [r6, #0]
 8005104:	4605      	mov	r5, r0
 8005106:	b911      	cbnz	r1, 800510e <sbrk_aligned+0x12>
 8005108:	f000 f88c 	bl	8005224 <_sbrk_r>
 800510c:	6030      	str	r0, [r6, #0]
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f887 	bl	8005224 <_sbrk_r>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d00a      	beq.n	8005130 <sbrk_aligned+0x34>
 800511a:	1cc4      	adds	r4, r0, #3
 800511c:	f024 0403 	bic.w	r4, r4, #3
 8005120:	42a0      	cmp	r0, r4
 8005122:	d007      	beq.n	8005134 <sbrk_aligned+0x38>
 8005124:	1a21      	subs	r1, r4, r0
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f87c 	bl	8005224 <_sbrk_r>
 800512c:	3001      	adds	r0, #1
 800512e:	d101      	bne.n	8005134 <sbrk_aligned+0x38>
 8005130:	f04f 34ff 	mov.w	r4, #4294967295
 8005134:	4620      	mov	r0, r4
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	20000304 	.word	0x20000304

0800513c <_malloc_r>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	1ccd      	adds	r5, r1, #3
 8005142:	f025 0503 	bic.w	r5, r5, #3
 8005146:	3508      	adds	r5, #8
 8005148:	2d0c      	cmp	r5, #12
 800514a:	bf38      	it	cc
 800514c:	250c      	movcc	r5, #12
 800514e:	2d00      	cmp	r5, #0
 8005150:	4607      	mov	r7, r0
 8005152:	db01      	blt.n	8005158 <_malloc_r+0x1c>
 8005154:	42a9      	cmp	r1, r5
 8005156:	d905      	bls.n	8005164 <_malloc_r+0x28>
 8005158:	230c      	movs	r3, #12
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	2600      	movs	r6, #0
 800515e:	4630      	mov	r0, r6
 8005160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005164:	4e2e      	ldr	r6, [pc, #184]	; (8005220 <_malloc_r+0xe4>)
 8005166:	f000 fb29 	bl	80057bc <__malloc_lock>
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	461c      	mov	r4, r3
 800516e:	bb34      	cbnz	r4, 80051be <_malloc_r+0x82>
 8005170:	4629      	mov	r1, r5
 8005172:	4638      	mov	r0, r7
 8005174:	f7ff ffc2 	bl	80050fc <sbrk_aligned>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	4604      	mov	r4, r0
 800517c:	d14d      	bne.n	800521a <_malloc_r+0xde>
 800517e:	6834      	ldr	r4, [r6, #0]
 8005180:	4626      	mov	r6, r4
 8005182:	2e00      	cmp	r6, #0
 8005184:	d140      	bne.n	8005208 <_malloc_r+0xcc>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	4631      	mov	r1, r6
 800518a:	4638      	mov	r0, r7
 800518c:	eb04 0803 	add.w	r8, r4, r3
 8005190:	f000 f848 	bl	8005224 <_sbrk_r>
 8005194:	4580      	cmp	r8, r0
 8005196:	d13a      	bne.n	800520e <_malloc_r+0xd2>
 8005198:	6821      	ldr	r1, [r4, #0]
 800519a:	3503      	adds	r5, #3
 800519c:	1a6d      	subs	r5, r5, r1
 800519e:	f025 0503 	bic.w	r5, r5, #3
 80051a2:	3508      	adds	r5, #8
 80051a4:	2d0c      	cmp	r5, #12
 80051a6:	bf38      	it	cc
 80051a8:	250c      	movcc	r5, #12
 80051aa:	4629      	mov	r1, r5
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7ff ffa5 	bl	80050fc <sbrk_aligned>
 80051b2:	3001      	adds	r0, #1
 80051b4:	d02b      	beq.n	800520e <_malloc_r+0xd2>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	442b      	add	r3, r5
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	e00e      	b.n	80051dc <_malloc_r+0xa0>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	1b52      	subs	r2, r2, r5
 80051c2:	d41e      	bmi.n	8005202 <_malloc_r+0xc6>
 80051c4:	2a0b      	cmp	r2, #11
 80051c6:	d916      	bls.n	80051f6 <_malloc_r+0xba>
 80051c8:	1961      	adds	r1, r4, r5
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	6025      	str	r5, [r4, #0]
 80051ce:	bf18      	it	ne
 80051d0:	6059      	strne	r1, [r3, #4]
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	bf08      	it	eq
 80051d6:	6031      	streq	r1, [r6, #0]
 80051d8:	5162      	str	r2, [r4, r5]
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	4638      	mov	r0, r7
 80051de:	f104 060b 	add.w	r6, r4, #11
 80051e2:	f000 faf1 	bl	80057c8 <__malloc_unlock>
 80051e6:	f026 0607 	bic.w	r6, r6, #7
 80051ea:	1d23      	adds	r3, r4, #4
 80051ec:	1af2      	subs	r2, r6, r3
 80051ee:	d0b6      	beq.n	800515e <_malloc_r+0x22>
 80051f0:	1b9b      	subs	r3, r3, r6
 80051f2:	50a3      	str	r3, [r4, r2]
 80051f4:	e7b3      	b.n	800515e <_malloc_r+0x22>
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	bf0c      	ite	eq
 80051fc:	6032      	streq	r2, [r6, #0]
 80051fe:	605a      	strne	r2, [r3, #4]
 8005200:	e7ec      	b.n	80051dc <_malloc_r+0xa0>
 8005202:	4623      	mov	r3, r4
 8005204:	6864      	ldr	r4, [r4, #4]
 8005206:	e7b2      	b.n	800516e <_malloc_r+0x32>
 8005208:	4634      	mov	r4, r6
 800520a:	6876      	ldr	r6, [r6, #4]
 800520c:	e7b9      	b.n	8005182 <_malloc_r+0x46>
 800520e:	230c      	movs	r3, #12
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4638      	mov	r0, r7
 8005214:	f000 fad8 	bl	80057c8 <__malloc_unlock>
 8005218:	e7a1      	b.n	800515e <_malloc_r+0x22>
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	e7de      	b.n	80051dc <_malloc_r+0xa0>
 800521e:	bf00      	nop
 8005220:	20000300 	.word	0x20000300

08005224 <_sbrk_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d06      	ldr	r5, [pc, #24]	; (8005240 <_sbrk_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fd f822 	bl	8002278 <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_sbrk_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_sbrk_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20000330 	.word	0x20000330

08005244 <siprintf>:
 8005244:	b40e      	push	{r1, r2, r3}
 8005246:	b500      	push	{lr}
 8005248:	b09c      	sub	sp, #112	; 0x70
 800524a:	ab1d      	add	r3, sp, #116	; 0x74
 800524c:	9002      	str	r0, [sp, #8]
 800524e:	9006      	str	r0, [sp, #24]
 8005250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005254:	4809      	ldr	r0, [pc, #36]	; (800527c <siprintf+0x38>)
 8005256:	9107      	str	r1, [sp, #28]
 8005258:	9104      	str	r1, [sp, #16]
 800525a:	4909      	ldr	r1, [pc, #36]	; (8005280 <siprintf+0x3c>)
 800525c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005260:	9105      	str	r1, [sp, #20]
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	a902      	add	r1, sp, #8
 8005268:	f000 fb10 	bl	800588c <_svfiprintf_r>
 800526c:	9b02      	ldr	r3, [sp, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	b01c      	add	sp, #112	; 0x70
 8005274:	f85d eb04 	ldr.w	lr, [sp], #4
 8005278:	b003      	add	sp, #12
 800527a:	4770      	bx	lr
 800527c:	20000010 	.word	0x20000010
 8005280:	ffff0208 	.word	0xffff0208

08005284 <__tzcalc_limits>:
 8005284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	4605      	mov	r5, r0
 800528a:	f000 fa8f 	bl	80057ac <__gettzinfo>
 800528e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8005292:	429d      	cmp	r5, r3
 8005294:	f340 8099 	ble.w	80053ca <__tzcalc_limits+0x146>
 8005298:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800529c:	18ac      	adds	r4, r5, r2
 800529e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80052a2:	f240 126d 	movw	r2, #365	; 0x16d
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	fb02 4403 	mla	r4, r2, r3, r4
 80052ac:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80052b0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80052b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b8:	441c      	add	r4, r3
 80052ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80052be:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80052c2:	fb95 fcf3 	sdiv	ip, r5, r3
 80052c6:	fb03 5c1c 	mls	ip, r3, ip, r5
 80052ca:	186a      	adds	r2, r5, r1
 80052cc:	fabc f68c 	clz	r6, ip
 80052d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052d4:	f005 0303 	and.w	r3, r5, #3
 80052d8:	4414      	add	r4, r2
 80052da:	2264      	movs	r2, #100	; 0x64
 80052dc:	6045      	str	r5, [r0, #4]
 80052de:	fb95 f7f2 	sdiv	r7, r5, r2
 80052e2:	0976      	lsrs	r6, r6, #5
 80052e4:	fb02 5717 	mls	r7, r2, r7, r5
 80052e8:	4601      	mov	r1, r0
 80052ea:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	f04f 0a07 	mov.w	sl, #7
 80052f4:	7a0d      	ldrb	r5, [r1, #8]
 80052f6:	694b      	ldr	r3, [r1, #20]
 80052f8:	2d4a      	cmp	r5, #74	; 0x4a
 80052fa:	d12d      	bne.n	8005358 <__tzcalc_limits+0xd4>
 80052fc:	9a00      	ldr	r2, [sp, #0]
 80052fe:	eb04 0e03 	add.w	lr, r4, r3
 8005302:	b902      	cbnz	r2, 8005306 <__tzcalc_limits+0x82>
 8005304:	b917      	cbnz	r7, 800530c <__tzcalc_limits+0x88>
 8005306:	f1bc 0f00 	cmp.w	ip, #0
 800530a:	d123      	bne.n	8005354 <__tzcalc_limits+0xd0>
 800530c:	2b3b      	cmp	r3, #59	; 0x3b
 800530e:	bfd4      	ite	le
 8005310:	2300      	movle	r3, #0
 8005312:	2301      	movgt	r3, #1
 8005314:	4473      	add	r3, lr
 8005316:	3b01      	subs	r3, #1
 8005318:	698d      	ldr	r5, [r1, #24]
 800531a:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <__tzcalc_limits+0x14c>)
 800531c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8005320:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8005324:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005326:	18ed      	adds	r5, r5, r3
 8005328:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800532c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8005330:	3128      	adds	r1, #40	; 0x28
 8005332:	458b      	cmp	fp, r1
 8005334:	d1de      	bne.n	80052f4 <__tzcalc_limits+0x70>
 8005336:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800533a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800533e:	428c      	cmp	r4, r1
 8005340:	eb72 0303 	sbcs.w	r3, r2, r3
 8005344:	bfb4      	ite	lt
 8005346:	2301      	movlt	r3, #1
 8005348:	2300      	movge	r3, #0
 800534a:	6003      	str	r3, [r0, #0]
 800534c:	2001      	movs	r0, #1
 800534e:	b003      	add	sp, #12
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	2300      	movs	r3, #0
 8005356:	e7dd      	b.n	8005314 <__tzcalc_limits+0x90>
 8005358:	2d44      	cmp	r5, #68	; 0x44
 800535a:	d101      	bne.n	8005360 <__tzcalc_limits+0xdc>
 800535c:	4423      	add	r3, r4
 800535e:	e7db      	b.n	8005318 <__tzcalc_limits+0x94>
 8005360:	9a00      	ldr	r2, [sp, #0]
 8005362:	bb62      	cbnz	r2, 80053be <__tzcalc_limits+0x13a>
 8005364:	2f00      	cmp	r7, #0
 8005366:	bf0c      	ite	eq
 8005368:	4635      	moveq	r5, r6
 800536a:	2501      	movne	r5, #1
 800536c:	68ca      	ldr	r2, [r1, #12]
 800536e:	9201      	str	r2, [sp, #4]
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <__tzcalc_limits+0x150>)
 8005372:	f04f 0930 	mov.w	r9, #48	; 0x30
 8005376:	fb09 2505 	mla	r5, r9, r5, r2
 800537a:	46a6      	mov	lr, r4
 800537c:	f04f 0800 	mov.w	r8, #0
 8005380:	3d04      	subs	r5, #4
 8005382:	9a01      	ldr	r2, [sp, #4]
 8005384:	f108 0801 	add.w	r8, r8, #1
 8005388:	4542      	cmp	r2, r8
 800538a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800538e:	dc18      	bgt.n	80053c2 <__tzcalc_limits+0x13e>
 8005390:	f10e 0504 	add.w	r5, lr, #4
 8005394:	fb95 f8fa 	sdiv	r8, r5, sl
 8005398:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800539c:	eba5 0808 	sub.w	r8, r5, r8
 80053a0:	ebb3 0808 	subs.w	r8, r3, r8
 80053a4:	690b      	ldr	r3, [r1, #16]
 80053a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053aa:	bf48      	it	mi
 80053ac:	f108 0807 	addmi.w	r8, r8, #7
 80053b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80053b4:	4443      	add	r3, r8
 80053b6:	454b      	cmp	r3, r9
 80053b8:	da05      	bge.n	80053c6 <__tzcalc_limits+0x142>
 80053ba:	4473      	add	r3, lr
 80053bc:	e7ac      	b.n	8005318 <__tzcalc_limits+0x94>
 80053be:	4635      	mov	r5, r6
 80053c0:	e7d4      	b.n	800536c <__tzcalc_limits+0xe8>
 80053c2:	44ce      	add	lr, r9
 80053c4:	e7dd      	b.n	8005382 <__tzcalc_limits+0xfe>
 80053c6:	3b07      	subs	r3, #7
 80053c8:	e7f5      	b.n	80053b6 <__tzcalc_limits+0x132>
 80053ca:	2000      	movs	r0, #0
 80053cc:	e7bf      	b.n	800534e <__tzcalc_limits+0xca>
 80053ce:	bf00      	nop
 80053d0:	00015180 	.word	0x00015180
 80053d4:	0800698c 	.word	0x0800698c

080053d8 <__tz_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__tz_lock+0x8>)
 80053da:	f000 b9eb 	b.w	80057b4 <__retarget_lock_acquire>
 80053de:	bf00      	nop
 80053e0:	2000032e 	.word	0x2000032e

080053e4 <__tz_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__tz_unlock+0x8>)
 80053e6:	f000 b9e7 	b.w	80057b8 <__retarget_lock_release>
 80053ea:	bf00      	nop
 80053ec:	2000032e 	.word	0x2000032e

080053f0 <_tzset_unlocked>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <_tzset_unlocked+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	f000 b802 	b.w	80053fc <_tzset_unlocked_r>
 80053f8:	20000010 	.word	0x20000010

080053fc <_tzset_unlocked_r>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	b08d      	sub	sp, #52	; 0x34
 8005402:	4607      	mov	r7, r0
 8005404:	f000 f9d2 	bl	80057ac <__gettzinfo>
 8005408:	49b0      	ldr	r1, [pc, #704]	; (80056cc <_tzset_unlocked_r+0x2d0>)
 800540a:	4eb1      	ldr	r6, [pc, #708]	; (80056d0 <_tzset_unlocked_r+0x2d4>)
 800540c:	4605      	mov	r5, r0
 800540e:	4638      	mov	r0, r7
 8005410:	f000 f9c4 	bl	800579c <_getenv_r>
 8005414:	4604      	mov	r4, r0
 8005416:	b970      	cbnz	r0, 8005436 <_tzset_unlocked_r+0x3a>
 8005418:	4bae      	ldr	r3, [pc, #696]	; (80056d4 <_tzset_unlocked_r+0x2d8>)
 800541a:	4aaf      	ldr	r2, [pc, #700]	; (80056d8 <_tzset_unlocked_r+0x2dc>)
 800541c:	6018      	str	r0, [r3, #0]
 800541e:	4baf      	ldr	r3, [pc, #700]	; (80056dc <_tzset_unlocked_r+0x2e0>)
 8005420:	6018      	str	r0, [r3, #0]
 8005422:	4baf      	ldr	r3, [pc, #700]	; (80056e0 <_tzset_unlocked_r+0x2e4>)
 8005424:	6830      	ldr	r0, [r6, #0]
 8005426:	e9c3 2200 	strd	r2, r2, [r3]
 800542a:	f7ff fb99 	bl	8004b60 <free>
 800542e:	6034      	str	r4, [r6, #0]
 8005430:	b00d      	add	sp, #52	; 0x34
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	6831      	ldr	r1, [r6, #0]
 8005438:	2900      	cmp	r1, #0
 800543a:	d162      	bne.n	8005502 <_tzset_unlocked_r+0x106>
 800543c:	6830      	ldr	r0, [r6, #0]
 800543e:	f7ff fb8f 	bl	8004b60 <free>
 8005442:	4620      	mov	r0, r4
 8005444:	f7fa feee 	bl	8000224 <strlen>
 8005448:	1c41      	adds	r1, r0, #1
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff fe76 	bl	800513c <_malloc_r>
 8005450:	6030      	str	r0, [r6, #0]
 8005452:	2800      	cmp	r0, #0
 8005454:	d15a      	bne.n	800550c <_tzset_unlocked_r+0x110>
 8005456:	7823      	ldrb	r3, [r4, #0]
 8005458:	4aa2      	ldr	r2, [pc, #648]	; (80056e4 <_tzset_unlocked_r+0x2e8>)
 800545a:	49a3      	ldr	r1, [pc, #652]	; (80056e8 <_tzset_unlocked_r+0x2ec>)
 800545c:	2b3a      	cmp	r3, #58	; 0x3a
 800545e:	bf08      	it	eq
 8005460:	3401      	addeq	r4, #1
 8005462:	ae0a      	add	r6, sp, #40	; 0x28
 8005464:	4633      	mov	r3, r6
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fca4 	bl	8005db4 <siscanf>
 800546c:	2800      	cmp	r0, #0
 800546e:	dddf      	ble.n	8005430 <_tzset_unlocked_r+0x34>
 8005470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005472:	18e7      	adds	r7, r4, r3
 8005474:	5ce3      	ldrb	r3, [r4, r3]
 8005476:	2b2d      	cmp	r3, #45	; 0x2d
 8005478:	d14c      	bne.n	8005514 <_tzset_unlocked_r+0x118>
 800547a:	3701      	adds	r7, #1
 800547c:	f04f 38ff 	mov.w	r8, #4294967295
 8005480:	f10d 0a20 	add.w	sl, sp, #32
 8005484:	f10d 0b1e 	add.w	fp, sp, #30
 8005488:	2400      	movs	r4, #0
 800548a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800548e:	4997      	ldr	r1, [pc, #604]	; (80056ec <_tzset_unlocked_r+0x2f0>)
 8005490:	9603      	str	r6, [sp, #12]
 8005492:	f8cd b000 	str.w	fp, [sp]
 8005496:	4633      	mov	r3, r6
 8005498:	aa07      	add	r2, sp, #28
 800549a:	4638      	mov	r0, r7
 800549c:	f8ad 401e 	strh.w	r4, [sp, #30]
 80054a0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80054a4:	f000 fc86 	bl	8005db4 <siscanf>
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	ddc1      	ble.n	8005430 <_tzset_unlocked_r+0x34>
 80054ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80054b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80054b4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80056f8 <_tzset_unlocked_r+0x2fc>
 80054b8:	213c      	movs	r1, #60	; 0x3c
 80054ba:	fb01 3302 	mla	r3, r1, r2, r3
 80054be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80054c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80054c6:	fb01 3302 	mla	r3, r1, r2, r3
 80054ca:	fb08 f303 	mul.w	r3, r8, r3
 80054ce:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80056e0 <_tzset_unlocked_r+0x2e4>
 80054d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80054d4:	4b83      	ldr	r3, [pc, #524]	; (80056e4 <_tzset_unlocked_r+0x2e8>)
 80054d6:	f8c8 3000 	str.w	r3, [r8]
 80054da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054dc:	4982      	ldr	r1, [pc, #520]	; (80056e8 <_tzset_unlocked_r+0x2ec>)
 80054de:	441f      	add	r7, r3
 80054e0:	464a      	mov	r2, r9
 80054e2:	4633      	mov	r3, r6
 80054e4:	4638      	mov	r0, r7
 80054e6:	f000 fc65 	bl	8005db4 <siscanf>
 80054ea:	42a0      	cmp	r0, r4
 80054ec:	dc18      	bgt.n	8005520 <_tzset_unlocked_r+0x124>
 80054ee:	f8d8 3000 	ldr.w	r3, [r8]
 80054f2:	f8c8 3004 	str.w	r3, [r8, #4]
 80054f6:	4b77      	ldr	r3, [pc, #476]	; (80056d4 <_tzset_unlocked_r+0x2d8>)
 80054f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	4b77      	ldr	r3, [pc, #476]	; (80056dc <_tzset_unlocked_r+0x2e0>)
 80054fe:	601c      	str	r4, [r3, #0]
 8005500:	e796      	b.n	8005430 <_tzset_unlocked_r+0x34>
 8005502:	f7fa fe85 	bl	8000210 <strcmp>
 8005506:	2800      	cmp	r0, #0
 8005508:	d198      	bne.n	800543c <_tzset_unlocked_r+0x40>
 800550a:	e791      	b.n	8005430 <_tzset_unlocked_r+0x34>
 800550c:	4621      	mov	r1, r4
 800550e:	f000 fc7f 	bl	8005e10 <strcpy>
 8005512:	e7a0      	b.n	8005456 <_tzset_unlocked_r+0x5a>
 8005514:	2b2b      	cmp	r3, #43	; 0x2b
 8005516:	bf08      	it	eq
 8005518:	3701      	addeq	r7, #1
 800551a:	f04f 0801 	mov.w	r8, #1
 800551e:	e7af      	b.n	8005480 <_tzset_unlocked_r+0x84>
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	f8c8 9004 	str.w	r9, [r8, #4]
 8005526:	18fc      	adds	r4, r7, r3
 8005528:	5cfb      	ldrb	r3, [r7, r3]
 800552a:	2b2d      	cmp	r3, #45	; 0x2d
 800552c:	f040 808b 	bne.w	8005646 <_tzset_unlocked_r+0x24a>
 8005530:	3401      	adds	r4, #1
 8005532:	f04f 37ff 	mov.w	r7, #4294967295
 8005536:	2300      	movs	r3, #0
 8005538:	f8ad 301c 	strh.w	r3, [sp, #28]
 800553c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005540:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005544:	930a      	str	r3, [sp, #40]	; 0x28
 8005546:	e9cd a602 	strd	sl, r6, [sp, #8]
 800554a:	e9cd b600 	strd	fp, r6, [sp]
 800554e:	4967      	ldr	r1, [pc, #412]	; (80056ec <_tzset_unlocked_r+0x2f0>)
 8005550:	4633      	mov	r3, r6
 8005552:	aa07      	add	r2, sp, #28
 8005554:	4620      	mov	r0, r4
 8005556:	f000 fc2d 	bl	8005db4 <siscanf>
 800555a:	2800      	cmp	r0, #0
 800555c:	dc78      	bgt.n	8005650 <_tzset_unlocked_r+0x254>
 800555e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005560:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005564:	652b      	str	r3, [r5, #80]	; 0x50
 8005566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005568:	462f      	mov	r7, r5
 800556a:	441c      	add	r4, r3
 800556c:	f04f 0900 	mov.w	r9, #0
 8005570:	7823      	ldrb	r3, [r4, #0]
 8005572:	2b2c      	cmp	r3, #44	; 0x2c
 8005574:	bf08      	it	eq
 8005576:	3401      	addeq	r4, #1
 8005578:	f894 8000 	ldrb.w	r8, [r4]
 800557c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005580:	d178      	bne.n	8005674 <_tzset_unlocked_r+0x278>
 8005582:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005586:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800558a:	ab09      	add	r3, sp, #36	; 0x24
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4958      	ldr	r1, [pc, #352]	; (80056f0 <_tzset_unlocked_r+0x2f4>)
 8005590:	9603      	str	r6, [sp, #12]
 8005592:	4633      	mov	r3, r6
 8005594:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fc0b 	bl	8005db4 <siscanf>
 800559e:	2803      	cmp	r0, #3
 80055a0:	f47f af46 	bne.w	8005430 <_tzset_unlocked_r+0x34>
 80055a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80055a8:	1e4b      	subs	r3, r1, #1
 80055aa:	2b0b      	cmp	r3, #11
 80055ac:	f63f af40 	bhi.w	8005430 <_tzset_unlocked_r+0x34>
 80055b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80055b4:	1e53      	subs	r3, r2, #1
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	f63f af3a 	bhi.w	8005430 <_tzset_unlocked_r+0x34>
 80055bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	f63f af35 	bhi.w	8005430 <_tzset_unlocked_r+0x34>
 80055c6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80055ca:	f887 8008 	strb.w	r8, [r7, #8]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d2:	eb04 0803 	add.w	r8, r4, r3
 80055d6:	2302      	movs	r3, #2
 80055d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80055dc:	2300      	movs	r3, #0
 80055de:	f8ad 301e 	strh.w	r3, [sp, #30]
 80055e2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80055e6:	930a      	str	r3, [sp, #40]	; 0x28
 80055e8:	f898 3000 	ldrb.w	r3, [r8]
 80055ec:	2b2f      	cmp	r3, #47	; 0x2f
 80055ee:	d109      	bne.n	8005604 <_tzset_unlocked_r+0x208>
 80055f0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80055f4:	e9cd b600 	strd	fp, r6, [sp]
 80055f8:	493e      	ldr	r1, [pc, #248]	; (80056f4 <_tzset_unlocked_r+0x2f8>)
 80055fa:	4633      	mov	r3, r6
 80055fc:	aa07      	add	r2, sp, #28
 80055fe:	4640      	mov	r0, r8
 8005600:	f000 fbd8 	bl	8005db4 <siscanf>
 8005604:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005608:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800560c:	213c      	movs	r1, #60	; 0x3c
 800560e:	fb01 3302 	mla	r3, r1, r2, r3
 8005612:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005616:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800561a:	fb01 3302 	mla	r3, r1, r2, r3
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	4444      	add	r4, r8
 8005626:	f1b9 0f00 	cmp.w	r9, #0
 800562a:	d020      	beq.n	800566e <_tzset_unlocked_r+0x272>
 800562c:	6868      	ldr	r0, [r5, #4]
 800562e:	f7ff fe29 	bl	8005284 <__tzcalc_limits>
 8005632:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <_tzset_unlocked_r+0x2d8>)
 8005634:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	4a27      	ldr	r2, [pc, #156]	; (80056dc <_tzset_unlocked_r+0x2e0>)
 800563e:	bf18      	it	ne
 8005640:	2301      	movne	r3, #1
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e6f4      	b.n	8005430 <_tzset_unlocked_r+0x34>
 8005646:	2b2b      	cmp	r3, #43	; 0x2b
 8005648:	bf08      	it	eq
 800564a:	3401      	addeq	r4, #1
 800564c:	2701      	movs	r7, #1
 800564e:	e772      	b.n	8005536 <_tzset_unlocked_r+0x13a>
 8005650:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005654:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8005658:	213c      	movs	r1, #60	; 0x3c
 800565a:	fb01 3302 	mla	r3, r1, r2, r3
 800565e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005662:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005666:	fb01 3302 	mla	r3, r1, r2, r3
 800566a:	437b      	muls	r3, r7
 800566c:	e77a      	b.n	8005564 <_tzset_unlocked_r+0x168>
 800566e:	f04f 0901 	mov.w	r9, #1
 8005672:	e77d      	b.n	8005570 <_tzset_unlocked_r+0x174>
 8005674:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005678:	bf06      	itte	eq
 800567a:	3401      	addeq	r4, #1
 800567c:	4643      	moveq	r3, r8
 800567e:	2344      	movne	r3, #68	; 0x44
 8005680:	220a      	movs	r2, #10
 8005682:	a90b      	add	r1, sp, #44	; 0x2c
 8005684:	4620      	mov	r0, r4
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f000 fc52 	bl	8005f30 <strtoul>
 800568c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005690:	9b05      	ldr	r3, [sp, #20]
 8005692:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005696:	45a0      	cmp	r8, r4
 8005698:	d114      	bne.n	80056c4 <_tzset_unlocked_r+0x2c8>
 800569a:	234d      	movs	r3, #77	; 0x4d
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	d107      	bne.n	80056b2 <_tzset_unlocked_r+0x2b6>
 80056a2:	722b      	strb	r3, [r5, #8]
 80056a4:	2103      	movs	r1, #3
 80056a6:	2302      	movs	r3, #2
 80056a8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80056ac:	f8c5 9014 	str.w	r9, [r5, #20]
 80056b0:	e791      	b.n	80055d6 <_tzset_unlocked_r+0x1da>
 80056b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80056b6:	220b      	movs	r2, #11
 80056b8:	2301      	movs	r3, #1
 80056ba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80056be:	2300      	movs	r3, #0
 80056c0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80056c2:	e788      	b.n	80055d6 <_tzset_unlocked_r+0x1da>
 80056c4:	b280      	uxth	r0, r0
 80056c6:	723b      	strb	r3, [r7, #8]
 80056c8:	6178      	str	r0, [r7, #20]
 80056ca:	e784      	b.n	80055d6 <_tzset_unlocked_r+0x1da>
 80056cc:	080069ec 	.word	0x080069ec
 80056d0:	20000320 	.word	0x20000320
 80056d4:	20000328 	.word	0x20000328
 80056d8:	080069ef 	.word	0x080069ef
 80056dc:	20000324 	.word	0x20000324
 80056e0:	20000074 	.word	0x20000074
 80056e4:	20000313 	.word	0x20000313
 80056e8:	080069f3 	.word	0x080069f3
 80056ec:	08006a16 	.word	0x08006a16
 80056f0:	08006a02 	.word	0x08006a02
 80056f4:	08006a15 	.word	0x08006a15
 80056f8:	20000308 	.word	0x20000308

080056fc <div>:
 80056fc:	2900      	cmp	r1, #0
 80056fe:	b510      	push	{r4, lr}
 8005700:	fb91 f4f2 	sdiv	r4, r1, r2
 8005704:	fb02 1314 	mls	r3, r2, r4, r1
 8005708:	db06      	blt.n	8005718 <div+0x1c>
 800570a:	2b00      	cmp	r3, #0
 800570c:	da01      	bge.n	8005712 <div+0x16>
 800570e:	3401      	adds	r4, #1
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	e9c0 4300 	strd	r4, r3, [r0]
 8005716:	bd10      	pop	{r4, pc}
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfc4      	itt	gt
 800571c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8005720:	189b      	addgt	r3, r3, r2
 8005722:	e7f6      	b.n	8005712 <div+0x16>

08005724 <_findenv_r>:
 8005724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005798 <_findenv_r+0x74>
 800572c:	4607      	mov	r7, r0
 800572e:	4689      	mov	r9, r1
 8005730:	4616      	mov	r6, r2
 8005732:	f000 fc07 	bl	8005f44 <__env_lock>
 8005736:	f8da 4000 	ldr.w	r4, [sl]
 800573a:	b134      	cbz	r4, 800574a <_findenv_r+0x26>
 800573c:	464b      	mov	r3, r9
 800573e:	4698      	mov	r8, r3
 8005740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005744:	b13a      	cbz	r2, 8005756 <_findenv_r+0x32>
 8005746:	2a3d      	cmp	r2, #61	; 0x3d
 8005748:	d1f9      	bne.n	800573e <_findenv_r+0x1a>
 800574a:	4638      	mov	r0, r7
 800574c:	f000 fc00 	bl	8005f50 <__env_unlock>
 8005750:	2000      	movs	r0, #0
 8005752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005756:	eba8 0809 	sub.w	r8, r8, r9
 800575a:	46a3      	mov	fp, r4
 800575c:	f854 0b04 	ldr.w	r0, [r4], #4
 8005760:	2800      	cmp	r0, #0
 8005762:	d0f2      	beq.n	800574a <_findenv_r+0x26>
 8005764:	4642      	mov	r2, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f000 fb5a 	bl	8005e20 <strncmp>
 800576c:	2800      	cmp	r0, #0
 800576e:	d1f4      	bne.n	800575a <_findenv_r+0x36>
 8005770:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005774:	eb03 0508 	add.w	r5, r3, r8
 8005778:	f813 3008 	ldrb.w	r3, [r3, r8]
 800577c:	2b3d      	cmp	r3, #61	; 0x3d
 800577e:	d1ec      	bne.n	800575a <_findenv_r+0x36>
 8005780:	f8da 3000 	ldr.w	r3, [sl]
 8005784:	ebab 0303 	sub.w	r3, fp, r3
 8005788:	109b      	asrs	r3, r3, #2
 800578a:	4638      	mov	r0, r7
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	f000 fbdf 	bl	8005f50 <__env_unlock>
 8005792:	1c68      	adds	r0, r5, #1
 8005794:	e7dd      	b.n	8005752 <_findenv_r+0x2e>
 8005796:	bf00      	nop
 8005798:	20000000 	.word	0x20000000

0800579c <_getenv_r>:
 800579c:	b507      	push	{r0, r1, r2, lr}
 800579e:	aa01      	add	r2, sp, #4
 80057a0:	f7ff ffc0 	bl	8005724 <_findenv_r>
 80057a4:	b003      	add	sp, #12
 80057a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080057ac <__gettzinfo>:
 80057ac:	4800      	ldr	r0, [pc, #0]	; (80057b0 <__gettzinfo+0x4>)
 80057ae:	4770      	bx	lr
 80057b0:	20000080 	.word	0x20000080

080057b4 <__retarget_lock_acquire>:
 80057b4:	4770      	bx	lr

080057b6 <__retarget_lock_acquire_recursive>:
 80057b6:	4770      	bx	lr

080057b8 <__retarget_lock_release>:
 80057b8:	4770      	bx	lr

080057ba <__retarget_lock_release_recursive>:
 80057ba:	4770      	bx	lr

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bffa 	b.w	80057b6 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	2000032d 	.word	0x2000032d

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff bff6 	b.w	80057ba <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	2000032d 	.word	0x2000032d

080057d4 <__ssputs_r>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	688e      	ldr	r6, [r1, #8]
 80057da:	429e      	cmp	r6, r3
 80057dc:	4682      	mov	sl, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4690      	mov	r8, r2
 80057e2:	461f      	mov	r7, r3
 80057e4:	d838      	bhi.n	8005858 <__ssputs_r+0x84>
 80057e6:	898a      	ldrh	r2, [r1, #12]
 80057e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057ec:	d032      	beq.n	8005854 <__ssputs_r+0x80>
 80057ee:	6825      	ldr	r5, [r4, #0]
 80057f0:	6909      	ldr	r1, [r1, #16]
 80057f2:	eba5 0901 	sub.w	r9, r5, r1
 80057f6:	6965      	ldr	r5, [r4, #20]
 80057f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005800:	3301      	adds	r3, #1
 8005802:	444b      	add	r3, r9
 8005804:	106d      	asrs	r5, r5, #1
 8005806:	429d      	cmp	r5, r3
 8005808:	bf38      	it	cc
 800580a:	461d      	movcc	r5, r3
 800580c:	0553      	lsls	r3, r2, #21
 800580e:	d531      	bpl.n	8005874 <__ssputs_r+0xa0>
 8005810:	4629      	mov	r1, r5
 8005812:	f7ff fc93 	bl	800513c <_malloc_r>
 8005816:	4606      	mov	r6, r0
 8005818:	b950      	cbnz	r0, 8005830 <__ssputs_r+0x5c>
 800581a:	230c      	movs	r3, #12
 800581c:	f8ca 3000 	str.w	r3, [sl]
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	6921      	ldr	r1, [r4, #16]
 8005832:	464a      	mov	r2, r9
 8005834:	f000 fb92 	bl	8005f5c <memcpy>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	6126      	str	r6, [r4, #16]
 8005846:	6165      	str	r5, [r4, #20]
 8005848:	444e      	add	r6, r9
 800584a:	eba5 0509 	sub.w	r5, r5, r9
 800584e:	6026      	str	r6, [r4, #0]
 8005850:	60a5      	str	r5, [r4, #8]
 8005852:	463e      	mov	r6, r7
 8005854:	42be      	cmp	r6, r7
 8005856:	d900      	bls.n	800585a <__ssputs_r+0x86>
 8005858:	463e      	mov	r6, r7
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	4632      	mov	r2, r6
 800585e:	4641      	mov	r1, r8
 8005860:	f000 fb8a 	bl	8005f78 <memmove>
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	1b9b      	subs	r3, r3, r6
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4433      	add	r3, r6
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	2000      	movs	r0, #0
 8005872:	e7db      	b.n	800582c <__ssputs_r+0x58>
 8005874:	462a      	mov	r2, r5
 8005876:	f000 fb99 	bl	8005fac <_realloc_r>
 800587a:	4606      	mov	r6, r0
 800587c:	2800      	cmp	r0, #0
 800587e:	d1e1      	bne.n	8005844 <__ssputs_r+0x70>
 8005880:	6921      	ldr	r1, [r4, #16]
 8005882:	4650      	mov	r0, sl
 8005884:	f7ff fbee 	bl	8005064 <_free_r>
 8005888:	e7c7      	b.n	800581a <__ssputs_r+0x46>
	...

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d50e      	bpl.n	80058be <_svfiprintf_r+0x32>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b963      	cbnz	r3, 80058be <_svfiprintf_r+0x32>
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	f7ff fc49 	bl	800513c <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b920      	cbnz	r0, 80058ba <_svfiprintf_r+0x2e>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e0d1      	b.n	8005a5e <_svfiprintf_r+0x1d2>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	616b      	str	r3, [r5, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	2320      	movs	r3, #32
 80058c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058cc:	2330      	movs	r3, #48	; 0x30
 80058ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a78 <_svfiprintf_r+0x1ec>
 80058d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d6:	f04f 0901 	mov.w	r9, #1
 80058da:	4623      	mov	r3, r4
 80058dc:	469a      	mov	sl, r3
 80058de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e2:	b10a      	cbz	r2, 80058e8 <_svfiprintf_r+0x5c>
 80058e4:	2a25      	cmp	r2, #37	; 0x25
 80058e6:	d1f9      	bne.n	80058dc <_svfiprintf_r+0x50>
 80058e8:	ebba 0b04 	subs.w	fp, sl, r4
 80058ec:	d00b      	beq.n	8005906 <_svfiprintf_r+0x7a>
 80058ee:	465b      	mov	r3, fp
 80058f0:	4622      	mov	r2, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ff6d 	bl	80057d4 <__ssputs_r>
 80058fa:	3001      	adds	r0, #1
 80058fc:	f000 80aa 	beq.w	8005a54 <_svfiprintf_r+0x1c8>
 8005900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005902:	445a      	add	r2, fp
 8005904:	9209      	str	r2, [sp, #36]	; 0x24
 8005906:	f89a 3000 	ldrb.w	r3, [sl]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a2 	beq.w	8005a54 <_svfiprintf_r+0x1c8>
 8005910:	2300      	movs	r3, #0
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591a:	f10a 0a01 	add.w	sl, sl, #1
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005926:	931a      	str	r3, [sp, #104]	; 0x68
 8005928:	4654      	mov	r4, sl
 800592a:	2205      	movs	r2, #5
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	4851      	ldr	r0, [pc, #324]	; (8005a78 <_svfiprintf_r+0x1ec>)
 8005932:	f7fa fc85 	bl	8000240 <memchr>
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	b9d8      	cbnz	r0, 8005972 <_svfiprintf_r+0xe6>
 800593a:	06d0      	lsls	r0, r2, #27
 800593c:	bf44      	itt	mi
 800593e:	2320      	movmi	r3, #32
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005944:	0711      	lsls	r1, r2, #28
 8005946:	bf44      	itt	mi
 8005948:	232b      	movmi	r3, #43	; 0x2b
 800594a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b2a      	cmp	r3, #42	; 0x2a
 8005954:	d015      	beq.n	8005982 <_svfiprintf_r+0xf6>
 8005956:	9a07      	ldr	r2, [sp, #28]
 8005958:	4654      	mov	r4, sl
 800595a:	2000      	movs	r0, #0
 800595c:	f04f 0c0a 	mov.w	ip, #10
 8005960:	4621      	mov	r1, r4
 8005962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005966:	3b30      	subs	r3, #48	; 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d94e      	bls.n	8005a0a <_svfiprintf_r+0x17e>
 800596c:	b1b0      	cbz	r0, 800599c <_svfiprintf_r+0x110>
 800596e:	9207      	str	r2, [sp, #28]
 8005970:	e014      	b.n	800599c <_svfiprintf_r+0x110>
 8005972:	eba0 0308 	sub.w	r3, r0, r8
 8005976:	fa09 f303 	lsl.w	r3, r9, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	46a2      	mov	sl, r4
 8005980:	e7d2      	b.n	8005928 <_svfiprintf_r+0x9c>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	9103      	str	r1, [sp, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfbb      	ittet	lt
 800598e:	425b      	neglt	r3, r3
 8005990:	f042 0202 	orrlt.w	r2, r2, #2
 8005994:	9307      	strge	r3, [sp, #28]
 8005996:	9307      	strlt	r3, [sp, #28]
 8005998:	bfb8      	it	lt
 800599a:	9204      	strlt	r2, [sp, #16]
 800599c:	7823      	ldrb	r3, [r4, #0]
 800599e:	2b2e      	cmp	r3, #46	; 0x2e
 80059a0:	d10c      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a2:	7863      	ldrb	r3, [r4, #1]
 80059a4:	2b2a      	cmp	r3, #42	; 0x2a
 80059a6:	d135      	bne.n	8005a14 <_svfiprintf_r+0x188>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	9203      	str	r2, [sp, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bfb8      	it	lt
 80059b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a88 <_svfiprintf_r+0x1fc>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc3b 	bl	8000240 <memchr>
 80059ca:	b140      	cbz	r0, 80059de <_svfiprintf_r+0x152>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	fa03 f000 	lsl.w	r0, r3, r0
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	4303      	orrs	r3, r0
 80059da:	3401      	adds	r4, #1
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e2:	4826      	ldr	r0, [pc, #152]	; (8005a7c <_svfiprintf_r+0x1f0>)
 80059e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e8:	2206      	movs	r2, #6
 80059ea:	f7fa fc29 	bl	8000240 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d038      	beq.n	8005a64 <_svfiprintf_r+0x1d8>
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <_svfiprintf_r+0x1f4>)
 80059f4:	bb1b      	cbnz	r3, 8005a3e <_svfiprintf_r+0x1b2>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	3307      	adds	r3, #7
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	3308      	adds	r3, #8
 8005a00:	9303      	str	r3, [sp, #12]
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	4433      	add	r3, r6
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	e767      	b.n	80058da <_svfiprintf_r+0x4e>
 8005a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0e:	460c      	mov	r4, r1
 8005a10:	2001      	movs	r0, #1
 8005a12:	e7a5      	b.n	8005960 <_svfiprintf_r+0xd4>
 8005a14:	2300      	movs	r3, #0
 8005a16:	3401      	adds	r4, #1
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4620      	mov	r0, r4
 8005a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a26:	3a30      	subs	r2, #48	; 0x30
 8005a28:	2a09      	cmp	r2, #9
 8005a2a:	d903      	bls.n	8005a34 <_svfiprintf_r+0x1a8>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0c5      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	e7c3      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a38:	4604      	mov	r4, r0
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7f0      	b.n	8005a20 <_svfiprintf_r+0x194>
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <_svfiprintf_r+0x1f8>)
 8005a46:	a904      	add	r1, sp, #16
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f3af 8000 	nop.w
 8005a4e:	1c42      	adds	r2, r0, #1
 8005a50:	4606      	mov	r6, r0
 8005a52:	d1d6      	bne.n	8005a02 <_svfiprintf_r+0x176>
 8005a54:	89ab      	ldrh	r3, [r5, #12]
 8005a56:	065b      	lsls	r3, r3, #25
 8005a58:	f53f af2c 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a5e:	b01d      	add	sp, #116	; 0x74
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <_svfiprintf_r+0x1f8>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f000 f87a 	bl	8005b68 <_printf_i>
 8005a74:	e7eb      	b.n	8005a4e <_svfiprintf_r+0x1c2>
 8005a76:	bf00      	nop
 8005a78:	08006a28 	.word	0x08006a28
 8005a7c:	08006a32 	.word	0x08006a32
 8005a80:	00000000 	.word	0x00000000
 8005a84:	080057d5 	.word	0x080057d5
 8005a88:	08006a2e 	.word	0x08006a2e

08005a8c <_printf_common>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	4616      	mov	r6, r2
 8005a92:	4699      	mov	r9, r3
 8005a94:	688a      	ldr	r2, [r1, #8]
 8005a96:	690b      	ldr	r3, [r1, #16]
 8005a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	bfb8      	it	lt
 8005aa0:	4613      	movlt	r3, r2
 8005aa2:	6033      	str	r3, [r6, #0]
 8005aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	b10a      	cbz	r2, 8005ab2 <_printf_common+0x26>
 8005aae:	3301      	adds	r3, #1
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	0699      	lsls	r1, r3, #26
 8005ab6:	bf42      	ittt	mi
 8005ab8:	6833      	ldrmi	r3, [r6, #0]
 8005aba:	3302      	addmi	r3, #2
 8005abc:	6033      	strmi	r3, [r6, #0]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	f015 0506 	ands.w	r5, r5, #6
 8005ac4:	d106      	bne.n	8005ad4 <_printf_common+0x48>
 8005ac6:	f104 0a19 	add.w	sl, r4, #25
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	6832      	ldr	r2, [r6, #0]
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dc26      	bgt.n	8005b22 <_printf_common+0x96>
 8005ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad8:	1e13      	subs	r3, r2, #0
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	bf18      	it	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	0692      	lsls	r2, r2, #26
 8005ae2:	d42b      	bmi.n	8005b3c <_printf_common+0xb0>
 8005ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d01e      	beq.n	8005b30 <_printf_common+0xa4>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	68e5      	ldr	r5, [r4, #12]
 8005af6:	6832      	ldr	r2, [r6, #0]
 8005af8:	f003 0306 	and.w	r3, r3, #6
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	bf08      	it	eq
 8005b00:	1aad      	subeq	r5, r5, r2
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	6922      	ldr	r2, [r4, #16]
 8005b06:	bf0c      	ite	eq
 8005b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b0c:	2500      	movne	r5, #0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	bfc4      	itt	gt
 8005b12:	1a9b      	subgt	r3, r3, r2
 8005b14:	18ed      	addgt	r5, r5, r3
 8005b16:	2600      	movs	r6, #0
 8005b18:	341a      	adds	r4, #26
 8005b1a:	42b5      	cmp	r5, r6
 8005b1c:	d11a      	bne.n	8005b54 <_printf_common+0xc8>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e008      	b.n	8005b34 <_printf_common+0xa8>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4652      	mov	r2, sl
 8005b26:	4649      	mov	r1, r9
 8005b28:	4638      	mov	r0, r7
 8005b2a:	47c0      	blx	r8
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d103      	bne.n	8005b38 <_printf_common+0xac>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	3501      	adds	r5, #1
 8005b3a:	e7c6      	b.n	8005aca <_printf_common+0x3e>
 8005b3c:	18e1      	adds	r1, r4, r3
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	2030      	movs	r0, #48	; 0x30
 8005b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b46:	4422      	add	r2, r4
 8005b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b50:	3302      	adds	r3, #2
 8005b52:	e7c7      	b.n	8005ae4 <_printf_common+0x58>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4622      	mov	r2, r4
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0e6      	beq.n	8005b30 <_printf_common+0xa4>
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7d9      	b.n	8005b1a <_printf_common+0x8e>
	...

08005b68 <_printf_i>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	7e0f      	ldrb	r7, [r1, #24]
 8005b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b70:	2f78      	cmp	r7, #120	; 0x78
 8005b72:	4691      	mov	r9, r2
 8005b74:	4680      	mov	r8, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b7e:	d807      	bhi.n	8005b90 <_printf_i+0x28>
 8005b80:	2f62      	cmp	r7, #98	; 0x62
 8005b82:	d80a      	bhi.n	8005b9a <_printf_i+0x32>
 8005b84:	2f00      	cmp	r7, #0
 8005b86:	f000 80d8 	beq.w	8005d3a <_printf_i+0x1d2>
 8005b8a:	2f58      	cmp	r7, #88	; 0x58
 8005b8c:	f000 80a3 	beq.w	8005cd6 <_printf_i+0x16e>
 8005b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b98:	e03a      	b.n	8005c10 <_printf_i+0xa8>
 8005b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b9e:	2b15      	cmp	r3, #21
 8005ba0:	d8f6      	bhi.n	8005b90 <_printf_i+0x28>
 8005ba2:	a101      	add	r1, pc, #4	; (adr r1, 8005ba8 <_printf_i+0x40>)
 8005ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005b91 	.word	0x08005b91
 8005bb4:	08005b91 	.word	0x08005b91
 8005bb8:	08005b91 	.word	0x08005b91
 8005bbc:	08005b91 	.word	0x08005b91
 8005bc0:	08005c15 	.word	0x08005c15
 8005bc4:	08005b91 	.word	0x08005b91
 8005bc8:	08005b91 	.word	0x08005b91
 8005bcc:	08005b91 	.word	0x08005b91
 8005bd0:	08005b91 	.word	0x08005b91
 8005bd4:	08005d21 	.word	0x08005d21
 8005bd8:	08005c45 	.word	0x08005c45
 8005bdc:	08005d03 	.word	0x08005d03
 8005be0:	08005b91 	.word	0x08005b91
 8005be4:	08005b91 	.word	0x08005b91
 8005be8:	08005d43 	.word	0x08005d43
 8005bec:	08005b91 	.word	0x08005b91
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005b91 	.word	0x08005b91
 8005bf8:	08005b91 	.word	0x08005b91
 8005bfc:	08005d0b 	.word	0x08005d0b
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	602a      	str	r2, [r5, #0]
 8005c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a3      	b.n	8005d5c <_printf_i+0x1f4>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	6829      	ldr	r1, [r5, #0]
 8005c18:	0606      	lsls	r6, r0, #24
 8005c1a:	f101 0304 	add.w	r3, r1, #4
 8005c1e:	d50a      	bpl.n	8005c36 <_printf_i+0xce>
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	da03      	bge.n	8005c30 <_printf_i+0xc8>
 8005c28:	232d      	movs	r3, #45	; 0x2d
 8005c2a:	4276      	negs	r6, r6
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c30:	485e      	ldr	r0, [pc, #376]	; (8005dac <_printf_i+0x244>)
 8005c32:	230a      	movs	r3, #10
 8005c34:	e019      	b.n	8005c6a <_printf_i+0x102>
 8005c36:	680e      	ldr	r6, [r1, #0]
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3e:	bf18      	it	ne
 8005c40:	b236      	sxthne	r6, r6
 8005c42:	e7ef      	b.n	8005c24 <_printf_i+0xbc>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	1d19      	adds	r1, r3, #4
 8005c4a:	6029      	str	r1, [r5, #0]
 8005c4c:	0601      	lsls	r1, r0, #24
 8005c4e:	d501      	bpl.n	8005c54 <_printf_i+0xec>
 8005c50:	681e      	ldr	r6, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <_printf_i+0xf2>
 8005c54:	0646      	lsls	r6, r0, #25
 8005c56:	d5fb      	bpl.n	8005c50 <_printf_i+0xe8>
 8005c58:	881e      	ldrh	r6, [r3, #0]
 8005c5a:	4854      	ldr	r0, [pc, #336]	; (8005dac <_printf_i+0x244>)
 8005c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c5e:	bf0c      	ite	eq
 8005c60:	2308      	moveq	r3, #8
 8005c62:	230a      	movne	r3, #10
 8005c64:	2100      	movs	r1, #0
 8005c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c6a:	6865      	ldr	r5, [r4, #4]
 8005c6c:	60a5      	str	r5, [r4, #8]
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	bfa2      	ittt	ge
 8005c72:	6821      	ldrge	r1, [r4, #0]
 8005c74:	f021 0104 	bicge.w	r1, r1, #4
 8005c78:	6021      	strge	r1, [r4, #0]
 8005c7a:	b90e      	cbnz	r6, 8005c80 <_printf_i+0x118>
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	d04d      	beq.n	8005d1c <_printf_i+0x1b4>
 8005c80:	4615      	mov	r5, r2
 8005c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c86:	fb03 6711 	mls	r7, r3, r1, r6
 8005c8a:	5dc7      	ldrb	r7, [r0, r7]
 8005c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c90:	4637      	mov	r7, r6
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	460e      	mov	r6, r1
 8005c96:	d9f4      	bls.n	8005c82 <_printf_i+0x11a>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d10b      	bne.n	8005cb4 <_printf_i+0x14c>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07de      	lsls	r6, r3, #31
 8005ca0:	d508      	bpl.n	8005cb4 <_printf_i+0x14c>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6861      	ldr	r1, [r4, #4]
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	bfde      	ittt	le
 8005caa:	2330      	movle	r3, #48	; 0x30
 8005cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb4:	1b52      	subs	r2, r2, r5
 8005cb6:	6122      	str	r2, [r4, #16]
 8005cb8:	f8cd a000 	str.w	sl, [sp]
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	aa03      	add	r2, sp, #12
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	f7ff fee2 	bl	8005a8c <_printf_common>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d14c      	bne.n	8005d66 <_printf_i+0x1fe>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b004      	add	sp, #16
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	4835      	ldr	r0, [pc, #212]	; (8005dac <_printf_i+0x244>)
 8005cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cdc:	6829      	ldr	r1, [r5, #0]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ce4:	6029      	str	r1, [r5, #0]
 8005ce6:	061d      	lsls	r5, r3, #24
 8005ce8:	d514      	bpl.n	8005d14 <_printf_i+0x1ac>
 8005cea:	07df      	lsls	r7, r3, #31
 8005cec:	bf44      	itt	mi
 8005cee:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf2:	6023      	strmi	r3, [r4, #0]
 8005cf4:	b91e      	cbnz	r6, 8005cfe <_printf_i+0x196>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f023 0320 	bic.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	2310      	movs	r3, #16
 8005d00:	e7b0      	b.n	8005c64 <_printf_i+0xfc>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	f043 0320 	orr.w	r3, r3, #32
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	2378      	movs	r3, #120	; 0x78
 8005d0c:	4828      	ldr	r0, [pc, #160]	; (8005db0 <_printf_i+0x248>)
 8005d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d12:	e7e3      	b.n	8005cdc <_printf_i+0x174>
 8005d14:	0659      	lsls	r1, r3, #25
 8005d16:	bf48      	it	mi
 8005d18:	b2b6      	uxthmi	r6, r6
 8005d1a:	e7e6      	b.n	8005cea <_printf_i+0x182>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	e7bb      	b.n	8005c98 <_printf_i+0x130>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	6826      	ldr	r6, [r4, #0]
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6028      	str	r0, [r5, #0]
 8005d2a:	0635      	lsls	r5, r6, #24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0x1cc>
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0x1d2>
 8005d34:	0670      	lsls	r0, r6, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0x1c8>
 8005d38:	8019      	strh	r1, [r3, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	4615      	mov	r5, r2
 8005d40:	e7ba      	b.n	8005cb8 <_printf_i+0x150>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	602a      	str	r2, [r5, #0]
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7fa fa76 	bl	8000240 <memchr>
 8005d54:	b108      	cbz	r0, 8005d5a <_printf_i+0x1f2>
 8005d56:	1b40      	subs	r0, r0, r5
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	e7a8      	b.n	8005cb8 <_printf_i+0x150>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0ab      	beq.n	8005ccc <_printf_i+0x164>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	d413      	bmi.n	8005da2 <_printf_i+0x23a>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e7a4      	b.n	8005cd0 <_printf_i+0x168>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d09b      	beq.n	8005ccc <_printf_i+0x164>
 8005d94:	3501      	adds	r5, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dcf2      	bgt.n	8005d86 <_printf_i+0x21e>
 8005da0:	e7eb      	b.n	8005d7a <_printf_i+0x212>
 8005da2:	2500      	movs	r5, #0
 8005da4:	f104 0619 	add.w	r6, r4, #25
 8005da8:	e7f5      	b.n	8005d96 <_printf_i+0x22e>
 8005daa:	bf00      	nop
 8005dac:	08006a39 	.word	0x08006a39
 8005db0:	08006a4a 	.word	0x08006a4a

08005db4 <siscanf>:
 8005db4:	b40e      	push	{r1, r2, r3}
 8005db6:	b510      	push	{r4, lr}
 8005db8:	b09f      	sub	sp, #124	; 0x7c
 8005dba:	ac21      	add	r4, sp, #132	; 0x84
 8005dbc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005dc0:	f854 2b04 	ldr.w	r2, [r4], #4
 8005dc4:	9201      	str	r2, [sp, #4]
 8005dc6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005dca:	9004      	str	r0, [sp, #16]
 8005dcc:	9008      	str	r0, [sp, #32]
 8005dce:	f7fa fa29 	bl	8000224 <strlen>
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <siscanf+0x50>)
 8005dd4:	9005      	str	r0, [sp, #20]
 8005dd6:	9009      	str	r0, [sp, #36]	; 0x24
 8005dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8005dda:	480b      	ldr	r0, [pc, #44]	; (8005e08 <siscanf+0x54>)
 8005ddc:	9a01      	ldr	r2, [sp, #4]
 8005dde:	6800      	ldr	r0, [r0, #0]
 8005de0:	9403      	str	r4, [sp, #12]
 8005de2:	2300      	movs	r3, #0
 8005de4:	9311      	str	r3, [sp, #68]	; 0x44
 8005de6:	9316      	str	r3, [sp, #88]	; 0x58
 8005de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005df0:	a904      	add	r1, sp, #16
 8005df2:	4623      	mov	r3, r4
 8005df4:	f000 f964 	bl	80060c0 <__ssvfiscanf_r>
 8005df8:	b01f      	add	sp, #124	; 0x7c
 8005dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfe:	b003      	add	sp, #12
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	08005e0d 	.word	0x08005e0d
 8005e08:	20000010 	.word	0x20000010

08005e0c <__seofread>:
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4770      	bx	lr

08005e10 <strcpy>:
 8005e10:	4603      	mov	r3, r0
 8005e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e16:	f803 2b01 	strb.w	r2, [r3], #1
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	d1f9      	bne.n	8005e12 <strcpy+0x2>
 8005e1e:	4770      	bx	lr

08005e20 <strncmp>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	b17a      	cbz	r2, 8005e44 <strncmp+0x24>
 8005e24:	4603      	mov	r3, r0
 8005e26:	3901      	subs	r1, #1
 8005e28:	1884      	adds	r4, r0, r2
 8005e2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e32:	4290      	cmp	r0, r2
 8005e34:	d101      	bne.n	8005e3a <strncmp+0x1a>
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	d101      	bne.n	8005e3e <strncmp+0x1e>
 8005e3a:	1a80      	subs	r0, r0, r2
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d1f3      	bne.n	8005e2a <strncmp+0xa>
 8005e42:	e7fa      	b.n	8005e3a <strncmp+0x1a>
 8005e44:	4610      	mov	r0, r2
 8005e46:	e7f9      	b.n	8005e3c <strncmp+0x1c>

08005e48 <_strtoul_l.constprop.0>:
 8005e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	4f36      	ldr	r7, [pc, #216]	; (8005f28 <_strtoul_l.constprop.0+0xe0>)
 8005e4e:	4686      	mov	lr, r0
 8005e50:	460d      	mov	r5, r1
 8005e52:	4628      	mov	r0, r5
 8005e54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e58:	5de6      	ldrb	r6, [r4, r7]
 8005e5a:	f016 0608 	ands.w	r6, r6, #8
 8005e5e:	d1f8      	bne.n	8005e52 <_strtoul_l.constprop.0+0xa>
 8005e60:	2c2d      	cmp	r4, #45	; 0x2d
 8005e62:	d12f      	bne.n	8005ec4 <_strtoul_l.constprop.0+0x7c>
 8005e64:	782c      	ldrb	r4, [r5, #0]
 8005e66:	2601      	movs	r6, #1
 8005e68:	1c85      	adds	r5, r0, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d057      	beq.n	8005f1e <_strtoul_l.constprop.0+0xd6>
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d109      	bne.n	8005e86 <_strtoul_l.constprop.0+0x3e>
 8005e72:	2c30      	cmp	r4, #48	; 0x30
 8005e74:	d107      	bne.n	8005e86 <_strtoul_l.constprop.0+0x3e>
 8005e76:	7828      	ldrb	r0, [r5, #0]
 8005e78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e7c:	2858      	cmp	r0, #88	; 0x58
 8005e7e:	d149      	bne.n	8005f14 <_strtoul_l.constprop.0+0xcc>
 8005e80:	786c      	ldrb	r4, [r5, #1]
 8005e82:	2310      	movs	r3, #16
 8005e84:	3502      	adds	r5, #2
 8005e86:	f04f 38ff 	mov.w	r8, #4294967295
 8005e8a:	2700      	movs	r7, #0
 8005e8c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005e90:	fb03 f908 	mul.w	r9, r3, r8
 8005e94:	ea6f 0909 	mvn.w	r9, r9
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e9e:	f1bc 0f09 	cmp.w	ip, #9
 8005ea2:	d814      	bhi.n	8005ece <_strtoul_l.constprop.0+0x86>
 8005ea4:	4664      	mov	r4, ip
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	dd22      	ble.n	8005ef0 <_strtoul_l.constprop.0+0xa8>
 8005eaa:	2f00      	cmp	r7, #0
 8005eac:	db1d      	blt.n	8005eea <_strtoul_l.constprop.0+0xa2>
 8005eae:	4580      	cmp	r8, r0
 8005eb0:	d31b      	bcc.n	8005eea <_strtoul_l.constprop.0+0xa2>
 8005eb2:	d101      	bne.n	8005eb8 <_strtoul_l.constprop.0+0x70>
 8005eb4:	45a1      	cmp	r9, r4
 8005eb6:	db18      	blt.n	8005eea <_strtoul_l.constprop.0+0xa2>
 8005eb8:	fb00 4003 	mla	r0, r0, r3, r4
 8005ebc:	2701      	movs	r7, #1
 8005ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ec2:	e7ea      	b.n	8005e9a <_strtoul_l.constprop.0+0x52>
 8005ec4:	2c2b      	cmp	r4, #43	; 0x2b
 8005ec6:	bf04      	itt	eq
 8005ec8:	782c      	ldrbeq	r4, [r5, #0]
 8005eca:	1c85      	addeq	r5, r0, #2
 8005ecc:	e7cd      	b.n	8005e6a <_strtoul_l.constprop.0+0x22>
 8005ece:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ed2:	f1bc 0f19 	cmp.w	ip, #25
 8005ed6:	d801      	bhi.n	8005edc <_strtoul_l.constprop.0+0x94>
 8005ed8:	3c37      	subs	r4, #55	; 0x37
 8005eda:	e7e4      	b.n	8005ea6 <_strtoul_l.constprop.0+0x5e>
 8005edc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ee0:	f1bc 0f19 	cmp.w	ip, #25
 8005ee4:	d804      	bhi.n	8005ef0 <_strtoul_l.constprop.0+0xa8>
 8005ee6:	3c57      	subs	r4, #87	; 0x57
 8005ee8:	e7dd      	b.n	8005ea6 <_strtoul_l.constprop.0+0x5e>
 8005eea:	f04f 37ff 	mov.w	r7, #4294967295
 8005eee:	e7e6      	b.n	8005ebe <_strtoul_l.constprop.0+0x76>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	da07      	bge.n	8005f04 <_strtoul_l.constprop.0+0xbc>
 8005ef4:	2322      	movs	r3, #34	; 0x22
 8005ef6:	f8ce 3000 	str.w	r3, [lr]
 8005efa:	f04f 30ff 	mov.w	r0, #4294967295
 8005efe:	b932      	cbnz	r2, 8005f0e <_strtoul_l.constprop.0+0xc6>
 8005f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f04:	b106      	cbz	r6, 8005f08 <_strtoul_l.constprop.0+0xc0>
 8005f06:	4240      	negs	r0, r0
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d0f9      	beq.n	8005f00 <_strtoul_l.constprop.0+0xb8>
 8005f0c:	b107      	cbz	r7, 8005f10 <_strtoul_l.constprop.0+0xc8>
 8005f0e:	1e69      	subs	r1, r5, #1
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	e7f5      	b.n	8005f00 <_strtoul_l.constprop.0+0xb8>
 8005f14:	2430      	movs	r4, #48	; 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1b5      	bne.n	8005e86 <_strtoul_l.constprop.0+0x3e>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	e7b3      	b.n	8005e86 <_strtoul_l.constprop.0+0x3e>
 8005f1e:	2c30      	cmp	r4, #48	; 0x30
 8005f20:	d0a9      	beq.n	8005e76 <_strtoul_l.constprop.0+0x2e>
 8005f22:	230a      	movs	r3, #10
 8005f24:	e7af      	b.n	8005e86 <_strtoul_l.constprop.0+0x3e>
 8005f26:	bf00      	nop
 8005f28:	08006a5c 	.word	0x08006a5c

08005f2c <_strtoul_r>:
 8005f2c:	f7ff bf8c 	b.w	8005e48 <_strtoul_l.constprop.0>

08005f30 <strtoul>:
 8005f30:	4613      	mov	r3, r2
 8005f32:	460a      	mov	r2, r1
 8005f34:	4601      	mov	r1, r0
 8005f36:	4802      	ldr	r0, [pc, #8]	; (8005f40 <strtoul+0x10>)
 8005f38:	6800      	ldr	r0, [r0, #0]
 8005f3a:	f7ff bf85 	b.w	8005e48 <_strtoul_l.constprop.0>
 8005f3e:	bf00      	nop
 8005f40:	20000010 	.word	0x20000010

08005f44 <__env_lock>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__env_lock+0x8>)
 8005f46:	f7ff bc36 	b.w	80057b6 <__retarget_lock_acquire_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	2000032c 	.word	0x2000032c

08005f50 <__env_unlock>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__env_unlock+0x8>)
 8005f52:	f7ff bc32 	b.w	80057ba <__retarget_lock_release_recursive>
 8005f56:	bf00      	nop
 8005f58:	2000032c 	.word	0x2000032c

08005f5c <memcpy>:
 8005f5c:	440a      	add	r2, r1
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	4770      	bx	lr
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d1f9      	bne.n	8005f6a <memcpy+0xe>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <memmove>:
 8005f78:	4288      	cmp	r0, r1
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	eb01 0402 	add.w	r4, r1, r2
 8005f80:	d902      	bls.n	8005f88 <memmove+0x10>
 8005f82:	4284      	cmp	r4, r0
 8005f84:	4623      	mov	r3, r4
 8005f86:	d807      	bhi.n	8005f98 <memmove+0x20>
 8005f88:	1e43      	subs	r3, r0, #1
 8005f8a:	42a1      	cmp	r1, r4
 8005f8c:	d008      	beq.n	8005fa0 <memmove+0x28>
 8005f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f96:	e7f8      	b.n	8005f8a <memmove+0x12>
 8005f98:	4402      	add	r2, r0
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	428a      	cmp	r2, r1
 8005f9e:	d100      	bne.n	8005fa2 <memmove+0x2a>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005faa:	e7f7      	b.n	8005f9c <memmove+0x24>

08005fac <_realloc_r>:
 8005fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4614      	mov	r4, r2
 8005fb4:	460e      	mov	r6, r1
 8005fb6:	b921      	cbnz	r1, 8005fc2 <_realloc_r+0x16>
 8005fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	f7ff b8bd 	b.w	800513c <_malloc_r>
 8005fc2:	b92a      	cbnz	r2, 8005fd0 <_realloc_r+0x24>
 8005fc4:	f7ff f84e 	bl	8005064 <_free_r>
 8005fc8:	4625      	mov	r5, r4
 8005fca:	4628      	mov	r0, r5
 8005fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd0:	f000 fc36 	bl	8006840 <_malloc_usable_size_r>
 8005fd4:	4284      	cmp	r4, r0
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	d802      	bhi.n	8005fe0 <_realloc_r+0x34>
 8005fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fde:	d812      	bhi.n	8006006 <_realloc_r+0x5a>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff f8aa 	bl	800513c <_malloc_r>
 8005fe8:	4605      	mov	r5, r0
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d0ed      	beq.n	8005fca <_realloc_r+0x1e>
 8005fee:	42bc      	cmp	r4, r7
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	bf28      	it	cs
 8005ff6:	463a      	movcs	r2, r7
 8005ff8:	f7ff ffb0 	bl	8005f5c <memcpy>
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7ff f830 	bl	8005064 <_free_r>
 8006004:	e7e1      	b.n	8005fca <_realloc_r+0x1e>
 8006006:	4635      	mov	r5, r6
 8006008:	e7df      	b.n	8005fca <_realloc_r+0x1e>

0800600a <_sungetc_r>:
 800600a:	b538      	push	{r3, r4, r5, lr}
 800600c:	1c4b      	adds	r3, r1, #1
 800600e:	4614      	mov	r4, r2
 8006010:	d103      	bne.n	800601a <_sungetc_r+0x10>
 8006012:	f04f 35ff 	mov.w	r5, #4294967295
 8006016:	4628      	mov	r0, r5
 8006018:	bd38      	pop	{r3, r4, r5, pc}
 800601a:	8993      	ldrh	r3, [r2, #12]
 800601c:	f023 0320 	bic.w	r3, r3, #32
 8006020:	8193      	strh	r3, [r2, #12]
 8006022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006024:	6852      	ldr	r2, [r2, #4]
 8006026:	b2cd      	uxtb	r5, r1
 8006028:	b18b      	cbz	r3, 800604e <_sungetc_r+0x44>
 800602a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800602c:	4293      	cmp	r3, r2
 800602e:	dd08      	ble.n	8006042 <_sungetc_r+0x38>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	1e5a      	subs	r2, r3, #1
 8006034:	6022      	str	r2, [r4, #0]
 8006036:	f803 5c01 	strb.w	r5, [r3, #-1]
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	3301      	adds	r3, #1
 800603e:	6063      	str	r3, [r4, #4]
 8006040:	e7e9      	b.n	8006016 <_sungetc_r+0xc>
 8006042:	4621      	mov	r1, r4
 8006044:	f000 fbc2 	bl	80067cc <__submore>
 8006048:	2800      	cmp	r0, #0
 800604a:	d0f1      	beq.n	8006030 <_sungetc_r+0x26>
 800604c:	e7e1      	b.n	8006012 <_sungetc_r+0x8>
 800604e:	6921      	ldr	r1, [r4, #16]
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	b151      	cbz	r1, 800606a <_sungetc_r+0x60>
 8006054:	4299      	cmp	r1, r3
 8006056:	d208      	bcs.n	800606a <_sungetc_r+0x60>
 8006058:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800605c:	42a9      	cmp	r1, r5
 800605e:	d104      	bne.n	800606a <_sungetc_r+0x60>
 8006060:	3b01      	subs	r3, #1
 8006062:	3201      	adds	r2, #1
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	6062      	str	r2, [r4, #4]
 8006068:	e7d5      	b.n	8006016 <_sungetc_r+0xc>
 800606a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800606e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006072:	6363      	str	r3, [r4, #52]	; 0x34
 8006074:	2303      	movs	r3, #3
 8006076:	63a3      	str	r3, [r4, #56]	; 0x38
 8006078:	4623      	mov	r3, r4
 800607a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	2301      	movs	r3, #1
 8006082:	e7dc      	b.n	800603e <_sungetc_r+0x34>

08006084 <__ssrefill_r>:
 8006084:	b510      	push	{r4, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800608a:	b169      	cbz	r1, 80060a8 <__ssrefill_r+0x24>
 800608c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006090:	4299      	cmp	r1, r3
 8006092:	d001      	beq.n	8006098 <__ssrefill_r+0x14>
 8006094:	f7fe ffe6 	bl	8005064 <_free_r>
 8006098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800609a:	6063      	str	r3, [r4, #4]
 800609c:	2000      	movs	r0, #0
 800609e:	6360      	str	r0, [r4, #52]	; 0x34
 80060a0:	b113      	cbz	r3, 80060a8 <__ssrefill_r+0x24>
 80060a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd10      	pop	{r4, pc}
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	6063      	str	r3, [r4, #4]
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e7f3      	b.n	80060a6 <__ssrefill_r+0x22>
	...

080060c0 <__ssvfiscanf_r>:
 80060c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80060ca:	2100      	movs	r1, #0
 80060cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80060d0:	49a6      	ldr	r1, [pc, #664]	; (800636c <__ssvfiscanf_r+0x2ac>)
 80060d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80060d4:	f10d 0804 	add.w	r8, sp, #4
 80060d8:	49a5      	ldr	r1, [pc, #660]	; (8006370 <__ssvfiscanf_r+0x2b0>)
 80060da:	4fa6      	ldr	r7, [pc, #664]	; (8006374 <__ssvfiscanf_r+0x2b4>)
 80060dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006378 <__ssvfiscanf_r+0x2b8>
 80060e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80060e4:	4606      	mov	r6, r0
 80060e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	7813      	ldrb	r3, [r2, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 815a 	beq.w	80063a6 <__ssvfiscanf_r+0x2e6>
 80060f2:	5dd9      	ldrb	r1, [r3, r7]
 80060f4:	f011 0108 	ands.w	r1, r1, #8
 80060f8:	f102 0501 	add.w	r5, r2, #1
 80060fc:	d019      	beq.n	8006132 <__ssvfiscanf_r+0x72>
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd0f      	ble.n	8006124 <__ssvfiscanf_r+0x64>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	5cba      	ldrb	r2, [r7, r2]
 800610a:	0712      	lsls	r2, r2, #28
 800610c:	d401      	bmi.n	8006112 <__ssvfiscanf_r+0x52>
 800610e:	462a      	mov	r2, r5
 8006110:	e7eb      	b.n	80060ea <__ssvfiscanf_r+0x2a>
 8006112:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006114:	3201      	adds	r2, #1
 8006116:	9245      	str	r2, [sp, #276]	; 0x114
 8006118:	6862      	ldr	r2, [r4, #4]
 800611a:	3301      	adds	r3, #1
 800611c:	3a01      	subs	r2, #1
 800611e:	6062      	str	r2, [r4, #4]
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	e7ec      	b.n	80060fe <__ssvfiscanf_r+0x3e>
 8006124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	4798      	blx	r3
 800612c:	2800      	cmp	r0, #0
 800612e:	d0e9      	beq.n	8006104 <__ssvfiscanf_r+0x44>
 8006130:	e7ed      	b.n	800610e <__ssvfiscanf_r+0x4e>
 8006132:	2b25      	cmp	r3, #37	; 0x25
 8006134:	d012      	beq.n	800615c <__ssvfiscanf_r+0x9c>
 8006136:	469a      	mov	sl, r3
 8006138:	6863      	ldr	r3, [r4, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f340 8091 	ble.w	8006262 <__ssvfiscanf_r+0x1a2>
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	7813      	ldrb	r3, [r2, #0]
 8006144:	4553      	cmp	r3, sl
 8006146:	f040 812e 	bne.w	80063a6 <__ssvfiscanf_r+0x2e6>
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	3b01      	subs	r3, #1
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006152:	3201      	adds	r2, #1
 8006154:	3301      	adds	r3, #1
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	9345      	str	r3, [sp, #276]	; 0x114
 800615a:	e7d8      	b.n	800610e <__ssvfiscanf_r+0x4e>
 800615c:	9141      	str	r1, [sp, #260]	; 0x104
 800615e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006160:	7853      	ldrb	r3, [r2, #1]
 8006162:	2b2a      	cmp	r3, #42	; 0x2a
 8006164:	bf02      	ittt	eq
 8006166:	2310      	moveq	r3, #16
 8006168:	1c95      	addeq	r5, r2, #2
 800616a:	9341      	streq	r3, [sp, #260]	; 0x104
 800616c:	220a      	movs	r2, #10
 800616e:	46aa      	mov	sl, r5
 8006170:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006174:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d91d      	bls.n	80061b8 <__ssvfiscanf_r+0xf8>
 800617c:	487e      	ldr	r0, [pc, #504]	; (8006378 <__ssvfiscanf_r+0x2b8>)
 800617e:	2203      	movs	r2, #3
 8006180:	f7fa f85e 	bl	8000240 <memchr>
 8006184:	b140      	cbz	r0, 8006198 <__ssvfiscanf_r+0xd8>
 8006186:	2301      	movs	r3, #1
 8006188:	eba0 0009 	sub.w	r0, r0, r9
 800618c:	fa03 f000 	lsl.w	r0, r3, r0
 8006190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006192:	4318      	orrs	r0, r3
 8006194:	9041      	str	r0, [sp, #260]	; 0x104
 8006196:	4655      	mov	r5, sl
 8006198:	f815 3b01 	ldrb.w	r3, [r5], #1
 800619c:	2b78      	cmp	r3, #120	; 0x78
 800619e:	d806      	bhi.n	80061ae <__ssvfiscanf_r+0xee>
 80061a0:	2b57      	cmp	r3, #87	; 0x57
 80061a2:	d810      	bhi.n	80061c6 <__ssvfiscanf_r+0x106>
 80061a4:	2b25      	cmp	r3, #37	; 0x25
 80061a6:	d0c6      	beq.n	8006136 <__ssvfiscanf_r+0x76>
 80061a8:	d856      	bhi.n	8006258 <__ssvfiscanf_r+0x198>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d064      	beq.n	8006278 <__ssvfiscanf_r+0x1b8>
 80061ae:	2303      	movs	r3, #3
 80061b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80061b2:	230a      	movs	r3, #10
 80061b4:	9342      	str	r3, [sp, #264]	; 0x108
 80061b6:	e071      	b.n	800629c <__ssvfiscanf_r+0x1dc>
 80061b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80061ba:	fb02 1103 	mla	r1, r2, r3, r1
 80061be:	3930      	subs	r1, #48	; 0x30
 80061c0:	9143      	str	r1, [sp, #268]	; 0x10c
 80061c2:	4655      	mov	r5, sl
 80061c4:	e7d3      	b.n	800616e <__ssvfiscanf_r+0xae>
 80061c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80061ca:	2a20      	cmp	r2, #32
 80061cc:	d8ef      	bhi.n	80061ae <__ssvfiscanf_r+0xee>
 80061ce:	a101      	add	r1, pc, #4	; (adr r1, 80061d4 <__ssvfiscanf_r+0x114>)
 80061d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061d4:	08006287 	.word	0x08006287
 80061d8:	080061af 	.word	0x080061af
 80061dc:	080061af 	.word	0x080061af
 80061e0:	080062e5 	.word	0x080062e5
 80061e4:	080061af 	.word	0x080061af
 80061e8:	080061af 	.word	0x080061af
 80061ec:	080061af 	.word	0x080061af
 80061f0:	080061af 	.word	0x080061af
 80061f4:	080061af 	.word	0x080061af
 80061f8:	080061af 	.word	0x080061af
 80061fc:	080061af 	.word	0x080061af
 8006200:	080062fb 	.word	0x080062fb
 8006204:	080062d1 	.word	0x080062d1
 8006208:	0800625f 	.word	0x0800625f
 800620c:	0800625f 	.word	0x0800625f
 8006210:	0800625f 	.word	0x0800625f
 8006214:	080061af 	.word	0x080061af
 8006218:	080062d5 	.word	0x080062d5
 800621c:	080061af 	.word	0x080061af
 8006220:	080061af 	.word	0x080061af
 8006224:	080061af 	.word	0x080061af
 8006228:	080061af 	.word	0x080061af
 800622c:	0800630b 	.word	0x0800630b
 8006230:	080062dd 	.word	0x080062dd
 8006234:	0800627f 	.word	0x0800627f
 8006238:	080061af 	.word	0x080061af
 800623c:	080061af 	.word	0x080061af
 8006240:	08006307 	.word	0x08006307
 8006244:	080061af 	.word	0x080061af
 8006248:	080062d1 	.word	0x080062d1
 800624c:	080061af 	.word	0x080061af
 8006250:	080061af 	.word	0x080061af
 8006254:	08006287 	.word	0x08006287
 8006258:	3b45      	subs	r3, #69	; 0x45
 800625a:	2b02      	cmp	r3, #2
 800625c:	d8a7      	bhi.n	80061ae <__ssvfiscanf_r+0xee>
 800625e:	2305      	movs	r3, #5
 8006260:	e01b      	b.n	800629a <__ssvfiscanf_r+0x1da>
 8006262:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006264:	4621      	mov	r1, r4
 8006266:	4630      	mov	r0, r6
 8006268:	4798      	blx	r3
 800626a:	2800      	cmp	r0, #0
 800626c:	f43f af68 	beq.w	8006140 <__ssvfiscanf_r+0x80>
 8006270:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006272:	2800      	cmp	r0, #0
 8006274:	f040 808d 	bne.w	8006392 <__ssvfiscanf_r+0x2d2>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	e08f      	b.n	800639e <__ssvfiscanf_r+0x2de>
 800627e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006280:	f042 0220 	orr.w	r2, r2, #32
 8006284:	9241      	str	r2, [sp, #260]	; 0x104
 8006286:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628c:	9241      	str	r2, [sp, #260]	; 0x104
 800628e:	2210      	movs	r2, #16
 8006290:	2b6f      	cmp	r3, #111	; 0x6f
 8006292:	9242      	str	r2, [sp, #264]	; 0x108
 8006294:	bf34      	ite	cc
 8006296:	2303      	movcc	r3, #3
 8006298:	2304      	movcs	r3, #4
 800629a:	9347      	str	r3, [sp, #284]	; 0x11c
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dd42      	ble.n	8006328 <__ssvfiscanf_r+0x268>
 80062a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062a4:	0659      	lsls	r1, r3, #25
 80062a6:	d404      	bmi.n	80062b2 <__ssvfiscanf_r+0x1f2>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	5cba      	ldrb	r2, [r7, r2]
 80062ae:	0712      	lsls	r2, r2, #28
 80062b0:	d441      	bmi.n	8006336 <__ssvfiscanf_r+0x276>
 80062b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	dc50      	bgt.n	800635a <__ssvfiscanf_r+0x29a>
 80062b8:	466b      	mov	r3, sp
 80062ba:	4622      	mov	r2, r4
 80062bc:	a941      	add	r1, sp, #260	; 0x104
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f876 	bl	80063b0 <_scanf_chars>
 80062c4:	2801      	cmp	r0, #1
 80062c6:	d06e      	beq.n	80063a6 <__ssvfiscanf_r+0x2e6>
 80062c8:	2802      	cmp	r0, #2
 80062ca:	f47f af20 	bne.w	800610e <__ssvfiscanf_r+0x4e>
 80062ce:	e7cf      	b.n	8006270 <__ssvfiscanf_r+0x1b0>
 80062d0:	220a      	movs	r2, #10
 80062d2:	e7dd      	b.n	8006290 <__ssvfiscanf_r+0x1d0>
 80062d4:	2300      	movs	r3, #0
 80062d6:	9342      	str	r3, [sp, #264]	; 0x108
 80062d8:	2303      	movs	r3, #3
 80062da:	e7de      	b.n	800629a <__ssvfiscanf_r+0x1da>
 80062dc:	2308      	movs	r3, #8
 80062de:	9342      	str	r3, [sp, #264]	; 0x108
 80062e0:	2304      	movs	r3, #4
 80062e2:	e7da      	b.n	800629a <__ssvfiscanf_r+0x1da>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4640      	mov	r0, r8
 80062e8:	f000 f9b4 	bl	8006654 <__sccl>
 80062ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f2:	9341      	str	r3, [sp, #260]	; 0x104
 80062f4:	4605      	mov	r5, r0
 80062f6:	2301      	movs	r3, #1
 80062f8:	e7cf      	b.n	800629a <__ssvfiscanf_r+0x1da>
 80062fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006300:	9341      	str	r3, [sp, #260]	; 0x104
 8006302:	2300      	movs	r3, #0
 8006304:	e7c9      	b.n	800629a <__ssvfiscanf_r+0x1da>
 8006306:	2302      	movs	r3, #2
 8006308:	e7c7      	b.n	800629a <__ssvfiscanf_r+0x1da>
 800630a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800630c:	06c3      	lsls	r3, r0, #27
 800630e:	f53f aefe 	bmi.w	800610e <__ssvfiscanf_r+0x4e>
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006316:	1d19      	adds	r1, r3, #4
 8006318:	9100      	str	r1, [sp, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f010 0f01 	tst.w	r0, #1
 8006320:	bf14      	ite	ne
 8006322:	801a      	strhne	r2, [r3, #0]
 8006324:	601a      	streq	r2, [r3, #0]
 8006326:	e6f2      	b.n	800610e <__ssvfiscanf_r+0x4e>
 8006328:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800632a:	4621      	mov	r1, r4
 800632c:	4630      	mov	r0, r6
 800632e:	4798      	blx	r3
 8006330:	2800      	cmp	r0, #0
 8006332:	d0b6      	beq.n	80062a2 <__ssvfiscanf_r+0x1e2>
 8006334:	e79c      	b.n	8006270 <__ssvfiscanf_r+0x1b0>
 8006336:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006338:	3201      	adds	r2, #1
 800633a:	9245      	str	r2, [sp, #276]	; 0x114
 800633c:	6862      	ldr	r2, [r4, #4]
 800633e:	3a01      	subs	r2, #1
 8006340:	2a00      	cmp	r2, #0
 8006342:	6062      	str	r2, [r4, #4]
 8006344:	dd02      	ble.n	800634c <__ssvfiscanf_r+0x28c>
 8006346:	3301      	adds	r3, #1
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	e7ad      	b.n	80062a8 <__ssvfiscanf_r+0x1e8>
 800634c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800634e:	4621      	mov	r1, r4
 8006350:	4630      	mov	r0, r6
 8006352:	4798      	blx	r3
 8006354:	2800      	cmp	r0, #0
 8006356:	d0a7      	beq.n	80062a8 <__ssvfiscanf_r+0x1e8>
 8006358:	e78a      	b.n	8006270 <__ssvfiscanf_r+0x1b0>
 800635a:	2b04      	cmp	r3, #4
 800635c:	dc0e      	bgt.n	800637c <__ssvfiscanf_r+0x2bc>
 800635e:	466b      	mov	r3, sp
 8006360:	4622      	mov	r2, r4
 8006362:	a941      	add	r1, sp, #260	; 0x104
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f87d 	bl	8006464 <_scanf_i>
 800636a:	e7ab      	b.n	80062c4 <__ssvfiscanf_r+0x204>
 800636c:	0800600b 	.word	0x0800600b
 8006370:	08006085 	.word	0x08006085
 8006374:	08006a5c 	.word	0x08006a5c
 8006378:	08006a2e 	.word	0x08006a2e
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <__ssvfiscanf_r+0x2ec>)
 800637e:	2b00      	cmp	r3, #0
 8006380:	f43f aec5 	beq.w	800610e <__ssvfiscanf_r+0x4e>
 8006384:	466b      	mov	r3, sp
 8006386:	4622      	mov	r2, r4
 8006388:	a941      	add	r1, sp, #260	; 0x104
 800638a:	4630      	mov	r0, r6
 800638c:	f3af 8000 	nop.w
 8006390:	e798      	b.n	80062c4 <__ssvfiscanf_r+0x204>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006398:	bf18      	it	ne
 800639a:	f04f 30ff 	movne.w	r0, #4294967295
 800639e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80063a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063a8:	e7f9      	b.n	800639e <__ssvfiscanf_r+0x2de>
 80063aa:	bf00      	nop
 80063ac:	00000000 	.word	0x00000000

080063b0 <_scanf_chars>:
 80063b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	4615      	mov	r5, r2
 80063b6:	688a      	ldr	r2, [r1, #8]
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b932      	cbnz	r2, 80063cc <_scanf_chars+0x1c>
 80063be:	698a      	ldr	r2, [r1, #24]
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	bf0c      	ite	eq
 80063c4:	2201      	moveq	r2, #1
 80063c6:	f04f 32ff 	movne.w	r2, #4294967295
 80063ca:	608a      	str	r2, [r1, #8]
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006460 <_scanf_chars+0xb0>
 80063d2:	06d1      	lsls	r1, r2, #27
 80063d4:	bf5f      	itttt	pl
 80063d6:	681a      	ldrpl	r2, [r3, #0]
 80063d8:	1d11      	addpl	r1, r2, #4
 80063da:	6019      	strpl	r1, [r3, #0]
 80063dc:	6816      	ldrpl	r6, [r2, #0]
 80063de:	2700      	movs	r7, #0
 80063e0:	69a0      	ldr	r0, [r4, #24]
 80063e2:	b188      	cbz	r0, 8006408 <_scanf_chars+0x58>
 80063e4:	2801      	cmp	r0, #1
 80063e6:	d107      	bne.n	80063f8 <_scanf_chars+0x48>
 80063e8:	682a      	ldr	r2, [r5, #0]
 80063ea:	7811      	ldrb	r1, [r2, #0]
 80063ec:	6962      	ldr	r2, [r4, #20]
 80063ee:	5c52      	ldrb	r2, [r2, r1]
 80063f0:	b952      	cbnz	r2, 8006408 <_scanf_chars+0x58>
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	d031      	beq.n	800645a <_scanf_chars+0xaa>
 80063f6:	e022      	b.n	800643e <_scanf_chars+0x8e>
 80063f8:	2802      	cmp	r0, #2
 80063fa:	d120      	bne.n	800643e <_scanf_chars+0x8e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006404:	071b      	lsls	r3, r3, #28
 8006406:	d41a      	bmi.n	800643e <_scanf_chars+0x8e>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	06da      	lsls	r2, r3, #27
 800640c:	bf5e      	ittt	pl
 800640e:	682b      	ldrpl	r3, [r5, #0]
 8006410:	781b      	ldrbpl	r3, [r3, #0]
 8006412:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006416:	682a      	ldr	r2, [r5, #0]
 8006418:	686b      	ldr	r3, [r5, #4]
 800641a:	3201      	adds	r2, #1
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	68a2      	ldr	r2, [r4, #8]
 8006420:	3b01      	subs	r3, #1
 8006422:	3a01      	subs	r2, #1
 8006424:	606b      	str	r3, [r5, #4]
 8006426:	3701      	adds	r7, #1
 8006428:	60a2      	str	r2, [r4, #8]
 800642a:	b142      	cbz	r2, 800643e <_scanf_chars+0x8e>
 800642c:	2b00      	cmp	r3, #0
 800642e:	dcd7      	bgt.n	80063e0 <_scanf_chars+0x30>
 8006430:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006434:	4629      	mov	r1, r5
 8006436:	4640      	mov	r0, r8
 8006438:	4798      	blx	r3
 800643a:	2800      	cmp	r0, #0
 800643c:	d0d0      	beq.n	80063e0 <_scanf_chars+0x30>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f013 0310 	ands.w	r3, r3, #16
 8006444:	d105      	bne.n	8006452 <_scanf_chars+0xa2>
 8006446:	68e2      	ldr	r2, [r4, #12]
 8006448:	3201      	adds	r2, #1
 800644a:	60e2      	str	r2, [r4, #12]
 800644c:	69a2      	ldr	r2, [r4, #24]
 800644e:	b102      	cbz	r2, 8006452 <_scanf_chars+0xa2>
 8006450:	7033      	strb	r3, [r6, #0]
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	443b      	add	r3, r7
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	2000      	movs	r0, #0
 800645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645e:	bf00      	nop
 8006460:	08006a5c 	.word	0x08006a5c

08006464 <_scanf_i>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	4698      	mov	r8, r3
 800646a:	4b76      	ldr	r3, [pc, #472]	; (8006644 <_scanf_i+0x1e0>)
 800646c:	460c      	mov	r4, r1
 800646e:	4682      	mov	sl, r0
 8006470:	4616      	mov	r6, r2
 8006472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006476:	b087      	sub	sp, #28
 8006478:	ab03      	add	r3, sp, #12
 800647a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800647e:	4b72      	ldr	r3, [pc, #456]	; (8006648 <_scanf_i+0x1e4>)
 8006480:	69a1      	ldr	r1, [r4, #24]
 8006482:	4a72      	ldr	r2, [pc, #456]	; (800664c <_scanf_i+0x1e8>)
 8006484:	2903      	cmp	r1, #3
 8006486:	bf18      	it	ne
 8006488:	461a      	movne	r2, r3
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	9201      	str	r2, [sp, #4]
 800648e:	1e5a      	subs	r2, r3, #1
 8006490:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006494:	bf88      	it	hi
 8006496:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800649a:	4627      	mov	r7, r4
 800649c:	bf82      	ittt	hi
 800649e:	eb03 0905 	addhi.w	r9, r3, r5
 80064a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064a6:	60a3      	strhi	r3, [r4, #8]
 80064a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80064ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80064b0:	bf98      	it	ls
 80064b2:	f04f 0900 	movls.w	r9, #0
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	463d      	mov	r5, r7
 80064ba:	f04f 0b00 	mov.w	fp, #0
 80064be:	6831      	ldr	r1, [r6, #0]
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	7809      	ldrb	r1, [r1, #0]
 80064c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f7f9 feb9 	bl	8000240 <memchr>
 80064ce:	b328      	cbz	r0, 800651c <_scanf_i+0xb8>
 80064d0:	f1bb 0f01 	cmp.w	fp, #1
 80064d4:	d159      	bne.n	800658a <_scanf_i+0x126>
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	b92a      	cbnz	r2, 80064e6 <_scanf_i+0x82>
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	2308      	movs	r3, #8
 80064de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80064ec:	6022      	str	r2, [r4, #0]
 80064ee:	68a2      	ldr	r2, [r4, #8]
 80064f0:	1e51      	subs	r1, r2, #1
 80064f2:	60a1      	str	r1, [r4, #8]
 80064f4:	b192      	cbz	r2, 800651c <_scanf_i+0xb8>
 80064f6:	6832      	ldr	r2, [r6, #0]
 80064f8:	1c51      	adds	r1, r2, #1
 80064fa:	6031      	str	r1, [r6, #0]
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	f805 2b01 	strb.w	r2, [r5], #1
 8006502:	6872      	ldr	r2, [r6, #4]
 8006504:	3a01      	subs	r2, #1
 8006506:	2a00      	cmp	r2, #0
 8006508:	6072      	str	r2, [r6, #4]
 800650a:	dc07      	bgt.n	800651c <_scanf_i+0xb8>
 800650c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006510:	4631      	mov	r1, r6
 8006512:	4650      	mov	r0, sl
 8006514:	4790      	blx	r2
 8006516:	2800      	cmp	r0, #0
 8006518:	f040 8085 	bne.w	8006626 <_scanf_i+0x1c2>
 800651c:	f10b 0b01 	add.w	fp, fp, #1
 8006520:	f1bb 0f03 	cmp.w	fp, #3
 8006524:	d1cb      	bne.n	80064be <_scanf_i+0x5a>
 8006526:	6863      	ldr	r3, [r4, #4]
 8006528:	b90b      	cbnz	r3, 800652e <_scanf_i+0xca>
 800652a:	230a      	movs	r3, #10
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	4947      	ldr	r1, [pc, #284]	; (8006650 <_scanf_i+0x1ec>)
 8006532:	6960      	ldr	r0, [r4, #20]
 8006534:	1ac9      	subs	r1, r1, r3
 8006536:	f000 f88d 	bl	8006654 <__sccl>
 800653a:	f04f 0b00 	mov.w	fp, #0
 800653e:	68a3      	ldr	r3, [r4, #8]
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03d      	beq.n	80065c2 <_scanf_i+0x15e>
 8006546:	6831      	ldr	r1, [r6, #0]
 8006548:	6960      	ldr	r0, [r4, #20]
 800654a:	f891 c000 	ldrb.w	ip, [r1]
 800654e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006552:	2800      	cmp	r0, #0
 8006554:	d035      	beq.n	80065c2 <_scanf_i+0x15e>
 8006556:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800655a:	d124      	bne.n	80065a6 <_scanf_i+0x142>
 800655c:	0510      	lsls	r0, r2, #20
 800655e:	d522      	bpl.n	80065a6 <_scanf_i+0x142>
 8006560:	f10b 0b01 	add.w	fp, fp, #1
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	d003      	beq.n	8006572 <_scanf_i+0x10e>
 800656a:	3301      	adds	r3, #1
 800656c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	6873      	ldr	r3, [r6, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	6073      	str	r3, [r6, #4]
 800657a:	dd1b      	ble.n	80065b4 <_scanf_i+0x150>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	3b01      	subs	r3, #1
 8006586:	60a3      	str	r3, [r4, #8]
 8006588:	e7d9      	b.n	800653e <_scanf_i+0xda>
 800658a:	f1bb 0f02 	cmp.w	fp, #2
 800658e:	d1ae      	bne.n	80064ee <_scanf_i+0x8a>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006596:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800659a:	d1bf      	bne.n	800651c <_scanf_i+0xb8>
 800659c:	2310      	movs	r3, #16
 800659e:	6063      	str	r3, [r4, #4]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	e7a2      	b.n	80064ec <_scanf_i+0x88>
 80065a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	780b      	ldrb	r3, [r1, #0]
 80065ae:	f805 3b01 	strb.w	r3, [r5], #1
 80065b2:	e7de      	b.n	8006572 <_scanf_i+0x10e>
 80065b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065b8:	4631      	mov	r1, r6
 80065ba:	4650      	mov	r0, sl
 80065bc:	4798      	blx	r3
 80065be:	2800      	cmp	r0, #0
 80065c0:	d0df      	beq.n	8006582 <_scanf_i+0x11e>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	05db      	lsls	r3, r3, #23
 80065c6:	d50d      	bpl.n	80065e4 <_scanf_i+0x180>
 80065c8:	42bd      	cmp	r5, r7
 80065ca:	d909      	bls.n	80065e0 <_scanf_i+0x17c>
 80065cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80065d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d4:	4632      	mov	r2, r6
 80065d6:	4650      	mov	r0, sl
 80065d8:	4798      	blx	r3
 80065da:	f105 39ff 	add.w	r9, r5, #4294967295
 80065de:	464d      	mov	r5, r9
 80065e0:	42bd      	cmp	r5, r7
 80065e2:	d02d      	beq.n	8006640 <_scanf_i+0x1dc>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	f012 0210 	ands.w	r2, r2, #16
 80065ea:	d113      	bne.n	8006614 <_scanf_i+0x1b0>
 80065ec:	702a      	strb	r2, [r5, #0]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	9e01      	ldr	r6, [sp, #4]
 80065f2:	4639      	mov	r1, r7
 80065f4:	4650      	mov	r0, sl
 80065f6:	47b0      	blx	r6
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	f011 0f20 	tst.w	r1, #32
 8006602:	d013      	beq.n	800662c <_scanf_i+0x1c8>
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	f8c8 2000 	str.w	r2, [r8]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6018      	str	r0, [r3, #0]
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60e3      	str	r3, [r4, #12]
 8006614:	1bed      	subs	r5, r5, r7
 8006616:	44ab      	add	fp, r5
 8006618:	6925      	ldr	r5, [r4, #16]
 800661a:	445d      	add	r5, fp
 800661c:	6125      	str	r5, [r4, #16]
 800661e:	2000      	movs	r0, #0
 8006620:	b007      	add	sp, #28
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	f04f 0b00 	mov.w	fp, #0
 800662a:	e7ca      	b.n	80065c2 <_scanf_i+0x15e>
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	f8c8 2000 	str.w	r2, [r8]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f011 0f01 	tst.w	r1, #1
 8006638:	bf14      	ite	ne
 800663a:	8018      	strhne	r0, [r3, #0]
 800663c:	6018      	streq	r0, [r3, #0]
 800663e:	e7e6      	b.n	800660e <_scanf_i+0x1aa>
 8006640:	2001      	movs	r0, #1
 8006642:	e7ed      	b.n	8006620 <_scanf_i+0x1bc>
 8006644:	08006908 	.word	0x08006908
 8006648:	08005f2d 	.word	0x08005f2d
 800664c:	080067c9 	.word	0x080067c9
 8006650:	08006bd5 	.word	0x08006bd5

08006654 <__sccl>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	780b      	ldrb	r3, [r1, #0]
 8006658:	4604      	mov	r4, r0
 800665a:	2b5e      	cmp	r3, #94	; 0x5e
 800665c:	bf0b      	itete	eq
 800665e:	784b      	ldrbeq	r3, [r1, #1]
 8006660:	1c48      	addne	r0, r1, #1
 8006662:	1c88      	addeq	r0, r1, #2
 8006664:	2200      	movne	r2, #0
 8006666:	bf08      	it	eq
 8006668:	2201      	moveq	r2, #1
 800666a:	1e61      	subs	r1, r4, #1
 800666c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006670:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006674:	42a9      	cmp	r1, r5
 8006676:	d1fb      	bne.n	8006670 <__sccl+0x1c>
 8006678:	b90b      	cbnz	r3, 800667e <__sccl+0x2a>
 800667a:	3801      	subs	r0, #1
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	f082 0201 	eor.w	r2, r2, #1
 8006682:	54e2      	strb	r2, [r4, r3]
 8006684:	4605      	mov	r5, r0
 8006686:	4628      	mov	r0, r5
 8006688:	f810 1b01 	ldrb.w	r1, [r0], #1
 800668c:	292d      	cmp	r1, #45	; 0x2d
 800668e:	d006      	beq.n	800669e <__sccl+0x4a>
 8006690:	295d      	cmp	r1, #93	; 0x5d
 8006692:	d0f3      	beq.n	800667c <__sccl+0x28>
 8006694:	b909      	cbnz	r1, 800669a <__sccl+0x46>
 8006696:	4628      	mov	r0, r5
 8006698:	e7f0      	b.n	800667c <__sccl+0x28>
 800669a:	460b      	mov	r3, r1
 800669c:	e7f1      	b.n	8006682 <__sccl+0x2e>
 800669e:	786e      	ldrb	r6, [r5, #1]
 80066a0:	2e5d      	cmp	r6, #93	; 0x5d
 80066a2:	d0fa      	beq.n	800669a <__sccl+0x46>
 80066a4:	42b3      	cmp	r3, r6
 80066a6:	dcf8      	bgt.n	800669a <__sccl+0x46>
 80066a8:	3502      	adds	r5, #2
 80066aa:	4619      	mov	r1, r3
 80066ac:	3101      	adds	r1, #1
 80066ae:	428e      	cmp	r6, r1
 80066b0:	5462      	strb	r2, [r4, r1]
 80066b2:	dcfb      	bgt.n	80066ac <__sccl+0x58>
 80066b4:	1af1      	subs	r1, r6, r3
 80066b6:	3901      	subs	r1, #1
 80066b8:	1c58      	adds	r0, r3, #1
 80066ba:	42b3      	cmp	r3, r6
 80066bc:	bfa8      	it	ge
 80066be:	2100      	movge	r1, #0
 80066c0:	1843      	adds	r3, r0, r1
 80066c2:	e7e0      	b.n	8006686 <__sccl+0x32>

080066c4 <_strtol_l.constprop.0>:
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ca:	d001      	beq.n	80066d0 <_strtol_l.constprop.0+0xc>
 80066cc:	2b24      	cmp	r3, #36	; 0x24
 80066ce:	d906      	bls.n	80066de <_strtol_l.constprop.0+0x1a>
 80066d0:	f7fe fa1c 	bl	8004b0c <__errno>
 80066d4:	2316      	movs	r3, #22
 80066d6:	6003      	str	r3, [r0, #0]
 80066d8:	2000      	movs	r0, #0
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067c4 <_strtol_l.constprop.0+0x100>
 80066e2:	460d      	mov	r5, r1
 80066e4:	462e      	mov	r6, r5
 80066e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 80066ee:	f017 0708 	ands.w	r7, r7, #8
 80066f2:	d1f7      	bne.n	80066e4 <_strtol_l.constprop.0+0x20>
 80066f4:	2c2d      	cmp	r4, #45	; 0x2d
 80066f6:	d132      	bne.n	800675e <_strtol_l.constprop.0+0x9a>
 80066f8:	782c      	ldrb	r4, [r5, #0]
 80066fa:	2701      	movs	r7, #1
 80066fc:	1cb5      	adds	r5, r6, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d05b      	beq.n	80067ba <_strtol_l.constprop.0+0xf6>
 8006702:	2b10      	cmp	r3, #16
 8006704:	d109      	bne.n	800671a <_strtol_l.constprop.0+0x56>
 8006706:	2c30      	cmp	r4, #48	; 0x30
 8006708:	d107      	bne.n	800671a <_strtol_l.constprop.0+0x56>
 800670a:	782c      	ldrb	r4, [r5, #0]
 800670c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006710:	2c58      	cmp	r4, #88	; 0x58
 8006712:	d14d      	bne.n	80067b0 <_strtol_l.constprop.0+0xec>
 8006714:	786c      	ldrb	r4, [r5, #1]
 8006716:	2310      	movs	r3, #16
 8006718:	3502      	adds	r5, #2
 800671a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800671e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006722:	f04f 0c00 	mov.w	ip, #0
 8006726:	fbb8 f9f3 	udiv	r9, r8, r3
 800672a:	4666      	mov	r6, ip
 800672c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006730:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006734:	f1be 0f09 	cmp.w	lr, #9
 8006738:	d816      	bhi.n	8006768 <_strtol_l.constprop.0+0xa4>
 800673a:	4674      	mov	r4, lr
 800673c:	42a3      	cmp	r3, r4
 800673e:	dd24      	ble.n	800678a <_strtol_l.constprop.0+0xc6>
 8006740:	f1bc 0f00 	cmp.w	ip, #0
 8006744:	db1e      	blt.n	8006784 <_strtol_l.constprop.0+0xc0>
 8006746:	45b1      	cmp	r9, r6
 8006748:	d31c      	bcc.n	8006784 <_strtol_l.constprop.0+0xc0>
 800674a:	d101      	bne.n	8006750 <_strtol_l.constprop.0+0x8c>
 800674c:	45a2      	cmp	sl, r4
 800674e:	db19      	blt.n	8006784 <_strtol_l.constprop.0+0xc0>
 8006750:	fb06 4603 	mla	r6, r6, r3, r4
 8006754:	f04f 0c01 	mov.w	ip, #1
 8006758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800675c:	e7e8      	b.n	8006730 <_strtol_l.constprop.0+0x6c>
 800675e:	2c2b      	cmp	r4, #43	; 0x2b
 8006760:	bf04      	itt	eq
 8006762:	782c      	ldrbeq	r4, [r5, #0]
 8006764:	1cb5      	addeq	r5, r6, #2
 8006766:	e7ca      	b.n	80066fe <_strtol_l.constprop.0+0x3a>
 8006768:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800676c:	f1be 0f19 	cmp.w	lr, #25
 8006770:	d801      	bhi.n	8006776 <_strtol_l.constprop.0+0xb2>
 8006772:	3c37      	subs	r4, #55	; 0x37
 8006774:	e7e2      	b.n	800673c <_strtol_l.constprop.0+0x78>
 8006776:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800677a:	f1be 0f19 	cmp.w	lr, #25
 800677e:	d804      	bhi.n	800678a <_strtol_l.constprop.0+0xc6>
 8006780:	3c57      	subs	r4, #87	; 0x57
 8006782:	e7db      	b.n	800673c <_strtol_l.constprop.0+0x78>
 8006784:	f04f 3cff 	mov.w	ip, #4294967295
 8006788:	e7e6      	b.n	8006758 <_strtol_l.constprop.0+0x94>
 800678a:	f1bc 0f00 	cmp.w	ip, #0
 800678e:	da05      	bge.n	800679c <_strtol_l.constprop.0+0xd8>
 8006790:	2322      	movs	r3, #34	; 0x22
 8006792:	6003      	str	r3, [r0, #0]
 8006794:	4646      	mov	r6, r8
 8006796:	b942      	cbnz	r2, 80067aa <_strtol_l.constprop.0+0xe6>
 8006798:	4630      	mov	r0, r6
 800679a:	e79e      	b.n	80066da <_strtol_l.constprop.0+0x16>
 800679c:	b107      	cbz	r7, 80067a0 <_strtol_l.constprop.0+0xdc>
 800679e:	4276      	negs	r6, r6
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d0f9      	beq.n	8006798 <_strtol_l.constprop.0+0xd4>
 80067a4:	f1bc 0f00 	cmp.w	ip, #0
 80067a8:	d000      	beq.n	80067ac <_strtol_l.constprop.0+0xe8>
 80067aa:	1e69      	subs	r1, r5, #1
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	e7f3      	b.n	8006798 <_strtol_l.constprop.0+0xd4>
 80067b0:	2430      	movs	r4, #48	; 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1b1      	bne.n	800671a <_strtol_l.constprop.0+0x56>
 80067b6:	2308      	movs	r3, #8
 80067b8:	e7af      	b.n	800671a <_strtol_l.constprop.0+0x56>
 80067ba:	2c30      	cmp	r4, #48	; 0x30
 80067bc:	d0a5      	beq.n	800670a <_strtol_l.constprop.0+0x46>
 80067be:	230a      	movs	r3, #10
 80067c0:	e7ab      	b.n	800671a <_strtol_l.constprop.0+0x56>
 80067c2:	bf00      	nop
 80067c4:	08006a5c 	.word	0x08006a5c

080067c8 <_strtol_r>:
 80067c8:	f7ff bf7c 	b.w	80066c4 <_strtol_l.constprop.0>

080067cc <__submore>:
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	460c      	mov	r4, r1
 80067d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d8:	4299      	cmp	r1, r3
 80067da:	d11d      	bne.n	8006818 <__submore+0x4c>
 80067dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067e0:	f7fe fcac 	bl	800513c <_malloc_r>
 80067e4:	b918      	cbnz	r0, 80067ee <__submore+0x22>
 80067e6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80067f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80067f8:	6360      	str	r0, [r4, #52]	; 0x34
 80067fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80067fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006802:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006806:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800680a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800680e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	2000      	movs	r0, #0
 8006816:	e7e8      	b.n	80067ea <__submore+0x1e>
 8006818:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800681a:	0077      	lsls	r7, r6, #1
 800681c:	463a      	mov	r2, r7
 800681e:	f7ff fbc5 	bl	8005fac <_realloc_r>
 8006822:	4605      	mov	r5, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	d0de      	beq.n	80067e6 <__submore+0x1a>
 8006828:	eb00 0806 	add.w	r8, r0, r6
 800682c:	4601      	mov	r1, r0
 800682e:	4632      	mov	r2, r6
 8006830:	4640      	mov	r0, r8
 8006832:	f7ff fb93 	bl	8005f5c <memcpy>
 8006836:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800683a:	f8c4 8000 	str.w	r8, [r4]
 800683e:	e7e9      	b.n	8006814 <__submore+0x48>

08006840 <_malloc_usable_size_r>:
 8006840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006844:	1f18      	subs	r0, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	bfbc      	itt	lt
 800684a:	580b      	ldrlt	r3, [r1, r0]
 800684c:	18c0      	addlt	r0, r0, r3
 800684e:	4770      	bx	lr

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
