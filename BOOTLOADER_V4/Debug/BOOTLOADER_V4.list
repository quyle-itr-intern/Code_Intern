
BOOTLOADER_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ec  080051ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000070  08005264  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08005264  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211e  00000000  00000000  0002b47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dc7  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6ce  00000000  00000000  000503a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8dbb  00000000  00000000  0005da75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ac  00000000  00000000  00126880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ec4 	.word	0x08004ec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ec4 	.word	0x08004ec4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <bootloader_handle_command>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bootloader_handle_command(bootloader_command_data_t comand_data)
{
 80005c4:	b084      	sub	sp, #16
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b08e      	sub	sp, #56	; 0x38
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80005d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  switch (comand_data.cmd)
 80005d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d86f      	bhi.n	80006bc <bootloader_handle_command+0xf8>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <bootloader_handle_command+0x20>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080005f9 	.word	0x080005f9
 80005e8:	08000601 	.word	0x08000601
 80005ec:	08000609 	.word	0x08000609
 80005f0:	08000611 	.word	0x08000611
 80005f4:	08000619 	.word	0x08000619
  {
  case COMMAND_READ:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "COMMAND_READ\r\n");
 80005f8:	4835      	ldr	r0, [pc, #212]	; (80006d0 <bootloader_handle_command+0x10c>)
 80005fa:	f000 fadf 	bl	8000bbc <bsp_uart1_printf>
    break;
 80005fe:	e060      	b.n	80006c2 <bootloader_handle_command+0xfe>
  }
  case COMMAND_WRITE:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "COMMAND_WRITE\r\n");
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <bootloader_handle_command+0x110>)
 8000602:	f000 fadb 	bl	8000bbc <bsp_uart1_printf>
    break;
 8000606:	e05c      	b.n	80006c2 <bootloader_handle_command+0xfe>
  }
  case COMMAND_ERASE:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "COMMAND_ERASE\r\n");
 8000608:	4833      	ldr	r0, [pc, #204]	; (80006d8 <bootloader_handle_command+0x114>)
 800060a:	f000 fad7 	bl	8000bbc <bsp_uart1_printf>
    break;
 800060e:	e058      	b.n	80006c2 <bootloader_handle_command+0xfe>
  }
  case COMMAND_JUMP:
  {
    /* code */
    bsp_uart1_printf((uint8_t *) "COMMAND_JUMP\r\n");
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <bootloader_handle_command+0x118>)
 8000612:	f000 fad3 	bl	8000bbc <bsp_uart1_printf>
    break;
 8000616:	e054      	b.n	80006c2 <bootloader_handle_command+0xfe>
  }
  case COMMAND_UPDATE:
  {
    /* code */
    if (comand_data.status_update == 1)
 8000618:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800061c:	2b01      	cmp	r3, #1
 800061e:	d103      	bne.n	8000628 <bootloader_handle_command+0x64>
    {
      bsp_uart1_printf((uint8_t *) "Update firmware\r\n");
 8000620:	482f      	ldr	r0, [pc, #188]	; (80006e0 <bootloader_handle_command+0x11c>)
 8000622:	f000 facb 	bl	8000bbc <bsp_uart1_printf>
        sprintf(tx, "%c", comand_data.data[i]);
        bsp_uart1_printf((uint8_t *) tx);
      }
      bsp_uart1_printf((uint8_t *) "\r\n");
    }
    break;
 8000626:	e04b      	b.n	80006c0 <bootloader_handle_command+0xfc>
    else if (comand_data.status_update == 2)
 8000628:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800062c:	2b02      	cmp	r3, #2
 800062e:	d103      	bne.n	8000638 <bootloader_handle_command+0x74>
      bsp_uart1_printf((uint8_t *) "Begin Update firmware\r\n");
 8000630:	482c      	ldr	r0, [pc, #176]	; (80006e4 <bootloader_handle_command+0x120>)
 8000632:	f000 fac3 	bl	8000bbc <bsp_uart1_printf>
    break;
 8000636:	e043      	b.n	80006c0 <bootloader_handle_command+0xfc>
    else if (comand_data.status_update == 3)
 8000638:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800063c:	2b03      	cmp	r3, #3
 800063e:	d103      	bne.n	8000648 <bootloader_handle_command+0x84>
      bsp_uart1_printf((uint8_t *) "End Update firmware\r\n");
 8000640:	4829      	ldr	r0, [pc, #164]	; (80006e8 <bootloader_handle_command+0x124>)
 8000642:	f000 fabb 	bl	8000bbc <bsp_uart1_printf>
    break;
 8000646:	e03b      	b.n	80006c0 <bootloader_handle_command+0xfc>
    else if (comand_data.status_update == 4)
 8000648:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800064c:	2b04      	cmp	r3, #4
 800064e:	d10d      	bne.n	800066c <bootloader_handle_command+0xa8>
      sprintf(tx, "Size flash: %ld\r\n", comand_data.size_flash);
 8000650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000652:	463b      	mov	r3, r7
 8000654:	4925      	ldr	r1, [pc, #148]	; (80006ec <bootloader_handle_command+0x128>)
 8000656:	4618      	mov	r0, r3
 8000658:	f003 ffd4 	bl	8004604 <siprintf>
      bsp_uart1_printf((uint8_t *) "COMMAND_UPDATE ");
 800065c:	4824      	ldr	r0, [pc, #144]	; (80006f0 <bootloader_handle_command+0x12c>)
 800065e:	f000 faad 	bl	8000bbc <bsp_uart1_printf>
      bsp_uart1_printf((uint8_t *) tx);
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f000 faa9 	bl	8000bbc <bsp_uart1_printf>
    break;
 800066a:	e029      	b.n	80006c0 <bootloader_handle_command+0xfc>
    else if (comand_data.status_update == 5)
 800066c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000670:	2b05      	cmp	r3, #5
 8000672:	d125      	bne.n	80006c0 <bootloader_handle_command+0xfc>
      for (uint8_t i = 0; i < comand_data.len; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800067a:	e015      	b.n	80006a8 <bootloader_handle_command+0xe4>
        sprintf(tx, "%c", comand_data.data[i]);
 800067c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000680:	3340      	adds	r3, #64	; 0x40
 8000682:	443b      	add	r3, r7
 8000684:	7b5b      	ldrb	r3, [r3, #13]
 8000686:	461a      	mov	r2, r3
 8000688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800068c:	4919      	ldr	r1, [pc, #100]	; (80006f4 <bootloader_handle_command+0x130>)
 800068e:	4618      	mov	r0, r3
 8000690:	f003 ffb8 	bl	8004604 <siprintf>
        bsp_uart1_printf((uint8_t *) tx);
 8000694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fa8f 	bl	8000bbc <bsp_uart1_printf>
      for (uint8_t i = 0; i < comand_data.len; i++)
 800069e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006a2:	3301      	adds	r3, #1
 80006a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80006ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3e3      	bcc.n	800067c <bootloader_handle_command+0xb8>
      bsp_uart1_printf((uint8_t *) "\r\n");
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <bootloader_handle_command+0x134>)
 80006b6:	f000 fa81 	bl	8000bbc <bsp_uart1_printf>
    break;
 80006ba:	e001      	b.n	80006c0 <bootloader_handle_command+0xfc>
  }
  default: break;
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <bootloader_handle_command+0xfe>
    break;
 80006c0:	bf00      	nop
  }
}
 80006c2:	bf00      	nop
 80006c4:	3738      	adds	r7, #56	; 0x38
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr
 80006d0:	08004edc 	.word	0x08004edc
 80006d4:	08004eec 	.word	0x08004eec
 80006d8:	08004efc 	.word	0x08004efc
 80006dc:	08004f0c 	.word	0x08004f0c
 80006e0:	08004f1c 	.word	0x08004f1c
 80006e4:	08004f30 	.word	0x08004f30
 80006e8:	08004f48 	.word	0x08004f48
 80006ec:	08004f60 	.word	0x08004f60
 80006f0:	08004f74 	.word	0x08004f74
 80006f4:	08004f84 	.word	0x08004f84
 80006f8:	08004f88 	.word	0x08004f88

080006fc <bootloader_start_up>:

void bootloader_start_up(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  bsp_uart_set_callback_bootloader_command(bootloader_handle_command);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <bootloader_start_up+0x10>)
 8000702:	f000 fa2b 	bl	8000b5c <bsp_uart_set_callback_bootloader_command>
  bsp_uart_init();
 8000706:	f000 fa39 	bl	8000b7c <bsp_uart_init>

  while (1)
 800070a:	e7fe      	b.n	800070a <bootloader_start_up+0xe>
 800070c:	080005c5 	.word	0x080005c5

08000710 <bootloader_command_handle_data>:
/* Function definitions ----------------------------------------------- */
uint16_t cal_crc = 0;
uint8_t  buffer_data[256];

bootloader_command_status_t bootloader_command_handle_data(bootloader_command_data_t *command_data, uint8_t *data, uint16_t size)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
  bootloader_command_field_t field_frame = START_FRAME;
 800071e:	2300      	movs	r3, #0
 8000720:	75fb      	strb	r3, [r7, #23]
  /* parse string to hex form data hex */
  for (uint8_t count = 0; count < size; count++)
 8000722:	2300      	movs	r3, #0
 8000724:	75bb      	strb	r3, [r7, #22]
 8000726:	e1c4      	b.n	8000ab2 <bootloader_command_handle_data+0x3a2>
  {
    switch (field_frame)
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	2b08      	cmp	r3, #8
 800072c:	f200 81bc 	bhi.w	8000aa8 <bootloader_command_handle_data+0x398>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <bootloader_command_handle_data+0x28>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	0800075d 	.word	0x0800075d
 800073c:	08000783 	.word	0x08000783
 8000740:	080007e9 	.word	0x080007e9
 8000744:	0800083f 	.word	0x0800083f
 8000748:	080008e3 	.word	0x080008e3
 800074c:	0800091d 	.word	0x0800091d
 8000750:	08000957 	.word	0x08000957
 8000754:	08000a4d 	.word	0x08000a4d
 8000758:	08000a7d 	.word	0x08000a7d
    {
    case START_FRAME:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 800075c:	7dbb      	ldrb	r3, [r7, #22]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	4413      	add	r3, r2
 8000762:	2202      	movs	r2, #2
 8000764:	4619      	mov	r1, r3
 8000766:	48a3      	ldr	r0, [pc, #652]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000768:	f000 fb96 	bl	8000e98 <bsp_utility_parse_element>
      if (buffer_data[0] != START)
 800076c:	4ba1      	ldr	r3, [pc, #644]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b55      	cmp	r3, #85	; 0x55
 8000772:	d001      	beq.n	8000778 <bootloader_command_handle_data+0x68>
        return bootloader_command_error;
 8000774:	2300      	movs	r3, #0
 8000776:	e1a3      	b.n	8000ac0 <bootloader_command_handle_data+0x3b0>
      else
      {
        count       = 1U;
 8000778:	2301      	movs	r3, #1
 800077a:	75bb      	strb	r3, [r7, #22]
        field_frame = CMD;
 800077c:	2301      	movs	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000780:	e194      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CMD:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000782:	7dbb      	ldrb	r3, [r7, #22]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4413      	add	r3, r2
 8000788:	2202      	movs	r2, #2
 800078a:	4619      	mov	r1, r3
 800078c:	4899      	ldr	r0, [pc, #612]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800078e:	f000 fb83 	bl	8000e98 <bsp_utility_parse_element>
      command_data->cmd = buffer_data[0];
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	701a      	strb	r2, [r3, #0]
      count             = 3U;
 800079a:	2303      	movs	r3, #3
 800079c:	75bb      	strb	r3, [r7, #22]
      if (command_data->cmd == COMMAND_READ)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <bootloader_command_handle_data+0x9c>
        field_frame = CMD_READ;
 80007a6:	2302      	movs	r3, #2
 80007a8:	75fb      	strb	r3, [r7, #23]
        field_frame = CMD_JUMP;
      else if (command_data->cmd == COMMAND_UPDATE)
        field_frame = CMD_UPDATE;
      else
        return bootloader_command_error;
      break;
 80007aa:	e17f      	b.n	8000aac <bootloader_command_handle_data+0x39c>
      else if (command_data->cmd == COMMAND_WRITE)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d102      	bne.n	80007ba <bootloader_command_handle_data+0xaa>
        field_frame = CMD_WRITE;
 80007b4:	2303      	movs	r3, #3
 80007b6:	75fb      	strb	r3, [r7, #23]
      break;
 80007b8:	e178      	b.n	8000aac <bootloader_command_handle_data+0x39c>
      else if (command_data->cmd == COMMAND_ERASE)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d102      	bne.n	80007c8 <bootloader_command_handle_data+0xb8>
        field_frame = CMD_EARSE;
 80007c2:	2304      	movs	r3, #4
 80007c4:	75fb      	strb	r3, [r7, #23]
      break;
 80007c6:	e171      	b.n	8000aac <bootloader_command_handle_data+0x39c>
      else if (command_data->cmd == COMMAND_JUMP)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d102      	bne.n	80007d6 <bootloader_command_handle_data+0xc6>
        field_frame = CMD_JUMP;
 80007d0:	2305      	movs	r3, #5
 80007d2:	75fb      	strb	r3, [r7, #23]
      break;
 80007d4:	e16a      	b.n	8000aac <bootloader_command_handle_data+0x39c>
      else if (command_data->cmd == COMMAND_UPDATE)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d102      	bne.n	80007e4 <bootloader_command_handle_data+0xd4>
        field_frame = CMD_UPDATE;
 80007de:	2306      	movs	r3, #6
 80007e0:	75fb      	strb	r3, [r7, #23]
      break;
 80007e2:	e163      	b.n	8000aac <bootloader_command_handle_data+0x39c>
        return bootloader_command_error;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e16b      	b.n	8000ac0 <bootloader_command_handle_data+0x3b0>
    }
    case CMD_READ:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 80007e8:	7dbb      	ldrb	r3, [r7, #22]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	2208      	movs	r2, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	4880      	ldr	r0, [pc, #512]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80007f4:	f000 fb50 	bl	8000e98 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 80007f8:	4b7e      	ldr	r3, [pc, #504]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000808:	4b7a      	ldr	r3, [pc, #488]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800080a:	789a      	ldrb	r2, [r3, #2]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000810:	4b78      	ldr	r3, [pc, #480]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000812:	78da      	ldrb	r2, [r3, #3]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	711a      	strb	r2, [r3, #4]
      count                    = 12U;
 8000818:	230c      	movs	r3, #12
 800081a:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 800081c:	7dbb      	ldrb	r3, [r7, #22]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	2202      	movs	r2, #2
 8000824:	4619      	mov	r1, r3
 8000826:	4873      	ldr	r0, [pc, #460]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000828:	f000 fb36 	bl	8000e98 <bsp_utility_parse_element>
      command_data->len = buffer_data[0];
 800082c:	4b71      	ldr	r3, [pc, #452]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	731a      	strb	r2, [r3, #12]
      field_frame       = CHECK_CRC;
 8000834:	2307      	movs	r3, #7
 8000836:	75fb      	strb	r3, [r7, #23]
      count             = 13U;
 8000838:	230d      	movs	r3, #13
 800083a:	75bb      	strb	r3, [r7, #22]
      break;
 800083c:	e136      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CMD_WRITE:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 800083e:	7dbb      	ldrb	r3, [r7, #22]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	4413      	add	r3, r2
 8000844:	2208      	movs	r2, #8
 8000846:	4619      	mov	r1, r3
 8000848:	486a      	ldr	r0, [pc, #424]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800084a:	f000 fb25 	bl	8000e98 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 800084e:	4b69      	ldr	r3, [pc, #420]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000850:	781a      	ldrb	r2, [r3, #0]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000856:	4b67      	ldr	r3, [pc, #412]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000858:	785a      	ldrb	r2, [r3, #1]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 800085e:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000860:	789a      	ldrb	r2, [r3, #2]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000866:	4b63      	ldr	r3, [pc, #396]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000868:	78da      	ldrb	r2, [r3, #3]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	711a      	strb	r2, [r3, #4]
      count                    = 12U;
 800086e:	230c      	movs	r3, #12
 8000870:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], 2U);
 8000872:	7dbb      	ldrb	r3, [r7, #22]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	4413      	add	r3, r2
 8000878:	2202      	movs	r2, #2
 800087a:	4619      	mov	r1, r3
 800087c:	485d      	ldr	r0, [pc, #372]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800087e:	f000 fb0b 	bl	8000e98 <bsp_utility_parse_element>
      command_data->len = buffer_data[0];
 8000882:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	731a      	strb	r2, [r3, #12]
      count             = 14U;
 800088a:	230e      	movs	r3, #14
 800088c:	75bb      	strb	r3, [r7, #22]
      bsp_utility_parse_element(buffer_data, &data[count], command_data->len * 2U);
 800088e:	7dbb      	ldrb	r3, [r7, #22]
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	18d1      	adds	r1, r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	7b1b      	ldrb	r3, [r3, #12]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	4855      	ldr	r0, [pc, #340]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80008a0:	f000 fafa 	bl	8000e98 <bsp_utility_parse_element>
      for (uint8_t i = 0; i < command_data->len; i++) command_data->data[i] = buffer_data[i];
 80008a4:	2300      	movs	r3, #0
 80008a6:	757b      	strb	r3, [r7, #21]
 80008a8:	e00a      	b.n	80008c0 <bootloader_command_handle_data+0x1b0>
 80008aa:	7d7a      	ldrb	r2, [r7, #21]
 80008ac:	7d7b      	ldrb	r3, [r7, #21]
 80008ae:	4951      	ldr	r1, [pc, #324]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80008b0:	5c89      	ldrb	r1, [r1, r2]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	460a      	mov	r2, r1
 80008b8:	735a      	strb	r2, [r3, #13]
 80008ba:	7d7b      	ldrb	r3, [r7, #21]
 80008bc:	3301      	adds	r3, #1
 80008be:	757b      	strb	r3, [r7, #21]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	7d7a      	ldrb	r2, [r7, #21]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d3ef      	bcc.n	80008aa <bootloader_command_handle_data+0x19a>
      count += command_data->len * 2U - 1;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	7b1b      	ldrb	r3, [r3, #12]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	7dbb      	ldrb	r3, [r7, #22]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	75bb      	strb	r3, [r7, #22]
      field_frame = CHECK_CRC;
 80008dc:	2307      	movs	r3, #7
 80008de:	75fb      	strb	r3, [r7, #23]
      break;
 80008e0:	e0e4      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CMD_EARSE:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 80008e2:	7dbb      	ldrb	r3, [r7, #22]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	2208      	movs	r2, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80008ee:	f000 fad3 	bl	8000e98 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 80008fc:	785a      	ldrb	r2, [r3, #1]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000904:	789a      	ldrb	r2, [r3, #2]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 800090a:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800090c:	78da      	ldrb	r2, [r3, #3]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	711a      	strb	r2, [r3, #4]
      count                    = 11U;
 8000912:	230b      	movs	r3, #11
 8000914:	75bb      	strb	r3, [r7, #22]
      field_frame              = CHECK_CRC;
 8000916:	2307      	movs	r3, #7
 8000918:	75fb      	strb	r3, [r7, #23]
      break;
 800091a:	e0c7      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CMD_JUMP:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 8U);
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	4413      	add	r3, r2
 8000922:	2208      	movs	r2, #8
 8000924:	4619      	mov	r1, r3
 8000926:	4833      	ldr	r0, [pc, #204]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000928:	f000 fab6 	bl	8000e98 <bsp_utility_parse_element>
      command_data->address[0] = buffer_data[0];
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	705a      	strb	r2, [r3, #1]
      command_data->address[1] = buffer_data[1];
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000936:	785a      	ldrb	r2, [r3, #1]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	709a      	strb	r2, [r3, #2]
      command_data->address[2] = buffer_data[2];
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 800093e:	789a      	ldrb	r2, [r3, #2]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	70da      	strb	r2, [r3, #3]
      command_data->address[3] = buffer_data[3];
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <bootloader_command_handle_data+0x2e4>)
 8000946:	78da      	ldrb	r2, [r3, #3]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	711a      	strb	r2, [r3, #4]
      count                    = 11U;
 800094c:	230b      	movs	r3, #11
 800094e:	75bb      	strb	r3, [r7, #22]
      field_frame              = CHECK_CRC;
 8000950:	2307      	movs	r3, #7
 8000952:	75fb      	strb	r3, [r7, #23]
      break;
 8000954:	e0aa      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CMD_UPDATE:
    {
      if (data[count] == 'U') /* Update firmware */
 8000956:	7dbb      	ldrb	r3, [r7, #22]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b55      	cmp	r3, #85	; 0x55
 8000960:	d105      	bne.n	800096e <bootloader_command_handle_data+0x25e>
      {
        command_data->status_update = 1;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2201      	movs	r2, #1
 8000966:	715a      	strb	r2, [r3, #5]
        count                       = 9U;
 8000968:	2309      	movs	r3, #9
 800096a:	75bb      	strb	r3, [r7, #22]
 800096c:	e06b      	b.n	8000a46 <bootloader_command_handle_data+0x336>
      }
      else if (data[count] == 'B') /* Begin Update firmware */
 800096e:	7dbb      	ldrb	r3, [r7, #22]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b42      	cmp	r3, #66	; 0x42
 8000978:	d105      	bne.n	8000986 <bootloader_command_handle_data+0x276>
      {
        command_data->status_update = 2;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2202      	movs	r2, #2
 800097e:	715a      	strb	r2, [r3, #5]
        count                       = 8U;
 8000980:	2308      	movs	r3, #8
 8000982:	75bb      	strb	r3, [r7, #22]
 8000984:	e05f      	b.n	8000a46 <bootloader_command_handle_data+0x336>
      }
      else if (data[count] == 'E') /* End Update firmware */
 8000986:	7dbb      	ldrb	r3, [r7, #22]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b45      	cmp	r3, #69	; 0x45
 8000990:	d105      	bne.n	800099e <bootloader_command_handle_data+0x28e>
      {
        command_data->status_update = 3;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2203      	movs	r2, #3
 8000996:	715a      	strb	r2, [r3, #5]
        count                       = 6U;
 8000998:	2306      	movs	r3, #6
 800099a:	75bb      	strb	r3, [r7, #22]
 800099c:	e053      	b.n	8000a46 <bootloader_command_handle_data+0x336>
      }
      else if (data[count] == 'S') /* Check size flash memory */
 800099e:	7dbb      	ldrb	r3, [r7, #22]
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b53      	cmp	r3, #83	; 0x53
 80009a8:	d126      	bne.n	80009f8 <bootloader_command_handle_data+0x2e8>
      {
        command_data->status_update = 4;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2204      	movs	r2, #4
 80009ae:	715a      	strb	r2, [r3, #5]
        command_data->size_flash    = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
        count                       = 8U;
 80009b6:	2308      	movs	r3, #8
 80009b8:	75bb      	strb	r3, [r7, #22]
        while (data[count] != ':')
 80009ba:	e014      	b.n	80009e6 <bootloader_command_handle_data+0x2d6>
        {
          command_data->size_flash = command_data->size_flash * 10 + bsp_utility_char_to_hex(data[count]);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	461c      	mov	r4, r3
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fb0b 	bl	8000fee <bsp_utility_char_to_hex>
 80009d8:	4603      	mov	r3, r0
 80009da:	18e2      	adds	r2, r4, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	609a      	str	r2, [r3, #8]
          count++;
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	3301      	adds	r3, #1
 80009e4:	75bb      	strb	r3, [r7, #22]
        while (data[count] != ':')
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b3a      	cmp	r3, #58	; 0x3a
 80009f0:	d1e4      	bne.n	80009bc <bootloader_command_handle_data+0x2ac>
 80009f2:	e028      	b.n	8000a46 <bootloader_command_handle_data+0x336>
 80009f4:	20000090 	.word	0x20000090
        }
      }
      else if (data[count] == ':') /* Check size flash memory */
 80009f8:	7dbb      	ldrb	r3, [r7, #22]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b3a      	cmp	r3, #58	; 0x3a
 8000a02:	d120      	bne.n	8000a46 <bootloader_command_handle_data+0x336>
      {
        uint8_t i;
        command_data->status_update = 5;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2205      	movs	r2, #5
 8000a08:	715a      	strb	r2, [r3, #5]
        for ( i = 0; i < (size - 8); i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	753b      	strb	r3, [r7, #20]
 8000a0e:	e00e      	b.n	8000a2e <bootloader_command_handle_data+0x31e>
        {
          command_data->data[i] = data[count + i];
 8000a10:	7dba      	ldrb	r2, [r7, #22]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4413      	add	r3, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	441a      	add	r2, r3
 8000a1c:	7d3b      	ldrb	r3, [r7, #20]
 8000a1e:	7811      	ldrb	r1, [r2, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	460a      	mov	r2, r1
 8000a26:	735a      	strb	r2, [r3, #13]
        for ( i = 0; i < (size - 8); i++)
 8000a28:	7d3b      	ldrb	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	753b      	strb	r3, [r7, #20]
 8000a2e:	7d3a      	ldrb	r2, [r7, #20]
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	3b08      	subs	r3, #8
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbeb      	blt.n	8000a10 <bootloader_command_handle_data+0x300>
        }
        command_data->len = i;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	7d3a      	ldrb	r2, [r7, #20]
 8000a3c:	731a      	strb	r2, [r3, #12]
        count = size - 5;
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3b05      	subs	r3, #5
 8000a44:	75bb      	strb	r3, [r7, #22]
      }
      field_frame = CHECK_CRC;
 8000a46:	2307      	movs	r3, #7
 8000a48:	75fb      	strb	r3, [r7, #23]
      break;
 8000a4a:	e02f      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case CHECK_CRC:
    {
      bsp_utility_parse_element(buffer_data, &data[count], 4U);
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <bootloader_command_handle_data+0x3b8>)
 8000a58:	f000 fa1e 	bl	8000e98 <bsp_utility_parse_element>
      command_data->crc = (buffer_data[0] << 8) | buffer_data[1];
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <bootloader_command_handle_data+0x3b8>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <bootloader_command_handle_data+0x3b8>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
      field_frame       = DONE;
 8000a76:	2308      	movs	r3, #8
 8000a78:	75fb      	strb	r3, [r7, #23]
      break;
 8000a7a:	e017      	b.n	8000aac <bootloader_command_handle_data+0x39c>
    }
    case DONE:
    {
      /* check sum data hex */
      cal_crc = bootloader_command_crc(data, size - 4);
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	68b8      	ldr	r0, [r7, #8]
 8000a86:	f000 f823 	bl	8000ad0 <bootloader_command_crc>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <bootloader_command_handle_data+0x3bc>)
 8000a90:	801a      	strh	r2, [r3, #0]
      if (cal_crc == command_data->crc)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <bootloader_command_handle_data+0x3bc>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d101      	bne.n	8000aa4 <bootloader_command_handle_data+0x394>
        return bootloader_comand_ok;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e00d      	b.n	8000ac0 <bootloader_command_handle_data+0x3b0>
      else
        return bootloader_command_error;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e00b      	b.n	8000ac0 <bootloader_command_handle_data+0x3b0>
    }
    default: return bootloader_command_error;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e009      	b.n	8000ac0 <bootloader_command_handle_data+0x3b0>
  for (uint8_t count = 0; count < size; count++)
 8000aac:	7dbb      	ldrb	r3, [r7, #22]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	75bb      	strb	r3, [r7, #22]
 8000ab2:	7dbb      	ldrb	r3, [r7, #22]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f63f ae35 	bhi.w	8000728 <bootloader_command_handle_data+0x18>
    }
  }
  return bootloader_command_error;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	20000090 	.word	0x20000090
 8000acc:	2000008c 	.word	0x2000008c

08000ad0 <bootloader_command_crc>:

uint16_t bootloader_command_crc(uint8_t *buffer, uint16_t buffer_length)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
  uint8_t      crc_high = 0xFF; /* high byte of CRC initialized */
 8000adc:	23ff      	movs	r3, #255	; 0xff
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint8_t      crc_low  = 0xFF; /* low byte of CRC initialized */
 8000ae0:	23ff      	movs	r3, #255	; 0xff
 8000ae2:	73bb      	strb	r3, [r7, #14]
  unsigned int index;           /* will index into CRC lookup table */

  while (buffer_length--) /* pass through message buffer */
 8000ae4:	e013      	b.n	8000b0e <bootloader_command_crc+0x3e>
  {
    index    = crc_low ^ *buffer++; /* calculate the CRC */
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	4053      	eors	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	60bb      	str	r3, [r7, #8]
    crc_low  = crc_high ^ auch_crc_high[index];
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <bootloader_command_crc+0x64>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4053      	eors	r3, r2
 8000b02:	73bb      	strb	r3, [r7, #14]
    crc_high = auch_crc_low[index];
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <bootloader_command_crc+0x68>)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	73fb      	strb	r3, [r7, #15]
  while (buffer_length--) /* pass through message buffer */
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	807a      	strh	r2, [r7, #2]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e6      	bne.n	8000ae6 <bootloader_command_crc+0x16>
  }
  return (crc_high << 8 | crc_low);
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	b29b      	uxth	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	08004f90 	.word	0x08004f90
 8000b38:	08005090 	.word	0x08005090

08000b3c <bsp_uart_set_callback_handle_rx_data>:
bsp_uart_handle_rx_data_t    bsp_uart_handle_rx_data_callback;
bsp_uart_bootloader_comand_t bsp_uart_bootloader_comand_callback;

/* Private function prototypes ---------------------------------------- */
void bsp_uart_set_callback_handle_rx_data(void *cb)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  bsp_uart_handle_rx_data_callback = cb;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <bsp_uart_set_callback_handle_rx_data+0x1c>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000328 	.word	0x20000328

08000b5c <bsp_uart_set_callback_bootloader_command>:

void bsp_uart_set_callback_bootloader_command(void *cb)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  bsp_uart_bootloader_comand_callback = cb;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <bsp_uart_set_callback_bootloader_command+0x1c>)
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000032c 	.word	0x2000032c

08000b7c <bsp_uart_init>:

/* Function definitions ----------------------------------------------- */
void bsp_uart_init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  bsp_uart_set_callback_handle_rx_data(bootloader_command_handle_data);
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <bsp_uart_init+0x28>)
 8000b82:	f7ff ffdb 	bl	8000b3c <bsp_uart_set_callback_handle_rx_data>
  /* Init UART */
  bsp_uart_dma_unregister_callback(&hdma_usart1_rx, HAL_DMA_XFER_HALFCPLT_CB_ID);
 8000b86:	2101      	movs	r1, #1
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <bsp_uart_init+0x2c>)
 8000b8a:	f000 f843 	bl	8000c14 <bsp_uart_dma_unregister_callback>
  /* receive data uart dma */
  bsp_uart_receive_to_idle_dma(&huart1, data_receive_dma, RX_BUFFER_SIZE);
 8000b8e:	22c8      	movs	r2, #200	; 0xc8
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <bsp_uart_init+0x30>)
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <bsp_uart_init+0x34>)
 8000b94:	f000 f828 	bl	8000be8 <bsp_uart_receive_to_idle_dma>
  buffer_save_data_handle = rx_buffer;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <bsp_uart_init+0x38>)
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <bsp_uart_init+0x3c>)
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08000711 	.word	0x08000711
 8000ba8:	200003bc 	.word	0x200003bc
 8000bac:	20000194 	.word	0x20000194
 8000bb0:	20000334 	.word	0x20000334
 8000bb4:	20000324 	.word	0x20000324
 8000bb8:	2000025c 	.word	0x2000025c

08000bbc <bsp_uart1_printf>:
{
  HAL_UART_Transmit(huart, string, strlen((char *) string), TIME_OUT_TRANSMIT_UART);
}

void bsp_uart1_printf(uint8_t *string)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, string, strlen((char *) string), TIME_OUT_TRANSMIT_UART);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb23 	bl	8000210 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <bsp_uart1_printf+0x28>)
 8000bd6:	f002 faee 	bl	80031b6 <HAL_UART_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000334 	.word	0x20000334

08000be8 <bsp_uart_receive_to_idle_dma>:
{
  HAL_UART_Transmit(huart, string, len, TIME_OUT_TRANSMIT_UART);
}

void bsp_uart_receive_to_idle_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(huart, data, size))
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f002 fb6c 	bl	80032da <HAL_UARTEx_ReceiveToIdle_DMA>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <bsp_uart_receive_to_idle_dma+0x24>
  {
    Error_Handler();
 8000c08:	f000 fb32 	bl	8001270 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <bsp_uart_dma_unregister_callback>:

void bsp_uart_dma_unregister_callback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
  HAL_DMA_UnRegisterCallback(hdma, CallbackID);
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	4619      	mov	r1, r3
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f001 f963 	bl	8001ef0 <HAL_DMA_UnRegisterCallback>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_UARTEx_RxEventCallback>:
  HAL_UART_DeInit(&huart2);
  HAL_DMA_DeInit(&hdma_usart1_rx);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8000c3a:	af40      	add	r7, sp, #256	; 0x100
 8000c3c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000c40:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000c44:	6018      	str	r0, [r3, #0]
 8000c46:	460a      	mov	r2, r1
 8000c48:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000c4c:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000c50:	801a      	strh	r2, [r3, #0]
  bootloader_command_data_t command_data;
  uint16_t                  number_char_receive;
  uint8_t                   check_data_full[256];

  /* read data receive from dma */
  if ((huart->Instance == USART1))
 8000c52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000c56:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a85      	ldr	r2, [pc, #532]	; (8000e74 <HAL_UARTEx_RxEventCallback+0x240>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	f040 8103 	bne.w	8000e6c <HAL_UARTEx_RxEventCallback+0x238>
  {
    static uint16_t old_pos = 0;
    uint16_t        i;

    /* check data when dma transfer complete */
    if (g_flag_cplt_dma)
 8000c66:	4b84      	ldr	r3, [pc, #528]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x244>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d03a      	beq.n	8000ce4 <HAL_UARTEx_RxEventCallback+0xb0>
    {
      g_flag_cplt_dma = FALSE;
 8000c6e:	4b82      	ldr	r3, [pc, #520]	; (8000e78 <HAL_UARTEx_RxEventCallback+0x244>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < size - old_pos; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000c7a:	e013      	b.n	8000ca4 <HAL_UARTEx_RxEventCallback+0x70>
      {
        check_data_full[i] = data_receive_dma[old_pos + i];
 8000c7c:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000c86:	441a      	add	r2, r3
 8000c88:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000c8c:	497c      	ldr	r1, [pc, #496]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000c8e:	5c89      	ldrb	r1, [r1, r2]
 8000c90:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000c94:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000c98:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < size - old_pos; i++)
 8000c9a:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000ca4:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8000ca8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000cac:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	4972      	ldr	r1, [pc, #456]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000cb4:	8809      	ldrh	r1, [r1, #0]
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbdf      	blt.n	8000c7c <HAL_UARTEx_RxEventCallback+0x48>
      }
      /* check data form correct */
      if (bsp_uart_handle_rx_data_callback(&command_data, check_data_full, size - old_pos) != bootloader_comand_ok)
 8000cbc:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x250>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a6e      	ldr	r2, [pc, #440]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000cc2:	8812      	ldrh	r2, [r2, #0]
 8000cc4:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8000cc8:	f2a1 211e 	subw	r1, r1, #542	; 0x21e
 8000ccc:	8809      	ldrh	r1, [r1, #0]
 8000cce:	1a8a      	subs	r2, r1, r2
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	f107 010c 	add.w	r1, r7, #12
 8000cd6:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000cda:	4798      	blx	r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f040 80c1 	bne.w	8000e66 <HAL_UARTEx_RxEventCallback+0x232>
        return;
    }

    /* check if new data */
    if (size != old_pos)
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000cec:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 8000cf0:	8812      	ldrh	r2, [r2, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	f000 80af 	beq.w	8000e56 <HAL_UARTEx_RxEventCallback+0x222>
    {
      /* check wraps around index data */
      if (size > old_pos)
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d00:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 8000d04:	8812      	ldrh	r2, [r2, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d927      	bls.n	8000d5a <HAL_UARTEx_RxEventCallback+0x126>
      {
        number_char_receive = size - old_pos;
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d12:	f2a2 221e 	subw	r2, r2, #542	; 0x21e
 8000d16:	8812      	ldrh	r2, [r2, #0]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        for (i = 0; i < number_char_receive; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000d24:	e012      	b.n	8000d4c <HAL_UARTEx_RxEventCallback+0x118>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8000d26:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d30:	441a      	add	r2, r3
 8000d32:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x254>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d3a:	440b      	add	r3, r1
 8000d3c:	4950      	ldr	r1, [pc, #320]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000d3e:	5c8a      	ldrb	r2, [r1, r2]
 8000d40:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 8000d42:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d46:	3301      	adds	r3, #1
 8000d48:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000d4c:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8000d50:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3e6      	bcc.n	8000d26 <HAL_UARTEx_RxEventCallback+0xf2>
 8000d58:	e052      	b.n	8000e00 <HAL_UARTEx_RxEventCallback+0x1cc>
        }
      }
      else
      {
        number_char_receive = RX_BUFFER_SIZE - old_pos;
 8000d5a:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000d62:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        for (i = 0; i < number_char_receive; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000d6c:	e012      	b.n	8000d94 <HAL_UARTEx_RxEventCallback+0x160>
        {
          /* read data from buffer dma */
          buffer_save_data_handle[i] = data_receive_dma[old_pos + i];
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d78:	441a      	add	r2, r3
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x254>)
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d82:	440b      	add	r3, r1
 8000d84:	493e      	ldr	r1, [pc, #248]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000d86:	5c8a      	ldrb	r2, [r1, r2]
 8000d88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < number_char_receive; i++)
 8000d8a:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000d94:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8000d98:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3e6      	bcc.n	8000d6e <HAL_UARTEx_RxEventCallback+0x13a>
        }
        if (size > 0)
 8000da0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000da4:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d028      	beq.n	8000e00 <HAL_UARTEx_RxEventCallback+0x1cc>
        {
          for (i = 0; i < size; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000db4:	e011      	b.n	8000dda <HAL_UARTEx_RxEventCallback+0x1a6>
          {
            /* read data from buffer dma */
            buffer_save_data_handle[number_char_receive + i] = data_receive_dma[i];
 8000db6:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8000dba:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x254>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f8b7 021e 	ldrh.w	r0, [r7, #542]	; 0x21e
 8000dc2:	f8b7 121c 	ldrh.w	r1, [r7, #540]	; 0x21c
 8000dc6:	4401      	add	r1, r0
 8000dc8:	440b      	add	r3, r1
 8000dca:	492d      	ldr	r1, [pc, #180]	; (8000e80 <HAL_UARTEx_RxEventCallback+0x24c>)
 8000dcc:	5c8a      	ldrb	r2, [r1, r2]
 8000dce:	701a      	strb	r2, [r3, #0]
          for (i = 0; i < size; i++)
 8000dd0:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
 8000dda:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000dde:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000de2:	f8b7 221c 	ldrh.w	r2, [r7, #540]	; 0x21c
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3e4      	bcc.n	8000db6 <HAL_UARTEx_RxEventCallback+0x182>
          }
          number_char_receive += size;
 8000dec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000df0:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000df4:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
        }
      }

#ifdef DEBUG
      HAL_UART_Transmit(&huart2, buffer_save_data_handle, number_char_receive, 100);
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x254>)
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	4820      	ldr	r0, [pc, #128]	; (8000e8c <HAL_UARTEx_RxEventCallback+0x258>)
 8000e0c:	f002 f9d3 	bl	80031b6 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", 2, 100);
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	2202      	movs	r2, #2
 8000e14:	491e      	ldr	r1, [pc, #120]	; (8000e90 <HAL_UARTEx_RxEventCallback+0x25c>)
 8000e16:	481d      	ldr	r0, [pc, #116]	; (8000e8c <HAL_UARTEx_RxEventCallback+0x258>)
 8000e18:	f002 f9cd 	bl	80031b6 <HAL_UART_Transmit>
#endif
      /* handle data read */
      if (bsp_uart_handle_rx_data_callback(&command_data, buffer_save_data_handle, number_char_receive) == bootloader_comand_ok)
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_UARTEx_RxEventCallback+0x250>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UARTEx_RxEventCallback+0x254>)
 8000e22:	6811      	ldr	r1, [r2, #0]
 8000e24:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8000e28:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000e2c:	4798      	blx	r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d11a      	bne.n	8000e6a <HAL_UARTEx_RxEventCallback+0x236>
      {
        bsp_uart_bootloader_comand_callback(command_data);
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_UARTEx_RxEventCallback+0x260>)
 8000e36:	681d      	ldr	r5, [r3, #0]
 8000e38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000e3c:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8000e40:	4668      	mov	r0, sp
 8000e42:	f104 0310 	add.w	r3, r4, #16
 8000e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f003 fbc4 	bl	80045d8 <memcpy>
 8000e50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e54:	47a8      	blx	r5
      }
      else
        return;
    }
    old_pos = size;
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_UARTEx_RxEventCallback+0x248>)
 8000e58:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000e5c:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	8013      	strh	r3, [r2, #0]
 8000e64:	e002      	b.n	8000e6c <HAL_UARTEx_RxEventCallback+0x238>
        return;
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <HAL_UARTEx_RxEventCallback+0x238>
        return;
 8000e6a:	bf00      	nop
  }
}
 8000e6c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bdb0      	pop	{r4, r5, r7, pc}
 8000e74:	40011000 	.word	0x40011000
 8000e78:	20000190 	.word	0x20000190
 8000e7c:	20000330 	.word	0x20000330
 8000e80:	20000194 	.word	0x20000194
 8000e84:	20000328 	.word	0x20000328
 8000e88:	20000324 	.word	0x20000324
 8000e8c:	20000378 	.word	0x20000378
 8000e90:	08004f8c 	.word	0x08004f8c
 8000e94:	2000032c 	.word	0x2000032c

08000e98 <bsp_utility_parse_element>:
#include "bsp_utility.h"

void bsp_utility_parse_element(uint8_t *des, uint8_t *buff, uint8_t length)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b0c7      	sub	sp, #284	; 0x11c
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ea2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ea6:	6018      	str	r0, [r3, #0]
 8000ea8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000eb0:	6019      	str	r1, [r3, #0]
 8000eb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eb6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000eba:	701a      	strb	r2, [r3, #0]
  uint8_t count_array = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint8_t buffer_temp[256];

  /* convert data string to data hex and save to des buffer*/
  for (uint8_t count = 0U; count < length; count++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000ec8:	e07f      	b.n	8000fca <bsp_utility_parse_element+0x132>
  {
    if (buff[count] >= '0' && buff[count] <= '9')
 8000eca:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000ece:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000ed2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b2f      	cmp	r3, #47	; 0x2f
 8000ede:	d91d      	bls.n	8000f1c <bsp_utility_parse_element+0x84>
 8000ee0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000ee4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000ee8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b39      	cmp	r3, #57	; 0x39
 8000ef4:	d812      	bhi.n	8000f1c <bsp_utility_parse_element+0x84>
      buffer_temp[count] = buff[count] - 48;
 8000ef6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000efa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000efe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f0c:	3a30      	subs	r2, #48	; 0x30
 8000f0e:	b2d1      	uxtb	r1, r2
 8000f10:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f14:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f18:	54d1      	strb	r1, [r2, r3]
 8000f1a:	e027      	b.n	8000f6c <bsp_utility_parse_element+0xd4>
    else if (buff[count] >= 'A' && buff[count] <= 'F')
 8000f1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f24:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b40      	cmp	r3, #64	; 0x40
 8000f30:	d956      	bls.n	8000fe0 <bsp_utility_parse_element+0x148>
 8000f32:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f36:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f3a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b46      	cmp	r3, #70	; 0x46
 8000f46:	d84b      	bhi.n	8000fe0 <bsp_utility_parse_element+0x148>
      buffer_temp[count] = buff[count] - 65 + 10;
 8000f48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f4c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f50:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f5e:	3a37      	subs	r2, #55	; 0x37
 8000f60:	b2d1      	uxtb	r1, r2
 8000f62:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f6a:	54d1      	strb	r1, [r2, r3]
    else
      return;
    if (count % 2 != 0)
 8000f6c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d022      	beq.n	8000fc0 <bsp_utility_parse_element+0x128>
    {
      des[count_array] = ((buffer_temp[count - 1] << 4) | (buffer_temp[count]));
 8000f7a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f84:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f92:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000f96:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b259      	sxtb	r1, r3
 8000fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fa6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000faa:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
      count_array++;
 8000fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  for (uint8_t count = 0U; count < length; count++)
 8000fc0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000fca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000fd2:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f4ff af76 	bcc.w	8000eca <bsp_utility_parse_element+0x32>
 8000fde:	e000      	b.n	8000fe2 <bsp_utility_parse_element+0x14a>
      return;
 8000fe0:	bf00      	nop
    }
  }
}
 8000fe2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <bsp_utility_char_to_hex>:

uint8_t bsp_utility_char_to_hex(uint8_t c)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
  /*0 ... 9*/
  if ((c >= '0') && (c <= '9'))
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8001000:	d906      	bls.n	8001010 <bsp_utility_char_to_hex+0x22>
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b39      	cmp	r3, #57	; 0x39
 8001006:	d803      	bhi.n	8001010 <bsp_utility_char_to_hex+0x22>
    result = c - 48;
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	3b30      	subs	r3, #48	; 0x30
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e008      	b.n	8001022 <bsp_utility_char_to_hex+0x34>
  /*A ... F*/
  else if ((c >= 'A') && (c <= 'F'))
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b40      	cmp	r3, #64	; 0x40
 8001014:	d905      	bls.n	8001022 <bsp_utility_char_to_hex+0x34>
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b46      	cmp	r3, #70	; 0x46
 800101a:	d802      	bhi.n	8001022 <bsp_utility_char_to_hex+0x34>
    result = c - 55;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	3b37      	subs	r3, #55	; 0x37
 8001020:	73fb      	strb	r3, [r7, #15]
  return result;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fab6 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f80c 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f8f0 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f000 f8ce 	bl	80011e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001044:	f000 f878 	bl	8001138 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001048:	f000 f8a0 	bl	800118c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bootloader_start_up();
 800104c:	f7ff fb56 	bl	80006fc <bootloader_start_up>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x20>
	...

08001054 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2234      	movs	r2, #52	; 0x34
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fac6 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <SystemClock_Config+0xdc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <SystemClock_Config+0xdc>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <SystemClock_Config+0xdc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SystemClock_Config+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a25      	ldr	r2, [pc, #148]	; (8001134 <SystemClock_Config+0xe0>)
 800109e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <SystemClock_Config+0xe0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80010be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM       = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN       = 180;
 80010c8:	23b4      	movs	r3, #180	; 0xb4
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ       = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR       = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fd7f 	bl	8002be0 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010e8:	f000 f8c2 	bl	8001270 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010ec:	f001 f9de 	bl	80024ac <HAL_PWREx_EnableOverDrive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010f6:	f000 f8bb 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010fa:	230f      	movs	r3, #15
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001106:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2105      	movs	r1, #5
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fa17 	bl	800254c <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001124:	f000 f8a4 	bl	8001270 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	; 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART1_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001170:	f001 ffd4 	bl	800311c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 f879 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000334 	.word	0x20000334
 8001188:	40011000 	.word	0x40011000

0800118c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_USART2_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f001 ffaa 	bl	800311c <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f84f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000378 	.word	0x20000378
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_DMA_Init+0x3c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <MX_DMA_Init+0x3c>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	203a      	movs	r0, #58	; 0x3a
 8001208:	f000 fb19 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800120c:	203a      	movs	r0, #58	; 0x3a
 800120e:	f000 fb32 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_GPIO_Init+0x4c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <MX_GPIO_Init+0x4c>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_GPIO_Init+0x4c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_GPIO_Init+0x4c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <MX_GPIO_Init+0x4c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_GPIO_Init+0x4c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_UART_MspInit+0x158>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d164      	bne.n	80013b8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_UART_MspInit+0x15c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_UART_MspInit+0x15c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_UART_MspInit+0x15c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_UART_MspInit+0x15c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001326:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001338:	2307      	movs	r3, #7
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <HAL_UART_MspInit+0x160>)
 8001344:	f000 ff1e 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_UART_MspInit+0x164>)
 800134a:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <HAL_UART_MspInit+0x168>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_UART_MspInit+0x164>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_UART_MspInit+0x164>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_UART_MspInit+0x164>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800138a:	4829      	ldr	r0, [pc, #164]	; (8001430 <HAL_UART_MspInit+0x164>)
 800138c:	f000 fa8e 	bl	80018ac <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001396:	f7ff ff6b 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_UART_MspInit+0x164>)
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
 80013a0:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_UART_MspInit+0x164>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2025      	movs	r0, #37	; 0x25
 80013ac:	f000 fa47 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013b0:	2025      	movs	r0, #37	; 0x25
 80013b2:	f000 fa60 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b6:	e030      	b.n	800141a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_UART_MspInit+0x16c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12b      	bne.n	800141a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_MspInit+0x15c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140a:	2307      	movs	r3, #7
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_UART_MspInit+0x160>)
 8001416:	f000 feb5 	bl	8002184 <HAL_GPIO_Init>
}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40011000 	.word	0x40011000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	200003bc 	.word	0x200003bc
 8001434:	40026440 	.word	0x40026440
 8001438:	40004400 	.word	0x40004400

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f8de 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <USART1_IRQHandler+0x10>)
 8001496:	f001 ff85 	bl	80033a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000334 	.word	0x20000334

080014a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  g_flag_cplt_dma = 1;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <DMA2_Stream2_IRQHandler+0x14>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <DMA2_Stream2_IRQHandler+0x18>)
 80014b0:	f000 fb94 	bl	8001bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000190 	.word	0x20000190
 80014bc:	200003bc 	.word	0x200003bc

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f003 f848 	bl	8004584 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20020000 	.word	0x20020000
 8001520:	00000400 	.word	0x00000400
 8001524:	2000041c 	.word	0x2000041c
 8001528:	20000438 	.word	0x20000438

0800152c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffd7 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f003 f807 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fd55 	bl	8001030 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001594:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 8001598:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800159c:	20000434 	.word	0x20000434

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f92b 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fe50 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f943 	bl	8001892 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f90b 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000420 	.word	0x20000420

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000420 	.word	0x20000420

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff feda 	bl	8001670 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e099      	b.n	80019fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e8:	e00f      	b.n	800190a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ea:	f7ff fec1 	bl	8001670 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d908      	bls.n	800190a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e078      	b.n	80019fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e8      	bne.n	80018ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_DMA_Init+0x158>)
 8001924:	4013      	ands	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4313      	orrs	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b04      	cmp	r3, #4
 800199c:	d117      	bne.n	80019ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb6b 	bl	800208c <DMA_CheckFifoParam>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ca:	2301      	movs	r3, #1
 80019cc:	e016      	b.n	80019fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fb22 	bl	8002020 <DMA_CalcBaseAndBitshift>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f010803f 	.word	0xf010803f

08001a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Start_IT+0x26>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e040      	b.n	8001ab0 <HAL_DMA_Start_IT+0xa8>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12f      	bne.n	8001aa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fab4 	bl	8001fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0216 	orr.w	r2, r2, #22
 8001a76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ac6:	f7ff fdd3 	bl	8001670 <HAL_GetTick>
 8001aca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e052      	b.n	8001b90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0216 	bic.w	r2, r2, #22
 8001af8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_DMA_Abort+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0208 	bic.w	r2, r2, #8
 8001b28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3a:	e013      	b.n	8001b64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3c:	f7ff fd98 	bl	8001670 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d90c      	bls.n	8001b64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e015      	b.n	8001b90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e4      	bne.n	8001b3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	223f      	movs	r2, #63	; 0x3f
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00c      	b.n	8001bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be8:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <HAL_DMA_IRQHandler+0x248>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a8e      	ldr	r2, [pc, #568]	; (8001e28 <HAL_DMA_IRQHandler+0x24c>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2208      	movs	r2, #8
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2208      	movs	r2, #8
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2210      	movs	r2, #16
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d043      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e01f      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e016      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0208 	bic.w	r2, r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2220      	movs	r2, #32
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 808f 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8087 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2220      	movs	r2, #32
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d136      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x1da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	223f      	movs	r2, #63	; 0x3f
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d07e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
        }
        return;
 8001df2:	e079      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e02c      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000
 8001e28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e01e      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0210 	bic.w	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d307      	bcc.n	8001ec4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x2cc>
 8001ec2:	e000      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e000      	b.n	8001eea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ee8:	bf00      	nop
    }
  }
}
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_DMA_UnRegisterCallback+0x1e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e053      	b.n	8001fb6 <HAL_DMA_UnRegisterCallback+0xc6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d142      	bne.n	8001fa8 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d83c      	bhi.n	8001fa2 <HAL_DMA_UnRegisterCallback+0xb2>
 8001f28:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_DMA_UnRegisterCallback+0x40>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f4d 	.word	0x08001f4d
 8001f34:	08001f55 	.word	0x08001f55
 8001f38:	08001f5d 	.word	0x08001f5d
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	08001f6d 	.word	0x08001f6d
 8001f44:	08001f75 	.word	0x08001f75
 8001f48:	08001f7d 	.word	0x08001f7d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001f52:	e02b      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001f5a:	e027      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001f62:	e023      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001f6a:	e01f      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001f72:	e01b      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8001f7a:	e017      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8001fa0:	e004      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa6:	e001      	b.n	8001fac <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop

08001fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d108      	bne.n	8002004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002002:	e007      	b.n	8002014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3b10      	subs	r3, #16
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <DMA_CalcBaseAndBitshift+0x64>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <DMA_CalcBaseAndBitshift+0x68>)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d909      	bls.n	8002062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	1d1a      	adds	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	; 0x58
 8002060:	e007      	b.n	8002072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	aaaaaaab 	.word	0xaaaaaaab
 8002088:	080051a8 	.word	0x080051a8

0800208c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11f      	bne.n	80020e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d856      	bhi.n	800215a <DMA_CheckFifoParam+0xce>
 80020ac:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <DMA_CheckFifoParam+0x28>)
 80020ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b2:	bf00      	nop
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020d7 	.word	0x080020d7
 80020bc:	080020c5 	.word	0x080020c5
 80020c0:	0800215b 	.word	0x0800215b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d046      	beq.n	800215e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d4:	e043      	b.n	800215e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020de:	d140      	bne.n	8002162 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e4:	e03d      	b.n	8002162 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ee:	d121      	bne.n	8002134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d837      	bhi.n	8002166 <DMA_CheckFifoParam+0xda>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <DMA_CheckFifoParam+0x70>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	0800210d 	.word	0x0800210d
 8002100:	08002113 	.word	0x08002113
 8002104:	0800210d 	.word	0x0800210d
 8002108:	08002125 	.word	0x08002125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      break;
 8002110:	e030      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d025      	beq.n	800216a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002122:	e022      	b.n	800216a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212c:	d11f      	bne.n	800216e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002132:	e01c      	b.n	800216e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d903      	bls.n	8002142 <DMA_CheckFifoParam+0xb6>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d003      	beq.n	8002148 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002140:	e018      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
      break;
 8002146:	e015      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      break;
 8002158:	e00b      	b.n	8002172 <DMA_CheckFifoParam+0xe6>
      break;
 800215a:	bf00      	nop
 800215c:	e00a      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
 8002160:	e008      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
 8002164:	e006      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e004      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e002      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;   
 800216e:	bf00      	nop
 8002170:	e000      	b.n	8002174 <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
    }
  } 
  
  return status; 
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e165      	b.n	800246c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8154 	bne.w	8002466 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d005      	beq.n	80021d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d130      	bne.n	8002238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 0201 	and.w	r2, r3, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b03      	cmp	r3, #3
 8002242:	d017      	beq.n	8002274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0203 	and.w	r2, r3, #3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80ae 	beq.w	8002466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_GPIO_Init+0x300>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a5c      	ldr	r2, [pc, #368]	; (8002484 <HAL_GPIO_Init+0x300>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_GPIO_Init+0x300>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002326:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_GPIO_Init+0x308>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x21a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x30c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x216>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x310>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x212>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x314>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x318>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x20a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x31c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x206>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x320>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x202>
 8002382:	2306      	movs	r3, #6
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002386:	2307      	movs	r3, #7
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x21c>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_GPIO_Init+0x324>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f ae96 	bls.w	80021a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_PWREx_EnableOverDrive+0x90>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_PWREx_EnableOverDrive+0x94>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7ff f8ca 	bl	8001670 <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024e0:	f7ff f8c6 	bl	8001670 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e01f      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff f8b2 	bl	8001670 <HAL_GetTick>
 800250c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800250e:	e009      	b.n	8002524 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002510:	f7ff f8ae 	bl	8001670 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251e:	d901      	bls.n	8002524 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e007      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_PWREx_EnableOverDrive+0x98>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002530:	d1ee      	bne.n	8002510 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	420e0040 	.word	0x420e0040
 8002544:	40007000 	.word	0x40007000
 8002548:	420e0044 	.word	0x420e0044

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cc      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d90c      	bls.n	8002588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d044      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d119      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	2b03      	cmp	r3, #3
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e067      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4934      	ldr	r1, [pc, #208]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7ff f818 	bl	8001670 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7ff f814 	bl	8001670 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d20c      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f855 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe ff78 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08005190 	.word	0x08005190
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	080051a0 	.word	0x080051a0

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	080051a0 	.word	0x080051a0

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b0ae      	sub	sp, #184	; 0xb8
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a6:	4bcb      	ldr	r3, [pc, #812]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	f200 8206 	bhi.w	8002bc0 <HAL_RCC_GetSysClockFreq+0x440>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	08002bc1 	.word	0x08002bc1
 80027c4:	08002bc1 	.word	0x08002bc1
 80027c8:	08002bc1 	.word	0x08002bc1
 80027cc:	080027f9 	.word	0x080027f9
 80027d0:	08002bc1 	.word	0x08002bc1
 80027d4:	08002bc1 	.word	0x08002bc1
 80027d8:	08002bc1 	.word	0x08002bc1
 80027dc:	08002801 	.word	0x08002801
 80027e0:	08002bc1 	.word	0x08002bc1
 80027e4:	08002bc1 	.word	0x08002bc1
 80027e8:	08002bc1 	.word	0x08002bc1
 80027ec:	080029f1 	.word	0x080029f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4bb9      	ldr	r3, [pc, #740]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x358>)
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027f6:	e1e7      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f8:	4bb8      	ldr	r3, [pc, #736]	; (8002adc <HAL_RCC_GetSysClockFreq+0x35c>)
 80027fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027fe:	e1e3      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4bb4      	ldr	r3, [pc, #720]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280c:	4bb1      	ldr	r3, [pc, #708]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d071      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002818:	4bae      	ldr	r3, [pc, #696]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002824:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800283a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800283e:	4622      	mov	r2, r4
 8002840:	462b      	mov	r3, r5
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	f04f 0100 	mov.w	r1, #0
 800284a:	0159      	lsls	r1, r3, #5
 800284c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002850:	0150      	lsls	r0, r2, #5
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4621      	mov	r1, r4
 8002858:	1a51      	subs	r1, r2, r1
 800285a:	6439      	str	r1, [r7, #64]	; 0x40
 800285c:	4629      	mov	r1, r5
 800285e:	eb63 0301 	sbc.w	r3, r3, r1
 8002862:	647b      	str	r3, [r7, #68]	; 0x44
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002870:	4649      	mov	r1, r9
 8002872:	018b      	lsls	r3, r1, #6
 8002874:	4641      	mov	r1, r8
 8002876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800287a:	4641      	mov	r1, r8
 800287c:	018a      	lsls	r2, r1, #6
 800287e:	4641      	mov	r1, r8
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	63b9      	str	r1, [r7, #56]	; 0x38
 8002884:	4649      	mov	r1, r9
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002898:	4649      	mov	r1, r9
 800289a:	00cb      	lsls	r3, r1, #3
 800289c:	4641      	mov	r1, r8
 800289e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028a2:	4641      	mov	r1, r8
 80028a4:	00ca      	lsls	r2, r1, #3
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	4622      	mov	r2, r4
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
 80028b2:	462b      	mov	r3, r5
 80028b4:	460a      	mov	r2, r1
 80028b6:	eb42 0303 	adc.w	r3, r2, r3
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028c8:	4629      	mov	r1, r5
 80028ca:	024b      	lsls	r3, r1, #9
 80028cc:	4621      	mov	r1, r4
 80028ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028d2:	4621      	mov	r1, r4
 80028d4:	024a      	lsls	r2, r1, #9
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028ec:	f7fd fce8 	bl	80002c0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028fa:	e067      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002908:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800290c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	67bb      	str	r3, [r7, #120]	; 0x78
 8002916:	2300      	movs	r3, #0
 8002918:	67fb      	str	r3, [r7, #124]	; 0x7c
 800291a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	62b9      	str	r1, [r7, #40]	; 0x28
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002950:	4649      	mov	r1, r9
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4641      	mov	r1, r8
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4641      	mov	r1, r8
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4641      	mov	r1, r8
 8002960:	ebb2 0a01 	subs.w	sl, r2, r1
 8002964:	4649      	mov	r1, r9
 8002966:	eb63 0b01 	sbc.w	fp, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002976:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800297a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800297e:	4692      	mov	sl, r2
 8002980:	469b      	mov	fp, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb1a 0303 	adds.w	r3, sl, r3
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	462b      	mov	r3, r5
 800298c:	eb4b 0303 	adc.w	r3, fp, r3
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029b4:	2200      	movs	r2, #0
 80029b6:	673b      	str	r3, [r7, #112]	; 0x70
 80029b8:	677a      	str	r2, [r7, #116]	; 0x74
 80029ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029be:	f7fd fc7f 	bl	80002c0 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4613      	mov	r3, r2
 80029c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ee:	e0eb      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d06b      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a08:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	2200      	movs	r2, #0
 8002a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a24:	4622      	mov	r2, r4
 8002a26:	462b      	mov	r3, r5
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	0159      	lsls	r1, r3, #5
 8002a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a36:	0150      	lsls	r0, r2, #5
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	1a51      	subs	r1, r2, r1
 8002a40:	61b9      	str	r1, [r7, #24]
 8002a42:	4629      	mov	r1, r5
 8002a44:	eb63 0301 	sbc.w	r3, r3, r1
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a56:	4659      	mov	r1, fp
 8002a58:	018b      	lsls	r3, r1, #6
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a60:	4651      	mov	r1, sl
 8002a62:	018a      	lsls	r2, r1, #6
 8002a64:	4651      	mov	r1, sl
 8002a66:	ebb2 0801 	subs.w	r8, r2, r1
 8002a6a:	4659      	mov	r1, fp
 8002a6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a84:	4690      	mov	r8, r2
 8002a86:	4699      	mov	r9, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	eb18 0303 	adds.w	r3, r8, r3
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	462b      	mov	r3, r5
 8002a92:	eb49 0303 	adc.w	r3, r9, r3
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	024b      	lsls	r3, r1, #9
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aae:	4621      	mov	r1, r4
 8002ab0:	024a      	lsls	r2, r1, #9
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aba:	2200      	movs	r2, #0
 8002abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002abe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ac4:	f7fd fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad2:	e065      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae0:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	4611      	mov	r1, r2
 8002aec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002af0:	653b      	str	r3, [r7, #80]	; 0x50
 8002af2:	2300      	movs	r3, #0
 8002af4:	657b      	str	r3, [r7, #84]	; 0x54
 8002af6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002afa:	4642      	mov	r2, r8
 8002afc:	464b      	mov	r3, r9
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	0159      	lsls	r1, r3, #5
 8002b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0c:	0150      	lsls	r0, r2, #5
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4641      	mov	r1, r8
 8002b14:	1a51      	subs	r1, r2, r1
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	4649      	mov	r1, r9
 8002b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	018b      	lsls	r3, r1, #6
 8002b30:	4651      	mov	r1, sl
 8002b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b36:	4651      	mov	r1, sl
 8002b38:	018a      	lsls	r2, r1, #6
 8002b3a:	4651      	mov	r1, sl
 8002b3c:	1a54      	subs	r4, r2, r1
 8002b3e:	4659      	mov	r1, fp
 8002b40:	eb63 0501 	sbc.w	r5, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb45 0303 	adc.w	r3, r5, r3
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b72:	4629      	mov	r1, r5
 8002b74:	028b      	lsls	r3, r1, #10
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	028a      	lsls	r2, r1, #10
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b88:	2200      	movs	r2, #0
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b92:	f7fd fb95 	bl	80002c0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0f1b      	lsrs	r3, r3, #28
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bbe:	e003      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	37b8      	adds	r7, #184	; 0xb8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400

08002be0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e28d      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8083 	beq.w	8002d06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c00:	4b94      	ldr	r3, [pc, #592]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d019      	beq.n	8002c40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c0c:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c18:	4b8e      	ldr	r3, [pc, #568]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d00c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d112      	bne.n	8002c58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x124>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d157      	bne.n	8002d04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e25a      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x90>
 8002c62:	4b7c      	ldr	r3, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7b      	ldr	r2, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xcc>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0xb4>
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a72      	ldr	r2, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xcc>
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6b      	ldr	r2, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fcdc 	bl	8001670 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fcd8 	bl	8001670 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e21f      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xdc>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fcc8 	bl	8001670 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fcc4 	bl	8001670 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e20b      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x104>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06f      	beq.n	8002df2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x186>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1d3      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x278>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fc71 	bl	8001670 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fc6d 	bl	8001670 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1b4      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x278>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fc50 	bl	8001670 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fc4c 	bl	8001670 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e193      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d036      	beq.n	8002e6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fc30 	bl	8001670 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fc2c 	bl	8001670 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e173      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x234>
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fc19 	bl	8001670 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e00e      	b.n	8002e60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe fc15 	bl	8001670 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d907      	bls.n	8002e60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e15c      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
 8002e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ea      	bne.n	8002e42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8097 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b83      	ldr	r3, [pc, #524]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a7e      	ldr	r2, [pc, #504]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b7c      	ldr	r3, [pc, #496]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b79      	ldr	r3, [pc, #484]	; (8003090 <HAL_RCC_OscConfig+0x4b0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x4b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a75      	ldr	r2, [pc, #468]	; (8003090 <HAL_RCC_OscConfig+0x4b0>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbd5 	bl	8001670 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fbd1 	bl	8001670 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e118      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x4b0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x31e>
 8002ef0:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a65      	ldr	r2, [pc, #404]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x358>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x340>
 8002f06:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a60      	ldr	r2, [pc, #384]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b5e      	ldr	r3, [pc, #376]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5d      	ldr	r2, [pc, #372]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x358>
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a59      	ldr	r2, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a56      	ldr	r2, [pc, #344]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe fb96 	bl	8001670 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe fb92 	bl	8001670 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0d7      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ee      	beq.n	8002f48 <HAL_RCC_OscConfig+0x368>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fb80 	bl	8001670 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe fb7c 	bl	8001670 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0c1      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ee      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a3a      	ldr	r2, [pc, #232]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80ad 	beq.w	800310c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d060      	beq.n	8003080 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d145      	bne.n	8003052 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_RCC_OscConfig+0x4b4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fb50 	bl	8001670 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe fb4c 	bl	8001670 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e093      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	071b      	lsls	r3, r3, #28
 800301e:	491b      	ldr	r1, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4b4>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fb21 	bl	8001670 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fb1d 	bl	8001670 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e064      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x452>
 8003050:	e05c      	b.n	800310c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_OscConfig+0x4b4>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fb0a 	bl	8001670 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fb06 	bl	8001670 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e04d      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_OscConfig+0x4ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x480>
 800307e:	e045      	b.n	800310c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e040      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000
 8003094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_RCC_OscConfig+0x538>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d030      	beq.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d129      	bne.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d122      	bne.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d119      	bne.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d10f      	bne.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e03f      	b.n	80031ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f8c2 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800315e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 ff9b 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b08a      	sub	sp, #40	; 0x28
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d17c      	bne.n	80032d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_Transmit+0x2c>
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e075      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit+0x3e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e06e      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320a:	f7fe fa31 	bl	8001670 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d108      	bne.n	8003238 <HAL_UART_Transmit+0x82>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e003      	b.n	8003240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003248:	e02a      	b.n	80032a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fc53 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e007      	b.n	8003292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	3301      	adds	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1cf      	bne.n	800324a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fc23 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08c      	sub	sp, #48	; 0x30
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d152      	bne.n	800339a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04b      	b.n	800339c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800330e:	2302      	movs	r3, #2
 8003310:	e044      	b.n	800339c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	461a      	mov	r2, r3
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fc58 	bl	8003bdc <UART_Start_Receive_DMA>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d12c      	bne.n	8003394 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	2b01      	cmp	r3, #1
 8003340:	d125      	bne.n	800338e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	617b      	str	r3, [r7, #20]
   return(result);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003378:	627a      	str	r2, [r7, #36]	; 0x24
 800337a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	61fb      	str	r3, [r7, #28]
   return(result);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800338c:	e002      	b.n	8003394 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003398:	e000      	b.n	800339c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3730      	adds	r7, #48	; 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0ba      	sub	sp, #232	; 0xe8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_UART_IRQHandler+0x66>
 80033f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd8f 	bl	8003f26 <UART_Receive_IT>
      return;
 8003408:	e256      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800340a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80de 	beq.w	80035d0 <HAL_UART_IRQHandler+0x22c>
 8003414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80d1 	beq.w	80035d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_UART_IRQHandler+0xae>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_UART_IRQHandler+0xd2>
 800345e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0202 	orr.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_UART_IRQHandler+0xf6>
 8003482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d011      	beq.n	80034ca <HAL_UART_IRQHandler+0x126>
 80034a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0208 	orr.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 81ed 	beq.w	80038ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x14e>
 80034e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fd1a 	bl	8003f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_UART_IRQHandler+0x17a>
 8003516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04f      	beq.n	80035be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fc22 	bl	8003d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d141      	bne.n	80035b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800354c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800356a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1d9      	bne.n	8003532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4a7d      	ldr	r2, [pc, #500]	; (8003780 <HAL_UART_IRQHandler+0x3dc>)
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fb00 	bl	8001b98 <HAL_DMA_Abort_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e00e      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9a4 	bl	80038fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	e00a      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9a0 	bl	80038fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e006      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f99c 	bl	80038fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035ca:	e170      	b.n	80038ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	bf00      	nop
    return;
 80035ce:	e16e      	b.n	80038ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 814a 	bne.w	800386e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8143 	beq.w	800386e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 813c 	beq.w	800386e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	f040 80b4 	bne.w	8003784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8140 	beq.w	80038b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	429a      	cmp	r2, r3
 800363c:	f080 8139 	bcs.w	80038b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	f000 8088 	beq.w	8003766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800366c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800368e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800369a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1d9      	bne.n	8003656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e1      	bne.n	80036a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003736:	f023 0310 	bic.w	r3, r3, #16
 800373a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003748:	65ba      	str	r2, [r7, #88]	; 0x58
 800374a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800374e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e3      	bne.n	8003724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe f9a9 	bl	8001ab8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376e:	b29b      	uxth	r3, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fa5c 	bl	8000c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800377c:	e099      	b.n	80038b2 <HAL_UART_IRQHandler+0x50e>
 800377e:	bf00      	nop
 8003780:	08003e2f 	.word	0x08003e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 808b 	beq.w	80038b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ce:	647a      	str	r2, [r7, #68]	; 0x44
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e3      	bne.n	80037aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	623b      	str	r3, [r7, #32]
   return(result);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003806:	633a      	str	r2, [r7, #48]	; 0x30
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e3      	bne.n	80037e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	60fb      	str	r3, [r7, #12]
   return(result);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	617b      	str	r3, [r7, #20]
   return(result);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e3      	bne.n	8003828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd f9e4 	bl	8000c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800386c:	e023      	b.n	80038b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_UART_IRQHandler+0x4ea>
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fae5 	bl	8003e56 <UART_Transmit_IT>
    return;
 800388c:	e014      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <HAL_UART_IRQHandler+0x514>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fb25 	bl	8003ef6 <UART_EndTransmit_IT>
    return;
 80038ac:	e004      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
    return;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
      return;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
      return;
 80038b6:	bf00      	nop
  }
}
 80038b8:	37e8      	adds	r7, #232	; 0xe8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop

080038c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b09c      	sub	sp, #112	; 0x70
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d172      	bne.n	8003a12 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	2200      	movs	r2, #0
 8003930:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003948:	66bb      	str	r3, [r7, #104]	; 0x68
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003952:	65ba      	str	r2, [r7, #88]	; 0x58
 8003954:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003986:	647a      	str	r2, [r7, #68]	; 0x44
 8003988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800398c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	623b      	str	r3, [r7, #32]
   return(result);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b0:	663b      	str	r3, [r7, #96]	; 0x60
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039ba:	633a      	str	r2, [r7, #48]	; 0x30
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d119      	bne.n	8003a12 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039fe:	61fa      	str	r2, [r7, #28]
 8003a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d106      	bne.n	8003a28 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a22:	f7fd f907 	bl	8000c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a26:	e002      	b.n	8003a2e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a2a:	f7ff ff53 	bl	80038d4 <HAL_UART_RxCpltCallback>
}
 8003a2e:	bf00      	nop
 8003a30:	3770      	adds	r7, #112	; 0x70
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d108      	bne.n	8003a5e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7fd f8ec 	bl	8000c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a5c:	e002      	b.n	8003a64 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff42 	bl	80038e8 <HAL_UART_RxHalfCpltCallback>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b21      	cmp	r3, #33	; 0x21
 8003a9e:	d108      	bne.n	8003ab2 <UART_DMAError+0x46>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003aac:	68b8      	ldr	r0, [r7, #8]
 8003aae:	f000 f933 	bl	8003d18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b22      	cmp	r3, #34	; 0x22
 8003ad2:	d108      	bne.n	8003ae6 <UART_DMAError+0x7a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ae0:	68b8      	ldr	r0, [r7, #8]
 8003ae2:	f000 f941 	bl	8003d68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af2:	68b8      	ldr	r0, [r7, #8]
 8003af4:	f7ff ff02 	bl	80038fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b090      	sub	sp, #64	; 0x40
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e050      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d04c      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b20:	f7fd fda6 	bl	8001670 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d241      	bcs.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b50:	637a      	str	r2, [r7, #52]	; 0x34
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b84:	623a      	str	r2, [r7, #32]
 8003b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00f      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d09f      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3740      	adds	r7, #64	; 0x40
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b098      	sub	sp, #96	; 0x60
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	; 0x22
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4a40      	ldr	r2, [pc, #256]	; (8003d0c <UART_Start_Receive_DMA+0x130>)
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4a3f      	ldr	r2, [pc, #252]	; (8003d10 <UART_Start_Receive_DMA+0x134>)
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	4a3e      	ldr	r2, [pc, #248]	; (8003d14 <UART_Start_Receive_DMA+0x138>)
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2200      	movs	r2, #0
 8003c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c24:	f107 0308 	add.w	r3, r7, #8
 8003c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	f7fd fee4 	bl	8001a08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e5      	bne.n	8003c66 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cba:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3314      	adds	r3, #20
 8003cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cee:	627a      	str	r2, [r7, #36]	; 0x24
 8003cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6a39      	ldr	r1, [r7, #32]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e5      	bne.n	8003cce <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3760      	adds	r7, #96	; 0x60
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08003911 	.word	0x08003911
 8003d10:	08003a37 	.word	0x08003a37
 8003d14:	08003a6d 	.word	0x08003a6d

08003d18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	61ba      	str	r2, [r7, #24]
 8003d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d5c:	bf00      	nop
 8003d5e:	3724      	adds	r7, #36	; 0x24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b095      	sub	sp, #84	; 0x54
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d90:	643a      	str	r2, [r7, #64]	; 0x40
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d119      	bne.n	8003e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e00:	61ba      	str	r2, [r7, #24]
 8003e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e22:	bf00      	nop
 8003e24:	3754      	adds	r7, #84	; 0x54
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fd57 	bl	80038fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b21      	cmp	r3, #33	; 0x21
 8003e68:	d13e      	bne.n	8003ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d114      	bne.n	8003e9e <UART_Transmit_IT+0x48>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d110      	bne.n	8003e9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]
 8003e9c:	e008      	b.n	8003eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6211      	str	r1, [r2, #32]
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10f      	bne.n	8003ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fcd2 	bl	80038c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08c      	sub	sp, #48	; 0x30
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	f040 80ab 	bne.w	8004092 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d117      	bne.n	8003f76 <UART_Receive_IT+0x50>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	1c9a      	adds	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
 8003f74:	e026      	b.n	8003fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d007      	beq.n	8003f9a <UART_Receive_IT+0x74>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <UART_Receive_IT+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e008      	b.n	8003fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d15a      	bne.n	800408e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0220 	bic.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d135      	bne.n	8004084 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	623a      	str	r2, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	61bb      	str	r3, [r7, #24]
   return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d10a      	bne.n	8004076 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fc fdd9 	bl	8000c34 <HAL_UARTEx_RxEventCallback>
 8004082:	e002      	b.n	800408a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fc25 	bl	80038d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	; 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f4:	f021 010c 	bic.w	r1, r1, #12
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	ea40 0301 	orr.w	r3, r0, r1
 8004122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <UART_SetConfig+0x2cc>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0xa0>
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8d      	ldr	r3, [pc, #564]	; (800436c <UART_SetConfig+0x2d0>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe fb0c 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8004140:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004144:	e003      	b.n	800414e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7fe faf3 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800414a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	f040 810c 	bne.w	8004374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800415c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800416a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1891      	adds	r1, r2, r2
 8004174:	65b9      	str	r1, [r7, #88]	; 0x58
 8004176:	415b      	adcs	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417e:	4621      	mov	r1, r4
 8004180:	eb12 0801 	adds.w	r8, r2, r1
 8004184:	4629      	mov	r1, r5
 8004186:	eb43 0901 	adc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041ac:	462b      	mov	r3, r5
 80041ae:	eb49 0303 	adc.w	r3, r9, r3
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ca:	460b      	mov	r3, r1
 80041cc:	18db      	adds	r3, r3, r3
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
 80041d0:	4613      	mov	r3, r2
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
 80041d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041e0:	f7fc f86e 	bl	80002c0 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	64b9      	str	r1, [r7, #72]	; 0x48
 800420c:	415b      	adcs	r3, r3
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004214:	4641      	mov	r1, r8
 8004216:	eb12 0a01 	adds.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0b01 	adc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4643      	mov	r3, r8
 800423a:	eb1a 0303 	adds.w	r3, sl, r3
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004242:	464b      	mov	r3, r9
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004258:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800425c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004276:	f7fc f823 	bl	80002c0 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	; 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <UART_SetConfig+0x2d4>)
 8004298:	fba3 2302 	umull	r2, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a4:	441c      	add	r4, r3
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	63b9      	str	r1, [r7, #56]	; 0x38
 80042c0:	415b      	adcs	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6339      	str	r1, [r7, #48]	; 0x30
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004314:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800431c:	460b      	mov	r3, r1
 800431e:	18db      	adds	r3, r3, r3
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
 8004322:	4613      	mov	r3, r2
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004332:	f7fb ffc5 	bl	80002c0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x2d4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <UART_SetConfig+0x2d4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004364:	e105      	b.n	8004572 <UART_SetConfig+0x4d6>
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000
 800436c:	40011400 	.word	0x40011400
 8004370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6239      	str	r1, [r7, #32]
 800438e:	415b      	adcs	r3, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	4641      	mov	r1, r8
 8004398:	1854      	adds	r4, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0501 	adc.w	r5, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	464b      	mov	r3, r9
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043e2:	4629      	mov	r1, r5
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4621      	mov	r1, r4
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f4:	f7fb ff64 	bl	80002c0 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b60      	ldr	r3, [pc, #384]	; (8004580 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	61b9      	str	r1, [r7, #24]
 8004420:	415b      	adcs	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6139      	str	r1, [r7, #16]
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	67bb      	str	r3, [r7, #120]	; 0x78
 8004472:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004480:	4649      	mov	r1, r9
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	4641      	mov	r1, r8
 8004486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448a:	4641      	mov	r1, r8
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004492:	f7fb ff15 	bl	80002c0 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <UART_SetConfig+0x4e4>)
 800449c:	fba3 1302 	umull	r1, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2164      	movs	r1, #100	; 0x64
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <UART_SetConfig+0x4e4>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ba:	441c      	add	r4, r3
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	673b      	str	r3, [r7, #112]	; 0x70
 80044c4:	677a      	str	r2, [r7, #116]	; 0x74
 80044c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ca:	4642      	mov	r2, r8
 80044cc:	464b      	mov	r3, r9
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	415b      	adcs	r3, r3
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044da:	4641      	mov	r1, r8
 80044dc:	1851      	adds	r1, r2, r1
 80044de:	6039      	str	r1, [r7, #0]
 80044e0:	4649      	mov	r1, r9
 80044e2:	414b      	adcs	r3, r1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f2:	4659      	mov	r1, fp
 80044f4:	00cb      	lsls	r3, r1, #3
 80044f6:	4651      	mov	r1, sl
 80044f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fc:	4651      	mov	r1, sl
 80044fe:	00ca      	lsls	r2, r1, #3
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	4603      	mov	r3, r0
 8004506:	4642      	mov	r2, r8
 8004508:	189b      	adds	r3, r3, r2
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	663b      	str	r3, [r7, #96]	; 0x60
 8004520:	667a      	str	r2, [r7, #100]	; 0x64
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452e:	4649      	mov	r1, r9
 8004530:	008b      	lsls	r3, r1, #2
 8004532:	4641      	mov	r1, r8
 8004534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004538:	4641      	mov	r1, r8
 800453a:	008a      	lsls	r2, r1, #2
 800453c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004540:	f7fb febe 	bl	80002c0 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <UART_SetConfig+0x4e4>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2164      	movs	r1, #100	; 0x64
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <UART_SetConfig+0x4e4>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4422      	add	r2, r4
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <__errno>:
 8004584:	4b01      	ldr	r3, [pc, #4]	; (800458c <__errno+0x8>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 fc8e 	bl	8004ec4 <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	080051ec 	.word	0x080051ec
 80045cc:	080051ec 	.word	0x080051ec
 80045d0:	080051ec 	.word	0x080051ec
 80045d4:	080051f0 	.word	0x080051f0

080045d8 <memcpy>:
 80045d8:	440a      	add	r2, r1
 80045da:	4291      	cmp	r1, r2
 80045dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80045e0:	d100      	bne.n	80045e4 <memcpy+0xc>
 80045e2:	4770      	bx	lr
 80045e4:	b510      	push	{r4, lr}
 80045e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ee:	4291      	cmp	r1, r2
 80045f0:	d1f9      	bne.n	80045e6 <memcpy+0xe>
 80045f2:	bd10      	pop	{r4, pc}

080045f4 <memset>:
 80045f4:	4402      	add	r2, r0
 80045f6:	4603      	mov	r3, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <siprintf>:
 8004604:	b40e      	push	{r1, r2, r3}
 8004606:	b500      	push	{lr}
 8004608:	b09c      	sub	sp, #112	; 0x70
 800460a:	ab1d      	add	r3, sp, #116	; 0x74
 800460c:	9002      	str	r0, [sp, #8]
 800460e:	9006      	str	r0, [sp, #24]
 8004610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004614:	4809      	ldr	r0, [pc, #36]	; (800463c <siprintf+0x38>)
 8004616:	9107      	str	r1, [sp, #28]
 8004618:	9104      	str	r1, [sp, #16]
 800461a:	4909      	ldr	r1, [pc, #36]	; (8004640 <siprintf+0x3c>)
 800461c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004620:	9105      	str	r1, [sp, #20]
 8004622:	6800      	ldr	r0, [r0, #0]
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	a902      	add	r1, sp, #8
 8004628:	f000 f868 	bl	80046fc <_svfiprintf_r>
 800462c:	9b02      	ldr	r3, [sp, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	b01c      	add	sp, #112	; 0x70
 8004634:	f85d eb04 	ldr.w	lr, [sp], #4
 8004638:	b003      	add	sp, #12
 800463a:	4770      	bx	lr
 800463c:	2000000c 	.word	0x2000000c
 8004640:	ffff0208 	.word	0xffff0208

08004644 <__ssputs_r>:
 8004644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	688e      	ldr	r6, [r1, #8]
 800464a:	429e      	cmp	r6, r3
 800464c:	4682      	mov	sl, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4690      	mov	r8, r2
 8004652:	461f      	mov	r7, r3
 8004654:	d838      	bhi.n	80046c8 <__ssputs_r+0x84>
 8004656:	898a      	ldrh	r2, [r1, #12]
 8004658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800465c:	d032      	beq.n	80046c4 <__ssputs_r+0x80>
 800465e:	6825      	ldr	r5, [r4, #0]
 8004660:	6909      	ldr	r1, [r1, #16]
 8004662:	eba5 0901 	sub.w	r9, r5, r1
 8004666:	6965      	ldr	r5, [r4, #20]
 8004668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800466c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004670:	3301      	adds	r3, #1
 8004672:	444b      	add	r3, r9
 8004674:	106d      	asrs	r5, r5, #1
 8004676:	429d      	cmp	r5, r3
 8004678:	bf38      	it	cc
 800467a:	461d      	movcc	r5, r3
 800467c:	0553      	lsls	r3, r2, #21
 800467e:	d531      	bpl.n	80046e4 <__ssputs_r+0xa0>
 8004680:	4629      	mov	r1, r5
 8004682:	f000 fb55 	bl	8004d30 <_malloc_r>
 8004686:	4606      	mov	r6, r0
 8004688:	b950      	cbnz	r0, 80046a0 <__ssputs_r+0x5c>
 800468a:	230c      	movs	r3, #12
 800468c:	f8ca 3000 	str.w	r3, [sl]
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a0:	6921      	ldr	r1, [r4, #16]
 80046a2:	464a      	mov	r2, r9
 80046a4:	f7ff ff98 	bl	80045d8 <memcpy>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	6126      	str	r6, [r4, #16]
 80046b6:	6165      	str	r5, [r4, #20]
 80046b8:	444e      	add	r6, r9
 80046ba:	eba5 0509 	sub.w	r5, r5, r9
 80046be:	6026      	str	r6, [r4, #0]
 80046c0:	60a5      	str	r5, [r4, #8]
 80046c2:	463e      	mov	r6, r7
 80046c4:	42be      	cmp	r6, r7
 80046c6:	d900      	bls.n	80046ca <__ssputs_r+0x86>
 80046c8:	463e      	mov	r6, r7
 80046ca:	6820      	ldr	r0, [r4, #0]
 80046cc:	4632      	mov	r2, r6
 80046ce:	4641      	mov	r1, r8
 80046d0:	f000 faa8 	bl	8004c24 <memmove>
 80046d4:	68a3      	ldr	r3, [r4, #8]
 80046d6:	1b9b      	subs	r3, r3, r6
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	4433      	add	r3, r6
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	2000      	movs	r0, #0
 80046e2:	e7db      	b.n	800469c <__ssputs_r+0x58>
 80046e4:	462a      	mov	r2, r5
 80046e6:	f000 fb97 	bl	8004e18 <_realloc_r>
 80046ea:	4606      	mov	r6, r0
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1e1      	bne.n	80046b4 <__ssputs_r+0x70>
 80046f0:	6921      	ldr	r1, [r4, #16]
 80046f2:	4650      	mov	r0, sl
 80046f4:	f000 fab0 	bl	8004c58 <_free_r>
 80046f8:	e7c7      	b.n	800468a <__ssputs_r+0x46>
	...

080046fc <_svfiprintf_r>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	4698      	mov	r8, r3
 8004702:	898b      	ldrh	r3, [r1, #12]
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	b09d      	sub	sp, #116	; 0x74
 8004708:	4607      	mov	r7, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4614      	mov	r4, r2
 800470e:	d50e      	bpl.n	800472e <_svfiprintf_r+0x32>
 8004710:	690b      	ldr	r3, [r1, #16]
 8004712:	b963      	cbnz	r3, 800472e <_svfiprintf_r+0x32>
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	f000 fb0b 	bl	8004d30 <_malloc_r>
 800471a:	6028      	str	r0, [r5, #0]
 800471c:	6128      	str	r0, [r5, #16]
 800471e:	b920      	cbnz	r0, 800472a <_svfiprintf_r+0x2e>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	e0d1      	b.n	80048ce <_svfiprintf_r+0x1d2>
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	616b      	str	r3, [r5, #20]
 800472e:	2300      	movs	r3, #0
 8004730:	9309      	str	r3, [sp, #36]	; 0x24
 8004732:	2320      	movs	r3, #32
 8004734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004738:	f8cd 800c 	str.w	r8, [sp, #12]
 800473c:	2330      	movs	r3, #48	; 0x30
 800473e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048e8 <_svfiprintf_r+0x1ec>
 8004742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004746:	f04f 0901 	mov.w	r9, #1
 800474a:	4623      	mov	r3, r4
 800474c:	469a      	mov	sl, r3
 800474e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004752:	b10a      	cbz	r2, 8004758 <_svfiprintf_r+0x5c>
 8004754:	2a25      	cmp	r2, #37	; 0x25
 8004756:	d1f9      	bne.n	800474c <_svfiprintf_r+0x50>
 8004758:	ebba 0b04 	subs.w	fp, sl, r4
 800475c:	d00b      	beq.n	8004776 <_svfiprintf_r+0x7a>
 800475e:	465b      	mov	r3, fp
 8004760:	4622      	mov	r2, r4
 8004762:	4629      	mov	r1, r5
 8004764:	4638      	mov	r0, r7
 8004766:	f7ff ff6d 	bl	8004644 <__ssputs_r>
 800476a:	3001      	adds	r0, #1
 800476c:	f000 80aa 	beq.w	80048c4 <_svfiprintf_r+0x1c8>
 8004770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004772:	445a      	add	r2, fp
 8004774:	9209      	str	r2, [sp, #36]	; 0x24
 8004776:	f89a 3000 	ldrb.w	r3, [sl]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80a2 	beq.w	80048c4 <_svfiprintf_r+0x1c8>
 8004780:	2300      	movs	r3, #0
 8004782:	f04f 32ff 	mov.w	r2, #4294967295
 8004786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800478a:	f10a 0a01 	add.w	sl, sl, #1
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	9307      	str	r3, [sp, #28]
 8004792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004796:	931a      	str	r3, [sp, #104]	; 0x68
 8004798:	4654      	mov	r4, sl
 800479a:	2205      	movs	r2, #5
 800479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a0:	4851      	ldr	r0, [pc, #324]	; (80048e8 <_svfiprintf_r+0x1ec>)
 80047a2:	f7fb fd3d 	bl	8000220 <memchr>
 80047a6:	9a04      	ldr	r2, [sp, #16]
 80047a8:	b9d8      	cbnz	r0, 80047e2 <_svfiprintf_r+0xe6>
 80047aa:	06d0      	lsls	r0, r2, #27
 80047ac:	bf44      	itt	mi
 80047ae:	2320      	movmi	r3, #32
 80047b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b4:	0711      	lsls	r1, r2, #28
 80047b6:	bf44      	itt	mi
 80047b8:	232b      	movmi	r3, #43	; 0x2b
 80047ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047be:	f89a 3000 	ldrb.w	r3, [sl]
 80047c2:	2b2a      	cmp	r3, #42	; 0x2a
 80047c4:	d015      	beq.n	80047f2 <_svfiprintf_r+0xf6>
 80047c6:	9a07      	ldr	r2, [sp, #28]
 80047c8:	4654      	mov	r4, sl
 80047ca:	2000      	movs	r0, #0
 80047cc:	f04f 0c0a 	mov.w	ip, #10
 80047d0:	4621      	mov	r1, r4
 80047d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047d6:	3b30      	subs	r3, #48	; 0x30
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d94e      	bls.n	800487a <_svfiprintf_r+0x17e>
 80047dc:	b1b0      	cbz	r0, 800480c <_svfiprintf_r+0x110>
 80047de:	9207      	str	r2, [sp, #28]
 80047e0:	e014      	b.n	800480c <_svfiprintf_r+0x110>
 80047e2:	eba0 0308 	sub.w	r3, r0, r8
 80047e6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	9304      	str	r3, [sp, #16]
 80047ee:	46a2      	mov	sl, r4
 80047f0:	e7d2      	b.n	8004798 <_svfiprintf_r+0x9c>
 80047f2:	9b03      	ldr	r3, [sp, #12]
 80047f4:	1d19      	adds	r1, r3, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	9103      	str	r1, [sp, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bfbb      	ittet	lt
 80047fe:	425b      	neglt	r3, r3
 8004800:	f042 0202 	orrlt.w	r2, r2, #2
 8004804:	9307      	strge	r3, [sp, #28]
 8004806:	9307      	strlt	r3, [sp, #28]
 8004808:	bfb8      	it	lt
 800480a:	9204      	strlt	r2, [sp, #16]
 800480c:	7823      	ldrb	r3, [r4, #0]
 800480e:	2b2e      	cmp	r3, #46	; 0x2e
 8004810:	d10c      	bne.n	800482c <_svfiprintf_r+0x130>
 8004812:	7863      	ldrb	r3, [r4, #1]
 8004814:	2b2a      	cmp	r3, #42	; 0x2a
 8004816:	d135      	bne.n	8004884 <_svfiprintf_r+0x188>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	9203      	str	r2, [sp, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	bfb8      	it	lt
 8004824:	f04f 33ff 	movlt.w	r3, #4294967295
 8004828:	3402      	adds	r4, #2
 800482a:	9305      	str	r3, [sp, #20]
 800482c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048f8 <_svfiprintf_r+0x1fc>
 8004830:	7821      	ldrb	r1, [r4, #0]
 8004832:	2203      	movs	r2, #3
 8004834:	4650      	mov	r0, sl
 8004836:	f7fb fcf3 	bl	8000220 <memchr>
 800483a:	b140      	cbz	r0, 800484e <_svfiprintf_r+0x152>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	eba0 000a 	sub.w	r0, r0, sl
 8004842:	fa03 f000 	lsl.w	r0, r3, r0
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	4303      	orrs	r3, r0
 800484a:	3401      	adds	r4, #1
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004852:	4826      	ldr	r0, [pc, #152]	; (80048ec <_svfiprintf_r+0x1f0>)
 8004854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004858:	2206      	movs	r2, #6
 800485a:	f7fb fce1 	bl	8000220 <memchr>
 800485e:	2800      	cmp	r0, #0
 8004860:	d038      	beq.n	80048d4 <_svfiprintf_r+0x1d8>
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <_svfiprintf_r+0x1f4>)
 8004864:	bb1b      	cbnz	r3, 80048ae <_svfiprintf_r+0x1b2>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	3307      	adds	r3, #7
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	3308      	adds	r3, #8
 8004870:	9303      	str	r3, [sp, #12]
 8004872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004874:	4433      	add	r3, r6
 8004876:	9309      	str	r3, [sp, #36]	; 0x24
 8004878:	e767      	b.n	800474a <_svfiprintf_r+0x4e>
 800487a:	fb0c 3202 	mla	r2, ip, r2, r3
 800487e:	460c      	mov	r4, r1
 8004880:	2001      	movs	r0, #1
 8004882:	e7a5      	b.n	80047d0 <_svfiprintf_r+0xd4>
 8004884:	2300      	movs	r3, #0
 8004886:	3401      	adds	r4, #1
 8004888:	9305      	str	r3, [sp, #20]
 800488a:	4619      	mov	r1, r3
 800488c:	f04f 0c0a 	mov.w	ip, #10
 8004890:	4620      	mov	r0, r4
 8004892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004896:	3a30      	subs	r2, #48	; 0x30
 8004898:	2a09      	cmp	r2, #9
 800489a:	d903      	bls.n	80048a4 <_svfiprintf_r+0x1a8>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0c5      	beq.n	800482c <_svfiprintf_r+0x130>
 80048a0:	9105      	str	r1, [sp, #20]
 80048a2:	e7c3      	b.n	800482c <_svfiprintf_r+0x130>
 80048a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a8:	4604      	mov	r4, r0
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7f0      	b.n	8004890 <_svfiprintf_r+0x194>
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <_svfiprintf_r+0x1f8>)
 80048b6:	a904      	add	r1, sp, #16
 80048b8:	4638      	mov	r0, r7
 80048ba:	f3af 8000 	nop.w
 80048be:	1c42      	adds	r2, r0, #1
 80048c0:	4606      	mov	r6, r0
 80048c2:	d1d6      	bne.n	8004872 <_svfiprintf_r+0x176>
 80048c4:	89ab      	ldrh	r3, [r5, #12]
 80048c6:	065b      	lsls	r3, r3, #25
 80048c8:	f53f af2c 	bmi.w	8004724 <_svfiprintf_r+0x28>
 80048cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ce:	b01d      	add	sp, #116	; 0x74
 80048d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	462a      	mov	r2, r5
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <_svfiprintf_r+0x1f8>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4638      	mov	r0, r7
 80048e0:	f000 f87a 	bl	80049d8 <_printf_i>
 80048e4:	e7eb      	b.n	80048be <_svfiprintf_r+0x1c2>
 80048e6:	bf00      	nop
 80048e8:	080051b0 	.word	0x080051b0
 80048ec:	080051ba 	.word	0x080051ba
 80048f0:	00000000 	.word	0x00000000
 80048f4:	08004645 	.word	0x08004645
 80048f8:	080051b6 	.word	0x080051b6

080048fc <_printf_common>:
 80048fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004900:	4616      	mov	r6, r2
 8004902:	4699      	mov	r9, r3
 8004904:	688a      	ldr	r2, [r1, #8]
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800490c:	4293      	cmp	r3, r2
 800490e:	bfb8      	it	lt
 8004910:	4613      	movlt	r3, r2
 8004912:	6033      	str	r3, [r6, #0]
 8004914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004918:	4607      	mov	r7, r0
 800491a:	460c      	mov	r4, r1
 800491c:	b10a      	cbz	r2, 8004922 <_printf_common+0x26>
 800491e:	3301      	adds	r3, #1
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	0699      	lsls	r1, r3, #26
 8004926:	bf42      	ittt	mi
 8004928:	6833      	ldrmi	r3, [r6, #0]
 800492a:	3302      	addmi	r3, #2
 800492c:	6033      	strmi	r3, [r6, #0]
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	f015 0506 	ands.w	r5, r5, #6
 8004934:	d106      	bne.n	8004944 <_printf_common+0x48>
 8004936:	f104 0a19 	add.w	sl, r4, #25
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	6832      	ldr	r2, [r6, #0]
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	42ab      	cmp	r3, r5
 8004942:	dc26      	bgt.n	8004992 <_printf_common+0x96>
 8004944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004948:	1e13      	subs	r3, r2, #0
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	bf18      	it	ne
 800494e:	2301      	movne	r3, #1
 8004950:	0692      	lsls	r2, r2, #26
 8004952:	d42b      	bmi.n	80049ac <_printf_common+0xb0>
 8004954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d01e      	beq.n	80049a0 <_printf_common+0xa4>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	68e5      	ldr	r5, [r4, #12]
 8004966:	6832      	ldr	r2, [r6, #0]
 8004968:	f003 0306 	and.w	r3, r3, #6
 800496c:	2b04      	cmp	r3, #4
 800496e:	bf08      	it	eq
 8004970:	1aad      	subeq	r5, r5, r2
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	bf0c      	ite	eq
 8004978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800497c:	2500      	movne	r5, #0
 800497e:	4293      	cmp	r3, r2
 8004980:	bfc4      	itt	gt
 8004982:	1a9b      	subgt	r3, r3, r2
 8004984:	18ed      	addgt	r5, r5, r3
 8004986:	2600      	movs	r6, #0
 8004988:	341a      	adds	r4, #26
 800498a:	42b5      	cmp	r5, r6
 800498c:	d11a      	bne.n	80049c4 <_printf_common+0xc8>
 800498e:	2000      	movs	r0, #0
 8004990:	e008      	b.n	80049a4 <_printf_common+0xa8>
 8004992:	2301      	movs	r3, #1
 8004994:	4652      	mov	r2, sl
 8004996:	4649      	mov	r1, r9
 8004998:	4638      	mov	r0, r7
 800499a:	47c0      	blx	r8
 800499c:	3001      	adds	r0, #1
 800499e:	d103      	bne.n	80049a8 <_printf_common+0xac>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7c6      	b.n	800493a <_printf_common+0x3e>
 80049ac:	18e1      	adds	r1, r4, r3
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	2030      	movs	r0, #48	; 0x30
 80049b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b6:	4422      	add	r2, r4
 80049b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c0:	3302      	adds	r3, #2
 80049c2:	e7c7      	b.n	8004954 <_printf_common+0x58>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4622      	mov	r2, r4
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d0e6      	beq.n	80049a0 <_printf_common+0xa4>
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7d9      	b.n	800498a <_printf_common+0x8e>
	...

080049d8 <_printf_i>:
 80049d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	7e0f      	ldrb	r7, [r1, #24]
 80049de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049e0:	2f78      	cmp	r7, #120	; 0x78
 80049e2:	4691      	mov	r9, r2
 80049e4:	4680      	mov	r8, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	469a      	mov	sl, r3
 80049ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ee:	d807      	bhi.n	8004a00 <_printf_i+0x28>
 80049f0:	2f62      	cmp	r7, #98	; 0x62
 80049f2:	d80a      	bhi.n	8004a0a <_printf_i+0x32>
 80049f4:	2f00      	cmp	r7, #0
 80049f6:	f000 80d8 	beq.w	8004baa <_printf_i+0x1d2>
 80049fa:	2f58      	cmp	r7, #88	; 0x58
 80049fc:	f000 80a3 	beq.w	8004b46 <_printf_i+0x16e>
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a08:	e03a      	b.n	8004a80 <_printf_i+0xa8>
 8004a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0e:	2b15      	cmp	r3, #21
 8004a10:	d8f6      	bhi.n	8004a00 <_printf_i+0x28>
 8004a12:	a101      	add	r1, pc, #4	; (adr r1, 8004a18 <_printf_i+0x40>)
 8004a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a18:	08004a71 	.word	0x08004a71
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a01 	.word	0x08004a01
 8004a24:	08004a01 	.word	0x08004a01
 8004a28:	08004a01 	.word	0x08004a01
 8004a2c:	08004a01 	.word	0x08004a01
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a01 	.word	0x08004a01
 8004a38:	08004a01 	.word	0x08004a01
 8004a3c:	08004a01 	.word	0x08004a01
 8004a40:	08004a01 	.word	0x08004a01
 8004a44:	08004b91 	.word	0x08004b91
 8004a48:	08004ab5 	.word	0x08004ab5
 8004a4c:	08004b73 	.word	0x08004b73
 8004a50:	08004a01 	.word	0x08004a01
 8004a54:	08004a01 	.word	0x08004a01
 8004a58:	08004bb3 	.word	0x08004bb3
 8004a5c:	08004a01 	.word	0x08004a01
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004a01 	.word	0x08004a01
 8004a68:	08004a01 	.word	0x08004a01
 8004a6c:	08004b7b 	.word	0x08004b7b
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	602a      	str	r2, [r5, #0]
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0a3      	b.n	8004bcc <_printf_i+0x1f4>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	6829      	ldr	r1, [r5, #0]
 8004a88:	0606      	lsls	r6, r0, #24
 8004a8a:	f101 0304 	add.w	r3, r1, #4
 8004a8e:	d50a      	bpl.n	8004aa6 <_printf_i+0xce>
 8004a90:	680e      	ldr	r6, [r1, #0]
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	da03      	bge.n	8004aa0 <_printf_i+0xc8>
 8004a98:	232d      	movs	r3, #45	; 0x2d
 8004a9a:	4276      	negs	r6, r6
 8004a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa0:	485e      	ldr	r0, [pc, #376]	; (8004c1c <_printf_i+0x244>)
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	e019      	b.n	8004ada <_printf_i+0x102>
 8004aa6:	680e      	ldr	r6, [r1, #0]
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aae:	bf18      	it	ne
 8004ab0:	b236      	sxthne	r6, r6
 8004ab2:	e7ef      	b.n	8004a94 <_printf_i+0xbc>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	1d19      	adds	r1, r3, #4
 8004aba:	6029      	str	r1, [r5, #0]
 8004abc:	0601      	lsls	r1, r0, #24
 8004abe:	d501      	bpl.n	8004ac4 <_printf_i+0xec>
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <_printf_i+0xf2>
 8004ac4:	0646      	lsls	r6, r0, #25
 8004ac6:	d5fb      	bpl.n	8004ac0 <_printf_i+0xe8>
 8004ac8:	881e      	ldrh	r6, [r3, #0]
 8004aca:	4854      	ldr	r0, [pc, #336]	; (8004c1c <_printf_i+0x244>)
 8004acc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ace:	bf0c      	ite	eq
 8004ad0:	2308      	moveq	r3, #8
 8004ad2:	230a      	movne	r3, #10
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ada:	6865      	ldr	r5, [r4, #4]
 8004adc:	60a5      	str	r5, [r4, #8]
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	bfa2      	ittt	ge
 8004ae2:	6821      	ldrge	r1, [r4, #0]
 8004ae4:	f021 0104 	bicge.w	r1, r1, #4
 8004ae8:	6021      	strge	r1, [r4, #0]
 8004aea:	b90e      	cbnz	r6, 8004af0 <_printf_i+0x118>
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	d04d      	beq.n	8004b8c <_printf_i+0x1b4>
 8004af0:	4615      	mov	r5, r2
 8004af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004af6:	fb03 6711 	mls	r7, r3, r1, r6
 8004afa:	5dc7      	ldrb	r7, [r0, r7]
 8004afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b00:	4637      	mov	r7, r6
 8004b02:	42bb      	cmp	r3, r7
 8004b04:	460e      	mov	r6, r1
 8004b06:	d9f4      	bls.n	8004af2 <_printf_i+0x11a>
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d10b      	bne.n	8004b24 <_printf_i+0x14c>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	07de      	lsls	r6, r3, #31
 8004b10:	d508      	bpl.n	8004b24 <_printf_i+0x14c>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6861      	ldr	r1, [r4, #4]
 8004b16:	4299      	cmp	r1, r3
 8004b18:	bfde      	ittt	le
 8004b1a:	2330      	movle	r3, #48	; 0x30
 8004b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b24:	1b52      	subs	r2, r2, r5
 8004b26:	6122      	str	r2, [r4, #16]
 8004b28:	f8cd a000 	str.w	sl, [sp]
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	aa03      	add	r2, sp, #12
 8004b30:	4621      	mov	r1, r4
 8004b32:	4640      	mov	r0, r8
 8004b34:	f7ff fee2 	bl	80048fc <_printf_common>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d14c      	bne.n	8004bd6 <_printf_i+0x1fe>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	b004      	add	sp, #16
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	4835      	ldr	r0, [pc, #212]	; (8004c1c <_printf_i+0x244>)
 8004b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b54:	6029      	str	r1, [r5, #0]
 8004b56:	061d      	lsls	r5, r3, #24
 8004b58:	d514      	bpl.n	8004b84 <_printf_i+0x1ac>
 8004b5a:	07df      	lsls	r7, r3, #31
 8004b5c:	bf44      	itt	mi
 8004b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b62:	6023      	strmi	r3, [r4, #0]
 8004b64:	b91e      	cbnz	r6, 8004b6e <_printf_i+0x196>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f023 0320 	bic.w	r3, r3, #32
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	2310      	movs	r3, #16
 8004b70:	e7b0      	b.n	8004ad4 <_printf_i+0xfc>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f043 0320 	orr.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2378      	movs	r3, #120	; 0x78
 8004b7c:	4828      	ldr	r0, [pc, #160]	; (8004c20 <_printf_i+0x248>)
 8004b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b82:	e7e3      	b.n	8004b4c <_printf_i+0x174>
 8004b84:	0659      	lsls	r1, r3, #25
 8004b86:	bf48      	it	mi
 8004b88:	b2b6      	uxthmi	r6, r6
 8004b8a:	e7e6      	b.n	8004b5a <_printf_i+0x182>
 8004b8c:	4615      	mov	r5, r2
 8004b8e:	e7bb      	b.n	8004b08 <_printf_i+0x130>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6826      	ldr	r6, [r4, #0]
 8004b94:	6961      	ldr	r1, [r4, #20]
 8004b96:	1d18      	adds	r0, r3, #4
 8004b98:	6028      	str	r0, [r5, #0]
 8004b9a:	0635      	lsls	r5, r6, #24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_i+0x1cc>
 8004ba0:	6019      	str	r1, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <_printf_i+0x1d2>
 8004ba4:	0670      	lsls	r0, r6, #25
 8004ba6:	d5fb      	bpl.n	8004ba0 <_printf_i+0x1c8>
 8004ba8:	8019      	strh	r1, [r3, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	4615      	mov	r5, r2
 8004bb0:	e7ba      	b.n	8004b28 <_printf_i+0x150>
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	602a      	str	r2, [r5, #0]
 8004bb8:	681d      	ldr	r5, [r3, #0]
 8004bba:	6862      	ldr	r2, [r4, #4]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7fb fb2e 	bl	8000220 <memchr>
 8004bc4:	b108      	cbz	r0, 8004bca <_printf_i+0x1f2>
 8004bc6:	1b40      	subs	r0, r0, r5
 8004bc8:	6060      	str	r0, [r4, #4]
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	e7a8      	b.n	8004b28 <_printf_i+0x150>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	462a      	mov	r2, r5
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d0ab      	beq.n	8004b3c <_printf_i+0x164>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	079b      	lsls	r3, r3, #30
 8004be8:	d413      	bmi.n	8004c12 <_printf_i+0x23a>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	bfb8      	it	lt
 8004bf2:	4618      	movlt	r0, r3
 8004bf4:	e7a4      	b.n	8004b40 <_printf_i+0x168>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	47d0      	blx	sl
 8004c00:	3001      	adds	r0, #1
 8004c02:	d09b      	beq.n	8004b3c <_printf_i+0x164>
 8004c04:	3501      	adds	r5, #1
 8004c06:	68e3      	ldr	r3, [r4, #12]
 8004c08:	9903      	ldr	r1, [sp, #12]
 8004c0a:	1a5b      	subs	r3, r3, r1
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	dcf2      	bgt.n	8004bf6 <_printf_i+0x21e>
 8004c10:	e7eb      	b.n	8004bea <_printf_i+0x212>
 8004c12:	2500      	movs	r5, #0
 8004c14:	f104 0619 	add.w	r6, r4, #25
 8004c18:	e7f5      	b.n	8004c06 <_printf_i+0x22e>
 8004c1a:	bf00      	nop
 8004c1c:	080051c1 	.word	0x080051c1
 8004c20:	080051d2 	.word	0x080051d2

08004c24 <memmove>:
 8004c24:	4288      	cmp	r0, r1
 8004c26:	b510      	push	{r4, lr}
 8004c28:	eb01 0402 	add.w	r4, r1, r2
 8004c2c:	d902      	bls.n	8004c34 <memmove+0x10>
 8004c2e:	4284      	cmp	r4, r0
 8004c30:	4623      	mov	r3, r4
 8004c32:	d807      	bhi.n	8004c44 <memmove+0x20>
 8004c34:	1e43      	subs	r3, r0, #1
 8004c36:	42a1      	cmp	r1, r4
 8004c38:	d008      	beq.n	8004c4c <memmove+0x28>
 8004c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c42:	e7f8      	b.n	8004c36 <memmove+0x12>
 8004c44:	4402      	add	r2, r0
 8004c46:	4601      	mov	r1, r0
 8004c48:	428a      	cmp	r2, r1
 8004c4a:	d100      	bne.n	8004c4e <memmove+0x2a>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c56:	e7f7      	b.n	8004c48 <memmove+0x24>

08004c58 <_free_r>:
 8004c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	d044      	beq.n	8004ce8 <_free_r+0x90>
 8004c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c62:	9001      	str	r0, [sp, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f1a1 0404 	sub.w	r4, r1, #4
 8004c6a:	bfb8      	it	lt
 8004c6c:	18e4      	addlt	r4, r4, r3
 8004c6e:	f000 f913 	bl	8004e98 <__malloc_lock>
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <_free_r+0x94>)
 8004c74:	9801      	ldr	r0, [sp, #4]
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	b933      	cbnz	r3, 8004c88 <_free_r+0x30>
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	6014      	str	r4, [r2, #0]
 8004c7e:	b003      	add	sp, #12
 8004c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c84:	f000 b90e 	b.w	8004ea4 <__malloc_unlock>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d908      	bls.n	8004c9e <_free_r+0x46>
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	1961      	adds	r1, r4, r5
 8004c90:	428b      	cmp	r3, r1
 8004c92:	bf01      	itttt	eq
 8004c94:	6819      	ldreq	r1, [r3, #0]
 8004c96:	685b      	ldreq	r3, [r3, #4]
 8004c98:	1949      	addeq	r1, r1, r5
 8004c9a:	6021      	streq	r1, [r4, #0]
 8004c9c:	e7ed      	b.n	8004c7a <_free_r+0x22>
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b10b      	cbz	r3, 8004ca8 <_free_r+0x50>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d9fa      	bls.n	8004c9e <_free_r+0x46>
 8004ca8:	6811      	ldr	r1, [r2, #0]
 8004caa:	1855      	adds	r5, r2, r1
 8004cac:	42a5      	cmp	r5, r4
 8004cae:	d10b      	bne.n	8004cc8 <_free_r+0x70>
 8004cb0:	6824      	ldr	r4, [r4, #0]
 8004cb2:	4421      	add	r1, r4
 8004cb4:	1854      	adds	r4, r2, r1
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	d1e0      	bne.n	8004c7e <_free_r+0x26>
 8004cbc:	681c      	ldr	r4, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	4421      	add	r1, r4
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	e7da      	b.n	8004c7e <_free_r+0x26>
 8004cc8:	d902      	bls.n	8004cd0 <_free_r+0x78>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	e7d6      	b.n	8004c7e <_free_r+0x26>
 8004cd0:	6825      	ldr	r5, [r4, #0]
 8004cd2:	1961      	adds	r1, r4, r5
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf04      	itt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	bf04      	itt	eq
 8004ce0:	1949      	addeq	r1, r1, r5
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	6054      	str	r4, [r2, #4]
 8004ce6:	e7ca      	b.n	8004c7e <_free_r+0x26>
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd30      	pop	{r4, r5, pc}
 8004cec:	20000424 	.word	0x20000424

08004cf0 <sbrk_aligned>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4e0e      	ldr	r6, [pc, #56]	; (8004d2c <sbrk_aligned+0x3c>)
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6831      	ldr	r1, [r6, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b911      	cbnz	r1, 8004d02 <sbrk_aligned+0x12>
 8004cfc:	f000 f8bc 	bl	8004e78 <_sbrk_r>
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f8b7 	bl	8004e78 <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d00a      	beq.n	8004d24 <sbrk_aligned+0x34>
 8004d0e:	1cc4      	adds	r4, r0, #3
 8004d10:	f024 0403 	bic.w	r4, r4, #3
 8004d14:	42a0      	cmp	r0, r4
 8004d16:	d007      	beq.n	8004d28 <sbrk_aligned+0x38>
 8004d18:	1a21      	subs	r1, r4, r0
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f8ac 	bl	8004e78 <_sbrk_r>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d101      	bne.n	8004d28 <sbrk_aligned+0x38>
 8004d24:	f04f 34ff 	mov.w	r4, #4294967295
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	20000428 	.word	0x20000428

08004d30 <_malloc_r>:
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	1ccd      	adds	r5, r1, #3
 8004d36:	f025 0503 	bic.w	r5, r5, #3
 8004d3a:	3508      	adds	r5, #8
 8004d3c:	2d0c      	cmp	r5, #12
 8004d3e:	bf38      	it	cc
 8004d40:	250c      	movcc	r5, #12
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	4607      	mov	r7, r0
 8004d46:	db01      	blt.n	8004d4c <_malloc_r+0x1c>
 8004d48:	42a9      	cmp	r1, r5
 8004d4a:	d905      	bls.n	8004d58 <_malloc_r+0x28>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	2600      	movs	r6, #0
 8004d52:	4630      	mov	r0, r6
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d58:	4e2e      	ldr	r6, [pc, #184]	; (8004e14 <_malloc_r+0xe4>)
 8004d5a:	f000 f89d 	bl	8004e98 <__malloc_lock>
 8004d5e:	6833      	ldr	r3, [r6, #0]
 8004d60:	461c      	mov	r4, r3
 8004d62:	bb34      	cbnz	r4, 8004db2 <_malloc_r+0x82>
 8004d64:	4629      	mov	r1, r5
 8004d66:	4638      	mov	r0, r7
 8004d68:	f7ff ffc2 	bl	8004cf0 <sbrk_aligned>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	4604      	mov	r4, r0
 8004d70:	d14d      	bne.n	8004e0e <_malloc_r+0xde>
 8004d72:	6834      	ldr	r4, [r6, #0]
 8004d74:	4626      	mov	r6, r4
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d140      	bne.n	8004dfc <_malloc_r+0xcc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4638      	mov	r0, r7
 8004d80:	eb04 0803 	add.w	r8, r4, r3
 8004d84:	f000 f878 	bl	8004e78 <_sbrk_r>
 8004d88:	4580      	cmp	r8, r0
 8004d8a:	d13a      	bne.n	8004e02 <_malloc_r+0xd2>
 8004d8c:	6821      	ldr	r1, [r4, #0]
 8004d8e:	3503      	adds	r5, #3
 8004d90:	1a6d      	subs	r5, r5, r1
 8004d92:	f025 0503 	bic.w	r5, r5, #3
 8004d96:	3508      	adds	r5, #8
 8004d98:	2d0c      	cmp	r5, #12
 8004d9a:	bf38      	it	cc
 8004d9c:	250c      	movcc	r5, #12
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4638      	mov	r0, r7
 8004da2:	f7ff ffa5 	bl	8004cf0 <sbrk_aligned>
 8004da6:	3001      	adds	r0, #1
 8004da8:	d02b      	beq.n	8004e02 <_malloc_r+0xd2>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	442b      	add	r3, r5
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	e00e      	b.n	8004dd0 <_malloc_r+0xa0>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	1b52      	subs	r2, r2, r5
 8004db6:	d41e      	bmi.n	8004df6 <_malloc_r+0xc6>
 8004db8:	2a0b      	cmp	r2, #11
 8004dba:	d916      	bls.n	8004dea <_malloc_r+0xba>
 8004dbc:	1961      	adds	r1, r4, r5
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6025      	str	r5, [r4, #0]
 8004dc2:	bf18      	it	ne
 8004dc4:	6059      	strne	r1, [r3, #4]
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	bf08      	it	eq
 8004dca:	6031      	streq	r1, [r6, #0]
 8004dcc:	5162      	str	r2, [r4, r5]
 8004dce:	604b      	str	r3, [r1, #4]
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f104 060b 	add.w	r6, r4, #11
 8004dd6:	f000 f865 	bl	8004ea4 <__malloc_unlock>
 8004dda:	f026 0607 	bic.w	r6, r6, #7
 8004dde:	1d23      	adds	r3, r4, #4
 8004de0:	1af2      	subs	r2, r6, r3
 8004de2:	d0b6      	beq.n	8004d52 <_malloc_r+0x22>
 8004de4:	1b9b      	subs	r3, r3, r6
 8004de6:	50a3      	str	r3, [r4, r2]
 8004de8:	e7b3      	b.n	8004d52 <_malloc_r+0x22>
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	bf0c      	ite	eq
 8004df0:	6032      	streq	r2, [r6, #0]
 8004df2:	605a      	strne	r2, [r3, #4]
 8004df4:	e7ec      	b.n	8004dd0 <_malloc_r+0xa0>
 8004df6:	4623      	mov	r3, r4
 8004df8:	6864      	ldr	r4, [r4, #4]
 8004dfa:	e7b2      	b.n	8004d62 <_malloc_r+0x32>
 8004dfc:	4634      	mov	r4, r6
 8004dfe:	6876      	ldr	r6, [r6, #4]
 8004e00:	e7b9      	b.n	8004d76 <_malloc_r+0x46>
 8004e02:	230c      	movs	r3, #12
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4638      	mov	r0, r7
 8004e08:	f000 f84c 	bl	8004ea4 <__malloc_unlock>
 8004e0c:	e7a1      	b.n	8004d52 <_malloc_r+0x22>
 8004e0e:	6025      	str	r5, [r4, #0]
 8004e10:	e7de      	b.n	8004dd0 <_malloc_r+0xa0>
 8004e12:	bf00      	nop
 8004e14:	20000424 	.word	0x20000424

08004e18 <_realloc_r>:
 8004e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	4614      	mov	r4, r2
 8004e20:	460e      	mov	r6, r1
 8004e22:	b921      	cbnz	r1, 8004e2e <_realloc_r+0x16>
 8004e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	4611      	mov	r1, r2
 8004e2a:	f7ff bf81 	b.w	8004d30 <_malloc_r>
 8004e2e:	b92a      	cbnz	r2, 8004e3c <_realloc_r+0x24>
 8004e30:	f7ff ff12 	bl	8004c58 <_free_r>
 8004e34:	4625      	mov	r5, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e3c:	f000 f838 	bl	8004eb0 <_malloc_usable_size_r>
 8004e40:	4284      	cmp	r4, r0
 8004e42:	4607      	mov	r7, r0
 8004e44:	d802      	bhi.n	8004e4c <_realloc_r+0x34>
 8004e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e4a:	d812      	bhi.n	8004e72 <_realloc_r+0x5a>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f7ff ff6e 	bl	8004d30 <_malloc_r>
 8004e54:	4605      	mov	r5, r0
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d0ed      	beq.n	8004e36 <_realloc_r+0x1e>
 8004e5a:	42bc      	cmp	r4, r7
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	4631      	mov	r1, r6
 8004e60:	bf28      	it	cs
 8004e62:	463a      	movcs	r2, r7
 8004e64:	f7ff fbb8 	bl	80045d8 <memcpy>
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	f7ff fef4 	bl	8004c58 <_free_r>
 8004e70:	e7e1      	b.n	8004e36 <_realloc_r+0x1e>
 8004e72:	4635      	mov	r5, r6
 8004e74:	e7df      	b.n	8004e36 <_realloc_r+0x1e>
	...

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc fb1c 	bl	80014c0 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	2000042c 	.word	0x2000042c

08004e98 <__malloc_lock>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__malloc_lock+0x8>)
 8004e9a:	f000 b811 	b.w	8004ec0 <__retarget_lock_acquire_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20000430 	.word	0x20000430

08004ea4 <__malloc_unlock>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__malloc_unlock+0x8>)
 8004ea6:	f000 b80c 	b.w	8004ec2 <__retarget_lock_release_recursive>
 8004eaa:	bf00      	nop
 8004eac:	20000430 	.word	0x20000430

08004eb0 <_malloc_usable_size_r>:
 8004eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb4:	1f18      	subs	r0, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfbc      	itt	lt
 8004eba:	580b      	ldrlt	r3, [r1, r0]
 8004ebc:	18c0      	addlt	r0, r0, r3
 8004ebe:	4770      	bx	lr

08004ec0 <__retarget_lock_acquire_recursive>:
 8004ec0:	4770      	bx	lr

08004ec2 <__retarget_lock_release_recursive>:
 8004ec2:	4770      	bx	lr

08004ec4 <_init>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr

08004ed0 <_fini>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr
