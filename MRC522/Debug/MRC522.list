
MRC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080037a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080037a0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b618  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac6  00000000  00000000  0002b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b1b  00000000  00000000  0002e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccbd  00000000  00000000  0004ee33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6fd1  00000000  00000000  0005baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002570  00000000  00000000  00122b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800374c 	.word	0x0800374c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800374c 	.word	0x0800374c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <bsp_mfrc522_cs>:
  {                                 \
    return bsp_mfrc522_error;       \
  }

bsp_mfrc522_status_t bsp_mfrc522_cs(uint8_t bit)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MFRC522_CS_PORT, BSP_MFRC522_CS_PIN, (bit ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	2101      	movs	r1, #1
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <bsp_mfrc522_cs+0x2c>)
 8000524:	f001 f92a 	bl	800177c <HAL_GPIO_WritePin>
  return bsp_mfrc522_ok;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000

08000538 <bsp_mfrc522_write_reg>:

bsp_mfrc522_status_t bsp_mfrc522_write_reg(uint8_t reg, uint8_t data)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
  uint8_t reg_value = ((reg << 1) & 0x7E);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000552:	b2db      	uxtb	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
  bsp_mfrc522_cs(0);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ffd6 	bl	8000508 <bsp_mfrc522_cs>
  bsp_mfrc522_check_hal(HAL_SPI_Transmit(BSP_MFRC522_SPI, &reg_value, 1, BSP_MFRC522_TIMEOUT));
 800055c:	f107 010f 	add.w	r1, r7, #15
 8000560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000564:	2201      	movs	r2, #1
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <bsp_mfrc522_write_reg+0x68>)
 8000568:	f001 ffe3 	bl	8002532 <HAL_SPI_Transmit>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <bsp_mfrc522_write_reg+0x3e>
 8000572:	2300      	movs	r3, #0
 8000574:	e00f      	b.n	8000596 <bsp_mfrc522_write_reg+0x5e>
  bsp_mfrc522_check_hal(HAL_SPI_Transmit(BSP_MFRC522_SPI, &data, 1, BSP_MFRC522_TIMEOUT));
 8000576:	1db9      	adds	r1, r7, #6
 8000578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800057c:	2201      	movs	r2, #1
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <bsp_mfrc522_write_reg+0x68>)
 8000580:	f001 ffd7 	bl	8002532 <HAL_SPI_Transmit>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <bsp_mfrc522_write_reg+0x56>
 800058a:	2300      	movs	r3, #0
 800058c:	e003      	b.n	8000596 <bsp_mfrc522_write_reg+0x5e>
  bsp_mfrc522_cs(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff ffba 	bl	8000508 <bsp_mfrc522_cs>
  return bsp_mfrc522_ok;
 8000594:	2301      	movs	r3, #1
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <bsp_mfrc522_read_reg>:

uint8_t bsp_mfrc522_read_reg(uint8_t reg)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value = (((reg << 1) & 0x7E) | 0x80);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	73fb      	strb	r3, [r7, #15]
  uint8_t value     = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73bb      	strb	r3, [r7, #14]
  bsp_mfrc522_cs(0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ff9d 	bl	8000508 <bsp_mfrc522_cs>
  HAL_SPI_Transmit(BSP_MFRC522_SPI, &reg_value, 1, BSP_MFRC522_TIMEOUT);
 80005ce:	f107 010f 	add.w	r1, r7, #15
 80005d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d6:	2201      	movs	r2, #1
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <bsp_mfrc522_read_reg+0x5c>)
 80005da:	f001 ffaa 	bl	8002532 <HAL_SPI_Transmit>
  HAL_SPI_Receive(BSP_MFRC522_SPI, &value, 1, BSP_MFRC522_TIMEOUT);
 80005de:	f107 010e 	add.w	r1, r7, #14
 80005e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005e6:	2201      	movs	r2, #1
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <bsp_mfrc522_read_reg+0x5c>)
 80005ea:	f002 f8de 	bl	80027aa <HAL_SPI_Receive>
  bsp_mfrc522_cs(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff8a 	bl	8000508 <bsp_mfrc522_cs>
  return value;
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <bsp_mfrc522_set_bit_reg>:

bsp_mfrc522_status_t bsp_mfrc522_set_bit_reg(uint8_t reg, uint8_t bit)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]
  return bsp_mfrc522_write_reg(reg, bsp_mfrc522_read_reg(reg) | bit);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffc4 	bl	80005a4 <bsp_mfrc522_read_reg>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff84 	bl	8000538 <bsp_mfrc522_write_reg>
 8000630:	4603      	mov	r3, r0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <bsp_mfrc522_clear_bit_reg>:

bsp_mfrc522_status_t bsp_mfrc522_clear_bit_reg(uint8_t reg, uint8_t bit)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	460a      	mov	r2, r1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	4613      	mov	r3, r2
 8000648:	71bb      	strb	r3, [r7, #6]
  return bsp_mfrc522_write_reg(reg, bsp_mfrc522_read_reg(reg) & (~bit));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffa9 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000652:	4603      	mov	r3, r0
 8000654:	b25a      	sxtb	r2, r3
 8000656:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800065a:	43db      	mvns	r3, r3
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4013      	ands	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2da      	uxtb	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff65 	bl	8000538 <bsp_mfrc522_write_reg>
 800066e:	4603      	mov	r3, r0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <bsp_mfrc522_to_card>:

bsp_mfrc522_status_t bsp_mfrc522_to_card(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	4613      	mov	r3, r2
 8000688:	73bb      	strb	r3, [r7, #14]
  bsp_mfrc522_status_t status  = bsp_mfrc522_error;
 800068a:	2300      	movs	r3, #0
 800068c:	75fb      	strb	r3, [r7, #23]
  uint8_t              irqEn   = 0x00;
 800068e:	2300      	movs	r3, #0
 8000690:	75bb      	strb	r3, [r7, #22]
  uint8_t              waitIRq = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	757b      	strb	r3, [r7, #21]
  uint8_t              lastBits;
  uint8_t              n;
  uint16_t             i;

  switch (command)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	2b0c      	cmp	r3, #12
 800069a:	d006      	beq.n	80006aa <bsp_mfrc522_to_card+0x32>
 800069c:	2b0e      	cmp	r3, #14
 800069e:	d109      	bne.n	80006b4 <bsp_mfrc522_to_card+0x3c>
  {
  case BSP_PCD_AUTHENT:
  {
    irqEn   = 0x12;
 80006a0:	2312      	movs	r3, #18
 80006a2:	75bb      	strb	r3, [r7, #22]
    waitIRq = 0x10;
 80006a4:	2310      	movs	r3, #16
 80006a6:	757b      	strb	r3, [r7, #21]
    break;
 80006a8:	e005      	b.n	80006b6 <bsp_mfrc522_to_card+0x3e>
  }
  case BSP_PCD_TRANSCEIVE:
  {
    irqEn   = 0x77;
 80006aa:	2377      	movs	r3, #119	; 0x77
 80006ac:	75bb      	strb	r3, [r7, #22]
    waitIRq = 0x30;
 80006ae:	2330      	movs	r3, #48	; 0x30
 80006b0:	757b      	strb	r3, [r7, #21]
    break;
 80006b2:	e000      	b.n	80006b6 <bsp_mfrc522_to_card+0x3e>
  }
  default: break;
 80006b4:	bf00      	nop
  }

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_COMM_I_EN, irqEn | 0x80);
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	2002      	movs	r0, #2
 80006c2:	f7ff ff39 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_clear_bit_reg(BSP_MFRC522_REG_COMM_IRQ, 0x80);
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	2004      	movs	r0, #4
 80006ca:	f7ff ffb6 	bl	800063a <bsp_mfrc522_clear_bit_reg>
  bsp_mfrc522_set_bit_reg(BSP_MFRC522_REG_FIFO_LEVEL, 0x80);
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	200a      	movs	r0, #10
 80006d2:	f7ff ff97 	bl	8000604 <bsp_mfrc522_set_bit_reg>

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_COMMAND, BSP_PCD_IDLE);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff2d 	bl	8000538 <bsp_mfrc522_write_reg>

  // Writing data to the FIFO
  for (i = 0; i < sendLen; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	827b      	strh	r3, [r7, #18]
 80006e2:	e00a      	b.n	80006fa <bsp_mfrc522_to_card+0x82>
  {
    bsp_mfrc522_write_reg(BSP_MFRC522_REG_FIFO_DATA, sendData[i]);
 80006e4:	8a7b      	ldrh	r3, [r7, #18]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2009      	movs	r0, #9
 80006f0:	f7ff ff22 	bl	8000538 <bsp_mfrc522_write_reg>
  for (i = 0; i < sendLen; i++)
 80006f4:	8a7b      	ldrh	r3, [r7, #18]
 80006f6:	3301      	adds	r3, #1
 80006f8:	827b      	strh	r3, [r7, #18]
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	8a7a      	ldrh	r2, [r7, #18]
 8000700:	429a      	cmp	r2, r3
 8000702:	d3ef      	bcc.n	80006e4 <bsp_mfrc522_to_card+0x6c>
  }

  // Execute the command
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_COMMAND, command);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff15 	bl	8000538 <bsp_mfrc522_write_reg>
  if (command == BSP_PCD_TRANSCEIVE)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b0c      	cmp	r3, #12
 8000712:	d103      	bne.n	800071c <bsp_mfrc522_to_card+0xa4>
  {
    bsp_mfrc522_set_bit_reg(BSP_MFRC522_REG_BIT_FRAMING, 0x80);  // StartSend=1,transmission of data starts
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	200d      	movs	r0, #13
 8000718:	f7ff ff74 	bl	8000604 <bsp_mfrc522_set_bit_reg>
  }

  // Waiting to receive data to complete
  i = 2000;  // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 800071c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000720:	827b      	strh	r3, [r7, #18]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = bsp_mfrc522_read_reg(BSP_MFRC522_REG_COMM_IRQ);
 8000722:	2004      	movs	r0, #4
 8000724:	f7ff ff3e 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000728:	4603      	mov	r3, r0
 800072a:	753b      	strb	r3, [r7, #20]
    i--;
 800072c:	8a7b      	ldrh	r3, [r7, #18]
 800072e:	3b01      	subs	r3, #1
 8000730:	827b      	strh	r3, [r7, #18]
  } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8000732:	8a7b      	ldrh	r3, [r7, #18]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00a      	beq.n	800074e <bsp_mfrc522_to_card+0xd6>
 8000738:	7d3b      	ldrb	r3, [r7, #20]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <bsp_mfrc522_to_card+0xd6>
 8000742:	7d3a      	ldrb	r2, [r7, #20]
 8000744:	7d7b      	ldrb	r3, [r7, #21]
 8000746:	4013      	ands	r3, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0e9      	beq.n	8000722 <bsp_mfrc522_to_card+0xaa>

  bsp_mfrc522_clear_bit_reg(BSP_MFRC522_REG_BIT_FRAMING, 0x80);  // StartSend=0
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	200d      	movs	r0, #13
 8000752:	f7ff ff72 	bl	800063a <bsp_mfrc522_clear_bit_reg>

  if (i != 0)
 8000756:	8a7b      	ldrh	r3, [r7, #18]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d057      	beq.n	800080c <bsp_mfrc522_to_card+0x194>
  {
    if (!(bsp_mfrc522_read_reg(BSP_MFRC522_REG_ERROR) & 0x1B))
 800075c:	2006      	movs	r0, #6
 800075e:	f7ff ff21 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000762:	4603      	mov	r3, r0
 8000764:	f003 031b 	and.w	r3, r3, #27
 8000768:	2b00      	cmp	r3, #0
 800076a:	d14d      	bne.n	8000808 <bsp_mfrc522_to_card+0x190>
    {
      status = bsp_mfrc522_ok;
 800076c:	2301      	movs	r3, #1
 800076e:	75fb      	strb	r3, [r7, #23]
      if (n & irqEn & 0x01)
 8000770:	7d3a      	ldrb	r2, [r7, #20]
 8000772:	7dbb      	ldrb	r3, [r7, #22]
 8000774:	4013      	ands	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <bsp_mfrc522_to_card+0x10c>
      {
        status = bsp_mfrc522_error;
 8000780:	2300      	movs	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]
      }

      if (command == BSP_PCD_TRANSCEIVE)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b0c      	cmp	r3, #12
 8000788:	d140      	bne.n	800080c <bsp_mfrc522_to_card+0x194>
      {
        n        = bsp_mfrc522_read_reg(BSP_MFRC522_REG_FIFO_LEVEL);
 800078a:	200a      	movs	r0, #10
 800078c:	f7ff ff0a 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000790:	4603      	mov	r3, r0
 8000792:	753b      	strb	r3, [r7, #20]
        lastBits = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CONTROL) & 0x07;
 8000794:	200c      	movs	r0, #12
 8000796:	f7ff ff05 	bl	80005a4 <bsp_mfrc522_read_reg>
 800079a:	4603      	mov	r3, r0
 800079c:	f003 0307 	and.w	r3, r3, #7
 80007a0:	747b      	strb	r3, [r7, #17]
        if (lastBits)
 80007a2:	7c7b      	ldrb	r3, [r7, #17]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00b      	beq.n	80007c0 <bsp_mfrc522_to_card+0x148>
        {
          *backLen = (n - 1) * 8 + lastBits;
 80007a8:	7d3b      	ldrb	r3, [r7, #20]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	7c7b      	ldrb	r3, [r7, #17]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	e005      	b.n	80007cc <bsp_mfrc522_to_card+0x154>
        }
        else
        {
          *backLen = n * 8;
 80007c0:	7d3b      	ldrb	r3, [r7, #20]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ca:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0)
 80007cc:	7d3b      	ldrb	r3, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <bsp_mfrc522_to_card+0x15e>
        {
          n = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	753b      	strb	r3, [r7, #20]
        }
        if (n > BSP_MFRC522_MAX_LEN)
 80007d6:	7d3b      	ldrb	r3, [r7, #20]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d901      	bls.n	80007e0 <bsp_mfrc522_to_card+0x168>
        {
          n = BSP_MFRC522_MAX_LEN;
 80007dc:	2310      	movs	r3, #16
 80007de:	753b      	strb	r3, [r7, #20]
        }

        // Reading the received data in FIFO
        for (i = 0; i < n; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	827b      	strh	r3, [r7, #18]
 80007e4:	e00a      	b.n	80007fc <bsp_mfrc522_to_card+0x184>
        {
          backData[i] = bsp_mfrc522_read_reg(BSP_MFRC522_REG_FIFO_DATA);
 80007e6:	8a7b      	ldrh	r3, [r7, #18]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	18d4      	adds	r4, r2, r3
 80007ec:	2009      	movs	r0, #9
 80007ee:	f7ff fed9 	bl	80005a4 <bsp_mfrc522_read_reg>
 80007f2:	4603      	mov	r3, r0
 80007f4:	7023      	strb	r3, [r4, #0]
        for (i = 0; i < n; i++)
 80007f6:	8a7b      	ldrh	r3, [r7, #18]
 80007f8:	3301      	adds	r3, #1
 80007fa:	827b      	strh	r3, [r7, #18]
 80007fc:	7d3b      	ldrb	r3, [r7, #20]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	8a7a      	ldrh	r2, [r7, #18]
 8000802:	429a      	cmp	r2, r3
 8000804:	d3ef      	bcc.n	80007e6 <bsp_mfrc522_to_card+0x16e>
 8000806:	e001      	b.n	800080c <bsp_mfrc522_to_card+0x194>
        }
      }
    }
    else
    {
      status = bsp_mfrc522_error;
 8000808:	2300      	movs	r3, #0
 800080a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800080c:	7dfb      	ldrb	r3, [r7, #23]
}
 800080e:	4618      	mov	r0, r3
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd90      	pop	{r4, r7, pc}

08000816 <bsp_mfrc522_request>:

bsp_mfrc522_status_t bsp_mfrc522_request(uint8_t reqMode, uint8_t *TagType)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af02      	add	r7, sp, #8
 800081c:	4603      	mov	r3, r0
 800081e:	6039      	str	r1, [r7, #0]
 8000820:	71fb      	strb	r3, [r7, #7]
  bsp_mfrc522_status_t status;
  uint16_t             backBits;                             // The received data bits

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_BIT_FRAMING, 0x07);  // TxLastBists = BitFramingReg[2..0] ???
 8000822:	2107      	movs	r1, #7
 8000824:	200d      	movs	r0, #13
 8000826:	f7ff fe87 	bl	8000538 <bsp_mfrc522_write_reg>

  TagType[0] = reqMode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
  status     = bsp_mfrc522_to_card(BSP_PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	200c      	movs	r0, #12
 800083e:	f7ff ff1b 	bl	8000678 <bsp_mfrc522_to_card>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]

  if ((status != bsp_mfrc522_ok) || (backBits != 0x10))
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d102      	bne.n	8000852 <bsp_mfrc522_request+0x3c>
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	2b10      	cmp	r3, #16
 8000850:	d001      	beq.n	8000856 <bsp_mfrc522_request+0x40>
  {
    status = bsp_mfrc522_error;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <bsp_mfrc522_anticoll>:

bsp_mfrc522_status_t bsp_mfrc522_anticoll(uint8_t *serNum)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
  bsp_mfrc522_status_t status;
  uint8_t              i;
  uint8_t              serNumCheck = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	737b      	strb	r3, [r7, #13]
  uint16_t             unLen;

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_BIT_FRAMING, 0x00);  // TxLastBists = BitFramingReg[2..0]
 800086c:	2100      	movs	r1, #0
 800086e:	200d      	movs	r0, #13
 8000870:	f7ff fe62 	bl	8000538 <bsp_mfrc522_write_reg>

  serNum[0] = BSP_PICC_ANTICOLL;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2293      	movs	r2, #147	; 0x93
 8000878:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	2220      	movs	r2, #32
 8000880:	701a      	strb	r2, [r3, #0]
  status    = bsp_mfrc522_to_card(BSP_PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000882:	f107 030a 	add.w	r3, r7, #10
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2202      	movs	r2, #2
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff fef2 	bl	8000678 <bsp_mfrc522_to_card>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

  if (status == bsp_mfrc522_ok)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d118      	bne.n	80008d0 <bsp_mfrc522_anticoll+0x70>
  {
    // Check card serial number
    for (i = 0; i < 4; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
 80008a2:	e009      	b.n	80008b8 <bsp_mfrc522_anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	4053      	eors	r3, r2
 80008b0:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++)
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9f2      	bls.n	80008a4 <bsp_mfrc522_anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	7b7a      	ldrb	r2, [r7, #13]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d001      	beq.n	80008d0 <bsp_mfrc522_anticoll+0x70>
    {
      status = bsp_mfrc522_error;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <bsp_mfrc522_calculate_crc>:

void bsp_mfrc522_calculate_crc(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 80008da:	b590      	push	{r4, r7, lr}
 80008dc:	b087      	sub	sp, #28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	460b      	mov	r3, r1
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  bsp_mfrc522_clear_bit_reg(BSP_MFRC522_REG_DIV_IRQ, 0x04);   // CRCIrq = 0
 80008e8:	2104      	movs	r1, #4
 80008ea:	2005      	movs	r0, #5
 80008ec:	f7ff fea5 	bl	800063a <bsp_mfrc522_clear_bit_reg>
  bsp_mfrc522_set_bit_reg(BSP_MFRC522_REG_FIFO_LEVEL, 0x80);  // Clear the FIFO pointer
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	200a      	movs	r0, #10
 80008f4:	f7ff fe86 	bl	8000604 <bsp_mfrc522_set_bit_reg>

  // Writing data to the FIFO
  for (i = 0; i < len; i++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	75fb      	strb	r3, [r7, #23]
 80008fc:	e00a      	b.n	8000914 <bsp_mfrc522_calculate_crc+0x3a>
  {
    bsp_mfrc522_write_reg(BSP_MFRC522_REG_FIFO_DATA, *(pIndata + i));
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	2009      	movs	r0, #9
 800090a:	f7ff fe15 	bl	8000538 <bsp_mfrc522_write_reg>
  for (i = 0; i < len; i++)
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	3301      	adds	r3, #1
 8000912:	75fb      	strb	r3, [r7, #23]
 8000914:	7dfa      	ldrb	r2, [r7, #23]
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3f0      	bcc.n	80008fe <bsp_mfrc522_calculate_crc+0x24>
  }
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_COMMAND, BSP_PCD_CALCCRC);
 800091c:	2103      	movs	r1, #3
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fe0a 	bl	8000538 <bsp_mfrc522_write_reg>

  // Wait CRC calculation is complete
  i = 0xFF;
 8000924:	23ff      	movs	r3, #255	; 0xff
 8000926:	75fb      	strb	r3, [r7, #23]
  do
  {
    n = bsp_mfrc522_read_reg(BSP_MFRC522_REG_DIV_IRQ);
 8000928:	2005      	movs	r0, #5
 800092a:	f7ff fe3b 	bl	80005a4 <bsp_mfrc522_read_reg>
 800092e:	4603      	mov	r3, r0
 8000930:	75bb      	strb	r3, [r7, #22]
    i--;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	3b01      	subs	r3, #1
 8000936:	75fb      	strb	r3, [r7, #23]
  } while ((i != 0) && !(n & 0x04));  // CRCIrq = 1
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <bsp_mfrc522_calculate_crc+0x6e>
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0ef      	beq.n	8000928 <bsp_mfrc522_calculate_crc+0x4e>

  // Read CRC calculation result
  pOutData[0] = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CRC_RESULT_L);
 8000948:	2022      	movs	r0, #34	; 0x22
 800094a:	f7ff fe2b 	bl	80005a4 <bsp_mfrc522_read_reg>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	701a      	strb	r2, [r3, #0]
  pOutData[1] = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CRC_RESULT_M);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	1c5c      	adds	r4, r3, #1
 800095a:	2021      	movs	r0, #33	; 0x21
 800095c:	f7ff fe22 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000960:	4603      	mov	r3, r0
 8000962:	7023      	strb	r3, [r4, #0]
}
 8000964:	bf00      	nop
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}

0800096c <bsp_mfrc522_haft>:

void bsp_mfrc522_haft(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t  buff[4];

  buff[0] = BSP_PICC_HALT;
 8000972:	2350      	movs	r3, #80	; 0x50
 8000974:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	707b      	strb	r3, [r7, #1]
  bsp_mfrc522_calculate_crc(buff, 2, &buff[2]);
 800097a:	463b      	mov	r3, r7
 800097c:	1c9a      	adds	r2, r3, #2
 800097e:	463b      	mov	r3, r7
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ffa9 	bl	80008da <bsp_mfrc522_calculate_crc>

  bsp_mfrc522_to_card(BSP_PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000988:	463a      	mov	r2, r7
 800098a:	4639      	mov	r1, r7
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2204      	movs	r2, #4
 8000994:	200c      	movs	r0, #12
 8000996:	f7ff fe6f 	bl	8000678 <bsp_mfrc522_to_card>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <bsp_mfrc522_check>:

bsp_mfrc522_status_t bsp_mfrc522_check(uint8_t *id)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  bsp_mfrc522_status_t status;
  // Find cards, return card type
  status = bsp_mfrc522_request(BSP_PICC_REQIDL, id);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2026      	movs	r0, #38	; 0x26
 80009ae:	f7ff ff32 	bl	8000816 <bsp_mfrc522_request>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
  if (status == bsp_mfrc522_ok)
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <bsp_mfrc522_check+0x24>
  {
    // Card detected
    // Anti-collision, return card serial number 4 bytes
    status = bsp_mfrc522_anticoll(id);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff4f 	bl	8000860 <bsp_mfrc522_anticoll>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
  }
  bsp_mfrc522_haft();  // Command card into hibernation
 80009c6:	f7ff ffd1 	bl	800096c <bsp_mfrc522_haft>

  return status;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <bsp_mfrc522_antenna_on>:

void bsp_mfrc522_antenna_on(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  uint8_t temp = bsp_mfrc522_read_reg(BSP_MFRC522_REG_TX_CONTROL);
 80009da:	2014      	movs	r0, #20
 80009dc:	f7ff fde2 	bl	80005a4 <bsp_mfrc522_read_reg>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_TX_CONTROL, temp | 0x03);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f043 0303 	orr.w	r3, r3, #3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	2014      	movs	r0, #20
 80009f0:	f7ff fda2 	bl	8000538 <bsp_mfrc522_write_reg>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <bsp_mfrc522_init>:

bsp_mfrc522_status_t bsp_mfrc522_init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  bsp_mfrc522_cs(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fd81 	bl	8000508 <bsp_mfrc522_cs>

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_COMMAND, BSP_PCD_RESETPHASE);
 8000a06:	210f      	movs	r1, #15
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fd95 	bl	8000538 <bsp_mfrc522_write_reg>

  HAL_Delay(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 fc16 	bl	8001240 <HAL_Delay>

  bsp_mfrc522_write_reg(BSP_MFRC522_REG_T_MODE, 0x8D);
 8000a14:	218d      	movs	r1, #141	; 0x8d
 8000a16:	202a      	movs	r0, #42	; 0x2a
 8000a18:	f7ff fd8e 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_T_PRESCALER, 0x3E);
 8000a1c:	213e      	movs	r1, #62	; 0x3e
 8000a1e:	202b      	movs	r0, #43	; 0x2b
 8000a20:	f7ff fd8a 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_T_RELOAD_L, 30);
 8000a24:	211e      	movs	r1, #30
 8000a26:	202d      	movs	r0, #45	; 0x2d
 8000a28:	f7ff fd86 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_T_RELOAD_H, 0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	202c      	movs	r0, #44	; 0x2c
 8000a30:	f7ff fd82 	bl	8000538 <bsp_mfrc522_write_reg>

  /* 48dB gain */
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_RF_CFG, 0x70);
 8000a34:	2170      	movs	r1, #112	; 0x70
 8000a36:	2026      	movs	r0, #38	; 0x26
 8000a38:	f7ff fd7e 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_TX_AUTO, 0x40);
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	2015      	movs	r0, #21
 8000a40:	f7ff fd7a 	bl	8000538 <bsp_mfrc522_write_reg>
  bsp_mfrc522_write_reg(BSP_MFRC522_REG_MODE, 0x3D);
 8000a44:	213d      	movs	r1, #61	; 0x3d
 8000a46:	2011      	movs	r0, #17
 8000a48:	f7ff fd76 	bl	8000538 <bsp_mfrc522_write_reg>

  bsp_mfrc522_antenna_on();  // Open the antenna
 8000a4c:	f7ff ffc2 	bl	80009d4 <bsp_mfrc522_antenna_on>

  return bsp_mfrc522_ok;
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <bsp_mfrc522_read_all>:

bsp_mfrc522_status_t bsp_mfrc522_read_all(bsp_mfrc522_info_t *mfrc522_info)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  /* Page: 0 */
  mfrc522_info->command_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_COMMAND);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff fda0 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	701a      	strb	r2, [r3, #0]
  mfrc522_info->com_ien_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_COMM_I_EN);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f7ff fd99 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	705a      	strb	r2, [r3, #1]
  mfrc522_info->div_ien_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_DIV1_EN);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f7ff fd92 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	709a      	strb	r2, [r3, #2]
  mfrc522_info->com_irq_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_COMM_IRQ);
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f7ff fd8b 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	70da      	strb	r2, [r3, #3]
  mfrc522_info->div_irq_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_DIV_IRQ);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f7ff fd84 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	711a      	strb	r2, [r3, #4]
  mfrc522_info->error_reg       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_ERROR);
 8000aa4:	2006      	movs	r0, #6
 8000aa6:	f7ff fd7d 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	715a      	strb	r2, [r3, #5]
  mfrc522_info->status1_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_STATUS1);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f7ff fd76 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	719a      	strb	r2, [r3, #6]
  mfrc522_info->status2_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_STATUS2);
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f7ff fd6f 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	71da      	strb	r2, [r3, #7]
  mfrc522_info->fifo_data_reg   = bsp_mfrc522_read_reg(BSP_MFRC522_REG_FIFO_DATA);
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f7ff fd68 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	721a      	strb	r2, [r3, #8]
  mfrc522_info->fifo_level_reg  = bsp_mfrc522_read_reg(BSP_MFRC522_REG_FIFO_LEVEL);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f7ff fd61 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	725a      	strb	r2, [r3, #9]
  mfrc522_info->water_level_reg = bsp_mfrc522_read_reg(BSP_MFRC522_REG_WATER_LEVEL);
 8000aea:	200b      	movs	r0, #11
 8000aec:	f7ff fd5a 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	729a      	strb	r2, [r3, #10]
  mfrc522_info->control_reg     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CONTROL);
 8000af8:	200c      	movs	r0, #12
 8000afa:	f7ff fd53 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	72da      	strb	r2, [r3, #11]
  mfrc522_info->bit_framing_reg = bsp_mfrc522_read_reg(BSP_MFRC522_REG_BIT_FRAMING);
 8000b06:	200d      	movs	r0, #13
 8000b08:	f7ff fd4c 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	731a      	strb	r2, [r3, #12]
  mfrc522_info->coll_reg        = bsp_mfrc522_read_reg(BSP_MFRC522_REG_COLL);
 8000b14:	200e      	movs	r0, #14
 8000b16:	f7ff fd45 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	735a      	strb	r2, [r3, #13]
  /* Page: 1 */
  mfrc522_info->mode_reg         = bsp_mfrc522_read_reg(BSP_MFRC522_REG_MODE);
 8000b22:	2011      	movs	r0, #17
 8000b24:	f7ff fd3e 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	739a      	strb	r2, [r3, #14]
  mfrc522_info->tx_mode_reg      = bsp_mfrc522_read_reg(BSP_MFRC522_REG_TX_MODE);
 8000b30:	2012      	movs	r0, #18
 8000b32:	f7ff fd37 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	73da      	strb	r2, [r3, #15]
  mfrc522_info->rx_mode_reg      = bsp_mfrc522_read_reg(BSP_MFRC522_REG_RX_MODE);
 8000b3e:	2013      	movs	r0, #19
 8000b40:	f7ff fd30 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	741a      	strb	r2, [r3, #16]
  mfrc522_info->tx_control_reg   = bsp_mfrc522_read_reg(BSP_MFRC522_REG_TX_CONTROL);
 8000b4c:	2014      	movs	r0, #20
 8000b4e:	f7ff fd29 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	745a      	strb	r2, [r3, #17]
  mfrc522_info->tx_ask_reg       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_TX_AUTO);
 8000b5a:	2015      	movs	r0, #21
 8000b5c:	f7ff fd22 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	749a      	strb	r2, [r3, #18]
  mfrc522_info->tx_sel_reg       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_TX_SELL);
 8000b68:	2016      	movs	r0, #22
 8000b6a:	f7ff fd1b 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	74da      	strb	r2, [r3, #19]
  mfrc522_info->rx_sel_reg       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_RX_SELL);
 8000b76:	2017      	movs	r0, #23
 8000b78:	f7ff fd14 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	751a      	strb	r2, [r3, #20]
  mfrc522_info->rx_threshold_reg = bsp_mfrc522_read_reg(BSP_MFRC522_REG_RX_THRESHOLD);
 8000b84:	2018      	movs	r0, #24
 8000b86:	f7ff fd0d 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	755a      	strb	r2, [r3, #21]
  mfrc522_info->demod_reg        = bsp_mfrc522_read_reg(BSP_MFRC522_REG_DEMOD);
 8000b92:	2019      	movs	r0, #25
 8000b94:	f7ff fd06 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	759a      	strb	r2, [r3, #22]
  mfrc522_info->mf_tx_reg        = bsp_mfrc522_read_reg(BSP_MFRC522_REG_MF_TX);
 8000ba0:	201c      	movs	r0, #28
 8000ba2:	f7ff fcff 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	75da      	strb	r2, [r3, #23]
  mfrc522_info->mf_rx_reg        = bsp_mfrc522_read_reg(BSP_MFRC522_REG_MF_RX);
 8000bae:	201d      	movs	r0, #29
 8000bb0:	f7ff fcf8 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	761a      	strb	r2, [r3, #24]
  mfrc522_info->serial_speed_reg = bsp_mfrc522_read_reg(BSP_MFRC522_REG_SERIALSPEED);
 8000bbc:	201f      	movs	r0, #31
 8000bbe:	f7ff fcf1 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	765a      	strb	r2, [r3, #25]
  /* Page:2 */
  mfrc522_info->crc_result_reg[0]     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CRC_RESULT_M);
 8000bca:	2021      	movs	r0, #33	; 0x21
 8000bcc:	f7ff fcea 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	769a      	strb	r2, [r3, #26]
  mfrc522_info->crc_result_reg[1]     = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CRC_RESULT_L);
 8000bd8:	2022      	movs	r0, #34	; 0x22
 8000bda:	f7ff fce3 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	76da      	strb	r2, [r3, #27]
  mfrc522_info->mod_width_reg         = bsp_mfrc522_read_reg(BSP_MFRC522_REG_MOD_WIDTH);
 8000be6:	2024      	movs	r0, #36	; 0x24
 8000be8:	f7ff fcdc 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	771a      	strb	r2, [r3, #28]
  mfrc522_info->rf_cfg_reg            = bsp_mfrc522_read_reg(BSP_MFRC522_REG_RF_CFG);
 8000bf4:	2026      	movs	r0, #38	; 0x26
 8000bf6:	f7ff fcd5 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	775a      	strb	r2, [r3, #29]
  mfrc522_info->gsn_reg               = bsp_mfrc522_read_reg(BSP_MFRC522_REG_GS_N);
 8000c02:	2027      	movs	r0, #39	; 0x27
 8000c04:	f7ff fcce 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	779a      	strb	r2, [r3, #30]
  mfrc522_info->cwgs_preg             = bsp_mfrc522_read_reg(BSP_MFRC522_REG_CWGS_PREG);
 8000c10:	2028      	movs	r0, #40	; 0x28
 8000c12:	f7ff fcc7 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	77da      	strb	r2, [r3, #31]
  mfrc522_info->modgs_preg            = bsp_mfrc522_read_reg(BSP_MFRC522_REG_MODGS_PREG);
 8000c1e:	2029      	movs	r0, #41	; 0x29
 8000c20:	f7ff fcc0 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  mfrc522_info->t_mode_reg            = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_MODE);
 8000c2e:	202a      	movs	r0, #42	; 0x2a
 8000c30:	f7ff fcb8 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  mfrc522_info->t_prescaler_reg       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_PRESCALER);
 8000c3e:	202b      	movs	r0, #43	; 0x2b
 8000c40:	f7ff fcb0 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  mfrc522_info->t_reload_reg[0]       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_RELOAD_H);
 8000c4e:	202c      	movs	r0, #44	; 0x2c
 8000c50:	f7ff fca8 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  mfrc522_info->t_reload_reg[1]       = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_RELOAD_L);
 8000c5e:	202d      	movs	r0, #45	; 0x2d
 8000c60:	f7ff fca0 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  mfrc522_info->t_countervalue_reg[0] = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_COUNTER_VALUE_H);
 8000c6e:	202e      	movs	r0, #46	; 0x2e
 8000c70:	f7ff fc98 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  mfrc522_info->t_countervalue_reg[1] = bsp_mfrc522_read_reg(BSP_MFRC522_REG_T_COUNTER_VALUE_L);
 8000c7e:	202f      	movs	r0, #47	; 0x2f
 8000c80:	f7ff fc90 	bl	80005a4 <bsp_mfrc522_read_reg>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return bsp_mfrc522_ok;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9c:	f000 fa5e 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f824 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca4:	f000 f8f4 	bl	8000e90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f892 	bl	8000dd0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cac:	f000 f8c6 	bl	8000e3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  bsp_mfrc522_init();
 8000cb0:	f7ff fea4 	bl	80009fc <bsp_mfrc522_init>

  bsp_mfrc522_read_all(&mfrc522);
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <main+0x44>)
 8000cb6:	f7ff fece 	bl	8000a56 <bsp_mfrc522_read_all>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if( bsp_mfrc522_check(data) == bsp_mfrc522_error)
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <main+0x48>)
 8000cbc:	f7ff fe71 	bl	80009a2 <bsp_mfrc522_check>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <main+0x3a>
    	HAL_UART_Transmit(&huart2, (uint8_t*) "Error\r\n", 7, 100);
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	2207      	movs	r2, #7
 8000cca:	4906      	ldr	r1, [pc, #24]	; (8000ce4 <main+0x4c>)
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <main+0x50>)
 8000cce:	f002 f99c 	bl	800300a <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f000 fab3 	bl	8001240 <HAL_Delay>
    if( bsp_mfrc522_check(data) == bsp_mfrc522_error)
 8000cda:	e7ee      	b.n	8000cba <main+0x22>
 8000cdc:	200000d4 	.word	0x200000d4
 8000ce0:	200000c4 	.word	0x200000c4
 8000ce4:	08003764 	.word	0x08003764
 8000ce8:	20000080 	.word	0x20000080

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2234      	movs	r2, #52	; 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fd1e 	bl	800373c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <SystemClock_Config+0xdc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <SystemClock_Config+0xdc>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <SystemClock_Config+0xdc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <SystemClock_Config+0xe0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a25      	ldr	r2, [pc, #148]	; (8000dcc <SystemClock_Config+0xe0>)
 8000d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <SystemClock_Config+0xe0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d60:	23b4      	movs	r3, #180	; 0xb4
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 f8b5 	bl	8001ee4 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d80:	f000 f8c8 	bl	8000f14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d84:	f000 fd14 	bl	80017b0 <HAL_PWREx_EnableOverDrive>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d8e:	f000 f8c1 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2105      	movs	r1, #5
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fd4d 	bl	8001850 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dbc:	f000 f8aa 	bl	8000f14 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <MX_SPI1_Init+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_SPI1_Init+0x64>)
 8000e22:	f001 fafd 	bl	8002420 <HAL_SPI_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e2c:	f000 f872 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000028 	.word	0x20000028
 8000e38:	40013000 	.word	0x40013000

08000e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_USART2_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f002 f87c 	bl	8002f70 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f000 f849 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000080 	.word	0x20000080
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_GPIO_Init+0x7c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <MX_GPIO_Init+0x80>)
 8000ee4:	f000 fc4a 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0x80>)
 8000f00:	f000 faa8 	bl	8001454 <HAL_GPIO_Init>

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_SPI_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fca:	23e0      	movs	r3, #224	; 0xe0
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f000 fa35 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013000 	.word	0x40013000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_UART_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12b      	bne.n	800107a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0x88>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_UART_MspInit+0x88>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x88>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0x88>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_UART_MspInit+0x88>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	230c      	movs	r3, #12
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_UART_MspInit+0x8c>)
 8001076:	f000 f9ed 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40004400 	.word	0x40004400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f890 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd7 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f002 fadd 	bl	80036f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fdad 	bl	8000c98 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800114c:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8001150:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001154:	20000100 	.word	0x20000100

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f931 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fec6 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f93b 	bl	800143a <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f911 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	200000fc 	.word	0x200000fc

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000fc 	.word	0x200000fc

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff47 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff5c 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffb0 	bl	80013a8 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e165      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8154 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ae 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_GPIO_Init+0x304>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x308>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x30c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x310>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x20a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x206>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x202>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x324>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae96 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_PWREx_EnableOverDrive+0x90>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_PWREx_EnableOverDrive+0x90>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_PWREx_EnableOverDrive+0x90>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_PWREx_EnableOverDrive+0x94>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017dc:	f7ff fd24 	bl	8001228 <HAL_GetTick>
 80017e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017e2:	e009      	b.n	80017f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e4:	f7ff fd20 	bl	8001228 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f2:	d901      	bls.n	80017f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e01f      	b.n	8001838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_PWREx_EnableOverDrive+0x98>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d1ee      	bne.n	80017e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff fd0c 	bl	8001228 <HAL_GetTick>
 8001810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001812:	e009      	b.n	8001828 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001814:	f7ff fd08 	bl	8001228 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001822:	d901      	bls.n	8001828 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e007      	b.n	8001838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_PWREx_EnableOverDrive+0x98>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001834:	d1ee      	bne.n	8001814 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	420e0040 	.word	0x420e0040
 8001848:	40007000 	.word	0x40007000
 800184c:	420e0044 	.word	0x420e0044

08001850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cc      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d90c      	bls.n	800188c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b65      	ldr	r3, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d044      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	2b03      	cmp	r3, #3
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e067      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4934      	ldr	r1, [pc, #208]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fc72 	bl	8001228 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fc6e 	bl	8001228 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d20c      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f855 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fbd2 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	0800376c 	.word	0x0800376c
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000

08001a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a38:	f7ff fff0 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0a9b      	lsrs	r3, r3, #10
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4903      	ldr	r1, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	0800377c 	.word	0x0800377c

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a60:	f7ff ffdc 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	0b5b      	lsrs	r3, r3, #13
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	0800377c 	.word	0x0800377c

08001a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a88:	b0ae      	sub	sp, #184	; 0xb8
 8001a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aaa:	4bcb      	ldr	r3, [pc, #812]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	f200 8206 	bhi.w	8001ec4 <HAL_RCC_GetSysClockFreq+0x440>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001af5 	.word	0x08001af5
 8001ac4:	08001ec5 	.word	0x08001ec5
 8001ac8:	08001ec5 	.word	0x08001ec5
 8001acc:	08001ec5 	.word	0x08001ec5
 8001ad0:	08001afd 	.word	0x08001afd
 8001ad4:	08001ec5 	.word	0x08001ec5
 8001ad8:	08001ec5 	.word	0x08001ec5
 8001adc:	08001ec5 	.word	0x08001ec5
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001ec5 	.word	0x08001ec5
 8001ae8:	08001ec5 	.word	0x08001ec5
 8001aec:	08001ec5 	.word	0x08001ec5
 8001af0:	08001cf5 	.word	0x08001cf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4bb9      	ldr	r3, [pc, #740]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x358>)
 8001af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001afa:	e1e7      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4bb8      	ldr	r3, [pc, #736]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b02:	e1e3      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b04:	4bb4      	ldr	r3, [pc, #720]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b10:	4bb1      	ldr	r3, [pc, #708]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d071      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1c:	4bae      	ldr	r3, [pc, #696]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	f04f 0000 	mov.w	r0, #0
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	0159      	lsls	r1, r3, #5
 8001b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b54:	0150      	lsls	r0, r2, #5
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1a51      	subs	r1, r2, r1
 8001b5e:	6439      	str	r1, [r7, #64]	; 0x40
 8001b60:	4629      	mov	r1, r5
 8001b62:	eb63 0301 	sbc.w	r3, r3, r1
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b74:	4649      	mov	r1, r9
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	4641      	mov	r1, r8
 8001b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7e:	4641      	mov	r1, r8
 8001b80:	018a      	lsls	r2, r1, #6
 8001b82:	4641      	mov	r1, r8
 8001b84:	1a51      	subs	r1, r2, r1
 8001b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b88:	4649      	mov	r1, r9
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	00cb      	lsls	r3, r1, #3
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	00ca      	lsls	r2, r1, #3
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	460a      	mov	r2, r1
 8001bba:	eb42 0303 	adc.w	r3, r2, r3
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bcc:	4629      	mov	r1, r5
 8001bce:	024b      	lsls	r3, r1, #9
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	024a      	lsls	r2, r1, #9
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001bec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001bf0:	f7fe fb08 	bl	8000204 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bfe:	e067      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c22:	4622      	mov	r2, r4
 8001c24:	462b      	mov	r3, r5
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	0159      	lsls	r1, r3, #5
 8001c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c34:	0150      	lsls	r0, r2, #5
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	1a51      	subs	r1, r2, r1
 8001c3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c40:	4629      	mov	r1, r5
 8001c42:	eb63 0301 	sbc.w	r3, r3, r1
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001c54:	4649      	mov	r1, r9
 8001c56:	018b      	lsls	r3, r1, #6
 8001c58:	4641      	mov	r1, r8
 8001c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c5e:	4641      	mov	r1, r8
 8001c60:	018a      	lsls	r2, r1, #6
 8001c62:	4641      	mov	r1, r8
 8001c64:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c68:	4649      	mov	r1, r9
 8001c6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c82:	4692      	mov	sl, r2
 8001c84:	469b      	mov	fp, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	eb1a 0303 	adds.w	r3, sl, r3
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	462b      	mov	r3, r5
 8001c90:	eb4b 0303 	adc.w	r3, fp, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb8:	2200      	movs	r2, #0
 8001cba:	673b      	str	r3, [r7, #112]	; 0x70
 8001cbc:	677a      	str	r2, [r7, #116]	; 0x74
 8001cbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001cc2:	f7fe fa9f 	bl	8000204 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cf2:	e0eb      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06b      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	2200      	movs	r2, #0
 8001d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d20:	2300      	movs	r3, #0
 8001d22:	667b      	str	r3, [r7, #100]	; 0x64
 8001d24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d28:	4622      	mov	r2, r4
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	f04f 0000 	mov.w	r0, #0
 8001d30:	f04f 0100 	mov.w	r1, #0
 8001d34:	0159      	lsls	r1, r3, #5
 8001d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3a:	0150      	lsls	r0, r2, #5
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4621      	mov	r1, r4
 8001d42:	1a51      	subs	r1, r2, r1
 8001d44:	61b9      	str	r1, [r7, #24]
 8001d46:	4629      	mov	r1, r5
 8001d48:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d5a:	4659      	mov	r1, fp
 8001d5c:	018b      	lsls	r3, r1, #6
 8001d5e:	4651      	mov	r1, sl
 8001d60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d64:	4651      	mov	r1, sl
 8001d66:	018a      	lsls	r2, r1, #6
 8001d68:	4651      	mov	r1, sl
 8001d6a:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6e:	4659      	mov	r1, fp
 8001d70:	eb63 0901 	sbc.w	r9, r3, r1
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d88:	4690      	mov	r8, r2
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	eb18 0303 	adds.w	r3, r8, r3
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	462b      	mov	r3, r5
 8001d96:	eb49 0303 	adc.w	r3, r9, r3
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001da8:	4629      	mov	r1, r5
 8001daa:	024b      	lsls	r3, r1, #9
 8001dac:	4621      	mov	r1, r4
 8001dae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db2:	4621      	mov	r1, r4
 8001db4:	024a      	lsls	r2, r1, #9
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dc8:	f7fe fa1c 	bl	8000204 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dd6:	e065      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x420>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_RCC_GetSysClockFreq+0x458>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	2200      	movs	r2, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	4611      	mov	r1, r2
 8001df0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001df4:	653b      	str	r3, [r7, #80]	; 0x50
 8001df6:	2300      	movs	r3, #0
 8001df8:	657b      	str	r3, [r7, #84]	; 0x54
 8001dfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001dfe:	4642      	mov	r2, r8
 8001e00:	464b      	mov	r3, r9
 8001e02:	f04f 0000 	mov.w	r0, #0
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	0159      	lsls	r1, r3, #5
 8001e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e10:	0150      	lsls	r0, r2, #5
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4641      	mov	r1, r8
 8001e18:	1a51      	subs	r1, r2, r1
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e30:	4659      	mov	r1, fp
 8001e32:	018b      	lsls	r3, r1, #6
 8001e34:	4651      	mov	r1, sl
 8001e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	018a      	lsls	r2, r1, #6
 8001e3e:	4651      	mov	r1, sl
 8001e40:	1a54      	subs	r4, r2, r1
 8001e42:	4659      	mov	r1, fp
 8001e44:	eb63 0501 	sbc.w	r5, r3, r1
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	00eb      	lsls	r3, r5, #3
 8001e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e56:	00e2      	lsls	r2, r4, #3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	18e3      	adds	r3, r4, r3
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	464b      	mov	r3, r9
 8001e64:	eb45 0303 	adc.w	r3, r5, r3
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e76:	4629      	mov	r1, r5
 8001e78:	028b      	lsls	r3, r1, #10
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e80:	4621      	mov	r1, r4
 8001e82:	028a      	lsls	r2, r1, #10
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e96:	f7fe f9b5 	bl	8000204 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	0f1b      	lsrs	r3, r3, #28
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ec2:	e003      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	37b8      	adds	r7, #184	; 0xb8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400

08001ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e28d      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8083 	beq.w	800200a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f04:	4b94      	ldr	r3, [pc, #592]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d019      	beq.n	8001f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f10:	4b91      	ldr	r3, [pc, #580]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f1c:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x124>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e25a      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x90>
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xcc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xb4>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a72      	ldr	r2, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xcc>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f936 	bl	8001228 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f932 	bl	8001228 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e21f      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xdc>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f922 	bl	8001228 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f91e 	bl	8001228 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e20b      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x104>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06f      	beq.n	80020f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002016:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d105      	bne.n	800203a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x186>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1d3      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4937      	ldr	r1, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x278>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff f8cb 	bl	8001228 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff f8c7 	bl	8001228 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1b4      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4925      	ldr	r1, [pc, #148]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x278>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff f8aa 	bl	8001228 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff f8a6 	bl	8001228 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e193      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d036      	beq.n	8002170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d016      	beq.n	8002138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x27c>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff f88a 	bl	8001228 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff f886 	bl	8001228 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e173      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 800212c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x234>
 8002136:	e01b      	b.n	8002170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x27c>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff f873 	bl	8001228 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00e      	b.n	8002164 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002146:	f7ff f86f 	bl	8001228 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d907      	bls.n	8002164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e15c      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
 8002158:	40023800 	.word	0x40023800
 800215c:	42470000 	.word	0x42470000
 8002160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b8a      	ldr	r3, [pc, #552]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ea      	bne.n	8002146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8097 	beq.w	80022ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10f      	bne.n	80021ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a7e      	ldr	r2, [pc, #504]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_OscConfig+0x4b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d118      	bne.n	80021ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x4b0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x4b0>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f82f 	bl	8001228 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7ff f82b 	bl	8001228 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e118      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x4b0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x31e>
 80021f4:	4b66      	ldr	r3, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a65      	ldr	r2, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x358>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x340>
 800220a:	4b61      	ldr	r3, [pc, #388]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a60      	ldr	r2, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a5d      	ldr	r2, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x358>
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a59      	ldr	r2, [pc, #356]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002236:	f023 0304 	bic.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d015      	beq.n	8002270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fff0 	bl	8001228 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe ffec 	bl	8001228 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0d7      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0ee      	beq.n	800224c <HAL_RCC_OscConfig+0x368>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe ffda 	bl	8001228 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe ffd6 	bl	8001228 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0c1      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ee      	bne.n	8002278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80022a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80ad 	beq.w	8002410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d060      	beq.n	8002384 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d145      	bne.n	8002356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_RCC_OscConfig+0x4b4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe ffaa 	bl	8001228 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe ffa6 	bl	8001228 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e093      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	071b      	lsls	r3, r3, #28
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4b4>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe ff7b 	bl	8001228 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe ff77 	bl	8001228 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e064      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x452>
 8002354:	e05c      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x4b4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe ff64 	bl	8001228 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe ff60 	bl	8001228 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e04d      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x480>
 8002382:	e045      	b.n	8002410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e040      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000
 8002398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCC_OscConfig+0x538>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d030      	beq.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d129      	bne.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d122      	bne.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d119      	bne.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10f      	bne.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07b      	b.n	800252a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002442:	d009      	beq.n	8002458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
 800244a:	e005      	b.n	8002458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fd7c 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0104 	and.w	r1, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f003 0210 	and.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b088      	sub	sp, #32
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_SPI_Transmit+0x22>
 8002550:	2302      	movs	r3, #2
 8002552:	e126      	b.n	80027a2 <HAL_SPI_Transmit+0x270>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255c:	f7fe fe64 	bl	8001228 <HAL_GetTick>
 8002560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002576:	e10b      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_Transmit+0x52>
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002588:	e102      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	d10f      	bne.n	80025f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d007      	beq.n	8002610 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002618:	d14b      	bne.n	80026b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Transmit+0xf6>
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13e      	bne.n	80026a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800264c:	e02b      	b.n	80026a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d112      	bne.n	8002682 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002680:	e011      	b.n	80026a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002682:	f7fe fdd1 	bl	8001228 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d803      	bhi.n	800269a <HAL_SPI_Transmit+0x168>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d102      	bne.n	80026a0 <HAL_SPI_Transmit+0x16e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026a4:	e074      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ce      	bne.n	800264e <HAL_SPI_Transmit+0x11c>
 80026b0:	e04c      	b.n	800274c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_Transmit+0x18e>
 80026ba:	8afb      	ldrh	r3, [r7, #22]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d140      	bne.n	8002742 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026e6:	e02c      	b.n	8002742 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d113      	bne.n	800271e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
 800271c:	e011      	b.n	8002742 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271e:	f7fe fd83 	bl	8001228 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d803      	bhi.n	8002736 <HAL_SPI_Transmit+0x204>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d102      	bne.n	800273c <HAL_SPI_Transmit+0x20a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002740:	e026      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1cd      	bne.n	80026e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fbcb 	bl	8002eec <SPI_EndRxTxTransaction>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e000      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

error:
 800278e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b088      	sub	sp, #32
 80027ae:	af02      	add	r7, sp, #8
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d112      	bne.n	80027ee <HAL_SPI_Receive+0x44>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10e      	bne.n	80027ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2204      	movs	r2, #4
 80027d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f8f1 	bl	80029cc <HAL_SPI_TransmitReceive>
 80027ea:	4603      	mov	r3, r0
 80027ec:	e0ea      	b.n	80029c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_SPI_Receive+0x52>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0e3      	b.n	80029c4 <HAL_SPI_Receive+0x21a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002804:	f7fe fd10 	bl	8001228 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d002      	beq.n	800281c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
    goto error;
 800281a:	e0ca      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_Receive+0x7e>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800282c:	e0c1      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2204      	movs	r2, #4
 8002832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002874:	d10f      	bne.n	8002896 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d007      	beq.n	80028b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d162      	bne.n	8002982 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028bc:	e02e      	b.n	800291c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d115      	bne.n	80028f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f103 020c 	add.w	r2, r3, #12
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f6:	e011      	b.n	800291c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f8:	f7fe fc96 	bl	8001228 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d803      	bhi.n	8002910 <HAL_SPI_Receive+0x166>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Receive+0x16c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	75fb      	strb	r3, [r7, #23]
          goto error;
 800291a:	e04a      	b.n	80029b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cb      	bne.n	80028be <HAL_SPI_Receive+0x114>
 8002926:	e031      	b.n	800298c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	b292      	uxth	r2, r2
 8002942:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295c:	e011      	b.n	8002982 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295e:	f7fe fc63 	bl	8001228 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d803      	bhi.n	8002976 <HAL_SPI_Receive+0x1cc>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d102      	bne.n	800297c <HAL_SPI_Receive+0x1d2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002980:	e017      	b.n	80029b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1cd      	bne.n	8002928 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa45 	bl	8002e20 <SPI_EndRxTransaction>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
 80029ae:	e000      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

error :
 80029b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x26>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e18a      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x33c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fa:	f7fe fc15 	bl	8001228 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d00f      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x70>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a22:	d107      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x68>
 8002a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d003      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a3a:	e15b      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x82>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x82>
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a54:	e14e      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2205      	movs	r2, #5
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d007      	beq.n	8002abe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d178      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x10a>
 8002ad0:	8b7b      	ldrh	r3, [r7, #26]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d166      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afa:	e053      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11b      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d113      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	1c9a      	adds	r2, r3, #2
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d119      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x1b8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	b292      	uxth	r2, r2
 8002b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b84:	f7fe fb50 	bl	8001228 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d807      	bhi.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d003      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ba2:	e0a7      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1a6      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x130>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1a1      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x130>
 8002bb8:	e07c      	b.n	8002cb4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_SPI_TransmitReceive+0x1fc>
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d16b      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bee:	e057      	b.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d11c      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d114      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d119      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x2ae>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d014      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c76:	2301      	movs	r3, #1
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c7a:	f7fe fad5 	bl	8001228 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d803      	bhi.n	8002c92 <HAL_SPI_TransmitReceive+0x2c6>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d102      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x2cc>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c9e:	e029      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1a2      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x224>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d19d      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f917 	bl	8002eec <SPI_EndRxTxTransaction>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cd0:	e010      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	e000      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3730      	adds	r7, #48	; 0x30
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d20:	f7fe fa82 	bl	8001228 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d30:	f7fe fa7a 	bl	8001228 <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	0d1b      	lsrs	r3, r3, #20
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d46:	e054      	b.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d050      	beq.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d50:	f7fe fa6a 	bl	8001228 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d902      	bls.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d13d      	bne.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d111      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	d004      	beq.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d107      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d10f      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e017      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d19b      	bne.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000

08002e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d111      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d004      	beq.n	8002e4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d107      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d12a      	bne.n	8002eba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d012      	beq.n	8002e94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff49 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02d      	beq.n	8002ee0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e026      	b.n	8002ee2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff36 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01a      	beq.n	8002ee0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e013      	b.n	8002ee2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff ff23 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <SPI_EndRxTxTransaction+0x7c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <SPI_EndRxTxTransaction+0x80>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0d5b      	lsrs	r3, r3, #21
 8002f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f16:	d112      	bne.n	8002f3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fef4 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e00f      	b.n	8002f5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d0f2      	beq.n	8002f3e <SPI_EndRxTxTransaction+0x52>
 8002f58:	e000      	b.n	8002f5c <SPI_EndRxTxTransaction+0x70>
        break;
 8002f5a:	bf00      	nop
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	165e9f81 	.word	0x165e9f81

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03f      	b.n	8003002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe f832 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f929 	bl	800320c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b08a      	sub	sp, #40	; 0x28
 800300e:	af02      	add	r7, sp, #8
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	d17c      	bne.n	8003124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_UART_Transmit+0x2c>
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e075      	b.n	8003126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_UART_Transmit+0x3e>
 8003044:	2302      	movs	r3, #2
 8003046:	e06e      	b.n	8003126 <HAL_UART_Transmit+0x11c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305e:	f7fe f8e3 	bl	8001228 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d108      	bne.n	800308c <HAL_UART_Transmit+0x82>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e003      	b.n	8003094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800309c:	e02a      	b.n	80030f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f840 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e036      	b.n	8003126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3302      	adds	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e007      	b.n	80030e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1cf      	bne.n	800309e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2140      	movs	r1, #64	; 0x40
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f810 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e006      	b.n	8003126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b090      	sub	sp, #64	; 0x40
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	e050      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d04c      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x30>
 800314e:	f7fe f86b 	bl	8001228 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315a:	429a      	cmp	r2, r3
 800315c:	d241      	bcs.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800317e:	637a      	str	r2, [r7, #52]	; 0x34
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e5      	bne.n	800315e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3314      	adds	r3, #20
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	613b      	str	r3, [r7, #16]
   return(result);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b2:	623a      	str	r2, [r7, #32]
 80031b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	69f9      	ldr	r1, [r7, #28]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d09f      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3740      	adds	r7, #64	; 0x40
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b0c0      	sub	sp, #256	; 0x100
 8003212:	af00      	add	r7, sp, #0
 8003214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	ea40 0301 	orr.w	r3, r0, r1
 8003234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	431a      	orrs	r2, r3
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003264:	f021 010c 	bic.w	r1, r1, #12
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003272:	430b      	orrs	r3, r1
 8003274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	6999      	ldr	r1, [r3, #24]
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	ea40 0301 	orr.w	r3, r0, r1
 8003292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <UART_SetConfig+0x2cc>)
 800329c:	429a      	cmp	r2, r3
 800329e:	d005      	beq.n	80032ac <UART_SetConfig+0xa0>
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <UART_SetConfig+0x2d0>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d104      	bne.n	80032b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7fe fbd6 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 80032b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032b4:	e003      	b.n	80032be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7fe fbbd 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 80032ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c8:	f040 810c 	bne.w	80034e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80032e6:	415b      	adcs	r3, r3
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032ee:	4621      	mov	r1, r4
 80032f0:	eb12 0801 	adds.w	r8, r2, r1
 80032f4:	4629      	mov	r1, r5
 80032f6:	eb43 0901 	adc.w	r9, r3, r1
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330e:	4690      	mov	r8, r2
 8003310:	4699      	mov	r9, r3
 8003312:	4623      	mov	r3, r4
 8003314:	eb18 0303 	adds.w	r3, r8, r3
 8003318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800331c:	462b      	mov	r3, r5
 800331e:	eb49 0303 	adc.w	r3, r9, r3
 8003322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800333a:	460b      	mov	r3, r1
 800333c:	18db      	adds	r3, r3, r3
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
 8003340:	4613      	mov	r3, r2
 8003342:	eb42 0303 	adc.w	r3, r2, r3
 8003346:	657b      	str	r3, [r7, #84]	; 0x54
 8003348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800334c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003350:	f7fc ff58 	bl	8000204 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <UART_SetConfig+0x2d4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800336c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	64b9      	str	r1, [r7, #72]	; 0x48
 800337c:	415b      	adcs	r3, r3
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003384:	4641      	mov	r1, r8
 8003386:	eb12 0a01 	adds.w	sl, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb43 0b01 	adc.w	fp, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800339c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a4:	4692      	mov	sl, r2
 80033a6:	469b      	mov	fp, r3
 80033a8:	4643      	mov	r3, r8
 80033aa:	eb1a 0303 	adds.w	r3, sl, r3
 80033ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b2:	464b      	mov	r3, r9
 80033b4:	eb4b 0303 	adc.w	r3, fp, r3
 80033b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033d0:	460b      	mov	r3, r1
 80033d2:	18db      	adds	r3, r3, r3
 80033d4:	643b      	str	r3, [r7, #64]	; 0x40
 80033d6:	4613      	mov	r3, r2
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
 80033de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033e6:	f7fc ff0d 	bl	8000204 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <UART_SetConfig+0x2d4>)
 80033f2:	fba3 2301 	umull	r2, r3, r3, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	; 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1acb      	subs	r3, r1, r3
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <UART_SetConfig+0x2d4>)
 8003408:	fba3 2302 	umull	r2, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003414:	441c      	add	r4, r3
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003430:	415b      	adcs	r3, r3
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6339      	str	r1, [r7, #48]	; 0x30
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800346c:	464b      	mov	r3, r9
 800346e:	460a      	mov	r2, r1
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800348c:	460b      	mov	r3, r1
 800348e:	18db      	adds	r3, r3, r3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
 8003492:	4613      	mov	r3, r2
 8003494:	eb42 0303 	adc.w	r3, r2, r3
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800349e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034a2:	f7fc feaf 	bl	8000204 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <UART_SetConfig+0x2d4>)
 80034ac:	fba3 1302 	umull	r1, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <UART_SetConfig+0x2d4>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 0207 	and.w	r2, r3, #7
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4422      	add	r2, r4
 80034d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d4:	e105      	b.n	80036e2 <UART_SetConfig+0x4d6>
 80034d6:	bf00      	nop
 80034d8:	40011000 	.word	0x40011000
 80034dc:	40011400 	.word	0x40011400
 80034e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	6239      	str	r1, [r7, #32]
 80034fe:	415b      	adcs	r3, r3
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003506:	4641      	mov	r1, r8
 8003508:	1854      	adds	r4, r2, r1
 800350a:	4649      	mov	r1, r9
 800350c:	eb43 0501 	adc.w	r5, r3, r1
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	00eb      	lsls	r3, r5, #3
 800351a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351e:	00e2      	lsls	r2, r4, #3
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	4643      	mov	r3, r8
 8003526:	18e3      	adds	r3, r4, r3
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800352c:	464b      	mov	r3, r9
 800352e:	eb45 0303 	adc.w	r3, r5, r3
 8003532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003552:	4629      	mov	r1, r5
 8003554:	008b      	lsls	r3, r1, #2
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355c:	4621      	mov	r1, r4
 800355e:	008a      	lsls	r2, r1, #2
 8003560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003564:	f7fc fe4e 	bl	8000204 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4b60      	ldr	r3, [pc, #384]	; (80036f0 <UART_SetConfig+0x4e4>)
 800356e:	fba3 2302 	umull	r2, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	011c      	lsls	r4, r3, #4
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	61b9      	str	r1, [r7, #24]
 8003590:	415b      	adcs	r3, r3
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003598:	4641      	mov	r1, r8
 800359a:	1851      	adds	r1, r2, r1
 800359c:	6139      	str	r1, [r7, #16]
 800359e:	4649      	mov	r1, r9
 80035a0:	414b      	adcs	r3, r1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b0:	4659      	mov	r1, fp
 80035b2:	00cb      	lsls	r3, r1, #3
 80035b4:	4651      	mov	r1, sl
 80035b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ba:	4651      	mov	r1, sl
 80035bc:	00ca      	lsls	r2, r1, #3
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	4642      	mov	r2, r8
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035cc:	464b      	mov	r3, r9
 80035ce:	460a      	mov	r2, r1
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035f0:	4649      	mov	r1, r9
 80035f2:	008b      	lsls	r3, r1, #2
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fa:	4641      	mov	r1, r8
 80035fc:	008a      	lsls	r2, r1, #2
 80035fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003602:	f7fc fdff 	bl	8000204 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <UART_SetConfig+0x4e4>)
 800360c:	fba3 1302 	umull	r1, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	2164      	movs	r1, #100	; 0x64
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	3332      	adds	r3, #50	; 0x32
 800361e:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <UART_SetConfig+0x4e4>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362a:	441c      	add	r4, r3
 800362c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003630:	2200      	movs	r2, #0
 8003632:	673b      	str	r3, [r7, #112]	; 0x70
 8003634:	677a      	str	r2, [r7, #116]	; 0x74
 8003636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800363a:	4642      	mov	r2, r8
 800363c:	464b      	mov	r3, r9
 800363e:	1891      	adds	r1, r2, r2
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	415b      	adcs	r3, r3
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800364a:	4641      	mov	r1, r8
 800364c:	1851      	adds	r1, r2, r1
 800364e:	6039      	str	r1, [r7, #0]
 8003650:	4649      	mov	r1, r9
 8003652:	414b      	adcs	r3, r1
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003662:	4659      	mov	r1, fp
 8003664:	00cb      	lsls	r3, r1, #3
 8003666:	4651      	mov	r1, sl
 8003668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366c:	4651      	mov	r1, sl
 800366e:	00ca      	lsls	r2, r1, #3
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	4603      	mov	r3, r0
 8003676:	4642      	mov	r2, r8
 8003678:	189b      	adds	r3, r3, r2
 800367a:	66bb      	str	r3, [r7, #104]	; 0x68
 800367c:	464b      	mov	r3, r9
 800367e:	460a      	mov	r2, r1
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
 8003690:	667a      	str	r2, [r7, #100]	; 0x64
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800369e:	4649      	mov	r1, r9
 80036a0:	008b      	lsls	r3, r1, #2
 80036a2:	4641      	mov	r1, r8
 80036a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a8:	4641      	mov	r1, r8
 80036aa:	008a      	lsls	r2, r1, #2
 80036ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036b0:	f7fc fda8 	bl	8000204 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <UART_SetConfig+0x4e4>)
 80036ba:	fba3 1302 	umull	r1, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2164      	movs	r1, #100	; 0x64
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	; 0x32
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UART_SetConfig+0x4e4>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4422      	add	r2, r4
 80036e0:	609a      	str	r2, [r3, #8]
}
 80036e2:	bf00      	nop
 80036e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	51eb851f 	.word	0x51eb851f

080036f4 <__libc_init_array>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	4d0d      	ldr	r5, [pc, #52]	; (800372c <__libc_init_array+0x38>)
 80036f8:	4c0d      	ldr	r4, [pc, #52]	; (8003730 <__libc_init_array+0x3c>)
 80036fa:	1b64      	subs	r4, r4, r5
 80036fc:	10a4      	asrs	r4, r4, #2
 80036fe:	2600      	movs	r6, #0
 8003700:	42a6      	cmp	r6, r4
 8003702:	d109      	bne.n	8003718 <__libc_init_array+0x24>
 8003704:	4d0b      	ldr	r5, [pc, #44]	; (8003734 <__libc_init_array+0x40>)
 8003706:	4c0c      	ldr	r4, [pc, #48]	; (8003738 <__libc_init_array+0x44>)
 8003708:	f000 f820 	bl	800374c <_init>
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	2600      	movs	r6, #0
 8003712:	42a6      	cmp	r6, r4
 8003714:	d105      	bne.n	8003722 <__libc_init_array+0x2e>
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	f855 3b04 	ldr.w	r3, [r5], #4
 800371c:	4798      	blx	r3
 800371e:	3601      	adds	r6, #1
 8003720:	e7ee      	b.n	8003700 <__libc_init_array+0xc>
 8003722:	f855 3b04 	ldr.w	r3, [r5], #4
 8003726:	4798      	blx	r3
 8003728:	3601      	adds	r6, #1
 800372a:	e7f2      	b.n	8003712 <__libc_init_array+0x1e>
 800372c:	0800378c 	.word	0x0800378c
 8003730:	0800378c 	.word	0x0800378c
 8003734:	0800378c 	.word	0x0800378c
 8003738:	08003790 	.word	0x08003790

0800373c <memset>:
 800373c:	4402      	add	r2, r0
 800373e:	4603      	mov	r3, r0
 8003740:	4293      	cmp	r3, r2
 8003742:	d100      	bne.n	8003746 <memset+0xa>
 8003744:	4770      	bx	lr
 8003746:	f803 1b01 	strb.w	r1, [r3], #1
 800374a:	e7f9      	b.n	8003740 <memset+0x4>

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
